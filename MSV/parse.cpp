
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IF	258
#define	ELSE	259
#define	EMPTY	260
#define	AWAIT	261
#define	PROJECTION	262
#define	PBEGIN	263
#define	PEND	264
#define	POINTERNULL	265
#define	ARRAY	266
#define	STRUCT	267
#define	DOT	268
#define	UNION	269
#define	FILEDECLARATION	270
#define	MORE	271
#define	DEFINE	272
#define	MY_TRUE	273
#define	MY_FALSE	274
#define	EXIST	275
#define	FRAME	276
#define	FOR	277
#define	WHILE	278
#define	DO	279
#define	TRUE	280
#define	FALSE	281
#define	REPEAT	282
#define	UNTIL	283
#define	DISPLAY	284
#define	SKIP	285
#define	THEN	286
#define	COMMA	287
#define	COLON	288
#define	INTDECLARATION	289
#define	STRDECLARATION	290
#define	POINTERDECLARATION	291
#define	CHARDECLARATION	292
#define	VOIDDECLARATION	293
#define	FLOATDECLARATION	294
#define	LISTDECLARATION	295
#define	OPEN_PAR	296
#define	CLOSE_PAR	297
#define	TIMES	298
#define	OPEN_BPAR	299
#define	CLOSE_BPAR	300
#define	OPEN_MPAR	301
#define	CLOSE_MPAR	302
#define	FUNCTION	303
#define	OVER	304
#define	CYLINDER	305
#define	OVEREP	306
#define	INTER_OR	307
#define	NON_DETERMINED	308
#define	SEND	309
#define	RECEIVE	310
#define	PROCESS	311
#define	CHANNEL	312
#define	PUT	313
#define	GET	314
#define	ERROR_TOKEN	315
#define	STRFUNCHEAD	316
#define	STRFUNCTAIL	317
#define	STRFUNCCAT	318
#define	STRFUNCCMP	319
#define	STRFUNCCPY	320
#define	STRFUNCLEN	321
#define	EXTERN	322
#define	UNSIGNED	323
#define	SIGNED	324
#define	CHOP	325
#define	IMPLY	326
#define	IFF	327
#define	PROPIMPLY	328
#define	OR	329
#define	PARALLEL	330
#define	AND	331
#define	ASS_P	332
#define	ASS_N	333
#define	CON	334
#define	ADDRESS	335
#define	NE	336
#define	EQ	337
#define	GE	338
#define	LE	339
#define	GT	340
#define	LT	341
#define	LST	342
#define	RST	343
#define	ADD	344
#define	SUB	345
#define	MUL	346
#define	DIV	347
#define	MOD	348
#define	BNE	349
#define	CHOPSTAR	350
#define	NEXT	351
#define	NEGATION	352
#define	LENGTH	353
#define	REQUEST	354
#define	FINAL	355
#define	KEEP	356
#define	ALWAYS	357
#define	HALT	358
#define	W_NEXT	359
#define	PREFIX	360
#define	SOMETIMES	361
#define	ID	362
#define	STRLITERAL	363
#define	STRUCT_TYPE	364
#define	INTLITERAL	365
#define	FLOATLITERAL	366
#define	CHARLITERAL	367

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1169
#define	YYFLAG		-32768
#define	YYNTBASE	113

#define YYTRANSLATE(x) ((unsigned)(x) <= 367 ? yytranslate[x] : 184)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   122,
   127,   132,   137,   146,   148,   150,   152,   157,   159,   161,
   163,   165,   170,   174,   182,   192,   199,   205,   215,   224,
   234,   236,   238,   246,   250,   252,   256,   258,   259,   264,
   270,   275,   280,   283,   286,   289,   292,   294,   297,   300,
   304,   308,   312,   316,   324,   333,   345,   359,   361,   363,
   365,   367,   369,   371,   374,   381,   386,   392,   398,   407,
   416,   419,   422,   425,   426,   433,   441,   442,   445,   449,
   451,   453,   455,   457,   461,   464,   466,   478,   491,   503,
   515,   533,   552,   570,   589,   609,   628,   646,   665,   683,
   685,   687,   689,   691,   693,   704,   708,   710,   715,   721,
   733,   746,   758,   770,   783,   787,   791,   794,   795,   798,
   801,   804,   812,   819,   824,   828,   830,   834,   838,   844,
   846,   850,   853,   854,   856,   860,   862,   865,   868,   870,
   872,   874,   876,   878,   880,   884,   886,   888,   890,   892,
   894,   896,   898,   900,   902,   904,   906,   908,   910,   912,
   916,   918,   920,   924,   929,   934,   939,   944,   949,   954,
   958,   962,   966,   967,   970,   973,   976,   979,   982,   986,
   991,   996,  1001,  1007,  1013,  1019,  1025,  1031,  1038,  1044,
  1050,  1057,  1063,  1070,  1078,  1085,  1092,  1100,  1107,  1114,
  1120,  1128,  1135,  1137,  1139,  1142,  1146,  1150,  1154,  1158,
  1160,  1162,  1164,  1168,  1172,  1176,  1180,  1184,  1188,  1192,
  1196,  1200,  1204,  1206,  1208,  1210,  1212,  1214,  1216,  1219,
  1222,  1224,  1226,  1230,  1233,  1237,  1242,  1248,  1253,  1257,
  1262,  1268,  1273,  1276,  1280,  1285,  1288,  1292,  1297,  1302,
  1308,  1315,  1324,  1332,  1337,  1341,  1347,  1356,  1357,  1362,
  1366,  1371,  1376,  1382,  1388,  1394,  1400,  1407,  1417,  1418,
  1426,  1436,  1445,  1451,  1456,  1459,  1462,  1468,  1469,  1472,
  1476,  1483,  1484,  1487,  1491,  1494,  1498,  1501,  1503,  1507,
  1509,  1511,  1513,  1515,  1519,  1520,  1523,  1524,  1528,  1530,
  1533,  1537,  1541,  1545,  1549,  1555,  1565,  1567,  1569,  1570,
  1572,  1573,  1575,  1576,  1582,  1585,  1586,  1591,  1597,  1598,
  1602,  1607,  1613,  1618,  1624,  1629,  1630,  1634,  1638,  1643,
  1648,  1653,  1658,  1663,  1668,  1673,  1678,  1685,  1690,  1695,
  1700,  1707,  1711,  1715,  1720,  1724,  1725,  1729,  1733,  1737,
  1741,  1744
};

static const short yyrhs[] = {   114,
   117,     0,     8,   115,     9,     0,     0,   115,    76,   115,
     0,   115,    74,   115,     0,   115,    72,   115,     0,   115,
    73,   115,     0,   115,    70,   115,     0,   102,   115,     0,
   101,   115,     0,   106,   115,     0,   104,   115,     0,    96,
   115,     0,    30,     0,    18,     0,    19,     0,    98,   137,
     0,     5,     0,    16,     0,   103,   115,     0,   100,   115,
     0,    97,   115,     0,    44,   115,   116,    45,     7,    44,
   115,    45,     0,   107,     0,    17,   107,    33,   152,     0,
   115,    95,     0,    41,   115,    42,     0,    32,   115,   116,
     0,     0,   117,    76,   117,     0,   117,    74,   117,     0,
   117,    70,   117,     0,   128,     0,   123,     0,   176,     0,
   170,     0,   171,     0,   172,     0,    96,    41,   117,    42,
     0,   101,    41,   117,    42,     0,   102,    41,   117,    42,
     0,     6,    41,   151,    42,     0,    27,    44,   117,    45,
    28,    41,   151,    42,     0,    30,     0,     5,     0,    16,
     0,    98,    41,   137,    42,     0,   180,     0,   178,     0,
    25,     0,    26,     0,   100,    41,   117,    42,     0,   117,
    75,   117,     0,    41,   169,    42,    71,    46,   117,    47,
     0,    21,    41,   162,   167,    42,    76,    41,   117,    42,
     0,    44,   117,   168,    45,     7,   160,     0,    44,   117,
    45,     7,   160,     0,    17,   107,    41,   156,    42,    77,
    44,   119,    45,     0,   125,   107,    41,   156,    42,    44,
   117,    45,     0,    56,   107,    41,   156,    42,    77,    44,
   119,    45,     0,   121,     0,   120,     0,    20,   162,   157,
    33,    44,   117,    45,     0,    41,   117,    42,     0,   123,
     0,   123,    76,   118,     0,   117,     0,     0,   107,    41,
   158,    42,     0,    67,   107,    41,   158,    42,     0,   134,
    41,   158,    42,     0,   122,    44,   118,    45,     0,    12,
   107,     0,    14,   107,     0,    69,   124,     0,    68,   124,
     0,   124,     0,   125,   126,     0,   109,   126,     0,    12,
   107,   126,     0,    14,   107,   126,     0,    12,   109,   126,
     0,    14,   109,   126,     0,    41,    91,   162,    42,    41,
   156,    42,     0,    41,    91,    91,   162,    42,    41,   156,
    42,     0,    41,    91,   107,    46,   137,   135,    47,    42,
    41,   156,    42,     0,    41,    91,   107,    46,   137,   135,
    47,    42,    41,   156,    42,    77,   144,     0,    34,     0,
    39,     0,    37,     0,    35,     0,    38,     0,    15,     0,
   162,   127,     0,   107,    46,   137,   135,    47,   127,     0,
   162,    77,   132,   127,     0,   107,    11,    77,   144,   127,
     0,   107,    11,    77,   163,   127,     0,   107,    46,   137,
   135,    47,    77,   144,   127,     0,   107,    46,   137,   135,
    47,    77,   163,   127,     0,    91,   126,     0,    32,   126,
     0,    32,     1,     0,     0,   107,    46,   137,   135,    47,
     0,     0,    32,   107,    46,   137,   135,    47,     0,     0,
     0,    32,     1,     0,   129,   131,   132,     0,   162,     0,
   182,     0,   134,     0,   136,     0,    41,   129,    42,     0,
    96,   129,     0,   130,     0,    41,    41,    37,    91,    42,
   110,    42,    46,   137,   135,    47,     0,    41,    41,    68,
    37,    91,    42,   110,    42,    46,   137,   135,    47,     0,
    41,    41,    34,    91,    42,   110,    42,    46,   137,   135,
    47,     0,    41,    41,    39,    91,    42,   110,    42,    46,
   137,   135,    47,     0,    41,    41,    37,    91,    42,    41,
    41,    37,    91,    42,   110,    42,    42,    46,   137,   135,
    47,     0,    41,    41,    37,    91,    42,    41,    41,    68,
    37,    91,    42,   110,    42,    42,    46,   137,   135,    47,
     0,    41,    41,    37,    91,    42,    41,    41,    34,    91,
    42,   110,    42,    42,    46,   137,   135,    47,     0,    41,
    41,    68,    37,    91,    42,    41,    41,    37,    91,    42,
   110,    42,    42,    46,   137,   135,    47,     0,    41,    41,
    68,    37,    91,    42,    41,    41,    68,    37,    91,    42,
   110,    42,    42,    46,   137,   135,    47,     0,    41,    41,
    68,    37,    91,    42,    41,    41,    34,    91,    42,   110,
    42,    42,    46,   137,   135,    47,     0,    41,    41,    34,
    91,    42,    41,    41,    37,    91,    42,   110,    42,    42,
    46,   137,   135,    47,     0,    41,    41,    34,    91,    42,
    41,    41,    68,    37,    91,    42,   110,    42,    42,    46,
   137,   135,    47,     0,    41,    41,    34,    91,    42,    41,
    41,    34,    91,    42,   110,    42,    42,    46,   137,   135,
    47,     0,    77,     0,    78,     0,   137,     0,   144,     0,
   163,     0,    41,   163,    42,    41,   125,    42,    41,   156,
    42,   120,     0,    41,   132,    42,     0,   133,     0,    91,
    41,   130,    42,     0,   107,    46,   137,   135,    47,     0,
    41,    41,    34,    91,    42,   107,    42,    46,   137,   135,
    47,     0,    41,    41,    68,    34,    91,    42,   107,    42,
    46,   137,   135,    47,     0,    41,    41,    39,    91,    42,
   107,    42,    46,   137,   135,    47,     0,    41,    41,    37,
    91,    42,   107,    42,    46,   137,   135,    47,     0,    41,
    41,    68,    37,    91,    42,   107,    42,    46,   137,   135,
    47,     0,    41,   134,    42,     0,    32,   137,   135,     0,
    32,     1,     0,     0,    91,   162,     0,    91,   136,     0,
    91,   134,     0,    41,   136,    42,    46,   137,   135,    47,
     0,    91,    41,   155,    91,    42,   137,     0,    91,    41,
   137,    42,     0,    41,   136,    42,     0,   140,     0,   140,
   153,   137,     0,   137,   143,   140,     0,     3,   151,    31,
   137,   139,     0,   140,     0,   140,   143,   140,     0,     4,
   137,     0,     0,   141,     0,   140,   142,   141,     0,   164,
     0,    90,   141,     0,    94,   141,     0,    10,     0,   166,
     0,   162,     0,   134,     0,   136,     0,   120,     0,    41,
   137,    42,     0,   165,     0,   148,     0,   149,     0,   182,
     0,    91,     0,    92,     0,    93,     0,    87,     0,    88,
     0,    80,     0,    52,     0,    79,     0,    89,     0,    90,
     0,   144,    79,   144,     0,   145,     0,   146,     0,    41,
   144,    42,     0,    46,   137,   147,    47,     0,    46,   163,
   147,    47,     0,    46,   144,   147,    47,     0,    44,   137,
   147,    45,     0,    44,   163,   147,    45,     0,    44,   144,
   147,    45,     0,    32,   137,   147,     0,    32,   163,   147,
     0,    32,   144,   147,     0,     0,    32,     1,     0,    80,
   162,     0,    80,   134,     0,    80,   182,     0,    80,   148,
     0,    41,   148,    42,     0,    41,    34,    42,   138,     0,
    41,    39,    42,   138,     0,    41,    37,    42,   138,     0,
    41,    69,    34,    42,   138,     0,    41,    69,    37,    42,
   138,     0,    41,    68,    34,    42,   138,     0,    41,    68,
    37,    42,   138,     0,    41,    34,    91,    42,   150,     0,
    41,    68,    34,    91,    42,   150,     0,    41,    39,    91,
    42,   150,     0,    41,    37,    91,    42,   150,     0,    41,
    68,    37,    91,    42,   150,     0,    41,    38,    91,    42,
   150,     0,    41,    34,    91,    91,    42,   150,     0,    41,
    68,    34,    91,    91,    42,   150,     0,    41,    39,    91,
    91,    42,   150,     0,    41,    37,    91,    91,    42,   150,
     0,    41,    68,    37,    91,    91,    42,   150,     0,    41,
    38,    91,    91,    42,   150,     0,    41,    12,   109,    91,
    42,   150,     0,    41,   109,    91,    42,   150,     0,    41,
    12,   109,    91,    91,    42,   150,     0,    41,   109,    91,
    91,    42,   150,     0,   138,     0,   152,     0,    97,   151,
     0,   151,    76,   151,     0,   151,    74,   151,     0,    41,
   151,    42,     0,   137,   153,   137,     0,    18,     0,    19,
     0,   137,     0,   137,    82,   163,     0,   137,    81,   163,
     0,   163,    82,   137,     0,   163,    81,   137,     0,   137,
    82,    10,     0,   137,    81,    10,     0,    10,    82,   137,
     0,    10,    81,   137,     0,   137,    82,   165,     0,   137,
    81,   165,     0,    83,     0,    84,     0,    81,     0,    85,
     0,    86,     0,    82,     0,    68,    34,     0,    68,    37,
     0,   154,     0,   125,     0,   155,   162,   157,     0,   155,
   157,     0,   109,   162,   157,     0,   109,    91,   162,   157,
     0,   109,    91,    91,   162,   157,     0,   109,   162,    11,
   157,     0,   107,   162,   157,     0,   107,    91,   162,   157,
     0,   107,    91,    91,   162,   157,     0,   107,   162,    11,
   157,     0,   109,   157,     0,   109,    91,   157,     0,   109,
    91,    91,   157,     0,   107,   157,     0,   107,    91,   157,
     0,   107,    91,    91,   157,     0,   155,   162,    11,   157,
     0,   155,    91,   162,    11,   157,     0,   155,   162,    46,
   137,    47,   157,     0,   155,   162,    46,   137,    32,   137,
    47,   157,     0,   155,   162,    11,    46,   137,    47,   157,
     0,   155,    91,   162,   157,     0,   155,    91,   157,     0,
   155,    91,    91,   162,   157,     0,    41,    91,   162,    42,
    41,   156,    42,   157,     0,     0,    32,   155,   162,   157,
     0,    32,   155,   157,     0,    32,   107,   162,   157,     0,
    32,   109,   162,   157,     0,    32,   109,    91,   162,   157,
     0,    32,   107,   162,    11,   157,     0,    32,   109,   162,
    11,   157,     0,    32,   155,   162,    11,   157,     0,    32,
   155,    91,   162,    11,   157,     0,    32,    41,    91,   162,
    42,    41,   156,    42,   157,     0,     0,    32,   155,   162,
    46,   137,    47,   157,     0,    32,   155,   162,    46,   137,
    32,   137,    47,   157,     0,    32,   155,   162,    11,    46,
   137,    47,   157,     0,    32,   155,    91,   162,   157,     0,
    32,   155,    91,   157,     0,    32,     1,     0,   132,   159,
     0,   107,    41,   158,    42,   159,     0,     0,    80,     1,
     0,    32,   132,   159,     0,    32,   107,    41,   158,    42,
   159,     0,     0,    32,     1,     0,    44,   117,    45,     0,
     1,    45,     0,    41,   151,    42,     0,     1,    42,     0,
   107,     0,    41,   162,    42,     0,   108,     0,   110,     0,
   112,     0,   111,     0,    32,   162,   167,     0,     0,    32,
     1,     0,     0,    32,   117,   168,     0,   152,     0,    97,
   169,     0,   169,    76,   169,     0,   169,    74,   169,     0,
    41,   169,    42,     0,    23,   161,   160,     0,    22,   137,
    43,    24,   160,     0,    22,    41,   173,    32,   174,    32,
   175,    42,   160,     0,   128,     0,   124,     0,     0,   151,
     0,     0,   128,     0,     0,     3,   151,    31,   160,   177,
     0,     4,   160,     0,     0,    29,    41,   132,    42,     0,
    29,    41,   132,   179,    42,     0,     0,    32,   132,   179,
     0,    99,    41,   162,    42,     0,    99,    41,   162,   181,
    42,     0,    99,    41,   134,    42,     0,    99,    41,   134,
   181,    42,     0,    99,    41,   182,    42,     0,     0,    32,
   162,   181,     0,    32,   134,   181,     0,   162,    13,   162,
   183,     0,   134,    13,   162,   183,     0,   136,    13,   162,
   183,     0,   162,    13,   134,   183,     0,   134,    13,   134,
   183,     0,   136,    13,   134,   183,     0,   162,    71,   162,
   183,     0,   134,    71,   162,   183,     0,    41,   148,    42,
    71,   162,   183,     0,   136,    71,   162,   183,     0,   162,
    71,   134,   183,     0,   134,    71,   134,   183,     0,    41,
   148,    42,    71,   134,   183,     0,   162,    13,   120,     0,
   162,    71,   120,     0,   136,    71,   134,   183,     0,    41,
   182,    42,     0,     0,    13,   162,   183,     0,    13,   134,
   183,     0,    71,   162,   183,     0,    71,   134,   183,     0,
    13,   120,     0,    71,   120,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   131,   162,   163,   167,   168,   169,   170,   171,   176,   177,
   178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   194,   195,   200,   201,   205,   209,   214,
   216,   223,   328,   329,   332,   333,   334,   335,   336,   337,
   338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
   348,   349,   350,   352,   355,   359,   363,   372,   381,   385,
   389,   390,   391,   403,   406,   410,   417,   418,   423,   428,
   433,   442,   450,   461,   475,   476,   477,   481,   485,   489,
   493,   497,   501,   507,   510,   513,   518,   530,   531,   532,
   533,   534,   535,   542,   546,   550,   555,   561,   566,   573,
   579,   589,   591,   592,   596,   603,   607,   608,   613,   617,
   618,   619,   620,   621,   622,   623,   626,   628,   630,   632,
   634,   636,   638,   640,   642,   644,   646,   648,   650,   655,
   656,   659,   660,   661,   662,   664,   665,   668,   672,   673,
   675,   677,   679,   681,   683,   687,   689,   690,   696,   697,
   698,   699,   701,   703,   705,   710,   711,   713,   714,   720,
   721,   725,   726,   730,   731,   735,   736,   737,   738,   739,
   741,   742,   743,   744,   745,   746,   747,   748,   749,   752,
   753,   754,   755,   756,   757,   758,   759,   761,   763,   767,
   768,   769,   770,   776,   780,   788,   800,   804,   813,   825,
   829,   837,   841,   842,   845,   850,   854,   859,   863,   870,
   873,   874,   877,   878,   881,   882,   885,   886,   887,   888,
   889,   890,   893,   894,   895,   896,   897,   898,   900,   901,
   903,   904,   906,   914,   915,   916,   917,   918,   924,   926,
   927,   930,   931,   932,   935,   936,   939,   940,   943,   944,
   947,   948,   953,   954,   955,   956,   957,   958,   965,   967,
   970,   972,   978,   982,   987,   993,   999,  1005,  1015,  1021,
  1027,  1033,  1042,  1046,  1050,  1056,  1060,  1064,  1070,  1076,
  1083,  1091,  1099,  1105,  1111,  1115,  1122,  1128,  1131,  1135,
  1139,  1145,  1151,  1157,  1164,  1172,  1178,  1193,  1199,  1202,
  1210,  1218,  1224,  1230,  1234,  1243,  1247,  1257,  1258,  1262,
  1266,  1276,  1277,  1285,  1287,  1294,  1296,  1302,  1303,  1307,
  1312,  1317,  1322,  1328,  1332,  1333,  1339,  1340,  1351,  1362,
  1363,  1365,  1367,  1373,  1379,  1387,  1395,  1399,  1403,  1409,
  1413,  1419,  1423,  1430,  1440,  1441,  1447,  1448,  1452,  1453,
  1458,  1459,  1460,  1461,  1462,  1465,  1466,  1467,  1473,  1474,
  1475,  1477,  1478,  1479,  1481,  1482,  1483,  1484,  1486,  1487,
  1488,  1489,  1490,  1491,  1492,  1496,  1497,  1498,  1499,  1500,
  1501,  1502
};

static const char * const yytname[] = {   "$","error","$undefined.","IF","ELSE",
"EMPTY","AWAIT","PROJECTION","PBEGIN","PEND","POINTERNULL","ARRAY","STRUCT",
"DOT","UNION","FILEDECLARATION","MORE","DEFINE","MY_TRUE","MY_FALSE","EXIST",
"FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT","UNTIL","DISPLAY","SKIP",
"THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION","POINTERDECLARATION",
"CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION","LISTDECLARATION","OPEN_PAR",
"CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR","CLOSE_MPAR","FUNCTION",
"OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED","SEND","RECEIVE","PROCESS",
"CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD","STRFUNCTAIL","STRFUNCCAT",
"STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED","SIGNED","CHOP","IMPLY",
"IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N","CON","ADDRESS","NE",
"EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL","DIV","MOD","BNE","CHOPSTAR",
"NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP","ALWAYS","HALT","W_NEXT",
"PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE","INTLITERAL","FLOATLITERAL",
"CHARLITERAL","program","gComplexProposition","complexProposition","poptional_projection",
"statement","option_struct_declaration","empty_statement","function","struct_define_statement",
"struct_identifier","sign_declaration","declaration","type_define","option_identifier_array_declaration",
"inner_option_identifier_array_declaration","ass_statement","ass_left","leftaddrshift",
"assign_operator","ass_right","rightaddrshift","array","option_ari_exp","point_exp",
"ari_exp","type_cast_alg_exp","option_exp_else_statement","simple_ari_exp","member_in_exp",
"bi_operator","ari_operator","array_exp","option_list_value","option_struct_list_value",
"inner_option_list_value","address_exp","type_cast","casted_element","bool_exp",
"prime_bool_exp","relation_operator","sign_type_define","all_type_define","option_function_parameter_list",
"inner_option_define_identifier","option_function_identifier","inner_option_function_identifier",
"statement_bpar","bool_par","identifier","strliteral","intliteral","charliteral",
"floatliteral","option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"if_statement","option_else_statement","output_statement","option_output","input_statement",
"option_input","struct_member_exp","option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   113,   114,   114,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   116,   116,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   118,   118,   119,   119,   120,   120,
   120,   121,   122,   122,   123,   123,   123,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   125,   125,   125,
   125,   125,   125,   126,   126,   126,   126,   126,   126,   126,
   126,   127,   127,   127,    -1,    -1,    -1,    -1,   128,   129,
   129,   129,   129,   129,   129,   129,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   131,
   131,   132,   132,   132,   132,   132,   132,   133,   134,   134,
   134,   134,   134,   134,   134,   135,   135,   135,   136,   136,
   136,   136,   136,   136,   136,   137,   137,   137,   137,   138,
   138,   139,   139,   140,   140,   141,   141,   141,   141,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   142,
   142,   142,   142,   142,   142,   142,   142,   143,   143,   144,
   144,   144,   144,   145,   145,   145,   146,   146,   146,   147,
   147,   147,   147,   147,   148,   148,   148,   148,   148,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   150,   151,   151,   151,   151,   151,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   153,   153,   153,   153,   153,   153,   154,   154,
   155,   155,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   158,   158,   158,   158,   159,
   159,   159,   159,   160,   160,   161,   161,   162,   162,   163,
   164,   165,   166,   167,   167,   167,   168,   168,   169,   169,
   169,   169,   169,   170,   171,   172,   173,   173,   173,   174,
   174,   175,   175,   176,   177,   177,   178,   178,   179,   179,
   180,   180,   180,   180,   180,   181,   181,   181,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   183,   183,   183,   183,   183,
   183,   183
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     4,     4,
     4,     4,     8,     1,     1,     1,     4,     1,     1,     1,
     1,     4,     3,     7,     9,     6,     5,     9,     8,     9,
     1,     1,     7,     3,     1,     3,     1,     0,     4,     5,
     4,     4,     2,     2,     2,     2,     1,     2,     2,     3,
     3,     3,     3,     7,     8,    11,    13,     1,     1,     1,
     1,     1,     1,     2,     6,     4,     5,     5,     8,     8,
     2,     2,     2,     0,     6,     7,     0,     2,     3,     1,
     1,     1,     1,     3,     2,     1,    11,    12,    11,    11,
    17,    18,    17,    18,    19,    18,    17,    18,    17,     1,
     1,     1,     1,     1,    10,     3,     1,     4,     5,    11,
    12,    11,    11,    12,     3,     3,     2,     0,     2,     2,
     2,     7,     6,     4,     3,     1,     3,     3,     5,     1,
     3,     2,     0,     1,     3,     1,     2,     2,     1,     1,
     1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
     1,     1,     3,     4,     4,     4,     4,     4,     4,     3,
     3,     3,     0,     2,     2,     2,     2,     2,     3,     4,
     4,     4,     5,     5,     5,     5,     5,     6,     5,     5,
     6,     5,     6,     7,     6,     6,     7,     6,     6,     5,
     7,     6,     1,     1,     2,     3,     3,     3,     3,     1,
     1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     2,     2,
     1,     1,     3,     2,     3,     4,     5,     4,     3,     4,
     5,     4,     2,     3,     4,     2,     3,     4,     4,     5,
     6,     8,     7,     4,     3,     5,     8,     0,     4,     3,
     4,     4,     5,     5,     5,     5,     6,     9,     0,     7,
     9,     8,     5,     4,     2,     2,     5,     0,     2,     3,
     6,     0,     2,     3,     2,     3,     2,     1,     3,     1,
     1,     1,     1,     3,     0,     2,     0,     3,     1,     2,
     3,     3,     3,     3,     5,     9,     1,     1,     0,     1,
     0,     1,     0,     5,     2,     0,     4,     5,     0,     3,
     4,     5,     4,     5,     4,     0,     3,     3,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     6,     3,     3,     4,     3,     0,     3,     3,     3,     3,
     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,    45,     0,     0,     0,    93,    46,     0,     0,
     0,     0,     0,    50,    51,     0,     0,    44,    88,    91,
    90,    92,    89,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   318,     0,     1,    62,
    61,     0,    34,    77,     0,    33,     0,   116,   112,   113,
   110,    36,    37,    38,    35,    49,    48,   111,     0,     0,
    29,    13,    22,     0,   169,     0,     0,     0,     0,   321,
   323,   322,   174,   172,   173,    17,   156,   164,   177,   178,
   171,   166,   176,   170,   179,    21,    10,     9,    20,    12,
    11,     2,     0,     0,     0,     0,     0,    26,   169,   240,
   241,     0,     0,   320,   242,     0,   234,     0,     0,    73,
     0,    74,     0,     0,     0,   318,   299,     0,   339,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   174,     0,   172,   173,   177,   329,   171,     0,   179,     0,
     0,     0,     0,     0,     0,    76,     0,    75,     0,   318,
   151,   150,   149,     0,     0,   115,   112,     0,     0,     0,
     0,     0,   308,     0,     0,   318,    79,   104,     0,     0,
     0,     0,     0,   318,    78,   130,   131,     0,     0,   308,
     0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   172,
   173,     0,   177,   171,   179,     0,   206,     0,   208,   205,
   207,   167,   168,   188,   189,     0,   186,   187,   185,   255,
   258,   253,   254,   256,   257,   183,   184,   180,   181,   182,
     0,     0,     8,     6,     7,     5,     4,     0,     0,     0,
   242,     0,   235,   255,   258,     0,     0,     0,     0,     0,
     0,     0,    80,    82,    81,    83,   288,     0,     0,     0,
   325,     0,    88,    90,    92,    89,     0,     0,   338,   337,
     0,     0,   317,     0,     0,     0,   334,     0,     0,     0,
     0,     0,     0,   137,   132,   133,   191,   192,   134,     0,
     0,    88,    90,    89,     0,     0,     0,     0,   318,   149,
     0,   330,    64,   114,   145,   155,     0,   319,     0,     0,
     0,   375,     0,     0,     0,   288,   308,     0,     0,     0,
     0,   262,     0,   261,     0,     0,     0,   112,   113,     0,
   110,   111,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   318,   312,     0,   148,   101,     0,     0,     0,
     0,    94,    32,    31,    53,    30,     0,    65,   288,   109,
     0,   376,   376,     0,   376,   376,   376,   376,   376,   376,
   372,   376,   376,   373,   376,   376,    25,    29,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   175,   209,     0,
     0,     0,     0,     0,     0,   158,   165,   157,   250,   249,
   238,   248,   244,   252,   247,   243,   251,   239,   346,   237,
   236,   246,   245,    42,     0,   299,   299,   299,     0,   305,
     0,     0,     0,   299,     0,     0,     0,     0,     0,     0,
     0,   341,     0,   316,   315,     0,     0,     0,     0,     0,
     0,     0,     0,   203,   203,   203,   203,   203,   203,     0,
     0,   347,     0,     0,     0,     0,     0,     0,    88,    90,
    88,    90,   333,   149,     0,     0,     0,     0,     0,     0,
     0,   332,   331,   327,     0,     0,     0,     0,     0,   318,
     0,   259,   260,   154,     0,    88,    90,    89,     0,    39,
     0,     0,    47,     0,   353,     0,   351,     0,   355,    52,
    40,    41,   309,   308,     0,   306,    69,     0,     0,     0,
   148,   103,   102,   104,    72,     0,     0,     0,     0,     0,
     0,   363,   360,    71,   370,   366,   364,   361,   374,   368,
   362,   359,   369,   365,    28,     0,   163,     0,   210,   160,
     0,     0,   212,     0,     0,     0,     0,   211,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   344,     0,
   299,   276,   299,   299,   273,   299,   299,   264,   299,     0,
     0,   299,     0,   299,   299,   290,   299,     0,   326,   325,
     0,     0,     0,     0,     0,     0,     0,   340,     0,   335,
   314,     0,   136,   193,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   349,   348,     0,   190,
     0,     0,     0,     0,     0,     0,   148,   288,   333,   148,
   376,   376,     0,   328,    57,     0,     0,    70,     0,     0,
     0,     0,     0,     0,    88,    90,     0,     0,     0,     0,
   356,   356,   354,   352,     0,   313,   318,   312,   147,   148,
   139,   104,   104,     0,    96,    66,     0,   381,   376,   376,
   382,   376,   376,     0,     0,   159,     0,     0,     0,   233,
   217,     0,   220,     0,   222,     0,   219,     0,     0,     0,
     0,     0,   215,     0,     0,   216,     0,     0,   213,   214,
   230,     0,     0,     0,     0,     0,     0,   345,     0,   299,
   277,   299,   299,   269,   299,   274,   299,   299,   265,     0,
   285,   299,   299,     0,   263,     0,     0,   299,   291,   299,
   299,   292,   304,   299,   299,     0,   289,     0,   324,     0,
     0,     0,   343,     0,     0,   204,   203,   203,   203,   197,
   199,   198,   194,   196,   195,     0,   138,   350,     0,   318,
   321,     0,   318,   321,   318,   321,     0,     0,   288,     0,
     0,     0,   371,   367,     0,    56,     0,   148,   153,     0,
     0,     0,     0,     0,     0,   358,   357,    69,   308,   310,
   146,    97,    98,   104,     0,   378,   377,   380,   379,     0,
   162,   229,     0,   161,   223,   226,   228,   225,     0,   218,
     0,   221,     0,   232,     0,     0,     0,     0,     0,   278,
   299,   270,   272,   275,   299,   266,   268,   299,   299,   284,
     0,   279,     0,    68,     0,   294,   293,   295,   299,   303,
     0,   296,     0,    63,     0,   342,     0,     0,     0,   200,
   202,   201,     0,     0,     0,     0,     0,     0,     0,     0,
   318,     0,   318,   321,     0,   139,    84,   152,    54,    68,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   307,     0,     0,    95,     0,    23,   231,   224,   227,
     0,   288,   271,   267,   286,   280,     0,     0,   299,    67,
     0,   288,   297,     0,     0,   299,     0,     0,    43,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    85,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    69,   104,   104,    59,
     0,   299,     0,   281,    58,     0,   299,     0,   300,    55,
   336,   288,     0,     0,     0,   148,   148,     0,     0,     0,
   148,   148,   148,   148,     0,     0,     0,     0,     0,     0,
   288,    60,     0,     0,     0,     0,     0,     0,     0,   311,
    99,   100,   299,   283,   299,   299,   302,   299,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   148,     0,     0,     0,   148,   148,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   287,   282,   298,
   301,     0,   321,   321,     0,   140,   119,   321,   321,     0,
   143,   117,   142,   120,     0,     0,     0,     0,     0,     0,
    86,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   135,     0,     0,     0,   321,     0,     0,   321,
   141,   321,   321,     0,   144,   118,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   321,    87,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   148,   148,     0,   148,   148,     0,     0,
     0,     0,     0,     0,   148,     0,     0,   148,   148,   148,
     0,   129,   127,     0,   123,   121,     0,     0,     0,   148,
   128,   122,   126,   124,     0,   125,     0,     0,     0
};

static const short yydefgoto[] = {  1167,
     2,    21,   209,   150,   377,   931,    93,    61,    62,    63,
    64,    65,   367,   372,    66,    67,    68,   198,   364,   304,
    94,   539,    95,   125,   710,   706,    97,    98,   251,   236,
   306,   307,   308,   639,    99,   100,   711,   262,   127,   266,
   344,   448,   449,   280,   365,   536,   439,   143,   101,   128,
   102,   103,   104,   457,   335,   158,    72,    73,    74,   291,
   629,   877,    75,   599,    76,   483,    77,   526,   105,   552
};

static const short yypact[] = {   156,
   487,  3803,-32768,-32768,    73,-32768,-32768,-32768,   487,   487,
   487,   487,  2041,   487,   487,   487,   487,   487,   487,-32768,
   168,  1261,-32768,   157,   743,   793,-32768,-32768,   111,    14,
   195,  2365,   138,-32768,-32768,   204,   224,-32768,-32768,-32768,
-32768,-32768,-32768,  2492,  3803,   166,   293,    29,    29,   159,
   160,   374,   386,   398,   402,   432,   588,   467,  1450,-32768,
-32768,   457,-32768,-32768,   622,-32768,   239,-32768,    15,    -6,
    62,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   502,   814,
   823,   464,   464,  1261,-32768,  3094,   358,   969,   969,-32768,
-32768,-32768,-32768,    15,    -6,   656,  2018,-32768,-32768,-32768,
    62,-32768,-32768,-32768,-32768,   464,   464,   464,   464,   464,
   464,-32768,   487,   487,   487,   487,   487,-32768,   951,-32768,
-32768,  1623,  1261,-32768,  1670,   566,-32768,  1166,  1261,   467,
   467,   467,   467,   523,    14,-32768,   540,    14,  1865,   200,
   575,  1261,   173,  3803,  1072,  1261,  2612,   686,  1504,  1208,
  1216,  1131,   568,   381,   584,-32768,   544,   377,  1146,  1119,
   674,   682,   847,  1065,   613,-32768,   467,-32768,   727,   729,
-32768,-32768,-32768,  3703,   295,-32768,   181,  2041,   737,  3803,
  3803,  3803,  1586,  2041,   467,   508,-32768,     7,  3803,  3803,
  3803,  3803,  1191,   529,-32768,-32768,-32768,  1072,    77,  1586,
    77,    77,    77,   237,   237,  3556,-32768,   487,   687,  1079,
   675,   -15,     8,   725,    11,  3142,    37,   880,   736,   383,
   300,   950,   755,   309,   817,   429,   910,    -6,-32768,   960,
-32768,-32768,-32768,-32768,-32768,   969,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   969,  2041,  1348,   471,   471,   538,   796,  2041,  2041,  2234,
  1296,   922,-32768,    32,    42,  2041,   173,  1261,  1261,  2041,
  2041,  1022,-32768,-32768,-32768,-32768,   988,   874,   196,   945,
   956,  1069,   -15,     8,   725,    11,  3009,   739,-32768,-32768,
   961,   980,-32768,  1125,   983,  3803,-32768,  1370,  2171,  3593,
  3593,   740,   351,-32768,   656,   935,-32768,-32768,-32768,  1094,
  1235,   184,   350,   403,   641,  1033,  1179,   159,   973,  1004,
  2371,-32768,-32768,-32768,-32768,  1023,   979,-32768,  1012,  1504,
  1504,-32768,  3803,  1084,  1088,   988,  1586,   467,   467,   760,
   984,-32768,  1016,-32768,  1107,  2722,  1239,   383,   300,   584,
   309,   817,    82,  1019,   429,   664,   832,  1162,  1256,  1323,
  1363,    28,   603,  1178,  1196,   125,-32768,  1156,  2041,    46,
  1072,-32768,  1459,  1180,  1180,-32768,  1218,  1209,   988,-32768,
   118,   197,   197,  1227,   197,   197,   197,   197,   197,   197,
-32768,   307,   197,-32768,   307,   197,-32768,   823,  1282,  2041,
  1206,   969,   420,   969,   421,   422,   969,   424,   436,   472,
   563,  1183,   609,   618,  1264,  1287,   663,-32768,   979,   579,
   405,   300,   755,   309,   817,  1339,-32768,   656,   656,   656,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   656,  1299,  1236,
-32768,   656,   656,-32768,  1242,   261,   282,   321,  1308,-32768,
  1285,    14,   770,   323,  1352,    21,  1358,   791,  3057,  1362,
   380,  1261,   173,-32768,-32768,  1441,  1364,  2852,  1368,   950,
   134,  1375,  2889,   518,    -2,  1374,   518,    -2,  1374,  3519,
  1072,-32768,  1387,  1193,   692,   672,   766,   777,   780,   801,
  1264,  1287,  1012,  1399,  2041,  1407,  2769,  1198,  2041,    77,
  1411,  1377,-32768,  1137,   173,  1452,  1425,  1438,    14,  1427,
  1004,-32768,-32768,-32768,  1439,  1396,  1400,  1419,  1325,-32768,
   660,   405,-32768,    77,-32768,  1448,-32768,  1470,-32768,-32768,
-32768,-32768,-32768,  1586,   680,-32768,-32768,   488,  1474,    44,
   125,-32768,-32768,  1495,-32768,  1191,  1486,   528,  1488,   237,
   237,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1487,    16,   820,-32768,  1409,
   969,  1499,-32768,   969,  1500,   969,  1502,-32768,   969,  1508,
   833,   852,   862,   780,   870,   969,   883,   969,   884,   969,
   969,   969,  1510,  1455,  1463,  1466,  1262,   173,-32768,    14,
   343,-32768,   301,   388,-32768,   384,   416,-32768,   595,  1476,
    14,   505,    14,   804,    40,-32768,   706,  3803,-32768,   956,
  1482,   439,   184,   350,   403,  1270,   678,  1043,  1529,-32768,
-32768,  1523,-32768,-32768,  1524,  2972,   134,   839,  1522,  1531,
  1534,  1527,  1539,  1540,  3179,  1538,  1537,-32768,  1193,-32768,
  1155,  1732,  1928,   885,   886,  1547,   125,   988,-32768,   125,
   197,   197,  3803,-32768,-32768,   173,  1515,-32768,  1399,  2041,
  2041,  1551,  1555,  1562,  1519,  1528,  1396,  1400,  1419,  1312,
  1574,  1574,-32768,-32768,  1571,-32768,   693,  1178,-32768,   125,
-32768,    79,  1495,  1573,-32768,-32768,  1578,-32768,   307,   197,
-32768,   307,   197,   487,  2041,-32768,   969,  1581,   969,-32768,
-32768,   969,-32768,   969,-32768,   969,-32768,   969,  2760,  3655,
  3772,   892,-32768,   969,  1583,-32768,   969,  1587,-32768,-32768,
-32768,   969,  1589,  1592,  1595,  1519,  1548,-32768,  1596,    40,
-32768,   540,   540,-32768,    40,-32768,   540,   540,-32768,    14,
-32768,   849,   453,  2041,-32768,  1599,  1612,   540,-32768,   540,
   540,-32768,-32768,   878,   676,  2041,-32768,  1473,-32768,  1614,
   707,   801,   295,  1261,  1613,-32768,   518,    -2,  1374,-32768,
-32768,-32768,-32768,-32768,-32768,  3227,-32768,-32768,  3264,  1278,
  1617,  3312,  1281,  1621,  1315,  1625,  3826,  3833,   988,  1622,
  1626,  1624,-32768,-32768,  1570,-32768,  1628,   125,   656,   -18,
    10,   -27,  1632,  1633,  1528,-32768,-32768,  1178,  1586,-32768,
-32768,-32768,-32768,   461,  3803,-32768,-32768,-32768,-32768,   895,
   656,-32768,   969,  1339,-32768,-32768,-32768,-32768,  3867,-32768,
   969,-32768,   969,-32768,  1563,  1572,  1575,  1636,  1640,-32768,
   540,-32768,-32768,-32768,   540,-32768,-32768,   540,   540,-32768,
  2041,-32768,   385,  3803,  1642,-32768,-32768,-32768,   540,-32768,
  2041,-32768,   831,-32768,  3803,-32768,  1643,  1269,  1644,-32768,
-32768,-32768,  3349,  1638,  1641,  3397,  1653,  1656,  1660,  1662,
  1429,  3434,  1467,  1646,  1647,  1667,-32768,-32768,-32768,  3803,
  1663,  1677,  1669,  1617,  1678,  1679,  1621,  1682,  1625,  1605,
   122,-32768,  1683,    44,-32768,  1533,-32768,-32768,-32768,-32768,
  1620,   988,-32768,-32768,-32768,-32768,  1031,  2041,   540,  1450,
  1684,   988,-32768,  1060,  2041,   540,  1462,   173,-32768,  1695,
   893,   900,  1333,  2041,  2041,   903,   906,  1350,  2041,  2041,
  2041,  2041,  1691,  3482,  1693,  1699,-32768,  1705,  1703,  1667,
   721,  1163,  1707,  1709,  1719,  1646,  1178,    79,  1495,-32768,
  1722,   540,  1096,-32768,-32768,  1723,   540,  1101,-32768,-32768,
-32768,   988,   916,   918,   939,   125,   125,   947,   953,   966,
   125,   125,   125,   125,  2041,   974,   975,  1431,  2041,  2041,
   988,-32768,  1675,  1676,  1733,  1681,  1686,  1737,  1207,-32768,
-32768,-32768,   540,-32768,   540,   540,-32768,   540,  1727,  3901,
  3908,   982,  1728,  1731,  3942,  3949,   993,  1734,  1735,  1738,
  1739,   125,  1001,  1009,  1010,   125,   125,  1742,  1745,  1746,
  1688,  1747,  1748,  1700,  1701,  1704,  1757,-32768,-32768,-32768,
-32768,   274,  1754,  1761,  3983,-32768,-32768,  1762,  1763,  3990,
-32768,-32768,-32768,-32768,  1759,  4024,  4031,  1013,  1764,  1766,
  1740,  1698,  1706,  1772,  1710,  1711,  1783,  1785,  1786,  1741,
   236,   588,-32768,  1788,  1789,  1791,  1792,  1793,  1795,  1798,
-32768,  1806,  1807,  4065,-32768,-32768,  1193,  1754,  1761,  1744,
  1762,  1763,  1749,  1755,  1756,  1814,   650,   729,  1811,  1812,
  1822,  1821,  1824,  1829,  1830,  1831,  1832,   935,  1792,  1798,
  1806,  1807,  1768,  2041,  2041,  1835,  2041,  2041,  1836,  1837,
  1838,  1834,  1832,   125,   125,  2041,   125,   125,  2041,  2041,
  2041,  1839,  1841,  1842,   125,  1843,  1844,   125,   125,   125,
  2041,-32768,-32768,  1845,-32768,-32768,  1846,  1847,  1848,   125,
-32768,-32768,-32768,-32768,  1849,-32768,  1886,  1898,-32768
};

static const short yypgoto[] = {-32768,
-32768,    -1,  1503,   352,  1359,  1008,     1,-32768,-32768,  -189,
   -17,    30,   273,  -532,  -137,   144,  1433,-32768,   -91,-32768,
    80,  -325,  1303,   -13,  -261,-32768,  1336,   -55,-32768,  1341,
  -264,-32768,-32768,  -418,   915,-32768,   742,    26,   -20,  1817,
-32768,  -143,  -330,  1471,  -195,  -667,  -142,-32768,   955,   373,
-32768,   954,-32768,  1300,  1412,  -109,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1276,-32768,  -332,  1671,  -292
};


#define	YYLAST		4177


static const short yytable[] = {    96,
   297,   290,    60,   378,   384,   507,   202,    80,    81,    82,
    83,   695,   106,   107,   108,   109,   110,   111,   140,   705,
   820,   619,   902,   156,   528,   345,   402,   199,   533,   638,
   166,   168,   232,   233,   471,   475,   478,   317,   370,   322,
   163,   432,   164,    27,   151,    60,   542,   126,   547,   404,
   905,   435,   407,   303,   135,   200,   640,   641,   642,   643,
   644,   135,    39,    40,   203,    41,    42,    43,   226,   165,
   413,   279,   222,   414,   204,   403,   484,   167,   167,   908,
   135,    69,   909,   371,   649,   201,   135,   300,   903,   301,
   553,   904,   555,   556,   557,   558,   559,   560,   405,   561,
   562,   408,   563,   564,   234,   235,   380,    87,   261,   210,
   370,   253,   254,   255,   256,   257,   906,   381,    50,   907,
   136,   289,   521,   153,    69,   222,   156,   136,   156,   171,
   177,   305,   205,   261,   170,   454,   185,    58,   141,   124,
   569,   508,   573,    92,    60,   578,   136,   151,   263,   124,
   912,   124,   186,    92,   272,   343,   538,   484,   548,   822,
   823,    87,   964,     1,   354,   220,   227,   294,   167,   305,
   366,   310,    50,   295,    60,   634,   112,   175,   142,    79,
    60,    60,    60,   170,   305,   397,   305,   152,   170,    60,
    60,    60,    60,   199,   176,   427,   450,   129,   342,   169,
   174,   220,   222,   471,   391,   394,   398,   469,   637,   550,
    27,   498,   484,   234,   235,   694,   296,   134,   153,   650,
   502,   503,   167,    69,   170,   402,   153,   171,   965,    39,
    40,   966,    41,    42,    43,   138,   451,   113,   428,   114,
   115,   116,   292,   117,   429,   430,   261,   144,   220,    50,
    50,   201,   438,   348,   177,   175,   442,   443,   356,    69,
    69,    69,   118,   341,   145,   170,   170,   551,    69,    69,
    69,    69,   161,   222,   486,   692,  1107,   381,   382,   544,
   385,   387,   389,   392,   395,   470,   474,   477,   234,   235,
   152,   915,   279,   440,   441,   220,    60,   166,   168,  1010,
   156,   135,   452,    47,   453,   421,   342,   261,   342,   156,
   156,   743,   202,   279,  1081,   196,   197,   152,   176,   550,
   630,   204,   135,   305,   723,   156,   726,   801,   729,   730,
   187,   800,   279,    60,   802,   353,   345,   195,   685,   220,
    47,   326,  1108,    57,   167,   167,   151,   200,   816,   817,
   328,   601,   279,    59,   279,   541,   378,   305,   880,   881,
   882,   135,   665,   135,   821,   342,   153,   136,   803,   804,
   203,   637,   604,   778,   279,    69,   469,   551,   220,   205,
  1082,   171,   481,   135,   637,    50,   567,   498,   136,   647,
   175,   404,   482,   202,   748,   199,   160,   171,   226,   162,
   220,   170,   273,   274,   275,   276,   826,   827,   342,   828,
   829,   607,    69,   615,   178,   279,   928,   199,   329,   279,
   135,   592,   326,   200,   325,   153,   179,   136,   135,   136,
   460,   929,   522,   740,   421,  1011,  1012,    87,   180,   195,
   487,   227,   181,   688,   407,   222,   325,   279,    50,   136,
   330,   203,   331,   201,   470,   738,   135,  -113,  -113,   222,
   549,   571,   574,   576,   170,   579,   343,   305,   895,   420,
   627,   567,   182,   234,   235,   201,   156,   402,   745,   135,
   707,   657,   901,   261,   279,   660,   186,   628,   689,   152,
    84,     3,   370,   488,   136,   298,   460,    85,   861,   421,
   193,   166,     4,     5,     6,     7,   750,   135,    87,   342,
   572,   575,   577,   404,   580,   758,     8,   309,   368,    50,
   305,   305,   136,   806,   690,   347,   581,     9,    86,   771,
    10,   359,   360,   361,   206,   170,   279,   914,   153,   368,
   373,   374,   375,   376,   116,   186,   117,   220,   167,   638,
   698,   701,   220,   369,    47,   309,   204,   185,-32768,   220,
   187,   594,   582,   277,   595,   118,   596,    87,   548,   379,
   309,   279,   309,   186,   369,   167,   220,    88,    50,   661,
   199,    89,    11,    12,    13,   328,    14,    15,    16,    17,
    18,   971,    19,    20,    57,   597,   267,    90,    91,    92,
   522,   976,   460,   681,   407,   753,   234,   235,   200,   325,
   273,   275,   594,   117,   205,   595,   293,   596,    60,   420,
  -110,  -110,   222,   913,   777,   327,   279,   549,   183,   699,
   702,   222,   118,   184,   170,   876,   433,   436,   201,   268,
   754,   269,   543,   534,  -112,  -112,   597,   466,   184,   968,
   586,  1019,   163,   583,   164,    27,   808,   809,    87,   588,
  1023,  1024,   135,    60,   460,  1028,  1029,  1030,  1031,    50,
  1038,   472,   476,   479,   489,    40,   199,   490,    42,    43,
   686,   165,    84,   594,   504,   170,   595,   342,   596,    85,
  1107,   831,   295,   677,    84,   524,   678,    69,   679,   587,
   521,    85,   830,   340,   592,   525,  1065,   279,   589,   309,
  1069,  1070,   185,   651,   336,   220,   765,   597,   135,   732,
   299,   871,   337,   300,   220,   301,   169,   680,   194,    84,
   274,   399,    86,   819,   201,   296,    85,   279,   184,    87,
   863,    27,    69,   309,   234,   235,    47,   135,   833,    58,
    50,   766,   873,   593,  1003,   175,  1108,  1004,    47,    87,
    39,    40,   572,    41,    42,    43,   170,   216,   185,    88,
   302,    87,   222,    89,   184,   222,   318,   355,   222,   135,
   480,    88,    50,   401,   186,    89,   687,   124,  1005,    90,
    91,    92,   319,    47,   341,   981,   419,   185,    57,   878,
   135,    90,    91,    92,   879,   305,    87,   652,  1143,  1144,
   135,  1146,  1147,   186,   761,   406,    88,    50,   653,  1154,
    89,   586,  1157,  1158,  1159,    60,   417,    50,   342,   461,
    50,   135,  1118,    57,  1165,   279,    90,    91,    92,   776,
   472,    84,   588,   170,   204,   186,   170,   927,    85,   130,
   509,   131,   177,   309,   208,   207,   575,   934,   332,   859,
   613,   707,   935,   524,    60,   220,   510,   580,   220,   222,
   654,   220,   222,   527,   719,    60,   136,   936,   222,   473,
   279,   622,   300,   113,   301,   114,   115,   116,   869,   117,
   118,   655,   113,   720,   114,   115,   116,   186,   117,   132,
    60,   133,   205,   721,    69,    47,   309,   309,   118,   279,
   708,   588,   693,   415,   973,   328,   416,   118,    87,   234,
   235,   978,   199,   572,   724,   727,   797,   798,    88,    50,
   986,   987,    89,   839,   402,   991,   992,   993,   994,   917,
   222,   404,   575,    69,   402,    57,   124,   404,    90,    91,
    92,   342,   580,   338,    69,   131,    71,  1020,   155,  1021,
   722,   342,   220,   431,   113,   220,   114,   115,   116,   768,
   117,   220,   204,   725,   728,   725,   728,   455,    85,    69,
   588,  1032,   728,   983,   137,  1036,  1037,   456,  1025,   118,
   984,   418,   462,   988,  1026,   268,   989,   269,   157,    71,
   223,   229,    27,   463,   173,    71,   572,   588,   575,    86,
   779,   342,   188,   484,   805,   402,   404,   512,   495,   188,
   513,    39,    40,  1055,    41,    42,    43,   465,   445,  1022,
   342,   258,   259,   220,  1060,    47,   223,   572,   234,   235,
   224,   230,  1066,   575,   163,   496,   164,    27,    87,   500,
  1067,   588,  1083,   223,  1094,   341,  1027,   514,    88,    50,
   523,   223,    89,   444,  1033,  1034,   491,    40,   499,   492,
    42,    43,   728,   165,    84,    57,   224,   972,    90,    91,
    92,    85,   501,   728,   188,   188,   188,   188,   350,   278,
   505,   572,   281,   157,   446,   268,   447,   269,    71,   575,
  1068,   157,   320,   728,   234,   235,   977,   234,   235,   400,
  1134,  1135,   299,  1137,  1138,   300,   268,   301,   269,   234,
   235,   188,  1145,   224,   485,  1148,  1149,  1150,   351,    71,
   223,  1084,   506,   357,    71,    71,    71,  1160,    47,   188,
   423,    58,  1015,    71,    71,    71,    71,  1018,   234,   235,
   333,    87,   268,   383,   269,   386,   388,   390,   393,   396,
   549,    88,   302,   334,    85,    89,   464,   268,   333,   269,
   224,   339,   324,   133,   223,   338,   916,   458,    57,   124,
   424,    90,    91,    92,   234,   235,   549,   332,   189,   234,
   235,   309,   190,   191,   192,   789,  1006,   515,   268,  1007,
   269,   223,   163,   529,   164,    27,   189,   196,   197,   535,
   190,   191,   192,   223,   224,   930,   584,   434,   437,   585,
   493,    47,  -111,  -111,    39,    40,   937,    41,    42,    43,
  1008,   165,   540,   649,    87,   223,   300,   537,   301,   659,
  1045,   157,   188,  1046,    88,    50,   270,   271,    89,   323,
    71,   930,   330,   224,   331,   192,   173,   -62,    48,    49,
   223,   790,   545,    84,   791,    91,    92,   350,   554,   350,
   119,   330,   494,   331,  1047,   224,   229,   189,   120,   121,
   520,   190,   191,   192,   546,   -62,   969,    71,   566,   -62,
   -62,   -62,   188,   188,   511,   736,   568,   530,   737,    58,
   157,   122,   598,   584,    70,   590,   772,   351,   189,   424,
   939,   269,   190,   191,   192,   713,   230,   715,   183,   884,
   717,   183,   887,   184,   188,   189,   184,    47,   591,   190,
   191,   192,   600,   731,   423,   278,   163,   418,   164,    27,
    87,   130,   268,   458,   269,   736,   154,    70,   815,   610,
    88,    50,   172,    70,    89,   183,   889,   123,   675,    40,
   184,   676,    42,    43,   531,   165,   584,    57,   124,   985,
    90,    91,    92,   223,   424,   611,   264,   265,   242,   243,
   244,   245,   223,   584,   234,   235,   990,   223,   221,   228,
   237,   632,   189,   713,   717,   618,   190,   191,   192,   621,
   603,   606,   609,   324,   532,   638,   612,   614,   617,   633,
   620,   223,   188,   157,   467,   188,   635,   238,   239,   114,
   115,   116,   224,   117,   221,   246,   247,   224,   648,   248,
   249,   250,   189,    58,   224,   423,   190,   191,   192,   189,
   656,   154,   118,   190,   191,   192,    70,   658,   832,   154,
   172,   224,   331,   835,   662,   836,   663,   837,   666,   838,
   237,   713,   717,   669,   584,   840,   667,  1035,   842,   183,
   953,   221,   670,   844,   184,   351,   349,    70,   682,   668,
   671,   228,    70,    70,    70,   631,   672,   238,   239,   683,
   673,    70,    70,    70,    70,   246,   247,   234,   235,   248,
   249,   250,   278,   980,   700,   703,    84,   183,   955,   674,
   189,   684,   184,   119,   190,   191,   192,   874,   221,   189,
   691,   120,   121,   190,   191,   192,   370,   697,   422,   325,
   704,   189,   190,   191,   192,   190,   191,   192,   840,   842,
   712,   714,   189,   716,   321,   733,   190,   191,   192,   718,
   223,   732,   756,   734,   739,   742,   735,   770,   747,   223,
   773,   752,   221,   774,   775,   757,   780,   760,   481,   764,
    47,   426,    71,   783,   918,   781,   188,   970,   782,   787,
   842,   188,   919,    87,   920,   784,   785,   799,    84,   154,
   224,   807,   810,    88,    50,    85,   811,    89,    70,   224,
   149,   221,   189,   812,   172,   524,   190,   191,   192,   813,
    57,   124,   818,    90,    91,    92,   899,    71,   814,   824,
   172,   825,   833,   221,   841,    84,   299,    27,   843,   300,
   845,   301,   119,   846,   211,    70,   847,   849,   848,   189,
   120,   121,   864,   190,   191,   192,    39,    40,   154,    41,
    42,    43,    47,   865,   875,   349,   212,   422,   885,   213,
   214,   215,   888,   260,   228,   362,   890,   897,   896,   903,
   898,   900,    78,   910,   911,    88,   302,   921,   906,    89,
   922,   908,   932,   944,   938,   940,   945,   956,   957,    47,
   217,   218,   363,   124,   851,    90,    91,    92,   949,   855,
   223,   950,    87,   223,   858,   951,   223,   952,   958,   960,
   884,   963,    88,    50,   159,    78,    89,   961,   962,   123,
   887,    78,   422,   889,   967,   188,   965,    71,   975,    57,
   124,   219,    90,    91,    92,   982,   995,   570,   999,   570,
   224,    85,   570,   224,  1000,  1001,   224,  1002,   953,  1009,
   264,   265,   242,   243,   244,   245,   225,   231,   234,   235,
   955,   154,   713,  1013,  1016,  1039,  1040,   713,  1052,  1041,
   221,  1042,   792,  1044,  1056,   221,  1043,  1057,  1074,    71,
  1061,  1062,   221,  1071,  1063,  1064,  1072,  1073,  1075,  1076,
  1077,  1078,   225,  1080,  1079,  1085,   842,   223,    47,   221,
   223,   842,  1086,  1088,  1089,  1091,   223,  1098,   713,   159,
  1095,    87,  1096,  1100,    78,  1099,  1097,   159,    71,  1101,
  1102,    88,    50,   349,  1103,    89,  1104,  1105,   200,    71,
  1109,  1106,  1110,  1111,  1112,   842,  1113,   224,   793,  1114,
   224,   794,    91,    92,   352,    78,   224,  1115,  1116,   358,
    78,    78,    78,  1119,    71,  1123,  1124,  1125,  1120,    78,
    78,    78,    78,  1126,  1121,  1122,  1127,    84,   223,  1128,
  1129,  1130,  1131,  1132,    85,  1142,   282,  1133,   164,    27,
  1136,  1139,  1140,  1141,  1151,  1168,   225,  1152,  1153,  1155,
  1156,  1161,  1162,  1163,  1164,  1166,   425,  1169,   283,    40,
   565,   284,   285,   286,   696,   287,   570,   959,   224,   570,
   709,   570,   646,   252,   570,   664,   602,   605,   608,   769,
    70,   570,   788,   570,   616,   570,   570,   570,     0,     0,
   225,    47,   217,   218,     0,     0,     0,    85,   221,     0,
     0,     0,     0,     0,    87,     0,     0,   221,     0,     0,
     0,     0,     0,     0,    88,    50,     0,   159,    89,     0,
   175,     0,     0,     0,     0,    70,    78,     0,    86,   225,
     0,    57,     0,   288,    90,    91,    92,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   570,   570,   570,     0,
     0,   225,     0,     0,    47,     0,     0,     0,     0,     0,
     0,     0,     0,    78,     0,     0,     0,    87,     0,     0,
     0,     0,     0,     0,     0,     0,   159,    88,    50,     0,
     0,    89,     0,   352,     0,   425,     0,     0,     0,     0,
     0,     0,   231,     0,   795,     0,     0,   796,    91,    92,
     0,     0,   570,    84,   834,     0,     0,   570,     0,   570,
    85,   570,     0,   570,   570,   570,   570,     0,     0,   570,
     0,     0,   570,     0,     0,     0,     0,   570,     0,   237,
     0,   741,     0,   744,   746,    70,   749,   751,     0,   755,
     0,    86,   759,     0,   762,   763,     0,   767,   221,     0,
   425,   221,     0,     0,   221,     0,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,     0,    47,   248,   249,
   250,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    87,     0,     0,     0,     0,     0,     0,    70,     0,   159,
    88,    50,   570,   570,    89,     0,     0,     0,   225,     0,
     0,     0,     0,   225,     0,     0,     0,    57,     0,     0,
    90,    91,    92,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    70,   225,   570,     0,
     0,     0,     0,    84,   570,     0,   570,    70,   570,     0,
    85,     0,   211,     0,     0,   221,     0,     0,   221,     0,
     0,   352,     0,     0,   221,     0,     0,     0,     0,     0,
     0,     0,    70,     0,   212,     0,     0,   213,   214,   215,
   850,   468,   852,   853,   300,   854,   301,   856,   857,     0,
     0,     0,   860,   862,     0,     0,     0,     0,   866,     0,
   867,   868,     0,     0,   870,   872,    84,    47,   217,   218,
     0,     0,     0,   119,     0,   211,     0,     0,     0,     0,
    87,   120,   121,     0,     0,     0,   221,     0,     0,     0,
    88,   302,     0,     0,    89,     0,     0,   409,     0,     0,
   410,   214,   411,     0,   260,     0,     0,    57,   124,   219,
    90,    91,    92,     0,     0,     0,     0,     0,    78,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    47,   412,   218,     0,     0,     0,   225,     0,     0,     0,
     0,     0,     0,    87,     0,   225,     0,     0,     0,     0,
     0,   923,     0,    88,    50,   924,     0,    89,   925,   926,
   123,     0,     0,    78,     0,     0,     0,     0,     0,   933,
    57,   124,   219,    90,    91,    92,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   570,   570,     0,     0,     0,
   570,   570,     0,     0,     0,     0,     0,    84,     0,     0,
     0,     0,     0,    84,    85,     0,     0,     0,     0,     0,
   119,     0,   211,     0,     0,     0,     0,     0,   120,   121,
   570,     0,     0,     0,     0,   570,     0,     0,     0,   974,
     0,   570,   570,     0,   212,   139,   979,   213,   214,   215,
     0,   497,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   570,
     0,    47,     0,     0,     0,     0,     0,    47,   217,   218,
     0,     0,  1014,    78,    87,     0,     0,  1017,     0,     0,
    87,     0,     0,     0,    88,    50,   225,     0,    89,   225,
    88,    50,   225,     0,    89,     0,     0,   149,     0,     0,
     0,    57,     0,     0,    90,    91,    92,    57,   124,   219,
    90,    91,    92,  1048,     0,  1049,  1050,     0,  1051,     0,
     0,     0,     0,     0,   146,    78,    23,    24,     0,     0,
     0,   119,     0,    25,     0,    26,    27,    28,    29,   120,
   121,    30,    31,    32,    33,     0,    34,    35,    36,     0,
    37,    38,     0,     0,     0,    39,    40,     0,    41,    42,
    43,     0,   147,     0,    78,    45,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    78,     0,    46,     0,     0,
     0,     0,     0,   225,     0,     0,   225,     0,    47,    48,
    49,     0,   225,     0,     0,     0,     0,     0,     0,     0,
    78,    87,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    88,   148,     0,     0,    89,     0,    51,   149,    52,
    53,    54,    55,    56,     0,     0,     0,     0,    57,   124,
    58,    90,    91,    92,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   146,     0,    23,    24,     0,     0,
     0,   119,     0,   311,   225,    26,    27,    28,    29,   120,
   121,    30,    31,    32,    33,     0,    34,    35,    36,     0,
    37,    38,     0,     0,     0,   312,    40,     0,   313,   285,
   314,     0,   147,     0,     0,    45,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    46,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    47,   315,
   316,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    87,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    88,   148,     0,     0,    89,     0,    51,   149,    52,
    53,    54,    55,    56,     0,     0,     0,     0,    57,   124,
   288,    90,    91,    92,   146,     0,    23,    24,     0,     0,
     0,   119,     0,    25,     0,    26,    27,    28,    29,   120,
   121,    30,    31,    32,    33,     0,    34,    35,    36,     0,
    37,    38,     0,     0,     0,   516,    40,     0,   517,    42,
   518,     0,   147,     0,     0,    45,     0,     0,     0,    85,
     0,    84,     0,     0,     0,     0,     0,    46,   119,     0,
   211,     0,     0,     0,     0,     0,   120,   121,    47,   519,
    49,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    86,    87,   409,     0,     0,   410,   214,   411,     0,   497,
     0,    88,   148,     0,     0,    89,     0,    51,   149,    52,
    53,    54,    55,    56,     0,     0,    47,     0,    57,   124,
    58,    90,    91,    92,     0,    47,   412,   218,     0,    87,
     0,     0,     0,     0,     0,     0,     0,     0,    87,    88,
    50,     0,     0,    89,    84,     0,     0,     0,    88,    50,
     0,    85,    89,   211,     0,   149,   790,     0,     0,    90,
    91,    92,     0,     0,     0,    57,   124,   219,    90,    91,
    92,     0,     0,     0,     0,   409,     0,     0,   410,   214,
   411,    84,   468,     0,     0,   300,     0,   301,    85,     0,
   211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    47,   412,
   218,     0,   212,     0,     0,   213,   214,   215,     0,   636,
     0,    87,   300,     0,   301,     0,     0,     0,     0,     0,
     0,    88,   302,     0,     0,    89,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    47,   217,   218,    57,   124,
   219,    90,    91,    92,     0,     0,     0,     0,    87,     0,
     0,     0,     0,     0,    84,     0,     0,     0,    88,    50,
     0,    85,    89,   211,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    57,     0,   219,    90,    91,
    92,     0,     0,     0,     0,   409,     0,     0,   410,   214,
   411,    84,   636,     0,     0,   300,     0,   301,    85,     0,
   211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    47,   412,
   218,     0,   409,     0,     0,   410,   214,   411,     0,   459,
     0,    87,     0,     0,     0,     0,     0,     0,     0,    84,
     0,    88,    50,     0,     0,    89,    85,     0,   211,     0,
     0,     0,     0,     0,     0,    47,   412,   218,    57,     0,
   219,    90,    91,    92,     0,     0,     0,     0,    87,     0,
   623,     0,     0,   624,   214,   625,    84,   459,    88,   148,
     0,     0,    89,    85,   175,   211,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    57,     0,   219,    90,    91,
    92,     0,     0,    47,   626,   218,     0,   212,     0,     0,
   213,   214,   215,     0,   216,     0,    87,     0,     0,     0,
     0,     0,     0,     0,    84,     0,    88,    50,     0,     0,
    89,    85,   175,   211,     0,     0,     0,     0,     0,     0,
    47,   217,   218,    57,     0,   219,    90,    91,    92,     0,
     0,     0,     0,    87,     0,   409,     0,     0,   410,   214,
   411,    84,   216,    88,    50,     0,     0,    89,    85,     0,
   211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    57,     0,   219,    90,    91,    92,     0,     0,    47,   412,
   218,     0,   409,     0,     0,   410,   214,   411,     0,   786,
     0,    87,     0,     0,     0,     0,     0,     0,     0,    84,
     0,    88,    50,     0,     0,    89,    85,     0,   211,     0,
     0,     0,     0,     0,     0,    47,   412,   218,    57,     0,
   219,    90,    91,    92,     0,     0,     0,     0,    87,     0,
   623,     0,     0,   624,   214,   625,    84,   216,    88,    50,
     0,     0,    89,    85,     0,   211,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    57,     0,   219,    90,    91,
    92,     0,     0,    47,   626,   218,     0,   212,     0,     0,
   213,   214,   215,     0,   883,     0,    87,     0,     0,     0,
     0,     0,     0,     0,    84,     0,    88,    50,     0,     0,
    89,    85,     0,   211,     0,     0,     0,     0,     0,     0,
    47,   217,   218,    57,     0,   219,    90,    91,    92,     0,
     0,     0,     0,    87,     0,   212,     0,     0,   213,   214,
   215,    84,   886,    88,    50,     0,     0,    89,    85,     0,
   211,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    57,     0,   219,    90,    91,    92,     0,     0,    47,   217,
   218,     0,   941,     0,     0,   942,   214,   411,     0,   216,
     0,    87,     0,     0,     0,     0,     0,     0,     0,    84,
     0,    88,    50,     0,     0,    89,    85,     0,   211,     0,
     0,     0,     0,     0,     0,    47,   943,   218,    57,     0,
   219,    90,    91,    92,     0,     0,     0,     0,    87,     0,
   946,     0,     0,   947,   214,   411,    84,   216,    88,    50,
     0,     0,    89,    85,     0,   211,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    57,     0,   219,    90,    91,
    92,     0,     0,    47,   948,   218,     0,   212,     0,     0,
   213,   214,   215,     0,   954,     0,    87,     0,     0,     0,
     0,     0,     0,     0,    84,     0,    88,    50,     0,     0,
    89,    85,     0,   211,     0,     0,     0,     0,     0,     0,
    47,   217,   218,    57,     0,   219,    90,    91,    92,     0,
     0,     0,     0,    87,     0,   996,     0,     0,   997,   214,
   411,    84,   216,    88,    50,     0,     0,    89,    85,     0,
     0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
    57,     0,   219,    90,    91,    92,     0,     0,    47,   998,
   218,     0,    39,    40,     0,    41,    42,    43,    84,   645,
     0,    87,     0,     0,     0,   119,     0,     0,     0,     0,
     0,    88,    50,   120,   121,    89,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    47,   341,     0,    57,     0,
   219,    90,    91,    92,     0,    84,    86,     0,    87,     0,
     0,     0,    85,     0,     0,     0,     0,     0,    88,    50,
     0,     0,    89,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    47,     0,     0,    57,     0,     0,    90,    91,
    92,     0,     0,   473,     0,    87,   300,     0,   301,     0,
     0,     0,     0,     0,     0,    88,    50,     0,     0,    89,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    47,
     0,     0,    57,   124,    85,    90,    91,    92,     0,     0,
     0,     0,    87,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    88,    50,     0,     0,    89,     0,     0,     0,
     0,     0,     0,     0,     0,    86,     0,     0,     0,    57,
   124,     0,    90,    91,    92,    22,     0,    23,    24,     0,
     0,     0,     0,     0,    25,     0,    26,    27,    28,    29,
     0,    47,    30,    31,    32,    33,     0,    34,    35,    36,
     0,    37,    38,     0,    87,     0,    39,    40,     0,    41,
    42,    43,     0,   346,    88,    50,    45,     0,    89,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    46,     0,
     0,   793,     0,     0,    90,    91,    92,     0,     0,    47,
    48,    49,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    85,    87,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    50,     0,     0,     0,     0,    51,     0,
    52,    53,    54,    55,    56,    22,     0,    23,    24,    57,
     0,    58,    86,     0,    25,     0,    26,    27,    28,    29,
     0,     0,    30,    31,    32,    33,     0,    34,    35,    36,
     0,    37,    38,     0,     0,    85,    39,    40,    47,    41,
    42,    43,    85,    44,     0,     0,    45,     0,     0,     0,
     0,    87,     0,     0,     0,     0,     0,     0,    46,     0,
     0,    88,    50,     0,     0,    89,    86,     0,     0,    47,
    48,    49,     0,   892,     0,     0,    85,     0,   795,     0,
     0,    90,    91,    92,     0,     0,     0,     0,     0,     0,
     0,     0,    47,    50,     0,     0,     0,     0,    51,    47,
    52,    53,    54,    55,    56,    87,     0,    86,     0,    57,
    85,    58,    87,     0,     0,    88,    50,    85,     0,    89,
     0,     0,    88,    50,     0,     0,    89,     0,     0,     0,
     0,     0,   891,    47,     0,    90,    91,    92,     0,   893,
     0,    86,   894,    91,    92,     0,    87,     0,    86,     0,
     0,    85,     0,     0,     0,     0,    88,    50,    85,     0,
    89,     0,     0,     0,     0,     0,     0,    47,     0,     0,
     0,     0,     0,   893,    47,     0,    90,    91,    92,     0,
    87,     0,    86,     0,     0,     0,     0,    87,     0,    86,
    88,    50,    85,     0,    89,     0,     0,    88,    50,    85,
     0,    89,     0,     0,     0,     0,     0,   790,    47,     0,
  1053,    91,    92,     0,   793,    47,     0,  1054,    91,    92,
     0,    87,     0,    86,     0,     0,     0,     0,    87,     0,
    86,    88,    50,    85,     0,    89,     0,     0,    88,    50,
    85,     0,    89,     0,     0,     0,     0,     0,   790,    47,
     0,  1058,    91,    92,     0,   793,    47,     0,  1059,    91,
    92,     0,    87,     0,    86,     0,     0,     0,     0,    87,
     0,    86,    88,    50,    85,     0,    89,     0,     0,    88,
    50,     0,     0,    89,     0,     0,     0,     0,     0,   893,
    47,     0,  1087,    91,    92,     0,   893,    47,     0,  1090,
    91,    92,     0,    87,     0,    86,     0,     0,     0,     0,
    87,     0,     0,    88,    50,     0,     0,    89,     0,     0,
    88,    50,     0,     0,    89,     0,     0,     0,     0,     0,
   790,    47,     0,  1092,    91,    92,     0,   793,     0,     0,
  1093,    91,    92,     0,    87,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    88,    50,     0,     0,    89,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   893,     0,     0,  1117,    91,    92
};

static const short yycheck[] = {    13,
   143,   139,     2,   193,   200,   336,    13,     9,    10,    11,
    12,   544,    14,    15,    16,    17,    18,    19,    32,     4,
   688,     1,    41,    44,   357,   169,    42,    13,     1,    32,
    48,    49,    88,    89,   299,   300,   301,   147,    32,   149,
    12,    10,    14,    15,    44,    45,     1,    22,   379,    42,
    41,    10,    42,   145,    41,    41,   475,   476,   477,   478,
   479,    41,    34,    35,    71,    37,    38,    39,    41,    41,
    34,    32,    86,    37,    13,    91,    79,    48,    49,   107,
    41,     2,   110,    77,    41,    71,    41,    44,   107,    46,
   383,   110,   385,   386,   387,   388,   389,   390,    91,   392,
   393,    91,   395,   396,    89,    90,   198,    80,   122,    84,
    32,   113,   114,   115,   116,   117,   107,    41,    91,   110,
   107,   139,    41,    44,    45,   139,   147,   107,   149,    50,
    51,   145,    71,   147,   107,   279,    91,   109,     1,   108,
   402,   337,   404,   112,   144,   407,   107,   147,   123,   108,
   818,   108,   107,   112,   129,   169,    32,    79,    41,   692,
   693,    80,    41,     8,   178,    86,    87,   142,   139,   183,
   184,   146,    91,     1,   174,    42,     9,    96,    41,   107,
   180,   181,   182,   107,   198,   206,   200,    44,   107,   189,
   190,   191,   192,    13,    51,   251,     1,    41,   169,    41,
    41,   122,   216,   468,   204,   205,   208,   299,   473,    13,
    15,   321,    79,    89,    90,   541,    44,   107,   139,   484,
   330,   331,   193,   144,   107,    42,   147,   148,   107,    34,
    35,   110,    37,    38,    39,    41,    41,    70,   252,    72,
    73,    74,    43,    76,   258,   259,   260,    44,   169,    91,
    91,    71,   266,   174,   175,    96,   270,   271,   179,   180,
   181,   182,    95,    68,    41,   107,   107,    71,   189,   190,
   191,   192,   107,   287,    91,   540,    41,    41,   199,   371,
   201,   202,   203,   204,   205,   299,   300,   301,    89,    90,
   147,   824,    32,   268,   269,   216,   296,   315,   316,   967,
   321,    41,   107,    67,   109,   226,   277,   321,   279,   330,
   331,    11,    13,    32,    41,    77,    78,   174,   175,    13,
   463,    13,    41,   337,   586,   346,   588,   658,   590,   591,
    58,   657,    32,   333,   660,    41,   480,    65,   534,   260,
    67,    42,   107,   107,   315,   316,   346,    41,   681,   682,
    42,    91,    32,     2,    32,   369,   546,   371,   777,   778,
   779,    41,   505,    41,   690,   336,   287,   107,   661,   662,
    71,   636,    91,   638,    32,   296,   468,    71,   299,    71,
   107,   302,    32,    41,   649,    91,   400,   497,   107,   481,
    96,    42,    42,    13,    11,    13,    45,   318,    41,   107,
   321,   107,   130,   131,   132,   133,   699,   700,   379,   702,
   703,    91,   333,    91,    41,    32,    32,    13,    42,    32,
    41,    42,    42,    41,    42,   346,    41,   107,    41,   107,
   287,    47,   353,    91,   355,   968,   969,    80,    41,   167,
    91,   362,    41,   535,    42,   459,    42,    32,    91,   107,
    74,    71,    76,    71,   468,   598,    41,    77,    78,   473,
   381,    42,    42,    42,   107,    42,   480,   481,   799,    41,
    91,   485,    41,    89,    90,    71,   497,    42,    91,    41,
    42,   495,   808,   497,    32,   499,   107,   462,     1,   346,
     3,     5,    32,    91,   107,   144,   353,    10,    46,   420,
    44,   519,    16,    17,    18,    19,    91,    41,    80,   480,
    91,    91,    91,    42,    91,    11,    30,   145,    11,    91,
   534,   535,   107,   666,   538,   174,    91,    41,    41,    91,
    44,   180,   181,   182,    33,   107,    32,    77,   459,    11,
   189,   190,   191,   192,    74,   107,    76,   468,   519,    32,
   550,   551,   473,    46,    67,   183,    13,    91,    95,   480,
   288,    34,    91,    41,    37,    95,    39,    80,    41,    41,
   198,    32,   200,   107,    46,   546,   497,    90,    91,   500,
    13,    94,    96,    97,    98,    42,   100,   101,   102,   103,
   104,   922,   106,   107,   107,    68,    31,   110,   111,   112,
   521,   932,   459,   524,    42,    11,    89,    90,    41,    42,
   338,   339,    34,    76,    71,    37,    42,    39,   618,    41,
    77,    78,   636,   819,   638,    42,    32,   548,    41,   550,
   551,   645,    95,    46,   107,   773,   264,   265,    71,    74,
    46,    76,   370,    41,    77,    78,    68,   296,    46,   914,
    42,   982,    12,    91,    14,    15,   670,   671,    80,    42,
   986,   987,    41,   663,   521,   991,   992,   993,   994,    91,
  1001,   299,   300,   301,    34,    35,    13,    37,    38,    39,
     1,    41,     3,    34,   333,   107,    37,   658,    39,    10,
    41,   705,     1,    34,     3,    32,    37,   618,    39,    91,
    41,    10,   704,    91,    42,    42,  1032,    32,    91,   337,
  1036,  1037,    91,    42,    41,   636,    11,    68,    41,    42,
    41,    46,    41,    44,   645,    46,    41,    68,   107,     3,
   458,    45,    41,    41,    71,    44,    10,    32,    46,    80,
   754,    15,   663,   371,    89,    90,    67,    41,    42,   109,
    91,    46,   766,    91,    34,    96,   107,    37,    67,    80,
    34,    35,    91,    37,    38,    39,   107,    41,    91,    90,
    91,    80,   786,    94,    46,   789,    91,    41,   792,    41,
    41,    90,    91,   109,   107,    94,   107,   108,    68,   110,
   111,   112,   107,    67,    68,   938,    42,    91,   107,   774,
    41,   110,   111,   112,   775,   819,    80,    42,  1134,  1135,
    41,  1137,  1138,   107,    11,    91,    90,    91,    42,  1145,
    94,    42,  1148,  1149,  1150,   825,    91,    91,   799,    91,
    91,    41,  1097,   107,  1160,    32,   110,   111,   112,     1,
   468,     3,    42,   107,    13,   107,   107,   861,    10,   107,
    91,   109,   773,   481,    32,    42,    91,   871,    42,    11,
    91,    42,    32,    32,   864,   786,   107,    91,   789,   883,
    91,   792,   886,    42,    42,   875,   107,    47,   892,    41,
    32,    91,    44,    70,    46,    72,    73,    74,    11,    76,
    95,    91,    70,    42,    72,    73,    74,   107,    76,   107,
   900,   109,    71,    42,   825,    67,   534,   535,    95,    32,
    91,    42,   540,    34,   928,    42,    37,    95,    80,    89,
    90,   935,    13,    91,    42,    42,    42,    42,    90,    91,
   944,   945,    94,    42,    42,   949,   950,   951,   952,    45,
   954,    42,    91,   864,    42,   107,   108,    42,   110,   111,
   112,   922,    91,   107,   875,   109,     2,    42,    44,    42,
    91,   932,   883,    42,    70,   886,    72,    73,    74,   618,
    76,   892,    13,    91,    91,    91,    91,    33,    10,   900,
    42,   995,    91,    91,    30,   999,  1000,    32,    42,    95,
    91,    42,    32,    91,    42,    74,    91,    76,    44,    45,
    86,    87,    15,    24,    50,    51,    91,    42,    91,    41,
   638,   982,    58,    79,   663,    42,    42,    34,    46,    65,
    37,    34,    35,    42,    37,    38,    39,    45,    41,    91,
  1001,    81,    82,   954,    42,    67,   122,    91,    89,    90,
    86,    87,    42,    91,    12,    42,    14,    15,    80,    71,
    42,    42,  1052,   139,    42,    68,    91,    42,    90,    91,
    42,   147,    94,    42,    91,    91,    34,    35,    46,    37,
    38,    39,    91,    41,     3,   107,   122,    47,   110,   111,
   112,    10,    71,    91,   130,   131,   132,   133,   174,   135,
     7,    91,   138,   139,   107,    74,   109,    76,   144,    91,
    91,   147,   148,    91,    89,    90,    47,    89,    90,    31,
  1124,  1125,    41,  1127,  1128,    44,    74,    46,    76,    89,
    90,   167,  1136,   169,    31,  1139,  1140,  1141,   174,   175,
   216,  1052,    45,   179,   180,   181,   182,  1151,    67,   185,
   226,   109,    47,   189,   190,   191,   192,    47,    89,    90,
    32,    80,    74,   199,    76,   201,   202,   203,   204,   205,
  1081,    90,    91,    45,    10,    94,    42,    74,    32,    76,
   216,   107,    42,   109,   260,   107,   825,   109,   107,   108,
   226,   110,   111,   112,    89,    90,  1107,    42,    70,    89,
    90,   819,    74,    75,    76,    41,    34,    91,    74,    37,
    76,   287,    12,    42,    14,    15,    70,    77,    78,    32,
    74,    75,    76,   299,   260,   864,    34,   264,   265,    37,
    42,    67,    77,    78,    34,    35,   875,    37,    38,    39,
    68,    41,    77,    41,    80,   321,    44,    42,    46,    42,
    34,   287,   288,    37,    90,    91,    81,    82,    94,    42,
   296,   900,    74,   299,    76,    76,   302,    42,    68,    69,
   346,   107,    45,     3,   110,   111,   112,   353,    42,   355,
    10,    74,   318,    76,    68,   321,   362,    70,    18,    19,
    42,    74,    75,    76,    76,    70,   914,   333,     7,    74,
    75,    76,   338,   339,   340,    34,    91,    42,    37,   109,
   346,    41,     4,    34,     2,    42,    37,   353,    70,   355,
    42,    76,    74,    75,    76,   574,   362,   576,    41,    42,
   579,    41,    42,    46,   370,    70,    46,    67,    42,    74,
    75,    76,    91,   592,   420,   381,    12,    42,    14,    15,
    80,   107,    74,   109,    76,    34,    44,    45,    37,    42,
    90,    91,    50,    51,    94,    41,    42,    97,    34,    35,
    46,    37,    38,    39,    42,    41,    34,   107,   108,    37,
   110,   111,   112,   459,   420,    91,    81,    82,    83,    84,
    85,    86,   468,    34,    89,    90,    37,   473,    86,    87,
    52,    28,    70,   652,   653,    44,    74,    75,    76,    42,
   446,   447,   448,    42,    42,    32,   452,   453,   454,    42,
   456,   497,   458,   459,    45,   461,    42,    79,    80,    72,
    73,    74,   468,    76,   122,    87,    88,   473,    42,    91,
    92,    93,    70,   109,   480,   521,    74,    75,    76,    70,
    42,   139,    95,    74,    75,    76,   144,    41,   707,   147,
   148,   497,    76,   712,   500,   714,    46,   716,     7,   718,
    52,   720,   721,   509,    34,   724,    42,    37,   727,    41,
    42,   169,    46,   732,    46,   521,   174,   175,   524,    42,
    42,   179,   180,   181,   182,    45,    91,    79,    80,    42,
    91,   189,   190,   191,   192,    87,    88,    89,    90,    91,
    92,    93,   548,    42,   550,   551,     3,    41,    42,    91,
    70,    42,    46,    10,    74,    75,    76,    45,   216,    70,
    47,    18,    19,    74,    75,    76,    32,    42,   226,    42,
    44,    70,    74,    75,    76,    74,    75,    76,   797,   798,
    42,    42,    70,    42,    41,    91,    74,    75,    76,    42,
   636,    42,    77,    91,   600,   601,    91,    76,   604,   645,
    32,   607,   260,    41,    41,   611,    45,   613,    32,   615,
    67,   236,   618,    47,   833,    45,   622,    45,    45,    42,
   839,   627,   841,    80,   843,    47,    47,    41,     3,   287,
   636,    77,    42,    90,    91,    10,    42,    94,   296,   645,
    97,   299,    70,    42,   302,    32,    74,    75,    76,    91,
   107,   108,    42,   110,   111,   112,    47,   663,    91,    47,
   318,    44,    42,   321,    42,     3,    41,    15,    42,    44,
    42,    46,    10,    42,    12,   333,    42,    42,    91,    70,
    18,    19,    44,    74,    75,    76,    34,    35,   346,    37,
    38,    39,    67,    42,    41,   353,    34,   355,    42,    37,
    38,    39,    42,    41,   362,    80,    42,    42,    47,   107,
    47,    44,     2,    42,    42,    90,    91,    42,   107,    94,
    41,   107,    41,    46,    42,    42,    46,    42,    42,    67,
    68,    69,   107,   108,   740,   110,   111,   112,    46,   745,
   786,    46,    80,   789,   750,    46,   792,    46,    42,    47,
    42,   107,    90,    91,    44,    45,    94,    41,    41,    97,
    42,    51,   420,    42,    42,   771,   107,   773,    45,   107,
   108,   109,   110,   111,   112,    41,    46,   402,    46,   404,
   786,    10,   407,   789,    46,    41,   792,    45,    42,    41,
    81,    82,    83,    84,    85,    86,    86,    87,    89,    90,
    42,   459,  1021,    42,    42,    91,    91,  1026,    42,    37,
   468,    91,    41,    37,    47,   473,    91,    47,    91,   825,
    47,    47,   480,    42,    47,    47,    42,    42,    42,    42,
    91,    91,   122,    37,    91,    42,  1055,   883,    67,   497,
   886,  1060,    42,    42,    42,    47,   892,   110,  1067,   139,
    47,    80,    47,    42,   144,   110,    77,   147,   864,   110,
   110,    90,    91,   521,    42,    94,    42,    42,    41,   875,
    42,    91,    42,    42,    42,  1094,    42,   883,   107,    42,
   886,   110,   111,   112,   174,   175,   892,    42,    42,   179,
   180,   181,   182,   110,   900,    42,    46,    46,   110,   189,
   190,   191,   192,    42,   110,   110,    46,     3,   954,    46,
    42,    42,    42,    42,    10,    42,    12,   110,    14,    15,
    46,    46,    46,    46,    46,     0,   216,    47,    47,    47,
    47,    47,    47,    47,    47,    47,   226,     0,    34,    35,
   398,    37,    38,    39,   546,    41,   571,   900,   954,   574,
   570,   576,   480,    97,   579,   504,   446,   447,   448,   620,
   618,   586,   647,   588,   454,   590,   591,   592,    -1,    -1,
   260,    67,    68,    69,    -1,    -1,    -1,    10,   636,    -1,
    -1,    -1,    -1,    -1,    80,    -1,    -1,   645,    -1,    -1,
    -1,    -1,    -1,    -1,    90,    91,    -1,   287,    94,    -1,
    96,    -1,    -1,    -1,    -1,   663,   296,    -1,    41,   299,
    -1,   107,    -1,   109,   110,   111,   112,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,
    -1,   321,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   333,    -1,    -1,    -1,    80,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   346,    90,    91,    -1,
    -1,    94,    -1,   353,    -1,   355,    -1,    -1,    -1,    -1,
    -1,    -1,   362,    -1,   107,    -1,    -1,   110,   111,   112,
    -1,    -1,   707,     3,   709,    -1,    -1,   712,    -1,   714,
    10,   716,    -1,   718,   719,   720,   721,    -1,    -1,   724,
    -1,    -1,   727,    -1,    -1,    -1,    -1,   732,    -1,    52,
    -1,   601,    -1,   603,   604,   773,   606,   607,    -1,   609,
    -1,    41,   612,    -1,   614,   615,    -1,   617,   786,    -1,
   420,   789,    -1,    -1,   792,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    -1,    67,    91,    92,
    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    80,    -1,    -1,    -1,    -1,    -1,    -1,   825,    -1,   459,
    90,    91,   797,   798,    94,    -1,    -1,    -1,   468,    -1,
    -1,    -1,    -1,   473,    -1,    -1,    -1,   107,    -1,    -1,
   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   864,   497,   833,    -1,
    -1,    -1,    -1,     3,   839,    -1,   841,   875,   843,    -1,
    10,    -1,    12,    -1,    -1,   883,    -1,    -1,   886,    -1,
    -1,   521,    -1,    -1,   892,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   900,    -1,    34,    -1,    -1,    37,    38,    39,
   740,    41,   742,   743,    44,   745,    46,   747,   748,    -1,
    -1,    -1,   752,   753,    -1,    -1,    -1,    -1,   758,    -1,
   760,   761,    -1,    -1,   764,   765,     3,    67,    68,    69,
    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,    -1,    -1,
    80,    18,    19,    -1,    -1,    -1,   954,    -1,    -1,    -1,
    90,    91,    -1,    -1,    94,    -1,    -1,    34,    -1,    -1,
    37,    38,    39,    -1,    41,    -1,    -1,   107,   108,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    -1,   618,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    67,    68,    69,    -1,    -1,    -1,   636,    -1,    -1,    -1,
    -1,    -1,    -1,    80,    -1,   645,    -1,    -1,    -1,    -1,
    -1,   851,    -1,    90,    91,   855,    -1,    94,   858,   859,
    97,    -1,    -1,   663,    -1,    -1,    -1,    -1,    -1,   869,
   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1020,  1021,    -1,    -1,    -1,
  1025,  1026,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
    -1,    -1,    -1,     3,    10,    -1,    -1,    -1,    -1,    -1,
    10,    -1,    12,    -1,    -1,    -1,    -1,    -1,    18,    19,
  1055,    -1,    -1,    -1,    -1,  1060,    -1,    -1,    -1,   929,
    -1,  1066,  1067,    -1,    34,    41,   936,    37,    38,    39,
    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1094,
    -1,    67,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
    -1,    -1,   972,   773,    80,    -1,    -1,   977,    -1,    -1,
    80,    -1,    -1,    -1,    90,    91,   786,    -1,    94,   789,
    90,    91,   792,    -1,    94,    -1,    -1,    97,    -1,    -1,
    -1,   107,    -1,    -1,   110,   111,   112,   107,   108,   109,
   110,   111,   112,  1013,    -1,  1015,  1016,    -1,  1018,    -1,
    -1,    -1,    -1,    -1,     3,   825,     5,     6,    -1,    -1,
    -1,    10,    -1,    12,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    -1,    25,    26,    27,    -1,
    29,    30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,
    39,    -1,    41,    -1,   864,    44,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   875,    -1,    56,    -1,    -1,
    -1,    -1,    -1,   883,    -1,    -1,   886,    -1,    67,    68,
    69,    -1,   892,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   900,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    91,    -1,    -1,    94,    -1,    96,    97,    98,
    99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,     5,     6,    -1,    -1,
    -1,    10,    -1,    12,   954,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    -1,    25,    26,    27,    -1,
    29,    30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,
    39,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    91,    -1,    -1,    94,    -1,    96,    97,    98,
    99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
   109,   110,   111,   112,     3,    -1,     5,     6,    -1,    -1,
    -1,    10,    -1,    12,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    -1,    25,    26,    27,    -1,
    29,    30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,
    39,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    10,
    -1,     3,    -1,    -1,    -1,    -1,    -1,    56,    10,    -1,
    12,    -1,    -1,    -1,    -1,    -1,    18,    19,    67,    68,
    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    41,    80,    34,    -1,    -1,    37,    38,    39,    -1,    41,
    -1,    90,    91,    -1,    -1,    94,    -1,    96,    97,    98,
    99,   100,   101,   102,    -1,    -1,    67,    -1,   107,   108,
   109,   110,   111,   112,    -1,    67,    68,    69,    -1,    80,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    90,
    91,    -1,    -1,    94,     3,    -1,    -1,    -1,    90,    91,
    -1,    10,    94,    12,    -1,    97,   107,    -1,    -1,   110,
   111,   112,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    38,
    39,     3,    41,    -1,    -1,    44,    -1,    46,    10,    -1,
    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
    69,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
    -1,    80,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    91,    -1,    -1,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    68,    69,   107,   108,
   109,   110,   111,   112,    -1,    -1,    -1,    -1,    80,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    90,    91,
    -1,    10,    94,    12,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,    -1,   109,   110,   111,
   112,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    38,
    39,     3,    41,    -1,    -1,    44,    -1,    46,    10,    -1,
    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
    69,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
    -1,    90,    91,    -1,    -1,    94,    10,    -1,    12,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    68,    69,   107,    -1,
   109,   110,   111,   112,    -1,    -1,    -1,    -1,    80,    -1,
    34,    -1,    -1,    37,    38,    39,     3,    41,    90,    91,
    -1,    -1,    94,    10,    96,    12,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,    -1,   109,   110,   111,
   112,    -1,    -1,    67,    68,    69,    -1,    34,    -1,    -1,
    37,    38,    39,    -1,    41,    -1,    80,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    90,    91,    -1,    -1,
    94,    10,    96,    12,    -1,    -1,    -1,    -1,    -1,    -1,
    67,    68,    69,   107,    -1,   109,   110,   111,   112,    -1,
    -1,    -1,    -1,    80,    -1,    34,    -1,    -1,    37,    38,
    39,     3,    41,    90,    91,    -1,    -1,    94,    10,    -1,
    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   107,    -1,   109,   110,   111,   112,    -1,    -1,    67,    68,
    69,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
    -1,    90,    91,    -1,    -1,    94,    10,    -1,    12,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    68,    69,   107,    -1,
   109,   110,   111,   112,    -1,    -1,    -1,    -1,    80,    -1,
    34,    -1,    -1,    37,    38,    39,     3,    41,    90,    91,
    -1,    -1,    94,    10,    -1,    12,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,    -1,   109,   110,   111,
   112,    -1,    -1,    67,    68,    69,    -1,    34,    -1,    -1,
    37,    38,    39,    -1,    41,    -1,    80,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    90,    91,    -1,    -1,
    94,    10,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,
    67,    68,    69,   107,    -1,   109,   110,   111,   112,    -1,
    -1,    -1,    -1,    80,    -1,    34,    -1,    -1,    37,    38,
    39,     3,    41,    90,    91,    -1,    -1,    94,    10,    -1,
    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   107,    -1,   109,   110,   111,   112,    -1,    -1,    67,    68,
    69,    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,
    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
    -1,    90,    91,    -1,    -1,    94,    10,    -1,    12,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    68,    69,   107,    -1,
   109,   110,   111,   112,    -1,    -1,    -1,    -1,    80,    -1,
    34,    -1,    -1,    37,    38,    39,     3,    41,    90,    91,
    -1,    -1,    94,    10,    -1,    12,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,    -1,   109,   110,   111,
   112,    -1,    -1,    67,    68,    69,    -1,    34,    -1,    -1,
    37,    38,    39,    -1,    41,    -1,    80,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    90,    91,    -1,    -1,
    94,    10,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,
    67,    68,    69,   107,    -1,   109,   110,   111,   112,    -1,
    -1,    -1,    -1,    80,    -1,    34,    -1,    -1,    37,    38,
    39,     3,    41,    90,    91,    -1,    -1,    94,    10,    -1,
    -1,    -1,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,
   107,    -1,   109,   110,   111,   112,    -1,    -1,    67,    68,
    69,    -1,    34,    35,    -1,    37,    38,    39,     3,    41,
    -1,    80,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
    -1,    90,    91,    18,    19,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,   107,    -1,
   109,   110,   111,   112,    -1,     3,    41,    -1,    80,    -1,
    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    90,    91,
    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    -1,    -1,   107,    -1,    -1,   110,   111,
   112,    -1,    -1,    41,    -1,    80,    44,    -1,    46,    -1,
    -1,    -1,    -1,    -1,    -1,    90,    91,    -1,    -1,    94,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
    -1,    -1,   107,   108,    10,   110,   111,   112,    -1,    -1,
    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    90,    91,    -1,    -1,    94,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,   107,
   108,    -1,   110,   111,   112,     3,    -1,     5,     6,    -1,
    -1,    -1,    -1,    -1,    12,    -1,    14,    15,    16,    17,
    -1,    67,    20,    21,    22,    23,    -1,    25,    26,    27,
    -1,    29,    30,    -1,    80,    -1,    34,    35,    -1,    37,
    38,    39,    -1,    41,    90,    91,    44,    -1,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,
    -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,    67,
    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    10,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    96,    -1,
    98,    99,   100,   101,   102,     3,    -1,     5,     6,   107,
    -1,   109,    41,    -1,    12,    -1,    14,    15,    16,    17,
    -1,    -1,    20,    21,    22,    23,    -1,    25,    26,    27,
    -1,    29,    30,    -1,    -1,    10,    34,    35,    67,    37,
    38,    39,    10,    41,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,
    -1,    90,    91,    -1,    -1,    94,    41,    -1,    -1,    67,
    68,    69,    -1,    41,    -1,    -1,    10,    -1,   107,    -1,
    -1,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    91,    -1,    -1,    -1,    -1,    96,    67,
    98,    99,   100,   101,   102,    80,    -1,    41,    -1,   107,
    10,   109,    80,    -1,    -1,    90,    91,    10,    -1,    94,
    -1,    -1,    90,    91,    -1,    -1,    94,    -1,    -1,    -1,
    -1,    -1,   107,    67,    -1,   110,   111,   112,    -1,   107,
    -1,    41,   110,   111,   112,    -1,    80,    -1,    41,    -1,
    -1,    10,    -1,    -1,    -1,    -1,    90,    91,    10,    -1,
    94,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    -1,    -1,    -1,   107,    67,    -1,   110,   111,   112,    -1,
    80,    -1,    41,    -1,    -1,    -1,    -1,    80,    -1,    41,
    90,    91,    10,    -1,    94,    -1,    -1,    90,    91,    10,
    -1,    94,    -1,    -1,    -1,    -1,    -1,   107,    67,    -1,
   110,   111,   112,    -1,   107,    67,    -1,   110,   111,   112,
    -1,    80,    -1,    41,    -1,    -1,    -1,    -1,    80,    -1,
    41,    90,    91,    10,    -1,    94,    -1,    -1,    90,    91,
    10,    -1,    94,    -1,    -1,    -1,    -1,    -1,   107,    67,
    -1,   110,   111,   112,    -1,   107,    67,    -1,   110,   111,
   112,    -1,    80,    -1,    41,    -1,    -1,    -1,    -1,    80,
    -1,    41,    90,    91,    10,    -1,    94,    -1,    -1,    90,
    91,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,   107,
    67,    -1,   110,   111,   112,    -1,   107,    67,    -1,   110,
   111,   112,    -1,    80,    -1,    41,    -1,    -1,    -1,    -1,
    80,    -1,    -1,    90,    91,    -1,    -1,    94,    -1,    -1,
    90,    91,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,
   107,    67,    -1,   110,   111,   112,    -1,   107,    -1,    -1,
   110,   111,   112,    -1,    80,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    90,    91,    -1,    -1,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   107,    -1,    -1,   110,   111,   112
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 132 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 162 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 163 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 167 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 168 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 169 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 170 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 172 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 176 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 177 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 178 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 179 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 180 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 181 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 182 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 183 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 186 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 187 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 188 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 189 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 191 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 196 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 200 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 201 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 206 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 209 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 214 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 216 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 224 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 328 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 329 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 332 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 333 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 334 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 335 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 336 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 40:
#line 337 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 338 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 339 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 340 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 341 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 45:
#line 342 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 46:
#line 343 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 47:
#line 344 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 48:
#line 345 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 49:
#line 346 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 347 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 51:
#line 348 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 349 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 53:
#line 350 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 54:
#line 353 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 55:
#line 356 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 56:
#line 360 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 57:
#line 364 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 58:
#line 373 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 59:
#line 382 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, yyvsp[-7].returntype);
	   ;
    break;}
case 60:
#line 386 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 390 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 392 "msv.y"
{
			CSyntaxNode * p;
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 64:
#line 403 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 65:
#line 407 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 66:
#line 411 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 67:
#line 417 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 68:
#line 418 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 69:
#line 424 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 70:
#line 429 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 71:
#line 434 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 72:
#line 443 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 73:
#line 451 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 74:
#line 462 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 75:
#line 475 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 76:
#line 476 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 77:
#line 477 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 482 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 79:
#line 486 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 80:
#line 490 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 81:
#line 494 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 82:
#line 498 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 502 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 507 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 85:
#line 510 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 86:
#line 514 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 87:
#line 519 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 88:
#line 530 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 89:
#line 531 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 90:
#line 532 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 91:
#line 533 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 92:
#line 534 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 93:
#line 535 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 94:
#line 543 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 95:
#line 547 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 96:
#line 551 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 556 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 562 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 567 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 100:
#line 574 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 101:
#line 580 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 102:
#line 590 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 103:
#line 591 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 104:
#line 592 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 105:
#line 597 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 106:
#line 604 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 107:
#line 607 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 108:
#line 608 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 614 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 110:
#line 617 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 111:
#line 618 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 112:
#line 619 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 620 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 621 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 115:
#line 622 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 116:
#line 623 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 117:
#line 627 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 118:
#line 629 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 119:
#line 631 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 120:
#line 633 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 121:
#line 635 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 122:
#line 637 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 639 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 641 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 125:
#line 643 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 645 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 647 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 128:
#line 649 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 129:
#line 651 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 655 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 131:
#line 656 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 132:
#line 659 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 133:
#line 660 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 134:
#line 661 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 135:
#line 663 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 136:
#line 664 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 137:
#line 665 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 138:
#line 668 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 139:
#line 672 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 140:
#line 674 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 141:
#line 676 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 142:
#line 678 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 143:
#line 680 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 144:
#line 682 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 145:
#line 683 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 146:
#line 688 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 147:
#line 689 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 148:
#line 690 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 149:
#line 696 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 150:
#line 697 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 151:
#line 698 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 152:
#line 700 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 153:
#line 702 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 154:
#line 704 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 155:
#line 705 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 156:
#line 710 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 157:
#line 711 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 158:
#line 713 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 159:
#line 715 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 160:
#line 720 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 161:
#line 721 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 162:
#line 725 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 163:
#line 726 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 164:
#line 730 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 165:
#line 731 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 166:
#line 735 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 167:
#line 736 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 168:
#line 737 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 169:
#line 738 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 170:
#line 739 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 171:
#line 741 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 742 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 743 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 744 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 745 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 176:
#line 746 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 747 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 748 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 749 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 752 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 181:
#line 753 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 182:
#line 754 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 183:
#line 755 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 184:
#line 756 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 185:
#line 757 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 186:
#line 758 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 187:
#line 759 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 188:
#line 762 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 189:
#line 763 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 190:
#line 767 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 191:
#line 768 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 192:
#line 769 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 193:
#line 770 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 194:
#line 777 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 195:
#line 781 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 196:
#line 789 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 197:
#line 801 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 198:
#line 805 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 199:
#line 814 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 200:
#line 826 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 201:
#line 830 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 202:
#line 838 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 203:
#line 841 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 204:
#line 842 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 205:
#line 847 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 206:
#line 851 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 207:
#line 855 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 208:
#line 860 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 209:
#line 863 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 210:
#line 872 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 211:
#line 873 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 212:
#line 874 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 213:
#line 877 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 214:
#line 878 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 215:
#line 881 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 216:
#line 882 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 217:
#line 885 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 218:
#line 886 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 219:
#line 887 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 220:
#line 888 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 221:
#line 889 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 222:
#line 890 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 223:
#line 893 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 224:
#line 894 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 225:
#line 895 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 226:
#line 896 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 227:
#line 897 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 228:
#line 898 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 229:
#line 900 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 230:
#line 901 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 231:
#line 903 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 232:
#line 904 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 233:
#line 906 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 234:
#line 914 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 235:
#line 915 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 236:
#line 916 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 237:
#line 917 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 238:
#line 918 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 239:
#line 924 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 240:
#line 926 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 241:
#line 927 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 242:
#line 930 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 243:
#line 931 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 244:
#line 932 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 245:
#line 935 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 246:
#line 936 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 939 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 248:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 249:
#line 943 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 250:
#line 944 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 251:
#line 947 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 948 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 953 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 254:
#line 954 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 255:
#line 955 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 256:
#line 956 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 257:
#line 957 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 258:
#line 958 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 259:
#line 966 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 260:
#line 967 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 261:
#line 971 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 262:
#line 972 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 263:
#line 979 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 264:
#line 983 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 265:
#line 988 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 266:
#line 994 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
	   ;
    break;}
case 267:
#line 1000 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
	   ;
    break;}
case 268:
#line 1006 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 269:
#line 1016 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 270:
#line 1022 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
	   ;
    break;}
case 271:
#line 1028 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
	   ;
    break;}
case 272:
#line 1034 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 273:
#line 1043 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 274:
#line 1047 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 275:
#line 1051 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 276:
#line 1057 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 277:
#line 1061 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 278:
#line 1065 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 279:
#line 1071 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 280:
#line 1077 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 281:
#line 1085 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 282:
#line 1093 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 283:
#line 1100 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 284:
#line 1106 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 285:
#line 1112 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 286:
#line 1116 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 287:
#line 1123 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 288:
#line 1128 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 289:
#line 1132 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 290:
#line 1136 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 291:
#line 1140 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 292:
#line 1146 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 293:
#line 1152 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 294:
#line 1158 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 295:
#line 1165 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 296:
#line 1173 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 297:
#line 1179 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 298:
#line 1194 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 299:
#line 1199 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 300:
#line 1204 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 301:
#line 1212 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 302:
#line 1219 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 303:
#line 1225 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 304:
#line 1231 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 305:
#line 1234 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 306:
#line 1244 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 307:
#line 1248 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 308:
#line 1257 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 309:
#line 1258 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 310:
#line 1263 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 311:
#line 1267 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 312:
#line 1276 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 313:
#line 1277 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 314:
#line 1285 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 315:
#line 1287 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 316:
#line 1294 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 317:
#line 1296 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 318:
#line 1302 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 319:
#line 1303 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 320:
#line 1307 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 321:
#line 1312 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 322:
#line 1317 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 323:
#line 1322 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 324:
#line 1329 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 325:
#line 1332 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 326:
#line 1333 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 327:
#line 1339 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 328:
#line 1341 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 329:
#line 1361 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 330:
#line 1362 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 331:
#line 1364 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 332:
#line 1366 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 333:
#line 1367 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 334:
#line 1373 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 335:
#line 1380 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 336:
#line 1388 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 337:
#line 1396 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 338:
#line 1400 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 339:
#line 1404 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 340:
#line 1410 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 341:
#line 1414 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 342:
#line 1420 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 343:
#line 1424 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 344:
#line 1431 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 345:
#line 1440 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 346:
#line 1441 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 347:
#line 1447 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 348:
#line 1448 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 349:
#line 1452 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 350:
#line 1453 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 351:
#line 1458 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 352:
#line 1459 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 353:
#line 1460 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 354:
#line 1461 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 355:
#line 1462 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 356:
#line 1465 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 357:
#line 1466 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 358:
#line 1467 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1473 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 360:
#line 1474 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 361:
#line 1475 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 362:
#line 1477 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 363:
#line 1478 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 364:
#line 1479 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 365:
#line 1481 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 366:
#line 1482 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1483 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1484 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1486 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1487 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1488 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1489 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1490 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1491 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1492 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 376:
#line 1496 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 377:
#line 1497 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1498 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1499 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 380:
#line 1500 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 381:
#line 1501 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 382:
#line 1502 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1504 "msv.y"
