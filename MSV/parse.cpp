
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IF	258
#define	ELSE	259
#define	EMPTY	260
#define	AWAIT	261
#define	PROJECTION	262
#define	PBEGIN	263
#define	PEND	264
#define	POINTERNULL	265
#define	ARRAY	266
#define	STRUCT	267
#define	DOT	268
#define	UNION	269
#define	FOPEN	270
#define	FCLOSE	271
#define	FILEDECLARATION	272
#define	FGETS	273
#define	FPUTS	274
#define	FGETC	275
#define	FPUTC	276
#define	MORE	277
#define	DEFINE	278
#define	MY_TRUE	279
#define	MY_FALSE	280
#define	EXIST	281
#define	FRAME	282
#define	FOR	283
#define	WHILE	284
#define	DO	285
#define	TRUE	286
#define	FALSE	287
#define	REPEAT	288
#define	UNTIL	289
#define	DISPLAY	290
#define	SKIP	291
#define	THEN	292
#define	COMMA	293
#define	COLON	294
#define	INTDECLARATION	295
#define	STRDECLARATION	296
#define	POINTERDECLARATION	297
#define	CHARDECLARATION	298
#define	VOIDDECLARATION	299
#define	FLOATDECLARATION	300
#define	LISTDECLARATION	301
#define	OPEN_PAR	302
#define	CLOSE_PAR	303
#define	TIMES	304
#define	OPEN_BPAR	305
#define	CLOSE_BPAR	306
#define	OPEN_MPAR	307
#define	CLOSE_MPAR	308
#define	FUNCTION	309
#define	OVER	310
#define	CYLINDER	311
#define	OVEREP	312
#define	INTER_OR	313
#define	NON_DETERMINED	314
#define	SEND	315
#define	RECEIVE	316
#define	CHANNEL	317
#define	PUT	318
#define	GET	319
#define	ERROR_TOKEN	320
#define	PROCESS	321
#define	STRFUNCHEAD	322
#define	STRFUNCTAIL	323
#define	STRFUNCCAT	324
#define	STRFUNCCMP	325
#define	STRFUNCCPY	326
#define	STRFUNCLEN	327
#define	SIZEOF	328
#define	SYSTEM	329
#define	SWITCH	330
#define	BREAK	331
#define	CASE	332
#define	DEFAULT	333
#define	CEIL	334
#define	FLOOR	335
#define	ROUND	336
#define	SIN	337
#define	COS	338
#define	TAN	339
#define	ASIN	340
#define	ACOS	341
#define	ATAN	342
#define	SINH	343
#define	COSH	344
#define	TANH	345
#define	EXP	346
#define	LOG	347
#define	LOG10	348
#define	SQRT	349
#define	ATAN2	350
#define	POW	351
#define	ABS	352
#define	FABS	353
#define	LABS	354
#define	FMOD	355
#define	MODF	356
#define	LDEXP	357
#define	FREXP	358
#define	UNSIGNED	359
#define	SIGNED	360
#define	MALLOC	361
#define	FREE	362
#define	CHOP	363
#define	IMPLY	364
#define	PROPIMPLY	365
#define	IFF	366
#define	OR	367
#define	PARALLEL	368
#define	AND	369
#define	ASS_EQU	370
#define	UNITASSIGN	371
#define	CON	372
#define	ADDRESS	373
#define	NE	374
#define	EQU	375
#define	GE	376
#define	LE	377
#define	GT	378
#define	LT	379
#define	LST	380
#define	RST	381
#define	ADD	382
#define	SUB	383
#define	MUL	384
#define	DIV	385
#define	MOD	386
#define	BNE	387
#define	CHOPSTAR	388
#define	NEXT	389
#define	NEGATION	390
#define	LENGTH	391
#define	REQUEST	392
#define	FINAL	393
#define	KEEP	394
#define	ALWAYS	395
#define	HALT	396
#define	W_NEXT	397
#define	PREFIX	398
#define	PREVIOUS	399
#define	SOMETIMES	400
#define	ID	401
#define	STR	402
#define	STRUCT_TYPE	403
#define	INTEGER	404
#define	FLOATLITERAL	405
#define	CHARLITERAL	406

#line 1 "msv.y"

#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy
#include "parse.cpp.h"
#include "Symbol.h"
#include "SymbolTable.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     //2013-5-3 add by YY[fixed]

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

void yyerror( char *msg );

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 41 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An integer value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1337
#define	YYFLAG		-32768
#define	YYNTBASE	152

#define YYTRANSLATE(x) ((unsigned)(x) <= 406 ? yytranslate[x] : 235)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     4,     8,    12,    17,    19,    21,    23,    25,    27,
    29,    34,    39,    44,    49,    58,    60,    62,    64,    69,
    71,    73,    75,    77,    82,    86,    94,   104,   111,   117,
   127,   136,   146,   148,   153,   158,   160,   168,   172,   174,
   175,   176,   180,   184,   185,   188,   190,   193,   197,   201,
   205,   210,   216,   217,   221,   226,   232,   237,   243,   248,
   249,   253,   257,   267,   269,   271,   272,   274,   275,   279,
   281,   282,   288,   296,   304,   311,   314,   316,   317,   321,
   325,   328,   334,   337,   338,   342,   345,   350,   353,   356,
   358,   362,   365,   368,   370,   373,   376,   380,   384,   388,
   392,   395,   398,   406,   415,   427,   441,   448,   456,   457,
   460,   463,   470,   475,   480,   486,   492,   501,   510,   513,
   516,   519,   523,   526,   528,   532,   536,   542,   545,   546,
   548,   552,   554,   557,   560,   562,   564,   566,   568,   570,
   572,   576,   578,   580,   582,   584,   586,   588,   593,   598,
   603,   609,   615,   621,   627,   633,   640,   646,   652,   659,
   665,   672,   680,   687,   694,   702,   709,   716,   722,   730,
   737,   739,   743,   745,   750,   755,   760,   765,   770,   772,
   775,   778,   781,   785,   789,   793,   796,   799,   802,   805,
   808,   811,   814,   817,   820,   823,   826,   829,   832,   835,
   838,   841,   844,   851,   858,   865,   872,   879,   882,   885,
   888,   894,   906,   919,   931,   943,   956,   960,   965,   968,
   971,   974,   982,   989,   994,   998,  1003,  1008,  1010,  1012,
  1015,  1021,  1022,  1025,  1029,  1031,  1033,  1035,  1037,  1041,
  1044,  1046,  1048,  1050,  1052,  1054,  1056,  1067,  1071,  1073,
  1078,  1082,  1084,  1086,  1090,  1092,  1096,  1100,  1104,  1108,
  1112,  1116,  1120,  1124,  1128,  1132,  1135,  1139,  1143,  1147,
  1151,  1153,  1155,  1157,  1161,  1164,  1168,  1173,  1179,  1184,
  1188,  1193,  1199,  1204,  1207,  1211,  1216,  1219,  1223,  1228,
  1233,  1239,  1246,  1255,  1263,  1268,  1272,  1278,  1287,  1288,
  1293,  1297,  1302,  1307,  1313,  1319,  1325,  1331,  1338,  1348,
  1349,  1357,  1367,  1376,  1382,  1387,  1390,  1397,  1406,  1411,
  1418,  1425,  1432,  1437,  1449,  1462,  1474,  1486,  1504,  1523,
  1541,  1560,  1580,  1599,  1617,  1636,  1654,  1656,  1658,  1660,
  1662,  1664,  1666,  1671,  1676,  1681,  1686,  1691,  1696,  1701,
  1706,  1713,  1718,  1723,  1728,  1735,  1739,  1743,  1748,  1752,
  1755,  1758,  1761,  1764,  1768,  1769,  1773,  1777,  1781,  1785,
  1788,  1791,  1796,  1801,  1808,  1815,  1822,  1827,  1829,  1831,
  1833,  1835,  1837,  1839,  1844,  1849,  1854,  1859,  1864,  1869,
  1874,  1879,  1883,  1887,  1891,  1895,  1898,  1902,  1909,  1912,
  1914,  1916,  1918,  1920,  1922,  1924,  1926,  1928,  1930,  1932,
  1934,  1936,  1938,  1940,  1942,  1944,  1946,  1948,  1950,  1952,
  1954,  1956,  1958,  1960,  1963,  1966,  1968,  1970,  1972,  1976,
  1978
};

static const short yyrhs[] = {   152,
   114,   152,     0,   152,   112,   152,     0,   152,   108,   152,
     0,   143,    47,   152,    48,     0,   197,     0,   175,     0,
   169,     0,   167,     0,   166,     0,   161,     0,   134,    47,
   152,    48,     0,   139,    47,   152,    48,     0,   140,    47,
   152,    48,     0,     6,    47,   203,    48,     0,    33,    50,
   152,    51,    34,    47,   203,    48,     0,    36,     0,     5,
     0,    22,     0,   136,    47,   182,    48,     0,   159,     0,
   157,     0,    31,     0,    32,     0,   138,    47,   152,    48,
     0,   152,   113,   152,     0,    47,   156,    48,   109,    52,
   152,    53,     0,    27,    47,   232,   155,    48,   114,    47,
   152,    48,     0,    50,   152,   154,    51,     7,   171,     0,
    50,   152,    51,     7,   171,     0,    23,   146,    47,   205,
    48,   115,    50,   153,    51,     0,    54,   146,    47,   205,
    48,    50,   152,    51,     0,    66,   146,    47,   205,    48,
   115,    50,   153,    51,     0,   172,     0,   107,    47,   232,
    48,     0,    74,    47,   219,    48,     0,   195,     0,    26,
   232,   206,    39,    50,   152,    51,     0,    47,   152,    48,
     0,   152,     0,     0,     0,    38,   152,   154,     0,    38,
   232,   155,     0,     0,    38,     1,     0,   204,     0,   135,
   156,     0,   156,   114,   156,     0,   156,   112,   156,     0,
    47,   156,    48,     0,    35,    47,   200,    48,     0,    35,
    47,   200,   158,    48,     0,     0,    38,   200,   158,     0,
   137,    47,   232,    48,     0,   137,    47,   232,   160,    48,
     0,   137,    47,   192,    48,     0,   137,    47,   192,   160,
    48,     0,   137,    47,   210,    48,     0,     0,    38,   232,
   160,     0,    38,   192,   160,     0,    28,    47,   162,   108,
   163,   108,   165,    48,   171,     0,   197,     0,   176,     0,
     0,   164,     0,     0,   182,   228,   182,     0,   197,     0,
     0,    28,   182,    49,    30,   171,     0,    75,    47,   185,
    48,    50,     0,    51,     0,    77,   185,    39,    47,   152,
    48,     0,     0,    78,    39,    47,   152,    48,     0,     0,
    76,     0,     0,     0,     0,     0,    29,   168,   171,     0,
    47,   203,    48,     0,     1,    48,     0,     3,   203,    37,
   171,   170,     0,     4,   171,     0,     0,    50,   152,    51,
     0,     1,    51,     0,   173,    50,   174,    51,     0,    12,
   146,     0,    14,   146,     0,   175,     0,   175,   114,   174,
     0,   105,   176,     0,   104,   176,     0,   176,     0,   225,
   179,     0,   148,   179,     0,    12,   146,   179,     0,    14,
   146,   179,     0,    12,   148,   179,     0,    14,   148,   179,
     0,    42,   205,     0,    46,   177,     0,    47,   129,   232,
    48,    47,   205,    48,     0,    47,   129,   129,   232,    48,
    47,   205,    48,     0,    47,   129,   146,    52,   182,   181,
    53,    48,    47,   205,    48,     0,    47,   129,   146,    52,
   182,   181,    53,    48,    47,   205,    48,   115,   202,     0,
   146,    52,   182,   181,    53,   178,     0,    38,   146,    52,
   182,   181,    53,   178,     0,     0,    38,     1,     0,   232,
   180,     0,   146,    52,   182,   181,    53,   180,     0,   232,
   115,   200,   180,     0,   232,   115,   234,   180,     0,   146,
    11,   115,   202,   180,     0,   146,    11,   115,   234,   180,
     0,   146,    52,   182,   181,    53,   115,   202,   180,     0,
   146,    52,   182,   181,    53,   115,   234,   180,     0,   129,
   179,     0,    38,   179,     0,    38,     1,     0,    38,   182,
   181,     0,    38,     1,     0,   184,     0,   184,   228,   182,
     0,   182,   227,   184,     0,     3,   203,    37,   182,   183,
     0,     4,   182,     0,     0,   185,     0,   184,   226,   185,
     0,   233,     0,   128,   185,     0,   132,   185,     0,    10,
     0,   230,     0,   232,     0,   192,     0,   193,     0,   194,
     0,    47,   182,    48,     0,   191,     0,   231,     0,   211,
     0,   186,     0,   210,     0,   189,     0,    47,    40,    48,
   187,     0,    47,    45,    48,   187,     0,    47,    43,    48,
   187,     0,    47,   105,    40,    48,   187,     0,    47,   105,
    43,    48,   187,     0,    47,   104,    40,    48,   187,     0,
    47,   104,    43,    48,   187,     0,    47,    40,   129,    48,
   188,     0,    47,   104,    40,   129,    48,   188,     0,    47,
    45,   129,    48,   188,     0,    47,    43,   129,    48,   188,
     0,    47,   104,    43,   129,    48,   188,     0,    47,    44,
   129,    48,   188,     0,    47,    40,   129,   129,    48,   188,
     0,    47,   104,    40,   129,   129,    48,   188,     0,    47,
    45,   129,   129,    48,   188,     0,    47,    43,   129,   129,
    48,   188,     0,    47,   104,    43,   129,   129,    48,   188,
     0,    47,    44,   129,   129,    48,   188,     0,    47,    12,
   148,   129,    48,   188,     0,    47,   148,   129,    48,   188,
     0,    47,    12,   148,   129,   129,    48,   188,     0,    47,
   148,   129,   129,    48,   188,     0,   184,     0,   184,   227,
   184,     0,   187,     0,   106,    47,   182,    48,     0,    73,
    47,   182,    48,     0,    73,    47,   190,    48,     0,    73,
    47,   148,    48,     0,    73,    47,   234,    48,     0,   224,
     0,    40,   129,     0,    45,   129,     0,    43,   129,     0,
   104,    40,   129,     0,   104,    43,   129,     0,    12,   148,
   129,     0,   148,   129,     0,    81,   182,     0,    79,   182,
     0,    80,   182,     0,    82,   182,     0,    83,   182,     0,
    84,   182,     0,    85,   182,     0,    86,   182,     0,    87,
   182,     0,    88,   182,     0,    89,   182,     0,    90,   182,
     0,    91,   182,     0,    92,   182,     0,    93,   182,     0,
    94,   182,     0,    95,    47,   182,    38,   182,    48,     0,
    96,    47,   182,    38,   182,    48,     0,   100,    47,   182,
    38,   182,    48,     0,   101,    47,   182,    38,   182,    48,
     0,   102,    47,   182,    38,   182,    48,     0,    97,   182,
     0,    98,   182,     0,    99,   182,     0,   146,    52,   182,
   181,    53,     0,    47,    47,    40,   129,    48,   146,    48,
    52,   182,   181,    53,     0,    47,    47,   104,    40,   129,
    48,   146,    48,    52,   182,   181,    53,     0,    47,    47,
    45,   129,    48,   146,    48,    52,   182,   181,    53,     0,
    47,    47,    43,   129,    48,   146,    48,    52,   182,   181,
    53,     0,    47,    47,   104,    43,   129,    48,   146,    48,
    52,   182,   181,    53,     0,    47,   192,    48,     0,   144,
    47,   232,    48,     0,   129,   232,     0,   129,   194,     0,
   129,   192,     0,    47,   194,    48,    52,   182,   181,    53,
     0,   129,    47,   224,   129,    48,   182,     0,   129,    47,
   182,    48,     0,    47,   194,    48,     0,   146,    47,   196,
    48,     0,   192,    47,   196,    48,     0,   207,     0,   209,
     0,   200,   223,     0,   146,    47,   196,    48,   223,     0,
     0,   118,     1,     0,   198,   199,   200,     0,   232,     0,
   210,     0,   192,     0,   194,     0,    47,   198,    48,     0,
   134,   198,     0,   208,     0,   115,     0,   116,     0,   202,
     0,   234,     0,   203,     0,    47,   234,    48,    47,   225,
    48,    47,   205,    48,   195,     0,    47,   200,    48,     0,
   201,     0,   129,    47,   208,    48,     0,   202,   117,   202,
     0,   220,     0,   221,     0,    47,   202,    48,     0,   204,
     0,   182,   120,   234,     0,   182,   119,   234,     0,   234,
   120,   182,     0,   234,   119,   182,     0,   182,   120,    10,
     0,   182,   119,    10,     0,    10,   120,   182,     0,    10,
   119,   182,     0,   182,   120,   231,     0,   182,   119,   231,
     0,   135,   203,     0,   203,   114,   203,     0,   203,   112,
   203,     0,    47,   203,    48,     0,   182,   228,   182,     0,
    24,     0,    25,     0,   182,     0,   224,   232,   206,     0,
   224,   206,     0,   148,   232,   206,     0,   148,   129,   232,
   206,     0,   148,   129,   129,   232,   206,     0,   148,   232,
    11,   206,     0,   146,   232,   206,     0,   146,   129,   232,
   206,     0,   146,   129,   129,   232,   206,     0,   146,   232,
    11,   206,     0,   148,   206,     0,   148,   129,   206,     0,
   148,   129,   129,   206,     0,   146,   206,     0,   146,   129,
   206,     0,   146,   129,   129,   206,     0,   224,   232,    11,
   206,     0,   224,   129,   232,    11,   206,     0,   224,   232,
    52,   182,    53,   206,     0,   224,   232,    52,   182,    38,
   182,    53,   206,     0,   224,   232,    11,    52,   182,    53,
   206,     0,   224,   129,   232,   206,     0,   224,   129,   206,
     0,   224,   129,   129,   232,   206,     0,    47,   129,   232,
    48,    47,   205,    48,   206,     0,     0,    38,   224,   232,
   206,     0,    38,   224,   206,     0,    38,   146,   232,   206,
     0,    38,   148,   232,   206,     0,    38,   148,   129,   232,
   206,     0,    38,   146,   232,    11,   206,     0,    38,   148,
   232,    11,   206,     0,    38,   224,   232,    11,   206,     0,
    38,   224,   129,   232,    11,   206,     0,    38,    47,   129,
   232,    48,    47,   205,    48,   206,     0,     0,    38,   224,
   232,    52,   182,    53,   206,     0,    38,   224,   232,    52,
   182,    38,   182,    53,   206,     0,    38,   224,   232,    11,
    52,   182,    53,   206,     0,    38,   224,   129,   232,   206,
     0,    38,   224,   129,   206,     0,    38,     1,     0,    15,
    47,   198,    38,   234,    48,     0,    18,    47,   232,    38,
   233,    38,   232,    48,     0,    20,    47,   232,    48,     0,
    19,    47,   232,    38,   232,    48,     0,    21,    47,   232,
    38,   232,    48,     0,    21,    47,   192,    38,   232,    48,
     0,    16,    47,   232,    48,     0,    47,    47,    43,   129,
    48,   149,    48,    52,   182,   181,    53,     0,    47,    47,
   104,    43,   129,    48,   149,    48,    52,   182,   181,    53,
     0,    47,    47,    40,   129,    48,   149,    48,    52,   182,
   181,    53,     0,    47,    47,    45,   129,    48,   149,    48,
    52,   182,   181,    53,     0,    47,    47,    43,   129,    48,
    47,    47,    43,   129,    48,   149,    48,    48,    52,   182,
   181,    53,     0,    47,    47,    43,   129,    48,    47,    47,
   104,    43,   129,    48,   149,    48,    48,    52,   182,   181,
    53,     0,    47,    47,    43,   129,    48,    47,    47,    40,
   129,    48,   149,    48,    48,    52,   182,   181,    53,     0,
    47,    47,   104,    43,   129,    48,    47,    47,    43,   129,
    48,   149,    48,    48,    52,   182,   181,    53,     0,    47,
    47,   104,    43,   129,    48,    47,    47,   104,    43,   129,
    48,   149,    48,    48,    52,   182,   181,    53,     0,    47,
    47,   104,    43,   129,    48,    47,    47,    40,   129,    48,
   149,    48,    48,    52,   182,   181,    53,     0,    47,    47,
    40,   129,    48,    47,    47,    43,   129,    48,   149,    48,
    48,    52,   182,   181,    53,     0,    47,    47,    40,   129,
    48,    47,    47,   104,    43,   129,    48,   149,    48,    48,
    52,   182,   181,    53,     0,    47,    47,    40,   129,    48,
    47,    47,    40,   129,    48,   149,    48,    48,    52,   182,
   181,    53,     0,   213,     0,   214,     0,   215,     0,   216,
     0,   217,     0,   218,     0,   232,    13,   232,   212,     0,
   192,    13,   232,   212,     0,   194,    13,   232,   212,     0,
   232,    13,   192,   212,     0,   192,    13,   192,   212,     0,
   194,    13,   192,   212,     0,   232,   109,   232,   212,     0,
   192,   109,   232,   212,     0,    47,   211,    48,   109,   232,
   212,     0,   194,   109,   232,   212,     0,   232,   109,   192,
   212,     0,   192,   109,   192,   212,     0,    47,   211,    48,
   109,   192,   212,     0,   232,    13,   195,     0,   232,   109,
   195,     0,   194,   109,   192,   212,     0,    47,   210,    48,
     0,   118,   232,     0,   118,   192,     0,   118,   210,     0,
   118,   211,     0,    47,   211,    48,     0,     0,    13,   232,
   212,     0,    13,   192,   212,     0,   109,   232,   212,     0,
   109,   192,   212,     0,    13,   195,     0,   109,   195,     0,
    67,    47,   219,    48,     0,    68,    47,   219,    48,     0,
    69,    47,   219,    38,   219,    48,     0,    71,    47,   219,
    38,   219,    48,     0,    70,    47,   219,    38,   219,    48,
     0,    72,    47,   219,    48,     0,   232,     0,   192,     0,
   194,     0,   234,     0,   209,     0,   210,     0,    52,   182,
   222,    53,     0,    52,   234,   222,    53,     0,    52,   231,
   222,    53,     0,    52,   202,   222,    53,     0,    50,   182,
   222,    51,     0,    50,   234,   222,    51,     0,    50,   231,
   222,    51,     0,    50,   202,   222,    51,     0,    38,   182,
   222,     0,    38,   234,   222,     0,    38,   231,   222,     0,
    38,   202,   222,     0,    38,     1,     0,    38,   200,   223,
     0,    38,   146,    47,   196,    48,   223,     0,    38,     1,
     0,   229,     0,   225,     0,    40,     0,    45,     0,    43,
     0,    41,     0,    44,     0,    17,     0,   129,     0,   130,
     0,   131,     0,   125,     0,   126,     0,   118,     0,    58,
     0,   117,     0,   127,     0,   128,     0,   121,     0,   122,
     0,   119,     0,   123,     0,   124,     0,   120,     0,   104,
    40,     0,   104,    43,     0,   150,     0,   151,     0,   146,
     0,    47,   232,    48,     0,   149,     0,   147,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   155,   156,   157,   261,   262,   264,   266,   267,   268,   269,
   270,   273,   274,   277,   278,   282,   283,   284,   285,   291,
   292,   293,   294,   295,   296,   298,   301,   306,   311,   318,
   325,   329,   333,   335,   339,   344,   346,   360,   366,   367,
   370,   371,   377,   381,   382,   385,   395,   396,   398,   400,
   403,   404,   407,   408,   411,   412,   413,   414,   415,   418,
   419,   420,   423,   431,   435,   439,   445,   449,   455,   459,
   463,   469,   478,   482,   486,   493,   495,   496,   500,   503,
   505,   509,   516,   517,   520,   522,   526,   534,   545,   559,
   563,   570,   571,   572,   576,   580,   584,   588,   592,   596,
   600,   604,   609,   614,   619,   624,   635,   641,   645,   646,
   650,   654,   658,   663,   668,   674,   679,   686,   692,   701,
   703,   707,   709,   714,   715,   716,   717,   723,   724,   727,
   728,   732,   733,   734,   735,   736,   738,   739,   740,   741,
   743,   744,   745,   746,   747,   748,   749,   754,   758,   762,
   768,   772,   777,   781,   787,   791,   795,   799,   803,   807,
   813,   817,   821,   825,   829,   833,   838,   842,   847,   851,
   857,   858,   864,   865,   868,   869,   870,   871,   874,   875,
   876,   877,   878,   879,   880,   881,   886,   887,   888,   890,
   891,   892,   893,   894,   895,   896,   897,   898,   899,   900,
   901,   902,   904,   905,   906,   907,   908,   909,   910,   911,
   914,   915,   917,   919,   921,   923,   925,   928,   935,   936,
   937,   939,   941,   943,   945,   951,   956,   961,   962,   966,
   971,   977,   978,   982,   986,   987,   988,   989,   990,   991,
   992,   995,   996,   999,  1001,  1002,  1005,  1009,  1010,  1013,
  1016,  1017,  1018,  1019,  1022,  1024,  1025,  1027,  1028,  1030,
  1031,  1033,  1034,  1037,  1038,  1039,  1040,  1041,  1042,  1045,
  1049,  1050,  1054,  1061,  1065,  1069,  1075,  1081,  1087,  1093,
  1099,  1105,  1111,  1117,  1121,  1125,  1129,  1133,  1137,  1141,
  1147,  1154,  1161,  1168,  1174,  1180,  1184,  1191,  1197,  1200,
  1204,  1208,  1214,  1220,  1226,  1232,  1238,  1244,  1257,  1263,
  1265,  1272,  1279,  1285,  1291,  1295,  1299,  1301,  1303,  1305,
  1307,  1309,  1311,  1315,  1317,  1319,  1321,  1323,  1325,  1327,
  1329,  1331,  1333,  1335,  1337,  1339,  1344,  1345,  1346,  1347,
  1348,  1349,  1352,  1356,  1360,  1364,  1368,  1372,  1376,  1380,
  1384,  1388,  1392,  1396,  1400,  1404,  1408,  1412,  1416,  1419,
  1423,  1427,  1432,  1436,  1439,  1440,  1444,  1448,  1452,  1456,
  1460,  1466,  1472,  1478,  1484,  1490,  1496,  1502,  1503,  1504,
  1505,  1506,  1507,  1511,  1515,  1519,  1523,  1534,  1538,  1542,
  1546,  1557,  1561,  1565,  1569,  1574,  1577,  1581,  1592,  1596,
  1597,  1600,  1601,  1602,  1603,  1604,  1605,  1608,  1609,  1610,
  1611,  1612,  1613,  1614,  1615,  1618,  1619,  1622,  1623,  1624,
  1625,  1626,  1628,  1632,  1633,  1636,  1639,  1642,  1643,  1646,
  1649
};

static const char * const yytname[] = {   "$","error","$undefined.","IF","ELSE",
"EMPTY","AWAIT","PROJECTION","PBEGIN","PEND","POINTERNULL","ARRAY","STRUCT",
"DOT","UNION","FOPEN","FCLOSE","FILEDECLARATION","FGETS","FPUTS","FGETC","FPUTC",
"MORE","DEFINE","MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE",
"FALSE","REPEAT","UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION",
"STRDECLARATION","POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","CHANNEL","PUT","GET","ERROR_TOKEN","PROCESS","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","SIZEOF","SYSTEM",
"SWITCH","BREAK","CASE","DEFAULT","CEIL","FLOOR","ROUND","SIN","COS","TAN","ASIN",
"ACOS","ATAN","SINH","COSH","TANH","EXP","LOG","LOG10","SQRT","ATAN2","POW",
"ABS","FABS","LABS","FMOD","MODF","LDEXP","FREXP","UNSIGNED","SIGNED","MALLOC",
"FREE","CHOP","IMPLY","PROPIMPLY","IFF","OR","PARALLEL","AND","ASS_EQU","UNITASSIGN",
"CON","ADDRESS","NE","EQU","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","PREVIOUS","SOMETIMES","ID","STR","STRUCT_TYPE",
"INTEGER","FLOATLITERAL","CHARLITERAL","statement","empty_statement","optional_projection",
"optional_frame_identifier","imply_pre","display_statement","option_output",
"request_statement","option_input","extend_for_statement","for_sta_init","for_sta_condition",
"pbool_expression","for_sta_control","for_statement","while_statement","bool_par",
"if_statement","optional_else_statement","big_par","struct_define_statement",
"struct_identifier","option_struct_declaration","sign_declaration","declaration",
"option_array_declaration","inner_option_array_declaration","option_identifier_array_declaration",
"inner_option_identifier_array_declaration","option_alg_exp","alg_exp","optional_exp_else_statement",
"simple_alg_exp","factor","type_cast","type_cast_alg_exp","casted_element","size_of",
"all_sizeof_type","Float_Function","list","pre_next","value_exp","function",
"option_function_identifier","ass_statement","ass_ident","assign_operator","ass_exp",
"rightaddrshift","list_exp","bool_statement","prime_bool_statement","option_function_parameter_list",
"inner_optional_define_identifier","file_statement","leftaddrshift","String_Function",
"struct_member_exp","address_exp","option_struct_member_exp","String_Function_head",
"String_Function_tail","String_Function_cat","String_Function_cpy","String_Function_cmp",
"String_Function_len","str_func_parameter","option_list_value","option_struct_list_value",
"inner_option_list_value","inner_option_function_identifier","all_type_define",
"type_define","mul_operator","alg_operator","relation_operator","sign_type_define",
"floatliteral","charliteral","identifier","integer","string","identifier"
};
#endif

static const short yyr1[] = {     0,
   152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   153,   153,
   154,   154,   155,   155,   155,   156,   156,   156,   156,   156,
   157,   157,   158,   158,   159,   159,   159,   159,   159,   160,
   160,   160,   161,   162,   162,   162,   163,   163,   164,   165,
   165,   166,    -1,    -1,    -1,    -1,    -1,    -1,   167,   168,
   168,   169,   170,   170,   171,   171,   172,   173,   173,   174,
   174,   175,   175,   175,   176,   176,   176,   176,   176,   176,
   176,   176,   176,   176,   176,   176,   177,   178,   178,   178,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   180,
   180,   181,   181,   182,   182,   182,   182,   183,   183,   184,
   184,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   185,   185,   185,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,   186,
   187,   187,   188,   188,   189,   189,   189,   189,   190,   190,
   190,   190,   190,   190,   190,   190,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   192,   192,   192,   192,   192,   192,   192,   193,   194,   194,
   194,   194,   194,   194,   194,   195,   195,   195,   195,   196,
   196,   196,   196,   197,   198,   198,   198,   198,   198,   198,
   198,   199,   199,   200,   200,   200,   200,   200,   200,   201,
   202,   202,   202,   202,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   204,
   204,   204,   204,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   206,
   206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
   206,   206,   206,   206,   206,   206,   207,   207,   207,   207,
   207,   207,   207,   208,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   208,   208,   208,   209,   209,   209,   209,
   209,   209,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   211,
   211,   211,   211,   211,   212,   212,   212,   212,   212,   212,
   212,   213,   214,   215,   216,   217,   218,   219,   219,   219,
   219,   219,   219,   220,   220,   220,   220,   221,   221,   221,
   221,   222,   222,   222,   222,   222,   223,   223,   223,   224,
   224,   225,   225,   225,   225,   225,   225,   226,   226,   226,
   226,   226,   226,   226,   226,   227,   227,   228,   228,   228,
   228,   228,   228,   229,   229,   230,   231,   232,   232,   233,
   234
};

static const short yyr2[] = {     0,
     3,     3,     3,     4,     1,     1,     1,     1,     1,     1,
     4,     4,     4,     4,     8,     1,     1,     1,     4,     1,
     1,     1,     1,     4,     3,     7,     9,     6,     5,     9,
     8,     9,     1,     4,     4,     1,     7,     3,     1,     0,
     0,     3,     3,     0,     2,     1,     2,     3,     3,     3,
     4,     5,     0,     3,     4,     5,     4,     5,     4,     0,
     3,     3,     9,     1,     1,     0,     1,     0,     3,     1,
     0,     5,     7,     7,     6,     2,     1,     0,     3,     3,
     2,     5,     2,     0,     3,     2,     4,     2,     2,     1,
     3,     2,     2,     1,     2,     2,     3,     3,     3,     3,
     2,     2,     7,     8,    11,    13,     6,     7,     0,     2,
     2,     6,     4,     4,     5,     5,     8,     8,     2,     2,
     2,     3,     2,     1,     3,     3,     5,     2,     0,     1,
     3,     1,     2,     2,     1,     1,     1,     1,     1,     1,
     3,     1,     1,     1,     1,     1,     1,     4,     4,     4,
     5,     5,     5,     5,     5,     6,     5,     5,     6,     5,
     6,     7,     6,     6,     7,     6,     6,     5,     7,     6,
     1,     3,     1,     4,     4,     4,     4,     4,     1,     2,
     2,     2,     3,     3,     3,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     6,     6,     6,     6,     6,     2,     2,     2,
     5,    11,    12,    11,    11,    12,     3,     4,     2,     2,
     2,     7,     6,     4,     3,     4,     4,     1,     1,     2,
     5,     0,     2,     3,     1,     1,     1,     1,     3,     2,
     1,     1,     1,     1,     1,     1,    10,     3,     1,     4,
     3,     1,     1,     3,     1,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     2,     3,     3,     3,     3,
     1,     1,     1,     3,     2,     3,     4,     5,     4,     3,
     4,     5,     4,     2,     3,     4,     2,     3,     4,     4,
     5,     6,     8,     7,     4,     3,     5,     8,     0,     4,
     3,     4,     4,     5,     5,     5,     5,     6,     9,     0,
     7,     9,     8,     5,     4,     2,     6,     8,     4,     6,
     6,     6,     4,    11,    12,    11,    11,    17,    18,    17,
    18,    19,    18,    17,    18,    17,     1,     1,     1,     1,
     1,     1,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     6,     3,     3,     4,     3,     2,
     2,     2,     2,     3,     0,     3,     3,     3,     3,     2,
     2,     4,     4,     6,     6,     6,     4,     1,     1,     1,
     1,     1,     1,     4,     4,     4,     4,     4,     4,     4,
     4,     3,     3,     3,     3,     2,     3,     6,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     2,     1,     1,     1,     3,     1,
     1
};

static const short yydefact[] = {     0,
     0,    17,     0,     0,     0,     0,     0,   407,     0,     0,
     0,     0,    18,     0,     0,     0,     0,     0,    22,    23,
     0,     0,    16,   402,   405,   299,   404,   406,   403,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   428,     0,     0,    21,    20,    10,     9,     8,
     7,    33,     0,     6,    94,   237,   238,    36,     5,     0,
   228,   241,   229,   236,   337,   338,   339,   340,   341,   342,
     0,   235,     0,   135,   271,   272,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   428,   431,   430,
   426,   427,   273,   124,   130,   145,   147,   142,   138,   139,
   140,     0,   255,   146,   144,   136,   143,   137,   132,     0,
     0,    88,     0,    89,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   428,   310,     0,   135,    66,     0,     0,
     0,     0,     0,     0,     0,     0,   310,   310,   101,   310,
   401,   400,     0,   102,     0,     0,     0,     0,     0,     0,
   273,   138,   140,     0,    46,   146,   144,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    93,    92,     0,     0,   221,   220,   219,     0,     0,
   237,   240,     0,     0,     0,     0,     0,     0,   232,     0,
     0,   428,    96,     0,     0,     0,     0,     0,     0,     0,
   232,     0,     0,     0,   242,   243,     0,    95,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   273,   138,   140,     0,   146,   144,   137,     0,
     0,   188,   189,   187,   190,   191,   192,   193,   194,   195,
   196,   197,   198,   199,   200,   201,   202,     0,     0,   208,
   209,   210,     0,     0,     0,     0,   361,     0,   362,   363,
   360,   133,   134,   266,     0,   420,   423,   418,   419,   421,
   422,   416,   417,     0,     0,   414,   415,   413,   420,   423,
   411,   412,   408,   409,   410,     0,     0,     0,     0,     0,
     0,     0,     0,    97,    99,    98,   100,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   299,     0,     0,     0,
    44,     0,   402,   404,   406,   403,     0,     0,     0,    65,
     0,   138,    64,     0,    81,     0,     0,     0,    79,     0,
     0,     0,     0,     0,     0,   249,   244,   246,   252,   253,
   245,     0,   424,   425,   310,   287,   310,   310,   284,   310,
   310,   275,   310,     0,     0,     0,   402,   404,   403,     0,
     0,     0,   273,     0,   428,   219,     0,    47,    38,     0,
     0,     0,   217,   225,   239,   359,     0,   429,     0,     0,
     0,   299,   299,     0,   379,   380,   382,   383,     0,   378,
   381,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   237,   238,   236,     0,
   235,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   428,     0,     0,     0,   119,     0,     0,     0,     0,   111,
     3,     2,    25,     1,     0,    90,   365,   365,     0,   365,
   365,   365,   365,   365,   365,   234,   365,   356,   365,   365,
   357,   365,     0,   263,   262,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   141,   269,   364,     0,   402,   404,   403,     0,
     0,     0,     0,   179,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   261,   265,   257,
   260,   264,   256,   126,   270,   131,   125,    84,   268,   267,
   259,   258,    14,     0,     0,     0,     0,   323,     0,     0,
   319,     0,     0,     0,     0,     0,   316,     0,     0,     0,
   310,     0,     0,     0,     0,     0,     0,    68,     0,    80,
    86,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   143,     0,     0,     0,   143,     0,     0,     0,    51,
     0,     0,     0,   310,   288,   310,   310,   280,   310,   285,
   310,   310,   276,     0,   296,   310,   310,     0,   274,     0,
     0,     0,     0,     0,   402,   404,   402,   404,    50,   219,
     0,     0,     0,     0,     0,    49,    48,     0,     0,    41,
     0,     0,     0,     0,   372,   373,     0,     0,     0,   377,
    35,     0,   428,     0,    34,   224,     0,   402,   404,   403,
     0,    11,    19,     0,    57,     0,    59,    55,     0,    24,
    12,    13,     4,   233,   232,   226,     0,   230,     0,     0,
     0,     0,   121,   120,     0,     0,    87,     0,     0,     0,
   347,   344,   227,   354,   350,   348,   345,   358,   352,   346,
   343,   353,   349,   129,     0,   171,   148,     0,     0,   150,
     0,     0,     0,     0,   149,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   180,   182,   181,   424,   425,   177,   186,   175,   176,
   178,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   218,     0,    82,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   310,     0,   310,   310,   301,   310,
     0,    45,    44,     0,     0,     0,     0,     0,     0,     0,
     0,    67,     0,    72,    85,     0,   248,   254,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    53,    52,     0,   251,     0,   289,   310,   281,
   283,   286,   310,   277,   279,   310,   310,   295,     0,   290,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   299,
    50,     0,     0,   365,   365,    42,    29,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   402,
   404,    60,    60,    58,    56,     0,   399,   428,     0,   123,
     0,   211,     0,     0,     0,   113,   114,    91,   365,   370,
   365,   365,   371,   365,     0,   127,     0,     0,     0,     0,
   173,   155,     0,   158,     0,   160,     0,   157,     0,     0,
     0,     0,     0,   153,     0,     0,   154,     0,     0,   151,
   152,   168,     0,   185,   183,   184,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    83,     0,   317,     0,
   320,   322,   321,     0,     0,   310,   302,   310,   310,   303,
   315,   310,   310,     0,   300,     0,    43,     0,     0,     0,
    71,     0,     0,     0,   396,     0,     0,   143,     0,   388,
   391,   390,   389,   384,   387,   386,   385,     0,   250,    54,
   299,   282,   278,   297,   291,     0,     0,   310,   109,     0,
   428,   430,     0,   428,   430,   428,   430,     0,     0,   299,
     0,     0,     0,     0,   355,   351,    28,     0,     0,   374,
   376,   375,     0,   223,     0,     0,     0,     0,     0,    62,
    61,     0,   232,   397,   122,   115,   116,     0,   367,   366,
   369,   368,   128,   167,     0,   172,     0,   161,   164,   166,
   163,     0,   156,     0,   159,     0,   170,   203,   204,   205,
   206,   207,     0,     0,     0,     0,     0,    40,     0,   305,
   304,   306,   310,   314,     0,   307,     0,    37,     0,     0,
    70,    69,     0,     0,   392,   395,   394,   393,     0,   310,
     0,   292,     0,   107,     0,     0,     0,     0,     0,     0,
     0,     0,   428,     0,   428,   430,     0,   211,   103,    26,
   222,     0,    40,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   231,     0,     0,   112,   169,     0,
   162,   165,     0,   318,    39,     0,   299,   308,     0,     0,
   310,     0,     0,    15,     0,   310,   294,   310,   110,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   104,     0,    31,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   174,    30,     0,   310,     0,   311,    27,    63,   299,   298,
   293,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   299,    32,     0,     0,     0,     0,     0,     0,     0,   398,
   117,   118,   310,   313,   310,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   309,   312,     0,     0,   430,
   430,     0,   212,   326,   430,   430,     0,   215,   324,   214,
   327,     0,     0,     0,     0,     0,     0,   105,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   247,   109,     0,     0,   430,     0,     0,   430,   213,   430,
   430,     0,   216,   325,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   108,     0,     0,     0,
     0,     0,     0,     0,     0,   430,   106,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   336,   334,     0,   330,   328,     0,     0,     0,     0,   335,
   329,   333,   331,     0,   332,     0,     0
};

static const short yydefgoto[] = {   179,
  1096,   411,   564,   180,    56,   591,    57,   656,    58,   349,
   771,   772,  1040,    59,    60,   162,    61,   743,   538,    62,
    63,   465,    64,    65,   174,  1054,   455,   460,   670,   123,
   866,   124,   125,   126,   871,   872,   127,   513,   128,   129,
   130,   131,    68,   452,    69,    70,   237,   453,   366,   367,
   368,   133,   169,   340,    71,    72,    73,   134,   135,   681,
    75,    76,    77,    78,    79,    80,   419,   369,   370,   783,
   668,   170,    81,   316,   304,   305,   172,   136,   137,   138,
   139,   140
};

static const short yypact[] = {  6957,
  6369,-32768,    19,   138,   919,    59,    74,-32768,    89,   131,
   218,   281,-32768,  -124,     5,   295,  2227,    46,-32768,-32768,
     0,   315,-32768,-32768,-32768,   920,-32768,-32768,-32768,   228,
  3066,  6957,   283,   302,   445,   461,   468,   514,   546,   581,
   663,   843,   843,   685,   321,   335,   711,   725,   749,   757,
   788,   805,   503,   452,    25,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   646,-32768,-32768,    20,   234,-32768,-32768,   636,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   452,   251,  6369,   286,-32768,-32768,  3813,   867,  6676,  6676,
  6676,  6676,  6676,  6676,  6676,  6676,  6676,  6676,  6676,  6676,
  6676,  6676,  6676,  6676,   891,   902,  6676,  6676,  6676,   925,
   964,   970,   290,  8795,  8795,  6369,   983,   764,-32768,-32768,
-32768,-32768,  1493,  1595,-32768,-32768,-32768,-32768,   293,-32768,
   234,   854,-32768,-32768,-32768,-32768,-32768,   251,-32768,   851,
  6369,   452,   452,   452,   452,   387,     5,     5,     5,     5,
    63,   999,     5,-32768,  1022,     5,-32768,  3477,   861,  1005,
  6369,   524,  6957,  6162,   940,    22,    61,    88,-32768,   107,
-32768,-32768,  1023,-32768,  6369,  3215,   470,  6470,  1009,   536,
  1545,   323,   232,   192,-32768,   505,  1032,   342,  1020,  1048,
  1053,  1183,  1183,  1183,  1183,  1183,  1183,  1183,  1021,  1025,
   989,-32768,-32768,     5,  5943,-32768,-32768,-32768,  6818,   387,
   293,-32768,  6676,   476,  6957,  6957,  6957,  6957,  6268,  6676,
   452,    52,-32768,     1,  6957,  6957,  6957,  6957,   619,    63,
  6268,    63,    63,    63,-32768,-32768,  6162,-32768,  1610,  1610,
   863,  6676,  6676,   958,   -10,    21,   996,    23,  3925,   687,
   912,  1028,  1095,    76,   129,   908,  1103,  1114,   189,  4262,
  4822,  1010,  1010,  1010,  1010,  1010,  1010,  1010,  1010,  1010,
  1010,  1010,  1010,  1010,  1010,  1010,  1010,  6676,  6676,  1010,
  1010,  1010,  6676,  6676,  6676,   423,  1162,   234,-32768,-32768,
  1174,-32768,-32768,-32768,     5,     2,    11,-32768,-32768,-32768,
-32768,-32768,-32768,  8795,  6676,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  8795,  6676,   524,  6369,  6369,
  6676,  6676,   973,-32768,-32768,-32768,-32768,   280,  1150,  1155,
  1161,  1198,  1159,    70,  1226,  1245,   920,  1236,   793,  1250,
  1252,  1149,   -10,    21,   996,    23,  4598,   498,  1197,-32768,
   333,   415,-32768,  1287,-32768,  1015,  1277,  6957,-32768,  1227,
  3589,  6575,  6575,   509,   488,-32768,  1225,   892,-32768,-32768,
   851,     5,-32768,-32768,   110,-32768,   102,   145,-32768,   683,
   153,-32768,  1012,  6676,   982,  1177,    57,   254,   278,  1151,
  1470,  1092,  1274,   321,  1292,  1297,  4037,-32768,-32768,  1237,
  6470,  6470,-32768,  1296,-32768,-32768,  1241,-32768,  6957,  1344,
  1303,   920,   920,   423,   293,   234,-32768,-32768,  1319,   251,
-32768,  1322,  1337,  1339,  1340,  1331,  1334,   452,   452,   540,
  1338,  4934,   802,  1256,  3364,  1042,    75,   129,  1103,  1032,
   189,   900,   699,  1343,   753,  1112,  1135,  1173,  1260,    47,
   548,  1352,  1349,   482,-32768,  1273,  6676,    53,  6162,-32768,
  1219,  1278,  1278,-32768,  1353,  1298,   308,   308,  1366,   308,
   308,   308,   308,   308,   308,-32768,   326,-32768,   308,   326,
-32768,   308,  6676,  1010,  1010,  1286,  8795,   353,  8795,   385,
   398,  8795,   490,   518,   520,   576,  1141,   591,   620,  1371,
  1372,   642,-32768,-32768,  1241,  1265,  1295,  1304,  1306,  1146,
   644,   909,  1373,-32768,  1377,   529,   616,   649,   670,   675,
   710,    76,   129,  1103,  1114,   189,  1378,-32768,-32768,-32768,
-32768,-32768,-32768,  1144,  1010,-32768,  1010,  1432,  1323,-32768,
  1010,  1010,-32768,   695,    76,  1394,  1307,-32768,  1302,     5,
-32768,   275,  1407,     5,     5,  1408,-32768,  1328,     5,   543,
   163,  1410,    17,  1413,   545,  4710,   223,  6676,   524,-32768,
-32768,  1365,  1429,  3701,  1417,   206,   908,   745,  4374,   684,
   143,  1437,  1437,   684,   143,  1437,  1437,  6056,  6162,-32768,
  1428,  1097,  1433,    60,-32768,  1022,  1022,-32768,    60,-32768,
  1022,  1022,-32768,     5,-32768,   969,   265,  6676,-32768,   482,
  2756,   677,   680,   691,   693,   697,  1371,  1372,  1237,  1435,
  6676,  1441,  4149,  1184,  1440,  1384,-32768,  6676,    63,  1001,
   524,  1473,  1452,  1454,-32768,-32768,  1183,  1183,  1183,-32768,
-32768,     5,  1451,  1297,-32768,-32768,  1456,  1376,  1389,  1391,
  1556,-32768,-32768,    63,-32768,  1458,-32768,-32768,  1459,-32768,
-32768,-32768,-32768,-32768,  6268,-32768,  2408,-32768,  2909,  1468,
    68,   482,-32768,-32768,  1484,   291,-32768,   619,  1610,  1610,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    45,   698,  1341,-32768,  7028,  1475,-32768,
  7028,  1477,  7028,  1478,-32768,  7028,  1480,   714,   720,   722,
   693,   730,  8795,   737,  8795,   739,  8795,  8795,  7028,  1481,
  1405,-32768,-32768,-32768,  1411,  1419,-32768,-32768,-32768,-32768,
-32768,  6676,  6676,  6676,  6676,  6676,  1420,  1421,  1423,  1168,
-32768,   524,-32768,  1376,  1389,  1391,  1169,  1494,  1515,  1517,
  1518,  1519,  1457,     5,  1070,     5,  1088,    60,-32768,  1230,
  6957,-32768,  1252,  1461,   500,    57,   254,   278,  1191,   512,
  1471,-32768,  1545,-32768,-32768,  1529,-32768,-32768,  1531,  4486,
   206,  2576,  1530,  1532,  1533,  1538,  1527,  1537,  1539,  1540,
  5046,  1547,  1566,-32768,  1097,-32768,  1558,-32768,  1022,-32768,
-32768,-32768,  1022,-32768,-32768,  1022,  1022,-32768,  6676,-32768,
   204,  1553,  7121,  7214,  7307,   740,   742,  1561,   482,   920,
-32768,  6957,   482,   308,   308,-32768,-32768,   524,  1559,  1496,
  1571,  1575,  1576,  1435,  6676,  6676,  1584,  1585,  1586,  1506,
  1507,  1599,  1599,-32768,-32768,  1590,-32768,   571,  1349,-32768,
   482,-32768,   156,  1484,  1587,-32768,-32768,-32768,   326,-32768,
   308,   326,-32768,   308,  6676,-32768,  7028,  1591,  8795,  1597,
-32768,-32768,  7028,-32768,  7028,-32768,  7028,-32768,  7028,  7400,
  7493,  7586,   767,-32768,  7028,  1598,-32768,  7028,  1601,-32768,
-32768,-32768,  7028,-32768,-32768,-32768,   921,   928,   934,   946,
   951,  1602,  1603,  1604,  1506,  1525,-32768,  1507,-32768,     5,
-32768,-32768,-32768,  1605,  1608,  1022,-32768,  1022,  1022,-32768,
-32768,  1120,   334,  6676,-32768,  1381,-32768,  1600,   538,   697,
   387,  6676,  6369,  1492,-32768,   684,   143,  1437,  1437,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  5158,-32768,-32768,
   920,-32768,-32768,-32768,-32768,   632,  6676,  1022,  1620,  5270,
   431,  1611,  5382,   528,  1612,   560,  1613,  7679,  7772,   920,
  1609,  1622,  1443,  1621,-32768,-32768,-32768,  6957,  1626,-32768,
-32768,-32768,   482,  1010,    65,    78,  1089,  1635,  1636,-32768,
-32768,  1349,  6268,-32768,-32768,-32768,-32768,    93,-32768,-32768,
-32768,-32768,  1010,-32768,  7028,  1144,  6676,-32768,-32768,-32768,
-32768,  7865,-32768,  7028,-32768,  7028,-32768,-32768,-32768,-32768,
-32768,-32768,  1541,  1544,  1546,  1643,  1645,  6957,  1647,-32768,
-32768,-32768,  1022,-32768,  6676,-32768,   325,-32768,  6957,  1649,
-32768,  1010,  1224,  1650,-32768,-32768,-32768,-32768,  1654,  1022,
   754,-32768,    10,-32768,  5494,  1651,  1653,  5606,  1655,  1656,
  1657,  1658,   769,  5718,   977,  1674,  1675,  1679,-32768,-32768,
-32768,  1450,  6957,  1642,  1659,  1680,  1611,  1682,  1683,  1612,
  1684,  1613,  1589,   148,-32768,  1685,    68,-32768,-32768,   965,
-32768,-32768,  1592,-32768,  1202,  1686,   920,-32768,   808,  6676,
  1022,  1336,   524,-32768,  1689,  1022,-32768,  1022,-32768,  1678,
   782,   794,  1220,  6676,  6676,   796,   799,  1261,  6676,  6676,
  6676,  6676,  1687,  5830,  1688,  1690,-32768,  1694,-32768,  1699,
  1679,   215,  1076,  1697,  1704,  1705,  1674,  1349,   156,  1484,
-32768,-32768,  1706,  1022,   869,-32768,-32768,-32768,   920,-32768,
-32768,  6676,   815,   822,   824,   482,   482,   825,   845,   855,
   482,   482,   482,   482,  6676,   856,   857,  1284,  6676,  6676,
   920,-32768,  1623,  1629,  1712,  1630,  1631,  1718,  1096,-32768,
-32768,-32768,  1022,-32768,  1022,  1714,   482,  7958,  8051,   858,
  1711,  1713,  8144,  8237,   864,  1717,  1724,  1729,  1730,   482,
   872,   873,   876,   482,   482,  1723,  1733,  1736,  1660,  1737,
  1738,  1661,  1662,  1664,  1745,-32768,-32768,  1728,  1741,  1754,
  1755,  8330,-32768,-32768,  1756,  1757,  8423,-32768,-32768,-32768,
-32768,  1753,  8516,  8609,   879,  1758,  1760,  1693,  1665,  1666,
  1761,  1667,  1669,  1762,  1771,  1772,  1692,   132,   503,  1775,
-32768,  1620,  1776,  1777,  1778,  1779,  1780,  1781,-32768,  1782,
  1784,  8702,-32768,-32768,  1097,  1754,  1755,  1691,  1756,  1757,
  1695,  1696,  1698,  1785,   499,   764,-32768,  1783,  1786,  1789,
  1787,  1791,  1793,  1798,  1800,  1801,  1225,  1778,  1781,  1782,
  1784,  1707,  6676,  6676,  1802,  6676,  6676,  1805,  1806,  1807,
  1812,  1801,   482,   482,  6676,   482,   482,  6676,  6676,  6676,
  1809,  1770,  1811,   482,  1813,  1815,   482,   482,   482,  6676,
-32768,-32768,  1816,-32768,-32768,  1817,  1818,  1819,   482,-32768,
-32768,-32768,-32768,  1820,-32768,  1834,-32768
};

static const short yypgoto[] = {     3,
   780,  1235,  1115,  -125,-32768,  1082,-32768,  -439,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -153,-32768,
-32768,  1201,  -219,   -26,-32768,   628,   106,  -649,   382,   -17,
-32768,   297,   -83,-32768,  -318,  -592,-32768,-32768,-32768,   279,
-32768,  1831,  -235,  -224,  -150,   -12,-32768,  -109,-32768,  -333,
    14,    -8,  -317,   -24,-32768,  1293,  -152,  2006,   182,   227,
-32768,-32768,-32768,-32768,-32768,-32768,  -137,-32768,-32768,    96,
  -825,  -192,   -25,-32768,  1186,  -122,-32768,-32768,  -260,  1213,
  1335,   682
};


#define	YYLAST		8946


static const short yytable[] = {   159,
   171,   317,    55,   478,   481,   659,   469,   353,   359,   466,
  1109,   528,   434,   181,   132,   202,   203,   762,   184,   556,
   531,   152,   185,   994,  1336,   856,   857,   576,   581,   585,
   292,   293,   230,   212,   189,   529,   532,   487,   458,   417,
   417,   417,   417,   417,   417,   417,   160,   664,   865,   163,
   392,   153,   398,   673,   365,   422,   423,   424,   425,   426,
   427,   373,   456,   153,   374,   141,   231,   514,   489,   253,
   492,   262,   263,   264,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   230,   230,   280,
   281,   282,   161,   286,   633,   634,   241,   339,   339,   153,
   256,   582,   586,   457,   487,   146,   153,   153,   874,   334,
   876,  1075,   597,   878,   795,   459,   552,   362,   488,   363,
   147,   231,   403,   403,  1078,   339,   892,   476,   232,   294,
   458,   350,   225,   329,   153,   148,   226,   227,   228,   339,
   351,   233,   376,   379,   339,   382,   561,   339,   119,   490,
   154,   493,   122,   153,   323,  1110,   153,   119,   393,   223,
   181,   122,   154,   184,   113,   360,  1085,   185,   697,   185,
   700,   302,   303,   705,   356,    45,   404,   149,  1275,   171,
   782,   221,   339,   232,   232,   612,   238,   433,   385,   375,
   339,   153,   118,   458,  1135,   442,   184,   212,   222,   153,
   339,   239,   454,   996,   997,   154,   154,  1087,   118,   153,
  1076,   436,   187,  1077,   119,   118,   378,   446,   447,   448,
   449,   874,   878,  1079,   484,   485,  1080,   461,   462,   463,
   464,   253,   536,   154,   171,   381,   408,   234,   594,   405,
   576,   957,   512,   351,   233,   781,   233,   324,   325,   326,
   327,   575,   154,   778,  1173,   154,   958,  1174,   796,   592,
   516,   517,   256,   239,   150,   518,   519,   520,   258,   153,
   719,   624,   592,   599,  1004,   626,   627,  1276,    66,   404,
  1008,   604,  1009,   142,  1010,   143,  1011,   535,   874,   878,
   154,   758,  1013,  1136,   290,  1015,  1137,   240,   154,   537,
  1017,   489,   339,   541,   542,   230,   235,   236,   154,   182,
    66,   171,  1180,   171,   737,   546,   809,   738,  1175,   739,
   679,   552,   592,   206,   211,   492,   544,   151,   458,   351,
   302,   303,   539,   540,   546,   230,   286,   853,   679,   258,
   234,   156,   234,   253,   580,   584,  -238,  -238,  1088,   675,
   595,   770,   598,   600,   239,   603,   605,   258,   609,   240,
   572,   164,  1100,   202,   203,   254,   610,   205,   222,   231,
   403,   339,   231,   173,   577,  1013,  1015,  1101,   740,   393,
   503,   209,   613,   181,   181,  1035,   171,   171,   185,   408,
   440,   287,   185,   185,   884,   434,   887,   113,   890,   891,
   698,   232,   990,   991,   242,   243,   614,   113,    45,   321,
   322,   630,  1089,   210,   351,   774,   680,   181,    45,  1015,
   118,  1091,   184,  1092,   211,   118,   185,   230,   190,   335,
   258,   232,   701,   328,   680,   118,   352,  -237,  -237,   672,
   846,    66,   258,   860,   863,   703,   781,   191,   937,    45,
   240,   302,   303,   223,   182,   206,  -235,  -235,   466,   302,
   303,   781,   403,    45,   575,   694,   118,   525,   210,   521,
   415,   415,   415,   415,   415,   415,   415,   827,  1056,   793,
   118,   699,   220,   254,   417,   417,   417,   437,   211,  1181,
  1182,   192,   443,    66,    66,    66,    66,   624,   153,   831,
   832,   833,   972,    66,    66,    66,    66,   193,   467,   440,
   470,   472,   474,   702,   194,    45,   205,   477,   480,   669,
   210,   938,   414,   232,   357,   589,   704,   254,   258,  -237,
  -237,   546,   118,   324,   326,   590,   759,   706,   737,   254,
   113,   738,   258,   739,   153,  1275,   153,   867,   351,   219,
   773,    45,   406,   546,   220,   588,   253,   849,   153,   893,
   195,   351,   171,   674,   522,   487,   732,   489,   118,   798,
   433,   800,   801,   358,   802,  1059,   804,   805,   258,   220,
   221,   808,   810,   400,   153,  1005,   153,   577,   907,   153,
   811,   153,   196,   694,   665,   440,   874,   222,   394,   220,
   534,   874,   740,   819,    45,   393,   545,  1061,   302,   303,
   823,   220,   553,   258,   185,   395,   258,   993,   707,  -236,
  -236,   118,   220,   492,   202,   352,   567,   197,   929,  1015,
   199,   290,   200,  1049,  1015,     8,    66,    45,   713,   254,
   221,   874,   206,   222,  1276,   222,   708,   401,   709,   402,
   932,   851,  1067,   733,   118,   302,   303,   222,    24,    25,
    26,    27,    28,    29,    30,   201,   221,   715,   642,  1015,
   325,   756,   206,   765,   977,   254,   784,   785,   786,   787,
   788,   789,   790,   222,  1050,   643,   734,    66,   154,   719,
   222,   727,   522,   602,   682,   229,   684,   685,   686,   687,
   688,   689,   525,   690,   710,   691,   692,   735,   693,   198,
   254,   230,   736,   182,   897,   898,   899,   900,   901,   714,
   339,   782,    42,    43,   813,   525,   498,   814,   287,   499,
   917,   204,   920,   921,   744,   925,   654,   745,   815,   746,
   713,   544,   302,   303,   715,   867,   655,   258,   716,   737,
   235,   236,   738,  1139,   739,   258,   521,   213,   302,   303,
   258,   880,   351,   926,   936,   239,    54,   881,  1086,   882,
   720,   214,   728,   351,   952,   302,   303,   715,   953,  1143,
  1041,   954,   955,   696,   885,   696,   888,   968,   696,   969,
   654,   956,   779,   557,   171,   215,   302,   303,   747,   522,
   658,   302,   303,   216,   258,   699,  1108,   232,   702,     8,
   302,   303,   113,   740,  1012,   220,  1123,   983,   984,   707,
   220,   816,   545,    45,   973,   817,   868,   113,   210,   487,
   553,  1186,    24,    25,   217,    27,    28,    29,    45,   558,
   118,   489,   699,   487,   352,   371,   489,  1003,   702,   646,
   707,   218,   254,  1206,   199,   118,   200,   254,   883,     8,
  1144,   240,  1188,   321,   322,   886,   254,   889,   886,  1189,
   889,   715,  1193,   421,   421,   421,   421,   421,   421,   421,
   302,   303,    24,    25,    26,    27,    28,    29,    30,   201,
   318,  1030,  1194,  1031,  1032,   889,   166,  1034,  1036,   483,
   371,   254,   715,   487,   489,  1222,  1037,   824,  1044,   354,
  1153,  1227,   371,   260,  1042,   415,   415,   415,   371,  1233,
  1234,  1185,  1154,   715,  1158,   171,  1262,  1159,   302,   303,
   351,  1287,   842,  1052,   302,   303,     8,   278,   559,  1051,
   560,   515,   351,   699,   171,   351,  1043,   653,   279,  1148,
   702,   500,  1190,   699,   501,   504,   729,   859,   862,    24,
    25,   258,    27,    28,    29,   319,   165,   320,  1018,   321,
   322,   283,   258,   702,   319,  1019,   320,   530,   533,   807,
  1072,  1020,  1251,  1195,  1201,  1202,   889,   302,   303,  1090,
    54,   812,   889,  1021,   696,   302,   303,   696,  1022,   696,
   699,   702,   696,   319,  1235,   320,   339,   889,  1098,   696,
   284,   696,  1141,   696,   696,   696,   285,  1099,   611,   319,
   543,   320,   607,   166,  1125,  1107,   302,   303,   220,   295,
  1095,  1045,  1046,  1047,  1048,   302,   303,   351,   409,    66,
   351,  1102,   578,   583,   587,   337,   351,   302,   303,   339,
   975,   976,   355,   855,   302,   303,   399,   409,   254,   339,
   302,   303,   570,   608,   144,   167,   145,   168,   372,   254,
   410,   171,   302,   303,   384,  1095,  1146,   302,   303,   407,
   916,  1150,  1145,  1151,   319,   999,   320,  1000,  1001,   652,
  1002,   302,   303,   319,   412,   320,  1156,  1157,   919,   413,
    66,  1161,  1162,  1163,  1164,   486,   351,   339,   225,   696,
   696,   696,   226,   227,   228,  1176,   225,   430,  1177,  1184,
   226,   227,   228,   171,   491,   339,   319,   225,   320,   258,
  1033,   226,   227,   228,  1187,  1213,   302,   303,  1214,   619,
   676,   258,   503,   795,   258,   171,   362,  1200,   363,   225,
   406,  1204,  1205,   226,   227,   228,   502,   339,  1216,   660,
  1217,   505,   199,   696,   200,  1006,   428,     8,   143,   696,
   429,   696,   145,   696,   230,   696,   696,   696,   696,  1178,
   711,   696,   661,   712,   696,   725,   239,   547,   726,   696,
   615,    25,    26,   616,    28,    29,    30,   201,   549,  1215,
   971,   306,   548,   401,   974,   402,   551,   905,   905,   211,
   906,   908,    82,   296,   297,   298,   299,   300,   301,   225,
   662,   302,   303,   226,   227,   228,   254,   155,   748,   414,
   711,   821,   995,   930,  1081,   550,   258,  1082,   254,   258,
   923,   254,   225,   188,    82,   258,   226,   227,   228,    35,
    36,    37,    38,    39,    40,   578,    66,   208,    82,   711,
   307,   308,  1155,   554,   696,   696,   224,   339,   311,   312,
   371,  1104,   313,   314,   315,  1303,  1304,   573,  1306,  1307,
   225,   924,   555,   408,   226,   227,   228,  1314,   562,   563,
  1317,  1318,  1319,   224,   428,   401,   565,   402,    54,   259,
   711,   696,  1329,  1160,   568,   258,    66,   663,   696,   225,
   696,    45,   696,   226,   227,   228,   569,    66,   421,   421,
   421,   503,   142,   711,   565,   291,  1203,   571,   118,   119,
   226,   227,   228,   254,   225,   319,   254,   320,   226,   227,
   228,   592,   254,   621,   622,   625,   371,   628,   371,   629,
   631,    66,   854,   632,   224,   224,   224,   224,    82,   330,
   331,   332,   333,   336,  1074,   338,   635,   225,   341,   636,
   188,   226,   227,   228,   637,    82,   638,   639,   640,   377,
   380,   641,   383,  1147,   647,   645,   667,   671,   188,   396,
   657,   228,   309,   310,   298,   299,   300,   301,   306,   666,
   302,   303,   254,   677,   420,   420,   420,   420,   420,   420,
   420,   678,   721,   683,   695,   775,   431,   259,   717,   718,
   730,   441,    82,   722,   731,   741,   445,    82,    82,    82,
    82,  1038,   723,   224,   724,   742,   320,    82,    82,    82,
    82,   405,   468,   225,   471,   473,   475,   226,   227,   228,
   120,   479,   482,   119,   403,   753,   754,   307,   308,   761,
   764,   259,   776,   939,   777,   311,   312,   302,   303,   313,
   314,   315,   225,   259,   782,   794,   226,   227,   228,   828,
   797,   199,   818,   200,   696,   696,     8,   820,   225,   696,
   696,   822,   226,   227,   228,  1070,  1250,   402,   526,   829,
  1129,   830,   835,   836,   837,   844,   845,   527,     8,   617,
    25,    26,   618,    28,    29,    30,   201,   838,   696,   839,
   852,   458,   873,   696,   875,   877,   553,   879,   893,   696,
   696,    24,    25,   894,    27,    28,    29,  1191,  1192,   895,
   441,   909,  1196,  1197,  1198,  1199,   338,   896,   902,   903,
   225,   904,   910,   553,   226,   227,   228,   225,   696,   188,
   224,   226,   227,   228,   911,   912,   913,   199,  1219,   200,
    82,   914,     8,   259,   928,   933,   208,   934,   931,   944,
   940,  1232,   941,   942,   593,  1236,  1237,   596,   943,   945,
   601,   946,   947,   606,   949,   840,    25,    26,   841,    28,
    29,    30,   201,   589,   951,   959,   620,   970,   978,   259,
   979,   296,   297,   298,   299,   300,   301,    54,   980,   302,
   303,    82,   981,   982,     6,     7,   526,     9,    10,    11,
    12,   985,   986,   987,   988,   989,   654,   992,  1005,   998,
   224,   224,   644,  1007,   259,  1014,  1039,   188,  1016,  1023,
  1024,  1025,   306,  1026,  1028,  1029,   334,  1053,  1057,  1060,
  1062,  1068,   291,   309,   310,   298,   299,   300,   301,  1069,
   224,   302,   303,  1071,   371,  1073,    35,    36,    37,    38,
    39,    40,  1083,  1084,  1312,  1313,  1076,  1315,  1316,  1079,
  1093,  1081,  1094,  1097,  1131,  1323,  1103,  1105,  1326,  1327,
  1328,  1106,  1114,    54,  1115,  1132,  1119,  1120,  1121,  1122,
  1334,   307,   308,   309,   310,   298,   299,   300,   301,   311,
   312,  1126,  1127,   313,   314,   315,  1128,  1056,  1133,  1152,
  1059,  1061,  1138,   526,  1134,  1149,  1142,  1136,  1165,  1169,
  1171,  1170,     6,     7,  1123,     9,    10,    11,    12,  1172,
  1179,  1207,  1125,  1183,  1209,    53,   441,  1208,  1210,  1211,
  1212,  1218,   750,  1223,   338,  1224,   751,   752,  1140,  1228,
  1238,   755,   757,   760,  1248,   763,  1229,   224,   188,   224,
  1239,  1230,  1231,  1240,  1242,  1243,   259,  1247,  1241,  1244,
  1245,   259,  1246,  1252,    35,    36,    37,    38,    39,    40,
   259,  1253,  1254,  1256,  1257,  1259,   799,  1265,  1268,  1271,
  1263,   803,  1264,  1266,  1267,  1269,   806,  1270,  1272,  1273,
  1274,   231,  1321,  1278,  1279,  1280,  1281,  1282,  1283,  1284,
    67,  1285,  1292,  1337,  1293,   259,  1295,  1294,  1296,  1288,
  1298,   825,  1297,  1289,  1290,  1299,  1291,  1300,  1301,   420,
   420,   420,  1130,  1305,   834,  1302,  1308,  1309,  1310,  1311,
  1320,   183,    67,  1322,   826,  1324,   843,  1325,  1330,  1331,
  1332,  1333,  1335,  1249,   950,   207,    67,   927,   858,  1277,
   792,   869,     0,   749,     0,     0,     0,     0,     0,     0,
     0,   861,   864,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   255,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   288,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   915,     0,   918,     0,
   922,     0,     0,    82,     0,     0,    67,   224,     0,     0,
     0,     0,   224,     0,     0,     0,     0,     0,   183,     0,
     0,     0,   259,    67,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   259,     0,    74,   183,   207,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   416,   416,   416,   416,   416,   416,   416,     0,
     0,     0,     0,     0,    82,   255,   186,    74,     0,   438,
    67,     0,     0,     0,   288,    67,    67,    67,    67,     0,
     0,    74,     0,     0,     0,    67,    67,    67,    67,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   255,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   255,   257,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   523,     0,   289,     0,
     0,     0,  1027,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   224,     0,    82,     0,     0,     0,     0,     0,     0,
     0,    74,     0,     0,     0,     0,     0,     0,   438,     0,
   259,     0,     0,   186,     0,     0,     0,     0,    74,     0,
     0,     0,   259,     0,     0,   259,     0,   183,     0,     0,
     0,   186,     0,     0,     0,     0,     0,     0,    67,     0,
    82,   255,     0,     0,   207,     0,     0,   418,   418,   418,
   418,   418,   418,   418,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   439,    74,     0,     0,     0,   444,
    74,    74,    74,    74,   207,     0,     0,   255,     0,    83,
    74,    74,    74,    74,     0,     0,   157,     0,     0,    67,
    82,     0,     0,     0,   523,     0,     0,     0,     0,     0,
     0,    82,     0,     0,   257,     0,     0,     0,     0,     0,
     0,     0,   255,     0,     0,   183,   257,   259,     0,     0,
   259,     0,     0,   158,     0,     0,   259,     0,     0,     0,
   288,     0,     0,     0,     0,    82,     0,     0,     0,     0,
     0,   524,     0,     0,     0,     0,     0,     0,     0,    88,
     0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,     0,
     0,     0,     0,   439,     0,     0,   259,     0,     0,     0,
     0,     0,     0,     0,   113,     0,     0,     0,     0,     0,
     0,   523,   186,     0,   114,    45,     0,     0,   115,     0,
     0,     0,     0,    74,     0,     0,   257,     0,     0,     0,
   117,     0,   118,     0,   438,   120,   121,   122,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   183,     0,     0,     0,
     0,     0,   257,     0,   255,     0,     0,     0,   847,   255,
    83,     0,     0,     0,    74,     0,     0,    84,   255,   524,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    85,    86,     0,     0,     0,     0,   257,     0,     0,
   186,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   255,   361,   289,     0,   362,     0,   363,
     0,     0,     0,     0,     0,     0,     0,   416,   416,   416,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    88,     0,     0,     0,     0,     0,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   113,   524,     0,     0,     0,
     0,     0,     0,     0,     0,   114,   364,     0,     0,   115,
     0,     0,   116,     0,     0,     0,     0,     0,     0,   439,
     0,   117,     0,   848,   119,     0,   120,   121,   122,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   186,     0,     0,     0,     0,   935,     0,    83,   257,
     0,     0,     0,     0,   257,   157,     0,     0,     0,     0,
     0,    67,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   255,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   255,   579,     0,     0,   362,     0,   363,   257,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   418,   418,   418,     0,     0,     0,    88,     0,
     0,     0,    67,     0,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   113,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   114,    45,     0,     0,   115,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   117,
     0,   118,   119,     0,   120,   121,   122,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   357,     0,    83,     0,
     0,    67,     0,     0,     0,   157,    74,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   255,     0,
     0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
   255,     0,     0,   255,     0,     0,   257,     0,     0,     0,
     0,     0,   261,     0,     0,   358,     0,     0,    67,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    74,    88,     0,
     0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,    67,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    67,
     0,     0,     0,   113,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   114,    45,   255,     0,   115,   255,     0,
     0,     0,     0,     0,   255,     0,     0,     0,     0,   117,
     0,   118,     0,    67,   120,   121,   122,     0,     0,   850,
     0,    83,     0,     0,     0,     0,     0,     0,   157,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    74,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   257,   255,   261,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   257,     0,     0,   257,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    88,     0,    74,     0,     0,     0,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   113,     0,     0,     0,
     0,     0,     0,    74,     0,     0,   114,    45,     0,     0,
   115,     0,     0,     0,    74,     0,     0,     0,     0,     0,
     0,     0,   117,     0,   118,     0,     0,   120,   121,   122,
   257,     0,     0,   257,     0,     0,     0,     0,   175,   257,
     2,     3,     0,     0,     0,   157,     0,     4,    74,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    85,
    86,    15,    16,    17,    18,     0,    19,    20,    21,     0,
    22,    23,     0,     0,     0,    24,    25,    26,    27,    28,
    29,    30,   176,     0,     0,    32,     0,     0,     0,    33,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   257,
     0,    34,    35,    36,    37,    38,    39,    40,    88,    41,
     0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,     0,    42,
    43,     0,    44,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   113,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   114,   177,     0,     0,   115,     0,    46,
   178,    47,    48,    49,    50,    51,     0,     0,    52,   117,
     0,    53,     0,    54,   120,   121,   122,   175,     0,     2,
     3,     0,     0,     0,   157,     0,   386,     0,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    85,    86,
    15,    16,    17,    18,     0,    19,    20,    21,     0,    22,
    23,     0,     0,     0,   387,    25,    26,   388,   345,   389,
    30,   176,     0,     0,    32,     0,     0,     0,    33,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    34,    35,    36,    37,    38,    39,    40,    88,    41,     0,
     0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,     0,   390,   391,
     0,    44,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   113,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   114,   177,     0,     0,   115,     0,    46,   178,
    47,    48,    49,    50,    51,     0,     0,    52,   117,     0,
    53,     0,   348,   120,   121,   122,   175,     0,     2,     3,
     0,     0,     0,   157,     0,     4,     0,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    85,    86,    15,
    16,    17,    18,     0,    19,    20,    21,     0,    22,    23,
     0,     0,     0,   648,    25,    26,   649,    28,   650,    30,
   176,     0,     0,    32,     0,     0,     0,    33,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    34,
    35,    36,    37,    38,    39,    40,    88,    41,     0,     0,
     0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,     0,   651,    43,     0,
    44,     0,     0,     0,     0,     0,     0,     0,     0,    83,
     0,   113,     0,     0,     0,     0,   157,     0,   342,     0,
   200,   114,   177,     8,     0,   115,     0,    46,   178,    47,
    48,    49,    50,    51,     0,     0,    52,   117,     0,    53,
     0,    54,   120,   121,   122,     0,   343,    25,    26,   344,
   345,   346,    30,   347,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    88,
     0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,     0,
   250,   251,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    83,     0,     0,   113,     0,     0,     0,    84,     0,
   244,     0,     0,     0,   114,    45,     0,     0,   115,     0,
   210,     0,    85,    86,     0,     0,     0,     0,     0,     0,
   117,     0,   118,     0,   348,   120,   121,   122,   245,     0,
     0,   246,   247,   248,     0,   574,     0,     0,   362,     0,
   363,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    88,     0,     0,     0,     0,     0,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,     0,   250,   251,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    83,     0,     0,   113,     0,     0,     0,
    84,     0,   244,     0,     0,     0,   114,   364,     0,     0,
   115,     0,     0,   116,    85,    86,     0,     0,     0,     0,
     0,     0,   117,     0,   118,   119,   252,   120,   121,   122,
   494,     0,     0,   495,   247,   496,     0,   574,     0,     0,
   362,     0,   363,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    88,     0,     0,     0,     0,     0,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,     0,   497,   251,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    83,     0,     0,   113,     0,
     0,     0,    84,     0,   244,     0,     0,     0,   114,   364,
     0,     0,   115,     0,     0,   116,    85,    86,     0,     0,
     0,     0,     0,     0,   117,     0,   118,   119,   252,   120,
   121,   122,   245,     0,     0,   246,   247,   248,     0,   249,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    88,     0,     0,     0,     0,
     0,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,     0,   250,   251,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    83,     0,     0,
   113,     0,     0,     0,    84,     0,   244,     0,     0,     0,
   114,    45,     0,     0,   115,     0,     0,   116,    85,    86,
     0,     0,     0,     0,     0,     0,   117,     0,   118,   119,
   252,   120,   121,   122,   494,     0,     0,   495,   247,   496,
     0,   249,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    88,     0,     0,
     0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,     0,   497,   251,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    83,
     0,     0,   113,     0,     0,     0,   157,     0,   244,     0,
     0,     0,   114,    45,     0,     0,   115,     0,     0,   116,
    85,    86,     0,     0,     0,     0,     0,     0,   117,     0,
   118,   119,   252,   120,   121,   122,   245,     0,     0,   246,
   247,   248,     0,   623,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    88,
     0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,     0,
   250,   251,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    83,     0,     0,   113,     0,     0,     0,   157,     0,
   244,     0,     0,     0,   114,    45,     0,     0,   115,     0,
     0,   178,    85,    86,     0,     0,     0,     0,     0,     0,
   117,     0,   118,     0,   252,   120,   121,   122,   494,     0,
     0,   495,   247,   496,     0,   623,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    88,     0,     0,     0,     0,     0,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,     0,   497,   251,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    83,     0,   113,     0,     0,     0,
     0,   157,     0,   506,     0,     0,   114,    45,     8,     0,
   115,     0,     0,   178,     0,     0,     0,     0,     0,     0,
     0,     0,   117,     0,   118,     0,   252,   120,   121,   122,
     0,   507,    25,     0,   508,    28,   509,     0,   261,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    88,     0,     0,     0,     0,     0,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,     0,   510,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    83,     0,     0,   113,
     0,     0,     0,   157,     0,   244,     0,     0,     0,   114,
    45,     0,     0,   115,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   117,     0,   118,   119,   511,
   120,   121,   122,   245,     0,     0,   246,   247,   248,     0,
   780,     0,     0,   362,     0,   363,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    88,     0,     0,     0,
     0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,     0,   250,   251,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    83,     0,
     0,   113,     0,     0,     0,   157,     0,   244,     0,     0,
     0,   114,    45,     0,     0,   115,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   117,     0,   118,
     0,   252,   120,   121,   122,   494,     0,     0,   495,   247,
   496,     0,   780,     0,     0,   362,     0,   363,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    88,     0,
     0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,     0,   497,
   251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    83,     0,     0,   113,     0,     0,     0,   157,     0,   244,
     0,     0,     0,   114,    45,     0,     0,   115,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   117,
     0,   118,     0,   252,   120,   121,   122,   494,     0,     0,
   495,   247,   496,     0,   566,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    88,     0,     0,     0,     0,     0,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     0,   497,   251,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    83,     0,     0,   113,     0,     0,     0,   157,
     0,   244,     0,     0,     0,   114,   177,     0,     0,   115,
     0,   210,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   117,     0,   118,     0,   252,   120,   121,   122,   766,
     0,     0,   767,   247,   768,     0,   566,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    88,     0,     0,     0,     0,     0,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,     0,   769,   251,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    83,     0,     0,   113,     0,     0,
     0,   157,     0,   244,     0,     0,     0,   114,    45,     0,
     0,   115,     0,   210,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   117,     0,   118,     0,   252,   120,   121,
   122,   245,     0,     0,   246,   247,   248,     0,   432,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    88,     0,     0,     0,     0,     0,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,     0,   250,   251,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    83,     0,     0,   113,
     0,     0,     0,   157,     0,   244,     0,     0,     0,   114,
    45,     0,     0,   115,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   117,     0,   118,     0,   252,
   120,   121,   122,   494,     0,     0,   495,   247,   496,     0,
   432,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    88,     0,     0,     0,
     0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,     0,   497,   251,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    83,     0,
     0,   113,     0,     0,     0,   157,     0,   244,     0,     0,
     0,   114,    45,     0,     0,   115,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   117,     0,   118,
     0,   252,   120,   121,   122,   494,     0,     0,   495,   247,
   496,     0,   948,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    88,     0,
     0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,     0,   497,
   251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    83,     0,     0,   113,     0,     0,     0,   157,     0,   244,
     0,     0,     0,   114,    45,     0,     0,   115,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   117,
     0,   118,     0,   252,   120,   121,   122,   766,     0,     0,
   767,   247,   768,     0,   432,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    88,     0,     0,     0,     0,     0,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     0,   769,   251,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    83,     0,     0,   113,     0,     0,     0,   157,
     0,   244,     0,     0,     0,   114,    45,     0,     0,   115,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   117,     0,   118,     0,   252,   120,   121,   122,   245,
     0,     0,   246,   247,   248,     0,  1055,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    88,     0,     0,     0,     0,     0,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,     0,   250,   251,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    83,     0,     0,   113,     0,     0,
     0,   157,     0,   244,     0,     0,     0,   114,    45,     0,
     0,   115,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   117,     0,   118,     0,   252,   120,   121,
   122,   245,     0,     0,   246,   247,   248,     0,  1058,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    88,     0,     0,     0,     0,     0,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,     0,   250,   251,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    83,     0,     0,   113,
     0,     0,     0,   157,     0,   244,     0,     0,     0,   114,
    45,     0,     0,   115,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   117,     0,   118,     0,   252,
   120,   121,   122,  1111,     0,     0,  1112,   247,   496,     0,
   432,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    88,     0,     0,     0,
     0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,     0,  1113,   251,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    83,     0,
     0,   113,     0,     0,     0,   157,     0,   244,     0,     0,
     0,   114,    45,     0,     0,   115,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   117,     0,   118,
     0,   252,   120,   121,   122,  1116,     0,     0,  1117,   247,
   496,     0,   432,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    88,     0,
     0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,     0,  1118,
   251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    83,     0,     0,   113,     0,     0,     0,   157,     0,   244,
     0,     0,     0,   114,    45,     0,     0,   115,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   117,
     0,   118,     0,   252,   120,   121,   122,   245,     0,     0,
   246,   247,   248,     0,  1124,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    88,     0,     0,     0,     0,     0,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     0,   250,   251,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    83,     0,     0,   113,     0,     0,     0,   157,
     0,   244,     0,     0,     0,   114,    45,     0,     0,   115,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   117,     0,   118,     0,   252,   120,   121,   122,  1166,
     0,     0,  1167,   247,   496,     0,   432,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    88,     0,     0,     0,     0,     0,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,     0,  1168,   251,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    83,     0,   113,     0,     0,
     0,     0,   157,     0,     0,     0,     0,   114,    45,     8,
     0,   115,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   117,     0,   118,     0,   252,   120,   121,
   122,     0,    24,    25,     0,    27,    28,    29,     0,   432,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    88,     0,     0,     0,     0,
     0,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,     0,   166,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    83,     0,
   113,     0,     0,     0,     0,   157,     0,     0,     0,     0,
   114,    45,     8,     0,   115,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   117,     0,   118,     0,
     0,   120,   121,   122,     0,    24,    25,     0,    27,    28,
    29,     0,   791,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    88,     0,
     0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,     0,   166,
     0,     0,     0,     0,    83,     0,     0,     0,     0,     0,
     0,    84,     0,   113,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   114,    45,    85,    86,   115,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   117,
     0,   118,     0,     0,   120,   121,   122,     0,   361,     0,
     0,   362,     0,   363,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    88,     0,     0,     0,     0,     0,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,     0,     0,     0,     0,     0,     0,
    83,     0,     0,     0,     0,     0,     0,    84,     0,   113,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
   364,    85,    86,   115,     0,     0,   116,     0,     0,     0,
     0,     0,     0,     0,     0,   117,     0,   118,   119,     0,
   120,   121,   122,     0,   361,     0,     0,   362,     0,   363,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    88,     0,     0,     0,     0,     0,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     0,    83,     0,     0,     0,     0,     0,     0,    84,     0,
     0,     0,     0,     0,     0,   450,     0,     0,     0,     0,
     0,     0,    85,    86,     0,   114,   364,     0,     0,   115,
     0,     0,   116,     0,     0,     0,     0,     0,     0,     0,
     0,   117,     0,   451,   119,    87,   120,   121,   122,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    88,     0,     0,     0,     0,     0,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,     0,    83,     0,     0,     0,     0,     0,     0,   157,
     0,     0,     0,     0,     0,     0,   113,     0,     0,     0,
     0,     0,     0,    85,    86,     0,   114,    45,     0,     0,
   115,     0,     0,   116,     0,     0,     0,     0,     0,     0,
     0,     0,   117,     0,   118,   119,   397,   120,   121,   122,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    88,     0,     0,     0,     0,     0,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,     0,     0,     0,     0,     0,    83,     0,     0,
     0,     0,     0,     0,   157,     0,     0,   113,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   114,    45,     0,
     0,   115,     0,     0,   178,     0,     0,     0,     0,     0,
     0,     0,     0,   117,     0,   118,     0,     0,   120,   121,
   122,   579,     0,     0,   362,     0,   363,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    88,     0,     0,
     0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,     0,    83,     0,
     0,     0,     0,     0,     0,   157,     0,     0,     0,     0,
     0,     0,   113,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   114,    45,     0,     0,   115,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   117,     0,
   118,   119,   261,   120,   121,   122,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    88,     0,
     0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   113,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   114,    45,     0,     0,   115,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   117,
     1,   118,     2,     3,   120,   121,   122,     0,     0,     4,
     0,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,     0,     0,    15,    16,    17,    18,     0,    19,    20,
    21,     0,    22,    23,     0,     0,     0,    24,    25,    26,
    27,    28,    29,    30,   435,     0,     0,    32,     0,     0,
     0,    33,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    34,    35,    36,    37,    38,    39,    40,
     0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    42,    43,     0,    44,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   113,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    45,     0,     0,     0,
     0,    46,     0,    47,    48,    49,    50,    51,     0,     1,
    52,     2,     3,    53,     0,    54,     0,     0,     4,     0,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
     0,     0,    15,    16,    17,    18,     0,    19,    20,    21,
     0,    22,    23,     0,     0,     0,    24,    25,    26,    27,
    28,    29,    30,    31,     0,     0,    32,     0,     0,     0,
    33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    34,    35,    36,    37,    38,    39,    40,     0,
    41,     0,     0,     0,     0,     0,     0,   157,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    42,    43,     0,    44,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   261,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    45,     0,     0,     0,     0,
    46,     0,    47,    48,    49,    50,    51,     0,     0,    52,
    88,     0,    53,     0,    54,     0,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   157,     0,     0,   870,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   113,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   114,    45,     0,     0,   115,
     0,     0,     0,     0,     0,     0,     0,   960,     0,     0,
     0,   117,     0,   118,     0,     0,   120,   121,   122,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    88,     0,     0,     0,     0,     0,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   157,     0,     0,   870,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   113,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   114,    45,
     0,     0,   115,     0,     0,     0,     0,     0,     0,     0,
   963,     0,     0,     0,   117,     0,   961,     0,     0,   962,
   121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    88,     0,     0,     0,
     0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   157,     0,     0,   870,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   113,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   114,    45,     0,     0,   115,     0,     0,     0,     0,
     0,     0,     0,   261,     0,     0,     0,   117,     0,   964,
     0,     0,   965,   121,   122,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    88,
     0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   157,
     0,     0,   870,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   113,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   114,    45,     0,     0,   115,     0,
     0,     0,     0,     0,     0,     0,   261,     0,     0,     0,
   117,     0,   966,     0,     0,   967,   121,   122,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    88,     0,     0,     0,     0,     0,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   157,     0,     0,   870,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   113,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   114,    45,     0,
     0,   115,     0,     0,     0,     0,     0,     0,     0,   261,
     0,     0,     0,   117,     0,   961,     0,     0,   120,   121,
   122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    88,     0,     0,     0,     0,
     0,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   157,     0,     0,   870,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   113,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   114,    45,     0,     0,   115,     0,     0,     0,     0,     0,
     0,     0,   261,     0,     0,     0,   117,     0,   964,     0,
     0,   120,   121,   122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    88,     0,
     0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   157,     0,
     0,   870,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   113,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   114,    45,     0,     0,   115,     0,     0,
     0,     0,     0,     0,     0,   261,     0,     0,     0,   117,
     0,   966,     0,     0,   120,   121,   122,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    88,     0,     0,     0,     0,     0,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   157,     0,     0,   870,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   113,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   114,    45,     0,     0,
   115,     0,     0,     0,     0,     0,     0,     0,  1064,     0,
     0,     0,   117,     0,  1063,     0,     0,   120,   121,   122,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    88,     0,     0,     0,     0,     0,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   157,     0,     0,   870,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
    45,     0,     0,   115,     0,     0,     0,     0,     0,     0,
     0,   261,     0,     0,     0,   117,     0,  1065,     0,     0,
  1066,   121,   122,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    88,     0,     0,
     0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   157,     0,     0,
   870,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   113,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   114,    45,     0,     0,   115,     0,     0,     0,
     0,     0,     0,     0,   261,     0,     0,     0,   117,     0,
  1065,     0,     0,   120,   121,   122,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    88,     0,     0,     0,     0,     0,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   157,     0,     0,   870,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   113,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   114,    45,     0,     0,   115,
     0,     0,     0,     0,     0,     0,     0,   261,     0,     0,
     0,   117,     0,   961,     0,     0,  1220,   121,   122,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    88,     0,     0,     0,     0,     0,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   157,     0,     0,   870,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   113,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   114,    45,
     0,     0,   115,     0,     0,     0,     0,     0,     0,     0,
   261,     0,     0,     0,   117,     0,   964,     0,     0,  1221,
   121,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    88,     0,     0,     0,
     0,     0,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   157,     0,     0,   870,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   113,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   114,    45,     0,     0,   115,     0,     0,     0,     0,
     0,     0,     0,   261,     0,     0,     0,   117,     0,   961,
     0,     0,  1225,   121,   122,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    88,
     0,     0,     0,     0,     0,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   157,
     0,     0,   870,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   113,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   114,    45,     0,     0,   115,     0,
     0,     0,     0,     0,     0,     0,   261,     0,     0,     0,
   117,     0,   964,     0,     0,  1226,   121,   122,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    88,     0,     0,     0,     0,     0,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   157,     0,     0,   870,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   113,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   114,    45,     0,
     0,   115,     0,     0,     0,     0,     0,     0,     0,   261,
     0,     0,     0,   117,     0,  1065,     0,     0,  1255,   121,
   122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    88,     0,     0,     0,     0,
     0,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,   112,   157,     0,     0,   870,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   113,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   114,    45,     0,     0,   115,     0,     0,     0,     0,     0,
     0,     0,   261,     0,     0,     0,   117,     0,  1065,     0,
     0,  1258,   121,   122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    88,     0,
     0,     0,     0,     0,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   157,     0,
     0,   870,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   113,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   114,    45,     0,     0,   115,     0,     0,
     0,     0,     0,     0,     0,   261,     0,     0,     0,   117,
     0,   961,     0,     0,  1260,   121,   122,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    88,     0,     0,     0,     0,     0,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
   112,   157,     0,     0,   870,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   113,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   114,    45,     0,     0,
   115,     0,     0,     0,     0,     0,     0,     0,   261,     0,
     0,     0,   117,     0,   964,     0,     0,  1261,   121,   122,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    88,     0,     0,     0,     0,     0,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,   111,   112,   157,     0,     0,   870,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   114,
    45,     0,     0,   115,     0,     0,     0,     0,     0,     0,
     0,   261,     0,     0,     0,   117,     0,  1065,     0,     0,
  1286,   121,   122,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    88,     0,     0,
     0,     0,     0,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   113,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   114,    45,     0,     0,   115,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   117,     0,
   118,     0,     0,   120,   121,   122
};

static const short yycheck[] = {    17,
    26,   124,     0,   239,   240,   445,   231,   158,   162,   229,
     1,    10,   205,    31,     1,    42,    43,     1,    31,   337,
    10,   146,    31,   849,     0,   675,   676,   361,   362,   363,
   114,   115,    13,    46,    32,   296,   297,    48,    38,   192,
   193,   194,   195,   196,   197,   198,     1,     1,     4,    50,
   176,    47,   178,     1,   164,   193,   194,   195,   196,   197,
   198,    40,    11,    47,    43,    47,    47,   260,    48,    87,
    48,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,    13,    13,   107,
   108,   109,    47,    47,   412,   413,    83,    38,    38,    47,
    87,   362,   363,    52,    48,    47,    47,    47,   701,    47,
   703,    47,    11,   706,    47,   115,    47,    50,   129,    52,
    47,    47,    48,    48,    47,    38,   719,   237,   109,   116,
    38,   158,   108,   146,    47,    47,   112,   113,   114,    38,
   158,    13,   167,   168,    38,   170,   339,    38,   147,   129,
   146,   129,   151,    47,   141,   146,    47,   147,   176,    54,
   178,   151,   146,   176,   118,   163,   992,   176,   487,   178,
   489,   127,   128,   492,   161,   129,    48,    47,    47,   205,
    38,   129,    38,   109,   109,   129,    81,   205,   175,   129,
    38,    47,   146,    38,    47,   213,   209,   210,   146,    47,
    38,    13,   220,   853,   854,   146,   146,   115,   146,    47,
   146,   209,    31,   149,   147,   146,   129,   215,   216,   217,
   218,   814,   815,   146,   242,   243,   149,   225,   226,   227,
   228,   249,   316,   146,   260,   129,    48,   109,   129,    48,
   574,    38,   260,   261,    13,   579,    13,   142,   143,   144,
   145,   361,   146,    48,    40,   146,    53,    43,   592,   117,
   278,   279,   249,    13,    47,   283,   284,   285,    87,    47,
    48,   397,   117,   129,   867,   401,   402,   146,     0,    48,
   873,   129,   875,   146,   877,   148,   879,   305,   881,   882,
   146,   129,   885,   146,   113,   888,   149,   109,   146,   317,
   893,    48,    38,   321,   322,    13,   115,   116,   146,    31,
    32,   337,  1138,   339,    40,   328,    52,    43,   104,    45,
    13,    47,   117,    45,    46,    48,    47,    47,    38,   347,
   127,   128,   319,   320,   347,    13,    47,   671,    13,   158,
   109,    47,   109,   361,   362,   363,   115,   116,   998,   459,
   375,   129,   377,   378,    13,   380,   381,   176,   383,   109,
   358,    47,    38,   390,   391,    87,   384,    47,   146,    47,
    48,    38,    47,   146,   361,   968,   969,    53,   104,   397,
    48,    47,   129,   401,   402,    52,   412,   413,   397,    48,
   209,   113,   401,   402,   713,   588,   715,   118,   717,   718,
    48,   109,   842,   843,   119,   120,   129,   118,   129,   119,
   120,   409,  1005,   134,   432,   569,   109,   435,   129,  1012,
   146,  1014,   435,  1016,   146,   146,   435,    13,   146,   151,
   249,   109,    48,    47,   109,   146,   158,   115,   116,   457,
   665,   163,   261,   679,   680,    48,   780,   146,   782,   129,
   109,   127,   128,   348,   176,   177,   115,   116,   678,   127,
   128,   795,    48,   129,   574,   483,   146,   286,   134,    47,
   192,   193,   194,   195,   196,   197,   198,   631,    48,   589,
   146,   129,    52,   205,   637,   638,   639,   209,   210,  1139,
  1140,    47,   214,   215,   216,   217,   218,   623,    47,   637,
   638,   639,   820,   225,   226,   227,   228,    47,   230,   328,
   232,   233,   234,   129,    47,   129,    47,   239,   240,    38,
   134,   782,    47,   109,     1,    38,   129,   249,   347,   115,
   116,   544,   146,   428,   429,    48,   561,    48,    40,   261,
   118,    43,   361,    45,    47,    47,    47,    48,   566,    47,
   568,   129,    48,   566,    52,    47,   574,   667,    47,    48,
    47,   579,   588,   458,   286,    48,    38,    48,   146,   594,
   588,   596,   597,    50,   599,    48,   601,   602,   397,    52,
   129,   606,   607,    48,    47,    48,    47,   574,   742,    47,
   608,    47,    47,   611,    47,   414,  1189,   146,   129,    52,
   304,  1194,   104,   621,   129,   623,   328,    48,   127,   128,
   628,    52,   334,   432,   623,   146,   435,    47,   129,   115,
   116,   146,    52,    48,   651,   347,   129,    47,   129,  1222,
    12,   450,    14,   951,  1227,    17,   358,   129,    48,   361,
   129,  1234,   364,   146,   146,   146,   129,   112,   129,   114,
   773,   669,   970,    38,   146,   127,   128,   146,    40,    41,
    42,    43,    44,    45,    46,    47,   129,    48,   129,  1262,
   565,   129,   394,   129,   828,   397,   581,   582,   583,   584,
   585,   586,   587,   146,    53,   146,    38,   409,   146,    48,
   146,    48,   414,    11,   468,    50,   470,   471,   472,   473,
   474,   475,   521,   477,   129,   479,   480,    38,   482,    47,
   432,    13,    38,   435,   732,   733,   734,   735,   736,   129,
    38,    38,   104,   105,    48,   544,    40,    48,   450,    43,
   755,    47,   757,   758,    40,   760,    38,    43,    48,    45,
    48,    47,   127,   128,    48,    48,    48,   566,   129,    40,
   115,   116,    43,  1087,    45,   574,    47,    47,   127,   128,
   579,    48,   780,   761,   782,    13,   148,    48,   993,    48,
   129,    47,   129,   791,   799,   127,   128,    48,   803,  1097,
   931,   806,   807,   487,    48,   489,    48,    48,   492,    48,
    38,   809,    48,     1,   820,    47,   127,   128,   104,   521,
    48,   127,   128,    47,   623,   129,    53,   109,   129,    17,
   127,   128,   118,   104,    48,    52,    48,   835,   836,   129,
    52,   129,   544,   129,   822,   129,   129,   118,   134,    48,
   552,  1149,    40,    41,    47,    43,    44,    45,   129,    47,
   146,    48,   129,    48,   566,   164,    48,   865,   129,    48,
   129,    47,   574,  1171,    12,   146,    14,   579,   129,    17,
    53,   109,    48,   119,   120,   129,   588,   129,   129,    48,
   129,    48,    48,   192,   193,   194,   195,   196,   197,   198,
   127,   128,    40,    41,    42,    43,    44,    45,    46,    47,
    37,   916,    48,   918,   919,   129,   104,   922,   923,    37,
   219,   623,    48,    48,    48,    48,   924,   629,   934,    49,
   129,    48,   231,    47,   932,   637,   638,   639,   237,    48,
    48,    53,   129,    48,   129,   951,    48,   129,   127,   128,
   948,  1265,   654,   958,   127,   128,    17,    47,   146,   957,
   148,   260,   960,   129,   970,   963,   933,    48,    47,  1103,
   129,    40,   129,   129,    43,    48,    48,   679,   680,    40,
    41,   780,    43,    44,    45,   112,    47,   114,    48,   119,
   120,    47,   791,   129,   112,    48,   114,   296,   297,    11,
   978,    48,  1218,   129,   129,   129,   129,   127,   128,  1007,
   148,   610,   129,    48,   698,   127,   128,   701,    48,   703,
   129,   129,   706,   112,   129,   114,    38,   129,  1033,   713,
    47,   715,    48,   717,   718,   719,    47,  1035,    37,   112,
    48,   114,    11,   104,    48,  1050,   127,   128,    52,    47,
  1028,   936,   937,   938,   939,   127,   128,  1055,    38,   761,
  1058,  1039,   361,   362,   363,    47,  1064,   127,   128,    38,
   824,   825,    48,   672,   127,   128,    48,    38,   780,    38,
   127,   128,    48,    52,   146,   146,   148,   148,   129,   791,
    51,  1097,   127,   128,    52,  1073,  1101,   127,   128,    48,
    11,  1106,  1100,  1108,   112,   859,   114,   861,   862,    48,
   864,   127,   128,   112,    47,   114,  1114,  1115,    11,    47,
   822,  1119,  1120,  1121,  1122,   148,  1124,    38,   108,   813,
   814,   815,   112,   113,   114,    40,   108,   129,    43,  1144,
   112,   113,   114,  1149,   129,    38,   112,   108,   114,   948,
    11,   112,   113,   114,  1152,    40,   127,   128,    43,    48,
   459,   960,    48,    47,   963,  1171,    50,  1165,    52,   108,
    48,  1169,  1170,   112,   113,   114,   129,    38,  1183,    48,
  1185,    48,    12,   867,    14,   869,   146,    17,   148,   873,
   146,   875,   148,   877,    13,   879,   880,   881,   882,   104,
    40,   885,    48,    43,   888,    40,    13,    38,    43,   893,
    40,    41,    42,    43,    44,    45,    46,    47,    38,   104,
   819,    58,    48,   112,   823,   114,    48,    40,    40,   931,
    43,    43,     0,   119,   120,   121,   122,   123,   124,   108,
    48,   127,   128,   112,   113,   114,   948,    15,   547,    47,
    40,    48,   851,    43,   146,    38,  1055,   149,   960,  1058,
    11,   963,   108,    31,    32,  1064,   112,   113,   114,    67,
    68,    69,    70,    71,    72,   574,   978,    45,    46,    40,
   117,   118,    43,    38,   968,   969,    54,    38,   125,   126,
   589,    48,   129,   130,   131,  1293,  1294,    51,  1296,  1297,
   108,    52,    38,    48,   112,   113,   114,  1305,    39,    38,
  1308,  1309,  1310,    81,   146,   112,   148,   114,   148,    87,
    40,  1005,  1320,    43,   108,  1124,  1028,    48,  1012,   108,
  1014,   129,  1016,   112,   113,   114,    30,  1039,   637,   638,
   639,    48,   146,    40,   148,   113,    43,    51,   146,   147,
   112,   113,   114,  1055,   108,   112,  1058,   114,   112,   113,
   114,   117,  1064,    52,    48,   109,   665,    52,   667,   109,
     7,  1073,   671,    51,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   983,   153,    48,   108,   156,    48,
   158,   112,   113,   114,    38,   163,    38,    38,    48,   167,
   168,    48,   170,    48,   129,    48,    38,   115,   176,   177,
    48,   114,   119,   120,   121,   122,   123,   124,    58,    48,
   127,   128,  1124,    51,   192,   193,   194,   195,   196,   197,
   198,   114,   148,    48,   129,    51,   204,   205,    48,    48,
    48,   209,   210,   129,    48,    48,   214,   215,   216,   217,
   218,    51,   129,   221,   129,     4,   114,   225,   226,   227,
   228,    48,   230,   108,   232,   233,   234,   112,   113,   114,
   149,   239,   240,   147,    48,    48,   129,   117,   118,    50,
    48,   249,    34,   782,    48,   125,   126,   127,   128,   129,
   130,   131,   108,   261,    38,    48,   112,   113,   114,     7,
    48,    12,    48,    14,  1188,  1189,    17,    47,   108,  1193,
  1194,    52,   112,   113,   114,    53,  1218,   114,   286,    48,
    51,    48,    52,    48,   129,    48,    48,   295,    17,    40,
    41,    42,    43,    44,    45,    46,    47,   129,  1222,   129,
    53,    38,    48,  1227,    48,    48,  1248,    48,    48,  1233,
  1234,    40,    41,   129,    43,    44,    45,  1156,  1157,   129,
   328,    48,  1161,  1162,  1163,  1164,   334,   129,   129,   129,
   108,   129,    38,  1275,   112,   113,   114,   108,  1262,   347,
   348,   112,   113,   114,    48,    48,    48,    12,  1187,    14,
   358,   115,    17,   361,   114,    47,   364,    47,   108,    53,
    51,  1200,    51,    51,   372,  1204,  1205,   375,    51,    53,
   378,    53,    53,   381,    48,    40,    41,    42,    43,    44,
    45,    46,    47,    38,    47,    53,   394,    47,    50,   397,
   115,   119,   120,   121,   122,   123,   124,   148,    48,   127,
   128,   409,    48,    48,    15,    16,   414,    18,    19,    20,
    21,    48,    48,    48,   129,   129,    38,    48,    48,    53,
   428,   429,   430,    47,   432,    48,    47,   435,    48,    48,
    48,    48,    58,   129,    50,    48,    47,    38,    48,    48,
    48,    53,   450,   119,   120,   121,   122,   123,   124,    48,
   458,   127,   128,    53,   993,    50,    67,    68,    69,    70,
    71,    72,    48,    48,  1303,  1304,   146,  1306,  1307,   146,
    48,   146,    48,    47,    53,  1314,    48,    48,  1317,  1318,
  1319,    48,    52,   148,    52,    47,    52,    52,    52,    52,
  1329,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,    48,    48,   129,   130,   131,    48,    48,    47,    52,
    48,    48,    48,   521,   146,    47,    51,   146,    52,    52,
    47,    52,    15,    16,    48,    18,    19,    20,    21,    51,
    47,   129,    48,    48,    43,   146,   544,   129,   129,   129,
    43,    48,   550,    53,   552,    53,   554,   555,  1087,    53,
    48,   559,   560,   561,    47,   563,    53,   565,   566,   567,
    48,    53,    53,    48,    48,    48,   574,    43,   129,   129,
   129,   579,   129,    53,    67,    68,    69,    70,    71,    72,
   588,    48,    48,    48,    48,    53,   594,   115,    48,    48,
    53,   599,    53,   149,   149,   149,   604,   149,    48,    48,
   129,    47,    53,    48,    48,    48,    48,    48,    48,    48,
     0,    48,    48,     0,    52,   623,    48,    52,    52,   149,
    48,   629,    52,   149,   149,    48,   149,    48,    48,   637,
   638,   639,  1073,    52,   642,   149,    52,    52,    52,    48,
    52,    31,    32,    53,   630,    53,   654,    53,    53,    53,
    53,    53,    53,   146,   793,    45,    46,   763,   678,  1252,
   588,   696,    -1,   549,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   679,   680,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    87,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   754,    -1,   756,    -1,
   758,    -1,    -1,   761,    -1,    -1,   146,   765,    -1,    -1,
    -1,    -1,   770,    -1,    -1,    -1,    -1,    -1,   158,    -1,
    -1,    -1,   780,   163,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   791,    -1,     0,   176,   177,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   192,   193,   194,   195,   196,   197,   198,    -1,
    -1,    -1,    -1,    -1,   822,   205,    31,    32,    -1,   209,
   210,    -1,    -1,    -1,   214,   215,   216,   217,   218,    -1,
    -1,    46,    -1,    -1,    -1,   225,   226,   227,   228,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   249,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   261,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,   113,    -1,
    -1,    -1,   910,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   929,    -1,   931,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   146,    -1,    -1,    -1,    -1,    -1,    -1,   328,    -1,
   948,    -1,    -1,   158,    -1,    -1,    -1,    -1,   163,    -1,
    -1,    -1,   960,    -1,    -1,   963,    -1,   347,    -1,    -1,
    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,   358,    -1,
   978,   361,    -1,    -1,   364,    -1,    -1,   192,   193,   194,
   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,   214,
   215,   216,   217,   218,   394,    -1,    -1,   397,    -1,     3,
   225,   226,   227,   228,    -1,    -1,    10,    -1,    -1,   409,
  1028,    -1,    -1,    -1,   414,    -1,    -1,    -1,    -1,    -1,
    -1,  1039,    -1,    -1,   249,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   432,    -1,    -1,   435,   261,  1055,    -1,    -1,
  1058,    -1,    -1,    47,    -1,    -1,  1064,    -1,    -1,    -1,
   450,    -1,    -1,    -1,    -1,  1073,    -1,    -1,    -1,    -1,
    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,
    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,    -1,
    -1,    -1,    -1,   328,    -1,    -1,  1124,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,
    -1,   521,   347,    -1,   128,   129,    -1,    -1,   132,    -1,
    -1,    -1,    -1,   358,    -1,    -1,   361,    -1,    -1,    -1,
   144,    -1,   146,    -1,   544,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   566,    -1,    -1,    -1,
    -1,    -1,   397,    -1,   574,    -1,    -1,    -1,     1,   579,
     3,    -1,    -1,    -1,   409,    -1,    -1,    10,   588,   414,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    24,    25,    -1,    -1,    -1,    -1,   432,    -1,    -1,
   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   623,    47,   450,    -1,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   637,   638,   639,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   118,   521,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,   544,
    -1,   144,    -1,   146,   147,    -1,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   566,    -1,    -1,    -1,    -1,     1,    -1,     3,   574,
    -1,    -1,    -1,    -1,   579,    10,    -1,    -1,    -1,    -1,
    -1,   761,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   780,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   791,    47,    -1,    -1,    50,    -1,    52,   623,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   637,   638,   639,    -1,    -1,    -1,    73,    -1,
    -1,    -1,   822,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
    -1,   146,   147,    -1,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,
    -1,   931,    -1,    -1,    -1,    10,   761,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   948,    -1,
    -1,    -1,    -1,    -1,    -1,   780,    -1,    -1,    -1,    -1,
   960,    -1,    -1,   963,    -1,    -1,   791,    -1,    -1,    -1,
    -1,    -1,    47,    -1,    -1,    50,    -1,    -1,   978,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   822,    73,    -1,
    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,  1028,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1039,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,  1055,    -1,   132,  1058,    -1,
    -1,    -1,    -1,    -1,  1064,    -1,    -1,    -1,    -1,   144,
    -1,   146,    -1,  1073,   149,   150,   151,    -1,    -1,     1,
    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   931,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   948,  1124,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   960,    -1,    -1,   963,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    73,    -1,   978,    -1,    -1,    -1,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,
    -1,    -1,    -1,  1028,    -1,    -1,   128,   129,    -1,    -1,
   132,    -1,    -1,    -1,  1039,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   144,    -1,   146,    -1,    -1,   149,   150,   151,
  1055,    -1,    -1,  1058,    -1,    -1,    -1,    -1,     3,  1064,
     5,     6,    -1,    -1,    -1,    10,    -1,    12,  1073,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
    35,    36,    -1,    -1,    -1,    40,    41,    42,    43,    44,
    45,    46,    47,    -1,    -1,    50,    -1,    -1,    -1,    54,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1124,
    -1,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,   104,
   105,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,   134,
   135,   136,   137,   138,   139,   140,    -1,    -1,   143,   144,
    -1,   146,    -1,   148,   149,   150,   151,     3,    -1,     5,
     6,    -1,    -1,    -1,    10,    -1,    12,    -1,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    -1,    31,    32,    33,    -1,    35,
    36,    -1,    -1,    -1,    40,    41,    42,    43,    44,    45,
    46,    47,    -1,    -1,    50,    -1,    -1,    -1,    54,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    -1,
    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,    -1,   104,   105,
    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   128,   129,    -1,    -1,   132,    -1,   134,   135,
   136,   137,   138,   139,   140,    -1,    -1,   143,   144,    -1,
   146,    -1,   148,   149,   150,   151,     3,    -1,     5,     6,
    -1,    -1,    -1,    10,    -1,    12,    -1,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    -1,    31,    32,    33,    -1,    35,    36,
    -1,    -1,    -1,    40,    41,    42,    43,    44,    45,    46,
    47,    -1,    -1,    50,    -1,    -1,    -1,    54,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    -1,    -1,
    -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,   104,   105,    -1,
   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
    -1,   118,    -1,    -1,    -1,    -1,    10,    -1,    12,    -1,
    14,   128,   129,    17,    -1,   132,    -1,   134,   135,   136,
   137,   138,   139,   140,    -1,    -1,   143,   144,    -1,   146,
    -1,   148,   149,   150,   151,    -1,    40,    41,    42,    43,
    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,
    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,    -1,
   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    -1,   118,    -1,    -1,    -1,    10,    -1,
    12,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,
   134,    -1,    24,    25,    -1,    -1,    -1,    -1,    -1,    -1,
   144,    -1,   146,    -1,   148,   149,   150,   151,    40,    -1,
    -1,    43,    44,    45,    -1,    47,    -1,    -1,    50,    -1,
    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     3,    -1,    -1,   118,    -1,    -1,    -1,
    10,    -1,    12,    -1,    -1,    -1,   128,   129,    -1,    -1,
   132,    -1,    -1,   135,    24,    25,    -1,    -1,    -1,    -1,
    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,   151,
    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,
    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,    -1,   104,   105,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   118,    -1,
    -1,    -1,    10,    -1,    12,    -1,    -1,    -1,   128,   129,
    -1,    -1,   132,    -1,    -1,   135,    24,    25,    -1,    -1,
    -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,
   150,   151,    40,    -1,    -1,    43,    44,    45,    -1,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
    -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,    -1,   104,   105,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
   118,    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,    -1,
   128,   129,    -1,    -1,   132,    -1,    -1,   135,    24,    25,
    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,
   148,   149,   150,   151,    40,    -1,    -1,    43,    44,    45,
    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,    -1,   104,   105,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
    -1,    -1,   118,    -1,    -1,    -1,    10,    -1,    12,    -1,
    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,   135,
    24,    25,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,
   146,   147,   148,   149,   150,   151,    40,    -1,    -1,    43,
    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,
    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,    -1,
   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,    -1,   118,    -1,    -1,    -1,    10,    -1,
    12,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,
    -1,   135,    24,    25,    -1,    -1,    -1,    -1,    -1,    -1,
   144,    -1,   146,    -1,   148,   149,   150,   151,    40,    -1,
    -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,   118,    -1,    -1,    -1,
    -1,    10,    -1,    12,    -1,    -1,   128,   129,    17,    -1,
   132,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   144,    -1,   146,    -1,   148,   149,   150,   151,
    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    -1,   104,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   118,
    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,    -1,   128,
   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,
   149,   150,   151,    40,    -1,    -1,    43,    44,    45,    -1,
    47,    -1,    -1,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
    -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,   104,   105,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    -1,   118,    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,
    -1,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,   146,
    -1,   148,   149,   150,   151,    40,    -1,    -1,    43,    44,
    45,    -1,    47,    -1,    -1,    50,    -1,    52,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,   104,
   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     3,    -1,    -1,   118,    -1,    -1,    -1,    10,    -1,    12,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
    -1,   146,    -1,   148,   149,   150,   151,    40,    -1,    -1,
    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     3,    -1,    -1,   118,    -1,    -1,    -1,    10,
    -1,    12,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   144,    -1,   146,    -1,   148,   149,   150,   151,    40,
    -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    -1,   118,    -1,    -1,
    -1,    10,    -1,    12,    -1,    -1,    -1,   128,   129,    -1,
    -1,   132,    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   144,    -1,   146,    -1,   148,   149,   150,
   151,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    -1,   104,   105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   118,
    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,    -1,   128,
   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   144,    -1,   146,    -1,   148,
   149,   150,   151,    40,    -1,    -1,    43,    44,    45,    -1,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
    -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,   104,   105,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    -1,   118,    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,
    -1,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,   146,
    -1,   148,   149,   150,   151,    40,    -1,    -1,    43,    44,
    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,   104,
   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     3,    -1,    -1,   118,    -1,    -1,    -1,    10,    -1,    12,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
    -1,   146,    -1,   148,   149,   150,   151,    40,    -1,    -1,
    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     3,    -1,    -1,   118,    -1,    -1,    -1,    10,
    -1,    12,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   144,    -1,   146,    -1,   148,   149,   150,   151,    40,
    -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    -1,   118,    -1,    -1,
    -1,    10,    -1,    12,    -1,    -1,    -1,   128,   129,    -1,
    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   144,    -1,   146,    -1,   148,   149,   150,
   151,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    -1,   104,   105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   118,
    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,    -1,   128,
   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   144,    -1,   146,    -1,   148,
   149,   150,   151,    40,    -1,    -1,    43,    44,    45,    -1,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
    -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,   104,   105,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    -1,   118,    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,
    -1,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,   146,
    -1,   148,   149,   150,   151,    40,    -1,    -1,    43,    44,
    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,   104,
   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     3,    -1,    -1,   118,    -1,    -1,    -1,    10,    -1,    12,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
    -1,   146,    -1,   148,   149,   150,   151,    40,    -1,    -1,
    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     3,    -1,    -1,   118,    -1,    -1,    -1,    10,
    -1,    12,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   144,    -1,   146,    -1,   148,   149,   150,   151,    40,
    -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     3,    -1,   118,    -1,    -1,
    -1,    -1,    10,    -1,    -1,    -1,    -1,   128,   129,    17,
    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   144,    -1,   146,    -1,   148,   149,   150,
   151,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
    -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,    -1,   104,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
   118,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
   128,   129,    17,    -1,   132,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,   146,    -1,
    -1,   149,   150,   151,    -1,    40,    41,    -1,    43,    44,
    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,   104,
    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
    -1,    10,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    24,    25,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
    -1,   146,    -1,    -1,   149,   150,   151,    -1,    47,    -1,
    -1,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,
     3,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,   118,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
   129,    24,    25,   132,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,    -1,
   149,   150,   151,    -1,    47,    -1,    -1,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
    -1,    -1,    24,    25,    -1,   128,   129,    -1,    -1,   132,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   144,    -1,   146,   147,    47,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,
    -1,    -1,    -1,    24,    25,    -1,   128,   129,    -1,    -1,
   132,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   144,    -1,   146,   147,    47,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
    -1,    -1,    -1,    -1,    10,    -1,    -1,   118,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
    -1,   132,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   144,    -1,   146,    -1,    -1,   149,   150,
   151,    47,    -1,    -1,    50,    -1,    52,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,    -1,     3,    -1,
    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,
   146,   147,    47,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
     3,   146,     5,     6,   149,   150,   151,    -1,    -1,    12,
    -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    -1,    -1,    26,    27,    28,    29,    -1,    31,    32,
    33,    -1,    35,    36,    -1,    -1,    -1,    40,    41,    42,
    43,    44,    45,    46,    47,    -1,    -1,    50,    -1,    -1,
    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    66,    67,    68,    69,    70,    71,    72,
    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   104,   105,    -1,   107,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,
    -1,   134,    -1,   136,   137,   138,   139,   140,    -1,     3,
   143,     5,     6,   146,    -1,   148,    -1,    -1,    12,    -1,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    -1,    -1,    26,    27,    28,    29,    -1,    31,    32,    33,
    -1,    35,    36,    -1,    -1,    -1,    40,    41,    42,    43,
    44,    45,    46,    47,    -1,    -1,    50,    -1,    -1,    -1,
    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   104,   105,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,    -1,
   134,    -1,   136,   137,   138,   139,   140,    -1,    -1,   143,
    73,    -1,   146,    -1,   148,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    10,    -1,    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,
    -1,   144,    -1,   146,    -1,    -1,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,    10,    -1,    -1,   106,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,
    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    47,    -1,    -1,    -1,   144,    -1,   146,    -1,    -1,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
    -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    10,    -1,    -1,   106,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    47,    -1,    -1,    -1,   144,    -1,   146,
    -1,    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,
    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,    10,
    -1,    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,
   144,    -1,   146,    -1,    -1,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    10,    -1,    -1,   106,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,
    -1,    -1,    -1,   144,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
    -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,    10,    -1,    -1,   106,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    47,    -1,    -1,    -1,   144,    -1,   146,    -1,
    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    10,    -1,
    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,   144,
    -1,   146,    -1,    -1,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,    10,    -1,    -1,   106,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,
    -1,    -1,   144,    -1,   146,    -1,    -1,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    10,    -1,    -1,   106,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    47,    -1,    -1,    -1,   144,    -1,   146,    -1,    -1,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,    10,    -1,    -1,
   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,   144,    -1,
   146,    -1,    -1,   149,   150,   151,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    10,    -1,    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,
    -1,   144,    -1,   146,    -1,    -1,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,    10,    -1,    -1,   106,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,
    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    47,    -1,    -1,    -1,   144,    -1,   146,    -1,    -1,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
    -1,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    10,    -1,    -1,   106,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    47,    -1,    -1,    -1,   144,    -1,   146,
    -1,    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,
    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,    10,
    -1,    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,
   144,    -1,   146,    -1,    -1,   149,   150,   151,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    10,    -1,    -1,   106,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,
    -1,    -1,    -1,   144,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
    -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,    10,    -1,    -1,   106,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    47,    -1,    -1,    -1,   144,    -1,   146,    -1,
    -1,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
    -1,    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    10,    -1,
    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,   144,
    -1,   146,    -1,    -1,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    73,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,    10,    -1,    -1,   106,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,
   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,
    -1,    -1,   144,    -1,   146,    -1,    -1,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    10,    -1,    -1,   106,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    47,    -1,    -1,    -1,   144,    -1,   146,    -1,    -1,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
    -1,    -1,    -1,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,    -1,
   146,    -1,    -1,   149,   150,   151
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 155 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 2:
#line 156 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 3:
#line 158 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			//add by YY 2013/11/20 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//add by YY 2013/11/20 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			//add by YY 2013/11/20 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  2013-4-17 add by YY[fixed]
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}		 
		;
    break;}
case 4:
#line 261 "msv.y"
{yyval.tnode=new CSyntaxNode(PREFIX_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 5:
#line 262 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 6:
#line 264 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 7:
#line 266 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 8:
#line 267 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 9:
#line 268 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 10:
#line 269 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 11:
#line 270 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 12:
#line 273 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 13:
#line 274 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 14:
#line 277 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 15:
#line 279 "msv.y"
{
			yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
		;
    break;}
case 16:
#line 282 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 17:
#line 283 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 18:
#line 284 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 19:
#line 285 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 20:
#line 291 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 21:
#line 292 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 22:
#line 293 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 23:
#line 294 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 24:
#line 295 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 25:
#line 296 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 26:
#line 299 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 302 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
		;
    break;}
case 28:
#line 307 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 29:
#line 312 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 30:
#line 319 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
		;
    break;}
case 31:
#line 326 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
		;
    break;}
case 32:
#line 330 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
		;
    break;}
case 33:
#line 334 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 336 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FREE_STA, yyvsp[-1].tnode, VOIDTYPE);
		;
    break;}
case 35:
#line 340 "msv.y"
{
			yyval.tnode=new CSyntaxNode(SYSTEM_STA, yyvsp[-1].tnode, VOIDTYPE);
		;
    break;}
case 36:
#line 344 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 347 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
		;
    break;}
case 38:
#line 360 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 39:
#line 366 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 367 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 41:
#line 370 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 42:
#line 372 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 43:
#line 378 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 44:
#line 381 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 45:
#line 382 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 46:
#line 394 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 47:
#line 395 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 48:
#line 397 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 49:
#line 399 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 50:
#line 400 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 51:
#line 403 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 52:
#line 404 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 53:
#line 407 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 54:
#line 408 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 55:
#line 411 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 56:
#line 412 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 57:
#line 413 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 58:
#line 414 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 59:
#line 415 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 60:
#line 418 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 61:
#line 419 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 62:
#line 420 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 63:
#line 424 "msv.y"
{
			CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
			yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
			pchild0=NULL;
		;
    break;}
case 64:
#line 432 "msv.y"
{
			yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 65:
#line 436 "msv.y"
{
			yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 66:
#line 440 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 67:
#line 446 "msv.y"
{
			yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 68:
#line 450 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 69:
#line 455 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 70:
#line 460 "msv.y"
{
			yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 71:
#line 464 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 72:
#line 470 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 73:
#line 479 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 74:
#line 483 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 75:
#line 487 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 76:
#line 494 "msv.y"
{yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);;
    break;}
case 77:
#line 495 "msv.y"
{yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 78:
#line 496 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 79:
#line 500 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 80:
#line 503 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 81:
#line 505 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 82:
#line 510 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 83:
#line 516 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 84:
#line 517 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 85:
#line 520 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 86:
#line 522 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 87:
#line 527 "msv.y"
{
			CSyntaxNode* temp=yyvsp[-3].tnode;
			string structName=temp->GetNName();
			yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
		;
    break;}
case 88:
#line 535 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
		;
    break;}
case 89:
#line 546 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
		;
    break;}
case 90:
#line 560 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 91:
#line 564 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 92:
#line 570 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 93:
#line 571 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 94:
#line 572 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 95:
#line 577 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 96:
#line 581 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 97:
#line 585 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 98:
#line 589 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 99:
#line 593 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 100:
#line 597 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 101:
#line 601 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, POINTERTYPE);
		;
    break;}
case 102:
#line 605 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, LISTTYPE);
		;
    break;}
case 103:
#line 610 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);
		;
    break;}
case 104:
#line 615 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);
		;
    break;}
case 105:
#line 620 "msv.y"
{
			CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
			yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		;
    break;}
case 106:
#line 625 "msv.y"
{
			CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
			CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
			yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
			pChild0=NULL;
			pChild0_Child0=NULL;
		;
    break;}
case 107:
#line 636 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 108:
#line 642 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 109:
#line 645 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 110:
#line 646 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 111:
#line 651 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 112:
#line 655 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 113:
#line 659 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 114:
#line 664 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 115:
#line 669 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 116:
#line 675 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 117:
#line 680 "msv.y"
{
			CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
			pChild0=NULL;
		;
    break;}
case 118:
#line 687 "msv.y"
{
			CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
			pChild0=NULL;
		;
    break;}
case 119:
#line 693 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
			yyval.tnode=yyvsp[0].tnode;
			yyvsp[0].tnode->SetChild0(pChild0);
			pChild0=NULL;
		;
    break;}
case 120:
#line 702 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 121:
#line 703 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 122:
#line 708 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 123:
#line 709 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 124:
#line 714 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 125:
#line 715 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 126:
#line 716 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 127:
#line 718 "msv.y"
{
			yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
		;
    break;}
case 128:
#line 723 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 129:
#line 724 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 130:
#line 727 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 131:
#line 728 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 132:
#line 732 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 133:
#line 733 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 134:
#line 734 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 135:
#line 735 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 136:
#line 736 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 137:
#line 738 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 138:
#line 739 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 139:
#line 740 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 140:
#line 741 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 141:
#line 743 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 142:
#line 744 "msv.y"
{yyval.tnode=yyvsp[0].tnode;
    break;}
case 143:
#line 745 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 144:
#line 746 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 145:
#line 747 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 146:
#line 748 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 147:
#line 749 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 148:
#line 755 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);
		;
    break;}
case 149:
#line 759 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);
		;
    break;}
case 150:
#line 763 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);
		;
    break;}
case 151:
#line 769 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);
		;
    break;}
case 152:
#line 773 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);
		;
    break;}
case 153:
#line 778 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);
		;
    break;}
case 154:
#line 782 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);
		;
    break;}
case 155:
#line 788 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);
		;
    break;}
case 156:
#line 792 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);
		;
    break;}
case 157:
#line 796 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);
		;
    break;}
case 158:
#line 800 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);
		;
    break;}
case 159:
#line 804 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);
		;
    break;}
case 160:
#line 808 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);
		;
    break;}
case 161:
#line 814 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);
		;
    break;}
case 162:
#line 818 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);
		;
    break;}
case 163:
#line 822 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);
		;
    break;}
case 164:
#line 826 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);
		;
    break;}
case 165:
#line 830 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);
		;
    break;}
case 166:
#line 834 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);
		;
    break;}
case 167:
#line 839 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);
		;
    break;}
case 168:
#line 843 "msv.y"
{
			yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);
		;
    break;}
case 169:
#line 848 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);
		;
    break;}
case 170:
#line 852 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);
		;
    break;}
case 171:
#line 857 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 859 "msv.y"
{
			yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
		;
    break;}
case 173:
#line 864 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 865 "msv.y"
{yyval.tnode=new CSyntaxNode(MALLOC_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 175:
#line 868 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 176:
#line 869 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].returntype);;
    break;}
case 177:
#line 870 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].cString, STRUCTTYPE);;
    break;}
case 178:
#line 871 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, STRTYPE);;
    break;}
case 179:
#line 874 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 180:
#line 875 "msv.y"
{yyval.returntype=INTPTYPE;;
    break;}
case 181:
#line 876 "msv.y"
{yyval.returntype=FLOATPTYPE;;
    break;}
case 182:
#line 877 "msv.y"
{yyval.returntype=CHARPTYPE;;
    break;}
case 183:
#line 878 "msv.y"
{yyval.returntype=UINTPTYPE;;
    break;}
case 184:
#line 879 "msv.y"
{yyval.returntype=UCHARPTYPE;;
    break;}
case 185:
#line 880 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 186:
#line 881 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 187:
#line 886 "msv.y"
{yyval.tnode=new CSyntaxNode(ROUND_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 188:
#line 887 "msv.y"
{yyval.tnode=new CSyntaxNode(CEIL_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 189:
#line 888 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOOR_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 190:
#line 890 "msv.y"
{yyval.tnode=new CSyntaxNode(SIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 191:
#line 891 "msv.y"
{yyval.tnode=new CSyntaxNode(COS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 192:
#line 892 "msv.y"
{yyval.tnode=new CSyntaxNode(TAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 193:
#line 893 "msv.y"
{yyval.tnode=new CSyntaxNode(ASIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 194:
#line 894 "msv.y"
{yyval.tnode=new CSyntaxNode(ACOS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 195:
#line 895 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 196:
#line 896 "msv.y"
{yyval.tnode=new CSyntaxNode(SINH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 197:
#line 897 "msv.y"
{yyval.tnode=new CSyntaxNode(COSH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 198:
#line 898 "msv.y"
{yyval.tnode=new CSyntaxNode(TANH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 199:
#line 899 "msv.y"
{yyval.tnode=new CSyntaxNode(EXP_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 200:
#line 900 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 201:
#line 901 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG10_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 202:
#line 902 "msv.y"
{yyval.tnode=new CSyntaxNode(SQRT_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 203:
#line 904 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN2_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 204:
#line 905 "msv.y"
{yyval.tnode=new CSyntaxNode(POW_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 205:
#line 906 "msv.y"
{yyval.tnode=new CSyntaxNode(FMOD_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 206:
#line 907 "msv.y"
{yyval.tnode=new CSyntaxNode(MODF_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 207:
#line 908 "msv.y"
{yyval.tnode=new CSyntaxNode(LDEXP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 208:
#line 909 "msv.y"
{yyval.tnode=new CSyntaxNode(ABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 209:
#line 910 "msv.y"
{yyval.tnode=new CSyntaxNode(FABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 210:
#line 911 "msv.y"
{yyval.tnode=new CSyntaxNode(LABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 211:
#line 914 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 212:
#line 916 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 213:
#line 918 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 214:
#line 920 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 215:
#line 922 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 216:
#line 924 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 217:
#line 925 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 218:
#line 928 "msv.y"
{yyval.tnode=new CSyntaxNode(PREVIOUS_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 219:
#line 935 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 220:
#line 936 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 221:
#line 938 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 222:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 223:
#line 942 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 224:
#line 944 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 225:
#line 945 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 226:
#line 952 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
		;
    break;}
case 227:
#line 957 "msv.y"
{
			//Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数，add by yubin 2014-5-26
		;
    break;}
case 228:
#line 961 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 229:
#line 962 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 230:
#line 967 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 231:
#line 972 "msv.y"
{
			CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
		;
    break;}
case 232:
#line 977 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 233:
#line 978 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 234:
#line 983 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 235:
#line 986 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 236:
#line 987 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 237:
#line 988 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 238:
#line 989 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 239:
#line 990 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 240:
#line 991 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 241:
#line 992 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 242:
#line 995 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 243:
#line 996 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 244:
#line 999 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 245:
#line 1001 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 246:
#line 1002 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 247:
#line 1006 "msv.y"
{
			yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);
		;
    break;}
case 248:
#line 1009 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 249:
#line 1010 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 250:
#line 1013 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 251:
#line 1016 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 252:
#line 1017 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 253:
#line 1018 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 254:
#line 1019 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 255:
#line 1022 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 256:
#line 1024 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 257:
#line 1025 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 258:
#line 1027 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 259:
#line 1028 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 260:
#line 1030 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 261:
#line 1031 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 262:
#line 1033 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 263:
#line 1034 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 264:
#line 1037 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 265:
#line 1038 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 266:
#line 1039 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 267:
#line 1040 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 268:
#line 1041 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 269:
#line 1042 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 270:
#line 1045 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 271:
#line 1049 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 272:
#line 1050 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 273:
#line 1054 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 274:
#line 1062 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 275:
#line 1066 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 276:
#line 1070 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 277:
#line 1076 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
		;
    break;}
case 278:
#line 1082 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
		;
    break;}
case 279:
#line 1088 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 280:
#line 1094 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 281:
#line 1100 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
		;
    break;}
case 282:
#line 1106 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
		;
    break;}
case 283:
#line 1112 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 284:
#line 1118 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 285:
#line 1122 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 286:
#line 1126 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 287:
#line 1130 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 288:
#line 1134 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 289:
#line 1138 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 290:
#line 1142 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 291:
#line 1148 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 292:
#line 1155 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
		;
    break;}
case 293:
#line 1162 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
		;
    break;}
case 294:
#line 1169 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
		;
    break;}
case 295:
#line 1175 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
			pChild0=NULL;
		;
    break;}
case 296:
#line 1181 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 297:
#line 1185 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
			pChild0=NULL;
		;
    break;}
case 298:
#line 1192 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
			pChild0=NULL;
		;
    break;}
case 299:
#line 1197 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 300:
#line 1201 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 301:
#line 1205 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 302:
#line 1209 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 303:
#line 1215 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 304:
#line 1221 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
		;
    break;}
case 305:
#line 1227 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 306:
#line 1233 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 307:
#line 1239 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 308:
#line 1245 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 309:
#line 1258 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
			pChild0=NULL;
		;
    break;}
case 310:
#line 1263 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 311:
#line 1266 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
		;
    break;}
case 312:
#line 1273 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
		;
    break;}
case 313:
#line 1280 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
		;
    break;}
case 314:
#line 1286 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
			pChild0=NULL;
		;
    break;}
case 315:
#line 1292 "msv.y"
{
			yyval.tnode=NULL;
		;
    break;}
case 316:
#line 1295 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 317:
#line 1300 "msv.y"
{yyval.tnode=new CSyntaxNode(FOPEN_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 318:
#line 1302 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETS_EXP,yyvsp[-5].tnode,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 319:
#line 1304 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETC_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 320:
#line 1306 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTS_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 321:
#line 1308 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 322:
#line 1310 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 323:
#line 1312 "msv.y"
{yyval.tnode=new CSyntaxNode(FCLOSE_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 324:
#line 1316 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 325:
#line 1318 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 326:
#line 1320 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 327:
#line 1322 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 328:
#line 1324 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 329:
#line 1326 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 330:
#line 1328 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 331:
#line 1330 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 332:
#line 1332 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 333:
#line 1334 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 334:
#line 1336 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 335:
#line 1338 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 336:
#line 1340 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 337:
#line 1344 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 338:
#line 1345 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 339:
#line 1346 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 340:
#line 1347 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 341:
#line 1348 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 342:
#line 1349 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 343:
#line 1353 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 344:
#line 1357 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 345:
#line 1361 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 346:
#line 1365 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 347:
#line 1369 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 348:
#line 1373 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 349:
#line 1377 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 350:
#line 1381 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 351:
#line 1385 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 352:
#line 1389 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 353:
#line 1393 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 354:
#line 1397 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 355:
#line 1401 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 356:
#line 1405 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 357:
#line 1409 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 358:
#line 1413 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 359:
#line 1416 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 360:
#line 1420 "msv.y"
{
			yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 361:
#line 1424 "msv.y"
{
			yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 362:
#line 1428 "msv.y"
{
			yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
		;
    break;}
case 363:
#line 1433 "msv.y"
{
			yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 364:
#line 1436 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 365:
#line 1439 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 366:
#line 1441 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 367:
#line 1445 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 368:
#line 1449 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 369:
#line 1453 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 370:
#line 1457 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);
		;
    break;}
case 371:
#line 1461 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);
		;
    break;}
case 372:
#line 1467 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRFUNCHEAD_EXP, yyvsp[-1].tnode, STRTYPE);
		;
    break;}
case 373:
#line 1473 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRFUNCTAIL_EXP, yyvsp[-1].tnode, STRTYPE);
		;
    break;}
case 374:
#line 1479 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRFUNCCAT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
		;
    break;}
case 375:
#line 1485 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRFUNCCPY_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
		;
    break;}
case 376:
#line 1491 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRFUNCCMP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
		;
    break;}
case 377:
#line 1497 "msv.y"
{
			yyval.tnode=new CSyntaxNode(STRFUNCLEN_EXP, yyvsp[-1].tnode, STRTYPE);
		;
    break;}
case 378:
#line 1502 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 379:
#line 1503 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 380:
#line 1504 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 381:
#line 1505 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 382:
#line 1506 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 383:
#line 1507 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 384:
#line 1512 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 385:
#line 1516 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 386:
#line 1520 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 387:
#line 1524 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 388:
#line 1535 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 389:
#line 1539 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 390:
#line 1543 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 391:
#line 1547 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 392:
#line 1558 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
		;
    break;}
case 393:
#line 1562 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
		;
    break;}
case 394:
#line 1566 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
		;
    break;}
case 395:
#line 1570 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
		;
    break;}
case 396:
#line 1574 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 397:
#line 1578 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 398:
#line 1582 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
		;
    break;}
case 399:
#line 1592 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 400:
#line 1596 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 401:
#line 1597 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 402:
#line 1600 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 403:
#line 1601 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 404:
#line 1602 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 405:
#line 1603 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 406:
#line 1604 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 407:
#line 1605 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 408:
#line 1608 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 409:
#line 1609 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 410:
#line 1610 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 411:
#line 1611 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 412:
#line 1612 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 413:
#line 1613 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 414:
#line 1614 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 415:
#line 1615 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 416:
#line 1618 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 417:
#line 1619 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 418:
#line 1622 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 419:
#line 1623 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 420:
#line 1624 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 421:
#line 1625 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 422:
#line 1626 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 423:
#line 1628 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 424:
#line 1632 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 425:
#line 1633 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 426:
#line 1636 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 427:
#line 1639 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 428:
#line 1642 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 429:
#line 1643 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 430:
#line 1646 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 431:
#line 1649 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1651 "msv.y"
