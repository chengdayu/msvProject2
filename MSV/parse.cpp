
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	RETURN	262
#define	IF	263
#define	ELSE	264
#define	EMPTY	265
#define	AWAIT	266
#define	PROJECTION	267
#define	PBEGIN	268
#define	PEND	269
#define	POINTERNULL	270
#define	ARRAY	271
#define	STRUCT	272
#define	DOT	273
#define	UNION	274
#define	FILEDECLARATION	275
#define	MORE	276
#define	DEFINE	277
#define	MY_TRUE	278
#define	MY_FALSE	279
#define	EXIST	280
#define	FRAME	281
#define	FOR	282
#define	WHILE	283
#define	DO	284
#define	TRUE	285
#define	FALSE	286
#define	REPEAT	287
#define	UNTIL	288
#define	DISPLAY	289
#define	SKIP	290
#define	THEN	291
#define	COMMA	292
#define	COLON	293
#define	INTDECLARATION	294
#define	STRDECLARATION	295
#define	POINTERDECLARATION	296
#define	CHARDECLARATION	297
#define	VOIDDECLARATION	298
#define	FLOATDECLARATION	299
#define	LISTDECLARATION	300
#define	OPEN_PAR	301
#define	CLOSE_PAR	302
#define	TIMES	303
#define	OPEN_BPAR	304
#define	CLOSE_BPAR	305
#define	OPEN_MPAR	306
#define	CLOSE_MPAR	307
#define	FUNCTION	308
#define	OVER	309
#define	CYLINDER	310
#define	OVEREP	311
#define	INTER_OR	312
#define	NON_DETERMINED	313
#define	SEND	314
#define	RECEIVE	315
#define	PROCESS	316
#define	CHANNEL	317
#define	PUT	318
#define	GET	319
#define	ERROR_TOKEN	320
#define	STRFUNCHEAD	321
#define	STRFUNCTAIL	322
#define	STRFUNCCAT	323
#define	STRFUNCCMP	324
#define	STRFUNCCPY	325
#define	STRFUNCLEN	326
#define	EXTERN	327
#define	UNSIGNED	328
#define	SIGNED	329
#define	CHOP	330
#define	IMPLY	331
#define	IFF	332
#define	PROPIMPLY	333
#define	OR	334
#define	PARALLEL	335
#define	AND	336
#define	ASS_P	337
#define	ASS_N	338
#define	CON	339
#define	ADDRESS	340
#define	NE	341
#define	EQ	342
#define	GE	343
#define	LE	344
#define	GT	345
#define	LT	346
#define	LST	347
#define	RST	348
#define	ADD	349
#define	SUB	350
#define	MUL	351
#define	DIV	352
#define	MOD	353
#define	BNE	354
#define	CHOPSTAR	355
#define	NEXT	356
#define	NEGATION	357
#define	LENGTH	358
#define	REQUEST	359
#define	FINAL	360
#define	KEEP	361
#define	ALWAYS	362
#define	HALT	363
#define	W_NEXT	364
#define	PREFIX	365
#define	SOMETIMES	366
#define	ID	367
#define	STRLITERAL	368
#define	STRUCT_TYPE	369
#define	INTLITERAL	370
#define	FLOATLITERAL	371
#define	CHARLITERAL	372

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1233
#define	YYFLAG		-32768
#define	YYNTBASE	118

#define YYTRANSLATE(x) ((unsigned)(x) <= 372 ? yytranslate[x] : 193)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   114,   116,   118,   120,
   122,   127,   132,   137,   142,   151,   153,   155,   157,   162,
   164,   166,   168,   170,   175,   179,   187,   197,   204,   210,
   220,   222,   224,   226,   234,   238,   240,   244,   246,   247,
   256,   266,   277,   287,   298,   310,   315,   321,   326,   331,
   334,   337,   340,   343,   345,   348,   351,   355,   359,   363,
   367,   375,   384,   396,   410,   412,   414,   416,   418,   420,
   422,   425,   432,   437,   443,   449,   458,   467,   470,   473,
   476,   477,   484,   492,   493,   496,   500,   502,   504,   506,
   508,   512,   515,   517,   529,   542,   554,   566,   584,   603,
   621,   640,   660,   679,   697,   716,   734,   736,   738,   740,
   742,   744,   755,   759,   761,   766,   772,   784,   797,   809,
   821,   834,   838,   842,   845,   846,   849,   852,   855,   863,
   870,   875,   879,   881,   885,   889,   895,   897,   901,   904,
   905,   907,   911,   913,   916,   919,   921,   923,   925,   927,
   929,   931,   935,   937,   939,   941,   943,   945,   947,   949,
   951,   953,   955,   957,   959,   961,   963,   967,   969,   971,
   975,   980,   985,   990,   995,  1000,  1005,  1009,  1013,  1017,
  1018,  1021,  1024,  1027,  1030,  1033,  1037,  1042,  1047,  1052,
  1058,  1064,  1070,  1076,  1082,  1089,  1095,  1101,  1108,  1114,
  1121,  1129,  1136,  1143,  1151,  1158,  1165,  1171,  1179,  1186,
  1188,  1190,  1193,  1197,  1201,  1205,  1209,  1211,  1213,  1215,
  1219,  1223,  1227,  1231,  1235,  1239,  1243,  1247,  1251,  1255,
  1257,  1259,  1261,  1263,  1265,  1267,  1270,  1273,  1275,  1277,
  1281,  1284,  1288,  1293,  1299,  1304,  1308,  1313,  1319,  1324,
  1327,  1331,  1336,  1339,  1343,  1348,  1353,  1359,  1366,  1375,
  1383,  1388,  1392,  1398,  1407,  1408,  1413,  1417,  1422,  1427,
  1433,  1439,  1445,  1451,  1458,  1468,  1469,  1477,  1487,  1496,
  1502,  1507,  1510,  1513,  1519,  1520,  1523,  1527,  1534,  1535,
  1538,  1542,  1545,  1549,  1552,  1554,  1558,  1560,  1562,  1564,
  1566,  1570,  1571,  1574,  1575,  1579,  1581,  1584,  1588,  1592,
  1596,  1600,  1606,  1616,  1618,  1620,  1621,  1623,  1624,  1626,
  1627,  1635,  1643,  1649,  1652,  1654,  1655,  1661,  1664,  1665,
  1670,  1676,  1677,  1681,  1686,  1692,  1697,  1703,  1708,  1709,
  1713,  1717,  1722,  1727,  1732,  1737,  1742,  1747,  1752,  1757,
  1764,  1769,  1774,  1779,  1786,  1790,  1794,  1799,  1803,  1804,
  1808,  1812,  1816,  1820,  1823
};

static const short yyrhs[] = {   119,
   122,     0,    13,   120,    14,     0,     0,   120,    81,   120,
     0,   120,    79,   120,     0,   120,    77,   120,     0,   120,
    78,   120,     0,   120,    75,   120,     0,   107,   120,     0,
   106,   120,     0,   111,   120,     0,   109,   120,     0,   101,
   120,     0,    35,     0,    23,     0,    24,     0,   103,   143,
     0,    10,     0,    21,     0,   108,   120,     0,   105,   120,
     0,   102,   120,     0,    49,   120,   121,    50,    12,    49,
   120,    50,     0,   112,     0,    22,   112,    38,   158,     0,
   120,   100,     0,    46,   120,    47,     0,    37,   120,   121,
     0,     0,   122,    81,   122,     0,   122,    79,   122,     0,
   122,    75,   122,     0,   134,     0,   129,     0,   182,     0,
     7,   112,     0,   185,     0,   176,     0,   177,     0,   178,
     0,   101,    46,   122,    47,     0,   106,    46,   122,    47,
     0,   107,    46,   122,    47,     0,    11,    46,   157,    47,
     0,    32,    49,   122,    50,    33,    46,   157,    47,     0,
    35,     0,    10,     0,    21,     0,   103,    46,   143,    47,
     0,   189,     0,   187,     0,    30,     0,    31,     0,   105,
    46,   122,    47,     0,   122,    80,   122,     0,    46,   175,
    47,    76,    51,   122,    52,     0,    26,    46,   168,   173,
    47,    81,    46,   122,    47,     0,    49,   122,   174,    50,
    12,   166,     0,    49,   122,    50,    12,   166,     0,    22,
   112,    46,   162,    47,    82,    49,   124,    50,     0,   127,
     0,   125,     0,   126,     0,    25,   168,   163,    38,    49,
   122,    50,     0,    46,   122,    47,     0,   129,     0,   129,
    81,   123,     0,   122,     0,     0,   161,   112,    46,   162,
    47,    49,   122,    50,     0,   161,    96,   112,    46,   162,
    47,    49,   122,    50,     0,   161,    96,    96,   112,    46,
   162,    47,    49,   122,    50,     0,    17,   114,   112,    46,
   162,    47,    49,   122,    50,     0,    17,   114,    96,   112,
    46,   162,    47,    49,   122,    50,     0,    17,   114,    96,
    96,   112,    46,   162,    47,    49,   122,    50,     0,   112,
    46,   164,    47,     0,    72,   112,    46,   164,    47,     0,
   140,    46,   164,    47,     0,   128,    49,   123,    50,     0,
    17,   112,     0,    19,   112,     0,    74,   130,     0,    73,
   130,     0,   130,     0,   131,   132,     0,   114,   132,     0,
    17,   112,   132,     0,    19,   112,   132,     0,    17,   114,
   132,     0,    19,   114,   132,     0,    46,    96,   168,    47,
    46,   162,    47,     0,    46,    96,    96,   168,    47,    46,
   162,    47,     0,    46,    96,   112,    51,   143,   141,    52,
    47,    46,   162,    47,     0,    46,    96,   112,    51,   143,
   141,    52,    47,    46,   162,    47,    82,   150,     0,    39,
     0,    44,     0,    42,     0,    40,     0,    43,     0,    20,
     0,   168,   133,     0,   112,    51,   143,   141,    52,   133,
     0,   168,    82,   138,   133,     0,   112,    16,    82,   150,
   133,     0,   112,    16,    82,   169,   133,     0,   112,    51,
   143,   141,    52,    82,   150,   133,     0,   112,    51,   143,
   141,    52,    82,   169,   133,     0,    96,   132,     0,    37,
   132,     0,    37,     1,     0,     0,   112,    51,   143,   141,
    52,     0,     0,    37,   112,    51,   143,   141,    52,     0,
     0,     0,    37,     1,     0,   135,   137,   138,     0,   168,
     0,   191,     0,   140,     0,   142,     0,    46,   135,    47,
     0,   101,   135,     0,   136,     0,    46,    46,    42,    96,
    47,   115,    47,    51,   143,   141,    52,     0,    46,    46,
    73,    42,    96,    47,   115,    47,    51,   143,   141,    52,
     0,    46,    46,    39,    96,    47,   115,    47,    51,   143,
   141,    52,     0,    46,    46,    44,    96,    47,   115,    47,
    51,   143,   141,    52,     0,    46,    46,    42,    96,    47,
    46,    46,    42,    96,    47,   115,    47,    47,    51,   143,
   141,    52,     0,    46,    46,    42,    96,    47,    46,    46,
    73,    42,    96,    47,   115,    47,    47,    51,   143,   141,
    52,     0,    46,    46,    42,    96,    47,    46,    46,    39,
    96,    47,   115,    47,    47,    51,   143,   141,    52,     0,
    46,    46,    73,    42,    96,    47,    46,    46,    42,    96,
    47,   115,    47,    47,    51,   143,   141,    52,     0,    46,
    46,    73,    42,    96,    47,    46,    46,    73,    42,    96,
    47,   115,    47,    47,    51,   143,   141,    52,     0,    46,
    46,    73,    42,    96,    47,    46,    46,    39,    96,    47,
   115,    47,    47,    51,   143,   141,    52,     0,    46,    46,
    39,    96,    47,    46,    46,    42,    96,    47,   115,    47,
    47,    51,   143,   141,    52,     0,    46,    46,    39,    96,
    47,    46,    46,    73,    42,    96,    47,   115,    47,    47,
    51,   143,   141,    52,     0,    46,    46,    39,    96,    47,
    46,    46,    39,    96,    47,   115,    47,    47,    51,   143,
   141,    52,     0,    82,     0,    83,     0,   143,     0,   150,
     0,   169,     0,    46,   169,    47,    46,   131,    47,    46,
   162,    47,   126,     0,    46,   138,    47,     0,   139,     0,
    96,    46,   136,    47,     0,   112,    51,   143,   141,    52,
     0,    46,    46,    39,    96,    47,   112,    47,    51,   143,
   141,    52,     0,    46,    46,    73,    39,    96,    47,   112,
    47,    51,   143,   141,    52,     0,    46,    46,    44,    96,
    47,   112,    47,    51,   143,   141,    52,     0,    46,    46,
    42,    96,    47,   112,    47,    51,   143,   141,    52,     0,
    46,    46,    73,    42,    96,    47,   112,    47,    51,   143,
   141,    52,     0,    46,   140,    47,     0,    37,   143,   141,
     0,    37,     1,     0,     0,    96,   168,     0,    96,   142,
     0,    96,   140,     0,    46,   142,    47,    51,   143,   141,
    52,     0,    96,    46,   161,    96,    47,   143,     0,    96,
    46,   143,    47,     0,    46,   142,    47,     0,   146,     0,
   146,   159,   143,     0,   143,   149,   146,     0,     8,   157,
    36,   143,   145,     0,   146,     0,   146,   149,   146,     0,
     9,   143,     0,     0,   147,     0,   146,   148,   147,     0,
   170,     0,    95,   147,     0,    99,   147,     0,    15,     0,
   172,     0,   168,     0,   140,     0,   142,     0,   126,     0,
    46,   143,    47,     0,   171,     0,   154,     0,   155,     0,
   191,     0,    96,     0,    97,     0,    98,     0,    92,     0,
    93,     0,    85,     0,    57,     0,    84,     0,    94,     0,
    95,     0,   150,    84,   150,     0,   151,     0,   152,     0,
    46,   150,    47,     0,    51,   143,   153,    52,     0,    51,
   169,   153,    52,     0,    51,   150,   153,    52,     0,    49,
   143,   153,    50,     0,    49,   169,   153,    50,     0,    49,
   150,   153,    50,     0,    37,   143,   153,     0,    37,   169,
   153,     0,    37,   150,   153,     0,     0,    37,     1,     0,
    85,   168,     0,    85,   140,     0,    85,   191,     0,    85,
   154,     0,    46,   154,    47,     0,    46,    39,    47,   144,
     0,    46,    44,    47,   144,     0,    46,    42,    47,   144,
     0,    46,    74,    39,    47,   144,     0,    46,    74,    42,
    47,   144,     0,    46,    73,    39,    47,   144,     0,    46,
    73,    42,    47,   144,     0,    46,    39,    96,    47,   156,
     0,    46,    73,    39,    96,    47,   156,     0,    46,    44,
    96,    47,   156,     0,    46,    42,    96,    47,   156,     0,
    46,    73,    42,    96,    47,   156,     0,    46,    43,    96,
    47,   156,     0,    46,    39,    96,    96,    47,   156,     0,
    46,    73,    39,    96,    96,    47,   156,     0,    46,    44,
    96,    96,    47,   156,     0,    46,    42,    96,    96,    47,
   156,     0,    46,    73,    42,    96,    96,    47,   156,     0,
    46,    43,    96,    96,    47,   156,     0,    46,    17,   114,
    96,    47,   156,     0,    46,   114,    96,    47,   156,     0,
    46,    17,   114,    96,    96,    47,   156,     0,    46,   114,
    96,    96,    47,   156,     0,   144,     0,   158,     0,   102,
   157,     0,   157,    81,   157,     0,   157,    79,   157,     0,
    46,   157,    47,     0,   143,   159,   143,     0,    23,     0,
    24,     0,   143,     0,   143,    87,   169,     0,   143,    86,
   169,     0,   169,    87,   143,     0,   169,    86,   143,     0,
   143,    87,    15,     0,   143,    86,    15,     0,    15,    87,
   143,     0,    15,    86,   143,     0,   143,    87,   171,     0,
   143,    86,   171,     0,    88,     0,    89,     0,    86,     0,
    90,     0,    91,     0,    87,     0,    73,    39,     0,    73,
    42,     0,   160,     0,   131,     0,   161,   168,   163,     0,
   161,   163,     0,   114,   168,   163,     0,   114,    96,   168,
   163,     0,   114,    96,    96,   168,   163,     0,   114,   168,
    16,   163,     0,   112,   168,   163,     0,   112,    96,   168,
   163,     0,   112,    96,    96,   168,   163,     0,   112,   168,
    16,   163,     0,   114,   163,     0,   114,    96,   163,     0,
   114,    96,    96,   163,     0,   112,   163,     0,   112,    96,
   163,     0,   112,    96,    96,   163,     0,   161,   168,    16,
   163,     0,   161,    96,   168,    16,   163,     0,   161,   168,
    51,   143,    52,   163,     0,   161,   168,    51,   143,    37,
   143,    52,   163,     0,   161,   168,    16,    51,   143,    52,
   163,     0,   161,    96,   168,   163,     0,   161,    96,   163,
     0,   161,    96,    96,   168,   163,     0,    46,    96,   168,
    47,    46,   162,    47,   163,     0,     0,    37,   161,   168,
   163,     0,    37,   161,   163,     0,    37,   112,   168,   163,
     0,    37,   114,   168,   163,     0,    37,   114,    96,   168,
   163,     0,    37,   112,   168,    16,   163,     0,    37,   114,
   168,    16,   163,     0,    37,   161,   168,    16,   163,     0,
    37,   161,    96,   168,    16,   163,     0,    37,    46,    96,
   168,    47,    46,   162,    47,   163,     0,     0,    37,   161,
   168,    51,   143,    52,   163,     0,    37,   161,   168,    51,
   143,    37,   143,    52,   163,     0,    37,   161,   168,    16,
    51,   143,    52,   163,     0,    37,   161,    96,   168,   163,
     0,    37,   161,    96,   163,     0,    37,     1,     0,   138,
   165,     0,   112,    46,   164,    47,   165,     0,     0,    85,
     1,     0,    37,   138,   165,     0,    37,   112,    46,   164,
    47,   165,     0,     0,    37,     1,     0,    49,   122,    50,
     0,     1,    50,     0,    46,   157,    47,     0,     1,    47,
     0,   112,     0,    46,   168,    47,     0,   113,     0,   115,
     0,   117,     0,   116,     0,    37,   168,   173,     0,     0,
    37,     1,     0,     0,    37,   122,   174,     0,   158,     0,
   102,   175,     0,   175,    81,   175,     0,   175,    79,   175,
     0,    46,   175,    47,     0,    28,   167,   166,     0,    27,
   143,    48,    29,   166,     0,    27,    46,   179,    37,   180,
    37,   181,    47,   166,     0,   134,     0,   130,     0,     0,
   157,     0,     0,   134,     0,     0,     3,    46,   147,    47,
    49,   183,    50,     0,     4,   147,    38,    46,   122,    47,
   184,     0,     6,    38,    46,   122,    47,     0,     5,   183,
     0,   183,     0,     0,     8,   157,    36,   166,   186,     0,
     9,   166,     0,     0,    34,    46,   138,    47,     0,    34,
    46,   138,   188,    47,     0,     0,    37,   138,   188,     0,
   104,    46,   168,    47,     0,   104,    46,   168,   190,    47,
     0,   104,    46,   140,    47,     0,   104,    46,   140,   190,
    47,     0,   104,    46,   191,    47,     0,     0,    37,   168,
   190,     0,    37,   140,   190,     0,   168,    18,   168,   192,
     0,   140,    18,   168,   192,     0,   142,    18,   168,   192,
     0,   168,    18,   140,   192,     0,   140,    18,   140,   192,
     0,   142,    18,   140,   192,     0,   168,    76,   168,   192,
     0,   140,    76,   168,   192,     0,    46,   154,    47,    76,
   168,   192,     0,   142,    76,   168,   192,     0,   168,    76,
   140,   192,     0,   140,    76,   140,   192,     0,    46,   154,
    47,    76,   140,   192,     0,   168,    18,   126,     0,   168,
    76,   126,     0,   142,    76,   140,   192,     0,    46,   191,
    47,     0,     0,    18,   168,   192,     0,    18,   140,   192,
     0,    76,   168,   192,     0,    76,   140,   192,     0,    18,
   126,     0,    76,   126,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   177,   178,   182,   183,   184,   185,   186,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   204,   205,   206,
   207,   208,   209,   213,   214,   219,   220,   224,   228,   233,
   235,   242,   348,   349,   351,   352,   353,   354,   355,   356,
   357,   359,   360,   362,   363,   364,   365,   366,   367,   373,
   374,   375,   376,   377,   378,   380,   383,   389,   393,   402,
   412,   414,   415,   417,   431,   435,   439,   446,   447,   452,
   457,   463,   469,   475,   481,   491,   496,   501,   510,   518,
   529,   543,   544,   545,   549,   553,   557,   561,   565,   569,
   576,   578,   580,   585,   597,   598,   599,   602,   603,   604,
   611,   615,   619,   624,   630,   635,   642,   648,   659,   661,
   662,   666,   673,   677,   678,   686,   690,   691,   692,   693,
   694,   695,   696,   699,   701,   703,   705,   707,   709,   711,
   713,   715,   717,   719,   721,   723,   728,   729,   732,   733,
   734,   737,   738,   739,   742,   746,   751,   753,   755,   757,
   759,   761,   765,   767,   768,   774,   775,   776,   778,   780,
   782,   784,   790,   791,   793,   794,   800,   801,   805,   806,
   810,   811,   815,   816,   817,   818,   819,   821,   822,   823,
   824,   825,   826,   827,   828,   829,   832,   833,   834,   835,
   836,   837,   838,   839,   841,   843,   847,   848,   849,   850,
   856,   860,   868,   880,   884,   893,   905,   909,   917,   921,
   922,   925,   930,   934,   939,   943,   950,   953,   954,   957,
   958,   961,   962,   965,   966,   967,   968,   969,   970,   973,
   974,   975,   976,   977,   978,   980,   981,   983,   984,   986,
   994,   995,   996,   997,   998,  1004,  1006,  1007,  1010,  1011,
  1012,  1015,  1016,  1019,  1020,  1023,  1024,  1027,  1028,  1033,
  1034,  1035,  1036,  1037,  1038,  1045,  1047,  1050,  1052,  1058,
  1062,  1067,  1073,  1079,  1085,  1095,  1101,  1107,  1113,  1122,
  1126,  1130,  1136,  1140,  1144,  1150,  1156,  1163,  1171,  1179,
  1185,  1191,  1195,  1202,  1208,  1211,  1215,  1219,  1225,  1231,
  1237,  1244,  1252,  1258,  1273,  1279,  1282,  1290,  1298,  1304,
  1310,  1314,  1323,  1327,  1337,  1338,  1342,  1346,  1356,  1357,
  1365,  1367,  1374,  1376,  1382,  1383,  1387,  1392,  1397,  1402,
  1408,  1412,  1413,  1419,  1420,  1431,  1442,  1443,  1445,  1447,
  1453,  1459,  1467,  1475,  1479,  1483,  1489,  1493,  1499,  1503,
  1510,  1514,  1518,  1525,  1529,  1533,  1537,  1547,  1548,  1554,
  1555,  1559,  1560,  1565,  1566,  1567,  1568,  1569,  1572,  1573,
  1574,  1580,  1581,  1582,  1584,  1585,  1586,  1588,  1589,  1590,
  1591,  1593,  1594,  1595,  1596,  1597,  1598,  1599,  1603,  1604,
  1605,  1606,  1607,  1608,  1609
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","RETURN","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN",
"PEND","POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE",
"DEFINE","MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE",
"REPEAT","UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N",
"CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function_define","function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp","option_exp_else_statement",
"simple_ari_exp","member_in_exp","bi_operator","ari_operator","array_exp","option_list_value",
"option_struct_list_value","inner_option_list_value","address_exp","type_cast",
"casted_element","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   118,   119,   119,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   121,   121,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   123,   123,   124,   124,   125,
   125,   125,   125,   125,   125,   126,   126,   126,   127,   128,
   128,   129,   129,   129,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   131,   131,   131,   131,   131,   131,
   132,   132,   132,   132,   132,   132,   132,   132,   133,   133,
   133,    -1,    -1,    -1,    -1,   134,   135,   135,   135,   135,
   135,   135,   135,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   137,   137,   138,   138,
   138,   138,   138,   138,   139,   140,   140,   140,   140,   140,
   140,   140,   141,   141,   141,   142,   142,   142,   142,   142,
   142,   142,   143,   143,   143,   143,   144,   144,   145,   145,
   146,   146,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   148,   148,   148,   148,
   148,   148,   148,   148,   149,   149,   150,   150,   150,   150,
   151,   151,   151,   152,   152,   152,   153,   153,   153,   153,
   153,   154,   154,   154,   154,   154,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   156,
   157,   157,   157,   157,   157,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   159,
   159,   159,   159,   159,   159,   160,   160,   161,   161,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   164,   164,   164,   164,   165,   165,   165,   165,
   166,   166,   167,   167,   168,   168,   169,   170,   171,   172,
   173,   173,   173,   174,   174,   175,   175,   175,   175,   175,
   176,   177,   178,   179,   179,   179,   180,   180,   181,   181,
   182,   183,   183,   184,   184,   184,   185,   186,   186,   187,
   187,   188,   188,   189,   189,   189,   189,   189,   190,   190,
   190,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   192,   192,
   192,   192,   192,   192,   192
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     2,     1,     1,     1,     1,
     4,     4,     4,     4,     8,     1,     1,     1,     4,     1,
     1,     1,     1,     4,     3,     7,     9,     6,     5,     9,
     1,     1,     1,     7,     3,     1,     3,     1,     0,     8,
     9,    10,     9,    10,    11,     4,     5,     4,     4,     2,
     2,     2,     2,     1,     2,     2,     3,     3,     3,     3,
     7,     8,    11,    13,     1,     1,     1,     1,     1,     1,
     2,     6,     4,     5,     5,     8,     8,     2,     2,     2,
     0,     6,     7,     0,     2,     3,     1,     1,     1,     1,
     3,     2,     1,    11,    12,    11,    11,    17,    18,    17,
    18,    19,    18,    17,    18,    17,     1,     1,     1,     1,
     1,    10,     3,     1,     4,     5,    11,    12,    11,    11,
    12,     3,     3,     2,     0,     2,     2,     2,     7,     6,
     4,     3,     1,     3,     3,     5,     1,     3,     2,     0,
     1,     3,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     1,     3,
     4,     4,     4,     4,     4,     4,     3,     3,     3,     0,
     2,     2,     2,     2,     2,     3,     4,     4,     4,     5,
     5,     5,     5,     5,     6,     5,     5,     6,     5,     6,
     7,     6,     6,     7,     6,     6,     5,     7,     6,     1,
     1,     2,     3,     3,     3,     3,     1,     1,     1,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     1,
     1,     1,     1,     1,     1,     2,     2,     1,     1,     3,
     2,     3,     4,     5,     4,     3,     4,     5,     4,     2,
     3,     4,     2,     3,     4,     4,     5,     6,     8,     7,
     4,     3,     5,     8,     0,     4,     3,     4,     4,     5,
     5,     5,     5,     6,     9,     0,     7,     9,     8,     5,
     4,     2,     2,     5,     0,     2,     3,     6,     0,     2,
     3,     2,     3,     2,     1,     3,     1,     1,     1,     1,
     3,     0,     2,     0,     3,     1,     2,     3,     3,     3,
     3,     5,     9,     1,     1,     0,     1,     0,     1,     0,
     7,     7,     5,     2,     1,     0,     5,     2,     0,     4,
     5,     0,     3,     4,     5,     4,     5,     4,     0,     3,
     3,     4,     4,     4,     4,     4,     4,     4,     4,     6,
     4,     4,     4,     6,     3,     3,     4,     3,     0,     3,
     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,     0,    47,     0,     0,     0,   100,    48,
     0,     0,     0,     0,     0,    52,    53,     0,     0,    46,
    95,    98,    97,    99,    96,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   325,     0,     1,
    62,    63,    61,     0,    34,    84,     0,    33,     0,   123,
   119,   120,   268,     0,   117,    38,    39,    40,    35,    37,
    51,    50,   118,     0,     0,    29,    13,    22,     0,   176,
     0,     0,     0,     0,   328,   330,   329,   181,   179,   180,
    17,   163,   171,   184,   185,   178,   173,   183,   177,   186,
    21,    10,     9,    20,    12,    11,     2,     0,     0,     0,
     0,     0,    26,     0,    36,   176,   247,   248,     0,     0,
   327,   249,     0,   241,     0,     0,    80,     0,    81,     0,
     0,     0,   325,   306,     0,   346,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   181,     0,   179,
   180,   184,   336,   178,     0,   186,     0,     0,     0,     0,
    95,    97,     0,    83,     0,    82,     0,   325,   158,   157,
   156,     0,     0,   122,   119,     0,     0,     0,     0,     0,
   315,     0,     0,   325,    86,   111,     0,     0,     0,     0,
     0,    85,   137,   138,     0,     0,   315,     0,     0,     0,
     0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   179,   180,
     0,   184,   178,   186,     0,   213,     0,   215,   212,   214,
   174,   175,   195,   196,     0,   193,   194,   192,   262,   265,
   260,   261,   263,   264,   190,   191,   187,   188,   189,     0,
     0,     8,     6,     7,     5,     4,     0,     0,     0,     0,
   249,     0,   242,   262,   265,     0,     0,     0,     0,     0,
     0,     0,    87,     0,   325,    89,    88,    90,   295,     0,
     0,     0,   332,     0,    95,    97,    99,    96,     0,     0,
   345,   344,     0,     0,   324,     0,     0,     0,   341,     0,
     0,     0,     0,     0,     0,   144,   139,   140,   198,   199,
   141,     0,     0,    95,    97,    96,     0,     0,     0,     0,
   325,   156,     0,   337,    65,   121,   152,   162,     0,   326,
     0,     0,     0,   388,     0,     0,     0,   315,     0,     0,
     0,     0,     0,   269,     0,     0,     0,     0,   119,   120,
     0,   117,   118,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   325,   319,     0,   155,   108,     0,     0,
     0,     0,   101,    32,    31,    55,    30,     0,     0,    66,
   116,     0,   389,   389,     0,   389,   389,   389,   389,   389,
   389,     0,     0,   295,   385,   389,   389,   386,   389,   389,
    25,    29,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   182,   216,     0,     0,     0,     0,     0,     0,   165,
   172,   164,     0,   257,   256,   245,   255,   251,   259,   254,
   250,   258,   246,   359,   244,   243,   253,   252,    44,     0,
   325,   295,     0,   306,   306,   306,     0,   312,     0,     0,
     0,   306,     0,     0,     0,     0,     0,     0,     0,   348,
     0,   323,   322,     0,     0,     0,     0,     0,     0,     0,
     0,   210,   210,   210,   210,   210,   210,     0,     0,   360,
     0,     0,     0,     0,     0,     0,     0,    95,    97,    95,
    97,   340,   156,     0,     0,     0,     0,     0,     0,     0,
   339,   338,   334,     0,     0,     0,     0,   325,     0,   266,
   267,   161,     0,    95,    97,    96,     0,    41,     0,     0,
    49,     0,   366,     0,   364,     0,   368,    54,    42,    43,
   316,   315,     0,   313,    76,     0,     0,     0,   155,   110,
   109,   111,    79,     0,     0,     0,     0,     0,   376,   373,
    78,   383,   379,   377,   374,   387,   381,     0,   295,     0,
   375,   372,   382,   378,    28,     0,   170,     0,   217,   167,
     0,     0,   219,     0,     0,     0,     0,   218,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   357,
   325,   295,     0,     0,   306,   283,   306,   306,   280,   306,
   306,   271,   306,     0,     0,   306,     0,   306,   306,   297,
   306,     0,   333,   332,     0,     0,     0,     0,     0,     0,
     0,   347,     0,   342,   321,     0,   143,   200,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   362,   361,     0,   197,     0,     0,     0,     0,     0,     0,
     0,   155,   295,   340,   155,   389,   389,     0,   335,    59,
     0,    77,     0,     0,     0,     0,     0,     0,    95,    97,
     0,     0,     0,     0,   369,   369,   367,   365,     0,   320,
   325,   319,   154,   155,   146,   111,   111,     0,   103,    67,
   394,   389,   389,   395,   389,   389,   295,     0,     0,     0,
     0,   166,     0,     0,     0,   240,   224,     0,   227,     0,
   229,     0,   226,     0,     0,     0,     0,     0,   222,     0,
     0,   223,     0,     0,   220,   221,   237,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   358,   295,     0,     0,
     0,   306,   284,   306,   306,   276,   306,   281,   306,   306,
   272,     0,   292,   306,   306,     0,   270,     0,     0,   306,
   298,   306,   306,   299,   311,   306,   306,     0,   296,     0,
   331,     0,     0,     0,   350,     0,     0,   211,   210,   210,
   210,   204,   206,   205,   201,   203,   202,     0,   145,   363,
     0,     0,   325,   328,     0,   325,   328,   325,   328,     0,
     0,   295,     0,     0,     0,   384,   380,     0,    58,   155,
   160,     0,     0,     0,     0,     0,     0,   371,   370,    76,
   315,   317,   153,   104,   105,   111,   391,   390,   393,   392,
     0,     0,     0,     0,   169,   236,     0,   168,   230,   233,
   235,   232,     0,   225,     0,   228,     0,   239,     0,     0,
     0,     0,     0,     0,   351,     0,     0,     0,     0,   285,
   306,   277,   279,   282,   306,   273,   275,   306,   306,   291,
     0,   286,     0,    69,     0,   301,   300,   302,   306,   310,
     0,   303,     0,    64,     0,   349,     0,     0,     0,   207,
   209,   208,     0,     0,     0,     0,     0,     0,     0,     0,
   325,     0,   325,   328,     0,   146,    91,   159,    56,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   314,     0,     0,   102,     0,     0,     0,    23,   238,   231,
   234,     0,     0,     0,     0,     0,     0,   295,   278,   274,
   293,   287,     0,     0,   306,    68,     0,   295,   304,     0,
     0,   306,     0,     0,    45,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    92,     0,     0,     0,     0,     0,     0,     0,
     0,    76,   111,   111,     0,     0,    70,     0,     0,     0,
     0,    73,     0,   306,     0,   288,    60,     0,   306,     0,
   307,    57,   343,   295,     0,     0,     0,   155,   155,     0,
     0,     0,   155,   155,   155,   155,     0,     0,     0,     0,
     0,     0,   295,     0,     0,     0,     0,     0,     0,     0,
   318,   106,   107,     0,    71,     0,   353,     0,    74,   306,
   290,   306,   306,   309,   306,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   155,     0,
     0,     0,   155,   155,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    72,   356,    75,   294,   289,   305,
   308,     0,   328,   328,     0,   147,   126,   328,   328,     0,
   150,   124,   149,   127,     0,     0,     0,     0,     0,     0,
    93,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   355,   352,     0,     0,   142,     0,     0,     0,   328,
     0,     0,   328,   148,   328,   328,     0,   151,   125,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   354,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   328,    94,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   155,   155,     0,
   155,   155,     0,     0,     0,     0,     0,     0,   155,     0,
     0,   155,   155,   155,     0,   136,   134,     0,   130,   128,
     0,     0,     0,   155,   135,   129,   133,   131,     0,   132,
     0,     0,     0
};

static const short yydefgoto[] = {  1231,
     2,    21,   218,   157,   389,   977,    61,    98,    63,    64,
    65,    66,    67,   378,   383,    68,    69,    70,   205,   375,
   316,    99,   557,   100,   132,   736,   732,   102,   103,   260,
   245,   318,   319,   320,   663,   104,   105,   737,   272,   134,
   276,    73,    74,   467,   292,   376,   554,   454,   150,   106,
   135,   107,   108,   109,   475,   347,   165,    76,    77,    78,
   303,   653,   917,    79,   766,  1143,    80,   620,    81,   501,
    82,   544,   110,   569
};

static const short yypact[] = {   156,
  1777,  2895,-32768,-32768,    73,-32768,-32768,-32768,  1777,  1777,
  1777,  1777,   916,  1777,  1777,  1777,  1777,  1777,  1777,-32768,
   233,   185,   172,  2154,-32768,   192,   150,   554,-32768,-32768,
   216,    16,   324,  1245,    52,-32768,-32768,   253,   344,-32768,
-32768,-32768,-32768,-32768,-32768,  2549,  2895,   323,    66,   883,
    47,   189,   380,   403,   437,   461,   468,   443,   229,  1499,
-32768,-32768,-32768,   487,-32768,-32768,   229,-32768,   274,-32768,
   142,    50,-32768,   -76,    55,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   535,   860,   767,   498,   498,  2154,-32768,
  3500,   108,   519,   519,-32768,-32768,-32768,-32768,   142,    50,
   507,  1838,-32768,-32768,-32768,    55,-32768,-32768,-32768,-32768,
   498,   498,   498,   498,   498,   498,-32768,  1777,  1777,  1777,
  1777,  1777,-32768,   519,-32768,   806,-32768,-32768,  2932,  2154,
-32768,  1858,   388,-32768,   894,  2154,   229,   462,   229,   229,
   479,    16,-32768,   592,    16,  3018,   880,   563,  2154,   393,
  2895,  2406,  2154,  2665,   520,  2377,  1154,  1239,   771,   708,
   450,   637,-32768,   517,  1078,   925,  1102,   641,   687,   727,
-32768,-32768,   601,-32768,   229,-32768,  2113,   662,-32768,-32768,
-32768,  2321,   460,-32768,   131,   916,   562,  2895,  2895,  2895,
  3962,   916,   229,   267,-32768,   121,  2895,  2895,  2895,  2895,
   414,-32768,-32768,-32768,  2406,    69,  3962,    69,    69,    69,
   -51,   677,    -5,    -5,  3971,-32768,  1777,   701,   650,   661,
   -21,   -20,   690,     8,  3548,   295,   869,   697,   345,     4,
   270,   779,   276,   785,   363,   850,    50,-32768,   858,-32768,
-32768,-32768,-32768,-32768,   519,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   519,
   916,  1246,   431,   431,   -46,   782,   839,   916,   916,  3055,
  1000,  1090,-32768,    10,    29,   916,   393,  2154,  2154,   916,
   916,  1138,-32768,   567,  1024,-32768,-32768,-32768,  1124,   905,
   476,   892,   929,   832,   -21,   -20,   690,     8,  1034,   587,
-32768,-32768,   949,   961,-32768,  1158,   953,  2895,-32768,  1230,
  3258,  3977,  3977,   608,   658,-32768,   507,   915,-32768,-32768,
-32768,   792,  1026,    67,   137,   199,  1253,  1436,  1195,    47,
   962,   970,  3138,-32768,-32768,-32768,-32768,   976,   960,-32768,
   967,  2377,  2377,-32768,  2895,  1047,  1015,  3962,   229,   229,
   229,   631,   984,-32768,   951,   983,  2780,  1256,   345,     4,
   637,   276,   785,   195,   959,   363,   279,   815,  1049,  1268,
  1275,  1325,    28,   673,  1067,  1070,   193,-32768,  1044,   916,
    36,  2406,-32768,  1227,  1084,  1084,-32768,   883,  1122,  1099,
-32768,    90,   148,   148,  1137,   148,   148,   148,   148,   148,
   148,  1083,  1175,  1124,-32768,   164,   148,-32768,   164,   148,
-32768,   767,  1192,   916,  1135,   519,   223,   519,   291,   314,
   519,   378,   452,   455,   466,  1161,   483,   550,  1202,  1218,
   574,-32768,   960,  1519,   577,     4,   779,   276,   785,  1735,
-32768,   507,  1235,   507,   507,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   507,  1262,  1219,-32768,   507,   507,-32768,   645,
  1046,  1124,  1242,   125,   149,   299,  1279,-32768,  1249,    16,
   656,   302,  1302,    23,  1305,   668,  3463,  1316,   399,  2154,
   393,-32768,-32768,  1472,  1331,  3295,  1328,   270,   256,  1347,
  3378,   278,   221,  1366,   278,   221,  1366,  3925,  2406,-32768,
  1350,  1327,   707,   671,   576,   594,   610,   615,   665,  1202,
  1218,   967,  1369,   916,  1361,  3175,  1311,   916,    69,  1372,
  1336,-32768,  1030,   393,  1412,  1380,    16,  1383,   970,-32768,
-32768,-32768,  1390,  1344,  1351,  1353,  1551,-32768,  1425,   577,
-32768,    69,-32768,  1394,-32768,  1404,-32768,-32768,-32768,-32768,
-32768,  3962,   762,-32768,-32768,  1217,  1400,   126,   193,-32768,
-32768,  1417,-32768,   414,   538,  1410,    -5,    -5,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1413,  1124,  1415,
-32768,-32768,-32768,-32768,-32768,  1419,    62,   693,-32768,  1562,
   519,  1430,-32768,   519,  1434,   519,  1438,-32768,   519,  1440,
   711,   718,   729,   615,   735,   519,   741,   519,   747,   519,
   519,   519,  1448,  1364,  1370,  1376,  1222,  1206,   393,-32768,
  1052,  1124,  1450,    16,   351,-32768,   435,   386,-32768,   628,
   425,-32768,   591,  1423,    16,   744,    16,  1013,    13,-32768,
   993,  2895,-32768,   929,  1433,   559,    67,   137,   199,  1248,
   573,  1162,  1478,-32768,-32768,  1474,-32768,-32768,  1477,  3415,
   256,  1673,  1475,  1480,  1481,  1476,  1484,  1486,  3585,  1485,
  1487,-32768,  1327,-32768,   580,  1313,  1959,  2206,   763,   769,
  1496,   193,  1124,-32768,   193,   148,   148,  2895,-32768,-32768,
   393,-32768,  1369,   916,   916,  1509,  1517,  1522,  1431,  1470,
  1344,  1351,  1353,  1259,  1535,  1535,-32768,-32768,  1529,-32768,
   902,  1067,-32768,   193,-32768,   290,  1417,  1532,-32768,-32768,
-32768,   164,   148,-32768,   164,   148,  1124,  1539,  1538,  1777,
   916,-32768,   519,  1553,   519,-32768,-32768,   519,-32768,   519,
-32768,   519,-32768,   519,  2431,  2970,  4023,   770,-32768,   519,
  1556,-32768,   519,  1559,-32768,-32768,-32768,   519,  1560,  1569,
  1570,  1431,  1524,   519,  1583,  1572,-32768,  1124,  1576,  1577,
  1578,    13,-32768,   592,   592,-32768,    13,-32768,   592,   592,
-32768,    16,-32768,  1021,    21,   916,-32768,  1579,  1582,   592,
-32768,   592,   592,-32768,-32768,  1065,    26,   916,-32768,  1598,
-32768,  1586,   613,   665,   460,  2154,  1647,-32768,   278,   221,
  1366,-32768,-32768,-32768,-32768,-32768,-32768,  3633,-32768,-32768,
   654,  3670,  1096,  1588,  3718,  1142,  1592,  1385,  1603,  4035,
  4070,  1124,  1593,  1604,  1601,-32768,-32768,  1147,-32768,   193,
   507,   -18,   -16,   -69,  1614,  1615,  1470,-32768,-32768,  1067,
  3962,-32768,-32768,-32768,-32768,   190,-32768,-32768,-32768,-32768,
  1616,  1617,  2895,   914,   507,-32768,   519,  1735,-32768,-32768,
-32768,-32768,  4082,-32768,   519,-32768,   519,-32768,  1557,  1558,
  1568,  1621,  1633,  1626,-32768,  1628,  1635,  2895,  1636,-32768,
   592,-32768,-32768,-32768,   592,-32768,-32768,   592,   592,-32768,
   916,-32768,   385,  2895,  1649,-32768,-32768,-32768,   592,-32768,
   916,-32768,   429,-32768,  2895,-32768,  1651,  1334,  1667,-32768,
-32768,-32768,  3755,  1648,  1672,  3803,  1677,  1679,  1685,  1688,
  1437,  3840,  1453,  1671,  1693,  1699,-32768,-32768,-32768,  1674,
  1689,  1700,  1588,  1702,  1704,  1592,  1705,  1603,  1637,   -12,
-32768,  1713,   126,-32768,  1717,  2895,  1652,-32768,-32768,-32768,
-32768,  1658,  1725,  2895,  1724,  2895,  1662,  1124,-32768,-32768,
-32768,-32768,   989,   916,   592,  1499,  1727,  1124,-32768,  1005,
   916,   592,  1411,   393,-32768,  1728,   774,   808,  1340,   916,
   916,   813,   816,  1345,   916,   916,   916,   916,  1729,  3888,
  1731,  1732,-32768,  1733,  1699,  1085,  1174,  1744,  1749,  1750,
  1671,  1067,   290,  1417,  2895,  1675,-32768,  2895,  1502,  2895,
  1684,-32768,  1755,   592,  1060,-32768,-32768,  1756,   592,  1079,
-32768,-32768,-32768,  1124,   836,   837,   838,   193,   193,   840,
   847,   854,   193,   193,   193,   193,   916,   859,   867,  1354,
   916,   916,  1124,  1708,  1712,  1769,  1720,  1726,  1779,  1349,
-32768,-32768,-32768,  1734,-32768,  1563,-32768,  1768,-32768,   592,
-32768,   592,   592,-32768,   592,  1778,  4111,  4117,   874,  1723,
  1772,  4145,  4173,   898,  1782,  1785,  1787,  1790,   193,   900,
   904,   909,   193,   193,  1798,  1803,  1805,  1757,  1807,  1812,
  1764,  1766,  1771,  1822,-32768,  1507,-32768,-32768,-32768,-32768,
-32768,   104,  1818,  1821,  4206,-32768,-32768,  1823,  1824,  4221,
-32768,-32768,-32768,-32768,  1825,  4258,  4267,   926,  1829,  1840,
  1747,  1758,  1760,  1846,  1761,  1781,  1852,  1853,  1854,  1810,
  1206,-32768,-32768,   101,   443,-32768,  1861,  1862,  1863,  1864,
  1869,  1870,  1871,-32768,  1872,  1873,  4295,-32768,-32768,  1327,
  1818,  1821,  1793,  1823,  1824,  1806,  1826,  1827,  1886,-32768,
   539,   662,  1887,  1888,  1890,  1892,  1904,  1911,  1913,  1915,
  1916,   915,  1864,  1871,  1872,  1873,  1849,   916,   916,  1914,
   916,   916,  1918,  1924,  1925,  1920,  1916,   193,   193,   916,
   193,   193,   916,   916,   916,  1926,  1928,  1929,   193,  1930,
  1931,   193,   193,   193,   916,-32768,-32768,  1934,-32768,-32768,
  1935,  1937,  1938,   193,-32768,-32768,-32768,-32768,  1939,-32768,
  1978,  1993,-32768
};

static const short yypgoto[] = {-32768,
-32768,     0,  1584,    54,  1435,-32768,-32768,     1,-32768,-32768,
  -178,    15,    88,   500,  -467,  -144,    14,  1500,-32768,  -103,
-32768,   230,   400,  1319,   -13,  -337,-32768,  1360,   -86,-32768,
  1407,  -280,-32768,-32768,  -405,   463,-32768,   963,   -19,    11,
  1898,-32768,  -138,  -275,  1391,  -203,  -706,  -149,-32768,  1069,
    18,-32768,   980,-32768,  1358,  1471,  -114,-32768,-32768,-32768,
-32768,-32768,-32768,-32768, -1054,-32768,-32768,-32768,-32768,  1332,
-32768,  -355,  1715,   338
};


#define	YYLAST		4412


static const short yytable[] = {   101,
   309,   302,    62,   395,   133,   852,   241,   242,    85,    86,
    87,    88,   546,   111,   112,   113,   114,   115,   116,   211,
   147,   209,   390,   643,   447,   416,   418,   941,   551,   944,
   489,   493,   496,  1009,   122,   212,   560,   267,   356,   329,
   392,   334,   947,   450,   402,   948,   158,    62,   315,   291,
   338,  1142,   148,   123,   421,    60,   163,   291,   142,   159,
   403,   142,   291,   174,   176,   184,    48,   209,   142,   219,
   731,   901,   213,   235,   417,   419,   911,   231,   589,   210,
   593,   142,   169,   598,   170,    29,  1170,   664,   665,   666,
   667,   668,   177,   942,   719,   945,   943,   149,   946,  1010,
   167,   391,  1011,   422,   171,    42,    58,   172,    44,    45,
   273,   173,    92,   416,   392,   271,   282,   262,   263,   264,
   265,   266,   131,    51,   143,   210,    97,   143,   580,   306,
   214,   193,   231,   322,   143,   565,   175,   175,   317,   178,
   271,   131,    51,   951,   526,    97,  1171,   194,   206,  1144,
   466,    62,   472,   235,   158,   243,   244,   381,   178,   206,
   301,   291,   505,   355,   163,   567,   163,   159,     1,   321,
   142,   673,   365,   441,   312,    48,   313,   317,   377,    59,
   178,   567,    62,   418,    84,   291,   623,   207,    62,    62,
    62,   317,    92,   317,   142,   159,   184,    62,    62,    62,
    62,   178,   382,    51,   310,   489,   208,   487,   321,   207,
   661,   231,  1172,   405,   408,  1145,   412,   208,   517,   178,
   625,   674,   321,   568,   321,   411,   381,   521,   522,   556,
   124,    71,   506,   175,   182,   358,   143,   136,   131,   568,
   539,   370,   371,   372,   628,   421,   117,   442,   854,   855,
   384,   385,   386,   387,   444,   445,   271,   662,   455,   456,
   143,   137,   453,   138,   354,   466,   457,   458,   749,   591,
   752,   953,   755,   756,   142,   160,    71,   716,   562,    92,
   179,   185,   379,   125,    51,   231,   243,   244,   175,   183,
    51,   448,   451,   213,   507,   183,   206,   488,   492,   495,
   178,   151,   658,   728,   502,  1061,   178,   118,    62,   119,
   120,   121,   478,   122,   662,   542,   432,   380,   592,   271,
   229,   236,   340,   466,   193,   543,   381,   141,   490,   494,
   497,   654,   123,   427,   317,   291,   428,   594,   291,   502,
   194,   174,   176,   163,   142,    62,   769,   142,   709,   848,
   849,   214,   163,   163,   208,   203,   204,   158,   229,   356,
   596,   484,   206,   243,   244,   321,   559,   163,   317,   145,
   159,   243,   244,   502,   690,   160,   354,   478,   354,   661,
    71,   810,   487,   160,   179,   390,   595,   291,   954,   152,
   207,   337,   661,   307,   631,   671,   142,   639,   523,   321,
   587,   517,   174,   920,   921,   922,   229,   834,   434,   597,
   143,   359,   185,   143,   175,   175,   367,    71,    71,    71,
   208,   974,   291,   277,   599,   186,    71,    71,    71,    71,
   169,   142,   170,    29,   168,   393,   975,   396,   398,   400,
   466,   308,   406,   409,   142,   612,   772,    92,   187,   712,
   775,   861,    41,    42,   229,    43,    44,    45,    51,   173,
   652,   291,   143,   231,   435,   981,   278,   209,   279,   767,
   142,   291,   488,   600,   178,   175,   468,   231,   243,   244,
   982,   777,   188,   466,   355,   317,   388,    50,   191,   587,
   478,   354,   886,   192,   651,    29,   338,   143,   416,   229,
   682,   418,   271,   490,   685,   364,   189,   142,   162,   121,
   194,   122,   421,   190,    41,    42,   321,    43,    44,    45,
   782,   469,   243,   244,   289,   210,   163,    59,   160,   606,
   123,  -120,  -120,    90,   213,   201,   143,    71,   317,   317,
   229,   839,   714,   179,   466,  1062,  1063,   601,   353,   354,
   602,   174,   478,   232,   238,    51,   935,   284,   195,   179,
   183,   603,   229,   340,    91,   177,   202,   721,   724,   321,
   321,   178,   215,   285,    71,   717,   614,   614,   607,   615,
   615,   616,   616,   565,  1171,   354,   160,   470,   466,   471,
    48,   232,   214,   540,   206,   435,   608,-32768,  -117,  -117,
   243,   244,   236,    92,   142,   733,   785,   366,   232,   305,
   617,   617,   142,    93,    51,   330,   232,    94,   142,   758,
   612,   566,   676,   337,   175,   142,   733,   291,   291,   466,
    58,   331,   142,    95,    96,    97,   283,   286,   287,   288,
   677,   786,    62,   780,   361,   609,   231,   952,   809,   178,
  1172,   175,   208,   498,   803,   231,   678,    51,   142,   867,
   916,   606,   460,   435,   291,   139,   354,   140,   193,   613,
   194,   592,  1013,   178,   202,   821,   142,   883,   461,   811,
   840,   841,   479,   339,   194,   414,   348,   232,    62,   595,
   142,   461,  1023,   466,   499,   800,   352,   437,   194,   142,
   867,   142,  1028,    51,   500,   600,   160,   307,   193,   354,
   679,   608,   192,   142,    89,   229,   142,   865,   552,   178,
   229,    90,   404,   192,   194,   206,   527,   229,   278,   864,
   279,   570,   232,   572,   573,   574,   575,   576,   577,   733,
   193,   838,   528,   581,   582,   229,   583,   584,   686,   193,
   413,   637,    91,   207,   337,   308,   621,   745,  1076,   790,
   680,   232,   710,   646,   746,   621,   675,   143,   540,    89,
   354,   705,   903,   232,   415,   747,    90,  1095,    48,   194,
   291,   608,   285,   208,   913,   420,   918,   750,   734,  -119,
  -119,    92,   431,   753,   566,   232,   722,   725,   349,   195,
   350,    93,    51,   217,   231,    94,   592,   311,   231,   830,
   312,   231,   313,   595,   354,   831,   873,   336,    58,   232,
   416,    95,    96,    97,   600,   433,   361,   503,   361,   466,
   748,   344,   213,    48,  1033,   238,   751,   317,   351,   466,
   140,   118,   754,   119,   120,   121,    92,   122,   283,   286,
   287,   542,   203,   204,   418,   354,    93,   314,   751,   416,
    94,   545,   418,    62,   754,   754,   123,   206,   321,  1035,
   278,    71,   279,   711,   131,   213,    95,    96,    97,  1182,
   561,   123,  1077,  1078,   608,   443,  1082,   973,    62,   229,
   214,   268,   269,  1083,   919,   466,   437,   980,   229,   169,
   608,   170,    29,  1036,    62,   416,   216,   429,  1040,   231,
   430,  1041,   231,   418,   466,    62,   957,    71,   231,   354,
  1115,    41,    42,    89,    43,    44,    45,   304,   173,   473,
    90,   592,   595,  1079,   118,   592,   119,   120,   121,   232,
   122,   967,   595,   349,  1120,   476,  1126,   851,   232,  1084,
  1127,   340,   192,   232,  1090,   608,    62,   976,   718,   123,
  1025,    91,  1091,   958,    62,   474,    62,  1030,   983,   754,
  1014,   344,  1157,   243,   244,   286,  1038,  1039,   232,   280,
   281,  1043,  1044,  1045,  1046,   480,   231,    48,   118,   481,
   119,   120,   121,   754,   122,   592,    59,   532,   502,   595,
    92,   437,   483,   286,  1128,   541,  -118,  -118,   797,  1016,
    93,    51,   514,   123,    94,    62,   515,  1019,    62,  1021,
    62,   754,   530,   836,   837,   531,   518,    58,   793,   291,
    95,    96,    97,  1089,   185,   519,   899,  1093,  1094,   379,
  1024,    89,   520,   798,   243,   244,   432,   229,    90,   291,
   220,   229,   243,   244,   229,   354,  1029,   291,   524,   857,
   858,   379,   859,   860,   525,   354,   345,   379,  1064,   462,
    75,  1066,   423,  1068,   380,   424,   223,   425,   533,   477,
   909,   833,   243,   244,   835,   274,   275,   251,   252,   253,
   254,   622,    71,   243,   244,   547,   380,   768,   243,   244,
   144,   291,   380,   553,   197,    48,   426,   227,   198,   199,
   200,  1072,  1146,   853,   164,    75,   555,    71,    92,   181,
    75,   354,   232,  1054,   341,   558,  1055,   196,    93,   155,
  1075,   232,    94,    71,   183,   196,   446,   137,   345,   504,
   354,   191,   924,    29,    71,    58,   192,   228,    95,    96,
    97,   346,   229,   243,   244,   229,   342,  1056,   343,   233,
   239,   229,    41,    42,   200,    43,    44,    45,   278,   463,
   279,   563,   243,   244,  1198,  1199,   197,  1201,  1202,   564,
   198,   199,   200,   571,   459,    71,  1209,   191,   927,  1212,
  1213,  1214,   192,    71,   578,    71,   353,   233,   939,   604,
   335,  1224,   605,   586,   482,   196,   196,   196,   196,   764,
   290,   765,  1057,   293,   164,  1058,   278,   713,   279,    75,
   579,   197,   164,   332,    89,   198,   199,   200,   197,   229,
   588,    90,   198,   199,   200,   464,   278,   465,   279,   940,
   278,   512,   279,   196,    71,   233,  1059,    71,   610,    71,
   362,    75,    89,   449,   452,   368,    75,    75,    75,    90,
   762,   196,    91,   763,   611,    75,    75,    75,    75,   169,
   619,   170,    29,   342,   394,   343,   397,   399,   401,   485,
   232,   407,   410,   618,   232,   -63,   604,   232,    48,   804,
   146,   508,    42,   233,   509,    44,    45,   762,   173,   279,
   847,    92,   538,   438,   197,   198,   199,   200,   198,   199,
   200,    93,    51,   -63,   548,    94,    48,   -63,   -63,   -63,
    72,   549,   119,   120,   121,   634,   122,    90,    58,    92,
   197,    95,    96,    97,   198,   199,   200,   624,   233,    93,
    51,  1147,   197,    94,   635,   123,   198,   199,   200,   197,
   642,   645,   196,   198,   199,   200,    58,   684,   822,    95,
    96,    97,   336,   656,   161,    72,    59,   164,   196,   180,
    72,   550,   673,   566,   657,   312,    75,   313,   604,   233,
   985,  1037,   181,   604,    48,   232,  1042,  1102,   232,   342,
  1103,   343,   604,   659,   232,  1092,   672,    92,   513,   197,
   566,   233,   662,   198,   199,   200,   683,    93,    51,   230,
   237,    94,   278,    75,   279,   681,   343,   196,   196,   196,
   529,  1104,   688,   691,   823,   164,   692,   824,    96,    97,
   191,   929,   362,   694,   438,   192,   695,  1080,  1081,   696,
   707,   239,  1085,  1086,  1087,  1088,   697,   230,   698,   196,
   708,   715,   169,   381,   170,    29,   337,  1032,   727,   759,
   290,   729,   232,   701,   161,   760,   702,   730,   703,    72,
   539,   761,   161,   180,   510,    42,   738,   511,    44,    45,
   740,   173,   191,   999,   742,   197,   744,   192,  1125,   198,
   199,   200,  1129,  1130,   758,   230,   770,   704,   191,  1001,
   360,    72,   438,   192,   788,   237,    72,    72,    72,    92,
   764,  1141,   765,   802,   805,    72,    72,    72,    72,   806,
    51,   655,   807,   499,   812,   183,   845,   815,   196,   813,
   814,   819,   627,   630,   633,   816,   178,   817,   636,   638,
   641,   832,   644,   230,   196,   164,   197,   196,  1067,    59,
   198,   199,   200,   436,   233,   842,   739,   614,   741,   233,
   615,   743,   616,   843,   434,   846,   233,   169,   844,   170,
    29,   542,   196,   197,   757,   850,   197,   198,   199,   200,
   198,   199,   200,   856,   233,   862,   863,   687,   230,   699,
    42,   617,   700,    44,    45,   693,   173,  1207,  1208,   867,
  1210,  1211,   875,    92,   440,   877,   879,   362,  1218,  1106,
   706,  1221,  1222,  1223,    51,   880,   881,   161,   246,   882,
   884,   885,   887,  1229,   889,   888,    72,   904,   905,   230,
   178,   915,   180,   290,   925,   723,   726,   197,   928,   739,
   743,   198,   199,   200,   936,   247,   248,   914,   180,   930,
   937,   230,   938,   255,   256,   243,   244,   257,   258,   259,
   949,   950,   955,    72,    59,   956,    29,   962,   942,   945,
   963,   964,   197,   808,   965,   161,   198,   199,   200,   947,
    89,   968,   360,   966,   436,    41,    42,    90,    43,    44,
    45,   237,   771,   774,   978,   866,   779,   984,   990,   784,
   869,  1017,   870,   789,   871,   792,   872,   796,   739,   743,
    75,  1022,   874,   986,   196,   876,    83,  1002,   491,   196,
   878,   312,   991,   313,  1065,  1005,   197,   995,   233,   996,
   198,   199,   200,  1069,  1006,   997,   197,   233,   998,  1003,
   198,   199,   200,   196,    48,  1004,   924,  1007,  1008,   197,
   927,   929,   436,   198,   199,   200,    75,    92,   197,  1012,
   166,    83,   198,   199,   200,  1015,    83,    93,    51,  1010,
  1018,    94,  1020,  1034,  1116,   590,  1027,   590,  1053,  1047,
   590,  1051,  1052,  1105,    58,   131,     3,    95,    96,    97,
   999,   246,   874,   876,  1060,   161,  1001,     4,     5,     6,
     7,  1070,  1073,  1096,   230,   234,   240,  1097,   197,   230,
  1098,     8,   198,   199,   200,  1099,   230,  1107,   247,   248,
  1101,  1100,     9,  1117,  1112,    10,   255,   256,  1160,   959,
   257,   258,   259,  1121,   230,   876,  1122,   960,  1123,   961,
   891,  1124,   197,   234,  1131,   895,   198,   199,   200,  1132,
   898,  1133,  1134,  1135,   626,   629,   632,   360,  1136,  1137,
   166,  1138,   640,  1140,  1148,    83,  1139,  1149,   166,  1151,
  1152,   196,  1161,    75,  1162,  1164,  1154,    11,    12,    13,
  1158,    14,    15,    16,    17,    18,   233,    19,    20,   196,
   233,  1159,  1163,   233,   246,  1165,   363,    83,  1166,  1167,
  1168,   369,    83,    83,    83,  1169,   207,  1183,  1173,  1174,
  1175,    83,    83,    83,    83,  1176,  1177,  1178,  1179,  1180,
  1184,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,    75,  1187,   257,   258,   259,  1190,  1188,  1189,   234,
  1185,  1186,  1191,   274,   275,   251,   252,   253,   254,   439,
   590,   243,   244,   590,  1192,   590,    75,  1193,   590,  1194,
    72,  1195,  1196,  1197,  1200,   590,  1206,   590,  1203,   590,
   590,   590,    75,    90,  1204,  1205,  1215,  1232,   230,  1216,
  1217,  1219,  1220,    75,   234,  1225,  1226,   230,  1227,  1228,
  1230,   233,  1233,   689,   233,   585,   735,   670,   720,   261,
   233,   801,   820,     0,   825,     0,    72,     0,     0,     0,
     0,     0,     0,   166,     0,   773,     0,   776,   778,     0,
   781,   783,    83,   787,    75,   234,   791,     0,   794,   795,
    48,   799,    75,     0,    75,   590,   590,   590,     0,     0,
   739,     0,     0,    92,     0,   739,     0,   234,     0,     0,
     0,     0,     0,    93,    51,     0,     0,    94,     0,    83,
     0,     0,     0,     0,     0,     0,     0,     0,   233,     0,
   826,   166,     0,   827,    96,    97,     0,   876,   363,     0,
   439,     0,   876,    75,     0,     0,    75,   240,    75,   739,
     0,     0,   590,     0,   868,     0,     0,   590,     0,   590,
     0,   590,     0,   590,   590,   590,   590,     0,     0,   590,
     0,     0,   590,     0,     0,     0,     0,   590,     0,   876,
    89,     0,     0,    72,     0,     0,     0,    90,     0,     0,
     0,     0,    29,     0,     0,     0,   230,     0,     0,     0,
   230,     0,     0,   230,     0,     0,     0,     0,   439,     0,
     0,    41,    42,     0,    43,    44,    45,     0,   225,     0,
     0,    89,   890,     0,   892,   893,     0,   894,   126,   896,
   897,     0,     0,     0,   900,   902,   127,   128,     0,     0,
   906,    72,   907,   908,    48,   353,   910,   912,     0,   590,
   590,   166,     0,     0,     0,     0,     0,    92,     0,   129,
   234,     0,     0,     0,     0,   234,    72,    93,    51,     0,
     0,    94,     0,     0,     0,     0,     0,     0,     0,     0,
    90,     0,    72,     0,    58,    48,   590,    95,    96,    97,
   234,     0,   590,    72,   590,     0,   590,     0,    92,     0,
     0,   230,     0,     0,   230,     0,     0,     0,    93,    51,
   230,    91,    94,   363,     0,   130,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    58,   131,     0,    95,    96,
    97,     0,     0,     0,    72,     0,     0,    48,     0,     0,
     0,   969,    72,     0,    72,   970,     0,     0,   971,   972,
    92,     0,     0,     0,     0,     0,     0,     0,     0,   979,
    93,    51,     0,     0,    94,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   828,   230,     0,
   829,    96,    97,    22,     0,     0,     0,    23,    24,     0,
    25,    26,     0,    72,     0,     0,    72,    27,    72,    28,
    29,    30,    31,     0,     0,    32,    33,    34,    35,     0,
    36,    37,    38,     0,    39,    40,    83,     0,     0,    41,
    42,     0,    43,    44,    45,  1026,   357,     0,     0,    47,
     0,     0,  1031,     0,   234,     0,     0,     0,     0,     0,
     0,     0,     0,   234,    89,     0,     0,     0,     0,     0,
     0,   126,    48,    49,    50,     0,     0,     0,     0,   127,
   128,     0,    83,     0,     0,    92,     0,     0,     0,     0,
     0,     0,     0,    89,  1071,     0,    51,     0,     0,  1074,
    90,    52,   333,    53,    54,    55,    56,    57,     0,     0,
     0,     0,    58,     0,    59,     0,   590,   590,     0,     0,
     0,   590,   590,     0,     0,    90,     0,     0,    48,     0,
     0,   311,     0,     0,   312,     0,   313,     0,     0,     0,
  1108,    92,  1109,  1110,     0,  1111,     0,     0,     0,     0,
     0,    93,    51,     0,   590,    94,    91,    48,   156,   590,
     0,     0,     0,     0,     0,   590,   590,     0,    58,   131,
    92,    95,    96,    97,     0,     0,     0,     0,     0,     0,
    93,   314,    48,     0,    94,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    92,   590,    58,   131,    83,
    95,    96,    97,     0,     0,    93,    51,     0,     0,    94,
     0,     0,   234,     0,     0,     0,   234,     0,     0,   234,
     0,     0,   823,     0,     0,    95,    96,    97,     0,     0,
     0,    22,     0,     0,     0,    23,   153,     0,    25,    26,
     0,     0,     0,   126,     0,    27,     0,    28,    29,    30,
    31,   127,   128,    32,    33,    34,    35,    83,    36,    37,
    38,     0,    39,    40,     0,     0,     0,    41,    42,     0,
    43,    44,    45,     0,   154,     0,     0,    47,     0,     0,
     0,     0,    83,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    83,     0,
    48,    49,    50,     0,     0,     0,     0,     0,     0,    83,
     0,     0,     0,    92,     0,     0,     0,   234,     0,     0,
   234,     0,     0,    93,   155,     0,   234,    94,     0,    52,
   156,    53,    54,    55,    56,    57,     0,     0,     0,     0,
    58,   131,    59,    95,    96,    97,     0,    22,     0,     0,
    83,    23,   153,     0,    25,    26,     0,     0,    83,   126,
    83,   323,     0,    28,    29,    30,    31,   127,   128,    32,
    33,    34,    35,     0,    36,    37,    38,     0,    39,    40,
     0,     0,     0,   324,    42,     0,   325,   297,   326,     0,
   154,     0,     0,    47,   234,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    83,
     0,     0,    83,     0,    83,     0,    48,   327,   328,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    93,
   155,     0,     0,    94,     0,    52,   156,    53,    54,    55,
    56,    57,     0,     0,     0,     0,    58,   131,   300,    95,
    96,    97,    22,     0,     0,     0,    23,   153,     0,    25,
    26,     0,     0,     0,   126,     0,    27,     0,    28,    29,
    30,    31,   127,   128,    32,    33,    34,    35,     0,    36,
    37,    38,     0,    39,    40,     0,     0,     0,   534,    42,
     0,   535,    44,   536,     0,   154,     0,     0,    47,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   537,    50,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    92,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    93,   155,     0,     0,    94,     0,
    52,   156,    53,    54,    55,    56,    57,     0,     0,     0,
     0,    58,   131,    59,    95,    96,    97,    22,     0,     0,
     0,    23,    24,     0,    25,    26,     0,     0,     0,     0,
     0,    27,     0,    28,    29,    30,    31,     0,     0,    32,
    33,    34,    35,     0,    36,    37,    38,     0,    39,    40,
     0,     0,     0,    41,    42,     0,    43,    44,    45,    89,
    46,     0,     0,    47,     0,     0,   126,     0,   220,     0,
     0,     0,     0,     0,   127,   128,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    48,    49,    50,     0,
   221,     0,     0,   222,   223,   224,     0,   270,     0,     0,
     0,     0,     0,     0,    90,     0,     0,     0,     0,     0,
    51,     0,     0,     0,     0,    52,     0,    53,    54,    55,
    56,    57,     0,    48,   226,   227,    58,     0,    59,     0,
     0,     0,     0,     0,     0,    91,    92,     0,     0,     0,
     0,     0,     0,     0,     0,    89,    93,    51,     0,     0,
    94,     0,    90,   130,   294,     0,   170,    29,     0,     0,
     0,    48,     0,    58,   131,   228,    95,    96,    97,     0,
     0,     0,     0,     0,    92,     0,   295,    42,     0,   296,
   297,   298,    89,   299,    93,    51,     0,     0,    94,   126,
     0,   220,     0,     0,     0,     0,     0,   127,   128,     0,
     0,   826,     0,     0,    95,    96,    97,     0,     0,    48,
   226,   227,     0,   423,     0,     0,   424,   223,   425,     0,
   270,     0,    92,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    93,    51,     0,     0,    94,     0,   183,     0,
     0,     0,     0,     0,     0,     0,    48,   426,   227,    58,
     0,   300,    95,    96,    97,     0,     0,     0,     0,    92,
     0,     0,     0,     0,     0,    89,     0,     0,     0,    93,
    51,     0,   126,    94,   220,     0,   130,     0,     0,     0,
   127,   128,     0,     0,     0,     0,    58,   131,   228,    95,
    96,    97,     0,     0,     0,     0,   221,     0,     0,   222,
   223,   224,    89,   516,     0,     0,     0,     0,     0,   126,
     0,   220,     0,     0,     0,     0,     0,   127,   128,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    48,
   226,   227,     0,   423,     0,     0,   424,   223,   425,     0,
   516,     0,    92,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    93,    51,     0,     0,    94,     0,     0,   156,
     0,     0,     0,     0,     0,     0,    48,   426,   227,    58,
   131,   228,    95,    96,    97,     0,     0,     0,     0,    92,
     0,     0,     0,     0,     0,    89,     0,     0,     0,    93,
    51,     0,    90,    94,   220,     0,   156,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    58,   131,   228,    95,
    96,    97,     0,     0,     0,     0,   221,     0,     0,   222,
   223,   224,    89,   486,     0,     0,   312,     0,   313,    90,
     0,   220,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    48,
   226,   227,     0,   423,     0,     0,   424,   223,   425,     0,
   486,     0,    92,   312,     0,   313,     0,     0,     0,     0,
     0,     0,    93,   314,     0,     0,    94,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    48,   426,   227,    58,
   131,   228,    95,    96,    97,     0,     0,     0,     0,    92,
     0,     0,     0,     0,     0,    89,     0,     0,     0,    93,
   314,     0,    90,    94,   220,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    58,   131,   228,    95,
    96,    97,     0,     0,     0,     0,   221,     0,     0,   222,
   223,   224,    89,   660,     0,     0,   312,     0,   313,    90,
     0,   220,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    48,
   226,   227,     0,   423,     0,     0,   424,   223,   425,     0,
   660,     0,    92,   312,     0,   313,     0,     0,     0,     0,
    89,     0,    93,    51,     0,     0,    94,    90,     0,   220,
     0,     0,     0,     0,     0,     0,    48,   426,   227,    58,
     0,   228,    95,    96,    97,     0,     0,     0,     0,    92,
     0,   647,     0,     0,   648,   223,   649,    89,   477,    93,
    51,     0,     0,    94,    90,     0,   220,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    58,     0,   228,    95,
    96,    97,     0,     0,    48,   650,   227,     0,   221,     0,
     0,   222,   223,   224,     0,   225,     0,    92,     0,     0,
     0,     0,     0,     0,     0,    89,     0,    93,    51,     0,
     0,    94,    90,   183,   220,     0,     0,     0,     0,     0,
     0,    48,   226,   227,    58,     0,   228,    95,    96,    97,
     0,     0,     0,     0,    92,     0,   423,     0,     0,   424,
   223,   425,    89,   225,    93,    51,     0,     0,    94,    90,
     0,   220,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    58,     0,   228,    95,    96,    97,     0,     0,    48,
   426,   227,     0,   423,     0,     0,   424,   223,   425,     0,
   818,     0,    92,     0,     0,     0,     0,     0,     0,     0,
    89,     0,    93,    51,     0,     0,    94,    90,     0,   220,
     0,     0,     0,     0,     0,     0,    48,   426,   227,    58,
     0,   228,    95,    96,    97,     0,     0,     0,     0,    92,
     0,   647,     0,     0,   648,   223,   649,    89,   225,    93,
    51,     0,     0,    94,    90,     0,   220,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    58,     0,   228,    95,
    96,    97,     0,     0,    48,   650,   227,     0,   221,     0,
     0,   222,   223,   224,     0,   923,     0,    92,     0,     0,
     0,     0,     0,     0,     0,    89,     0,    93,    51,     0,
     0,    94,    90,     0,   220,     0,     0,     0,     0,     0,
     0,    48,   226,   227,    58,     0,   228,    95,    96,    97,
     0,     0,     0,     0,    92,     0,   221,     0,     0,   222,
   223,   224,    89,   926,    93,    51,     0,     0,    94,    90,
     0,   220,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    58,     0,   228,    95,    96,    97,     0,     0,    48,
   226,   227,     0,   987,     0,     0,   988,   223,   425,     0,
   225,     0,    92,     0,     0,     0,     0,     0,     0,     0,
    89,     0,    93,    51,     0,     0,    94,    90,     0,   220,
     0,     0,     0,     0,     0,     0,    48,   989,   227,    58,
     0,   228,    95,    96,    97,     0,     0,     0,     0,    92,
     0,   992,     0,     0,   993,   223,   425,    89,   225,    93,
    51,     0,     0,    94,    90,     0,   220,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    58,     0,   228,    95,
    96,    97,     0,     0,    48,   994,   227,     0,   221,     0,
     0,   222,   223,   224,     0,  1000,     0,    92,     0,     0,
     0,     0,     0,     0,     0,    89,     0,    93,    51,     0,
     0,    94,    90,     0,   220,     0,     0,     0,     0,     0,
     0,    48,   226,   227,    58,     0,   228,    95,    96,    97,
     0,     0,     0,     0,    92,     0,  1048,     0,     0,  1049,
   223,   425,    89,   225,    93,    51,     0,     0,    94,    90,
     0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
     0,    58,     0,   228,    95,    96,    97,     0,     0,    48,
  1050,   227,     0,    41,    42,     0,    43,    44,    45,    89,
   669,     0,    92,     0,     0,     0,    90,     0,    89,     0,
     0,     0,    93,    51,    89,   126,    94,     0,     0,     0,
     0,    90,     0,   127,   128,     0,    48,   353,     0,    58,
     0,   228,    95,    96,    97,     0,     0,   311,     0,    92,
   312,     0,   313,     0,     0,     0,    91,     0,     0,    93,
    51,     0,   491,    94,     0,   312,     0,   313,     0,     0,
     0,     0,     0,    48,     0,     0,    58,    90,     0,    95,
    96,    97,    48,     0,     0,     0,   373,     0,    48,    90,
     0,     0,     0,     0,     0,    92,    93,   314,     0,     0,
    94,    92,     0,     0,     0,    93,    51,     0,    91,    94,
     0,    93,    51,   374,   131,    94,    95,    96,    97,     0,
    91,     0,    58,   131,    90,    95,    96,    97,    58,   131,
     0,    95,    96,    97,    48,     0,    90,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    48,    92,     0,     0,
     0,     0,     0,     0,     0,   932,     0,    93,    51,    92,
     0,    94,     0,     0,     0,    90,     0,    91,     0,    93,
    51,    90,     0,    94,   828,     0,     0,    95,    96,    97,
     0,    48,     0,     0,     0,     0,   931,     0,     0,    95,
    96,    97,     0,    48,    92,     0,    91,     0,     0,    90,
     0,     0,    91,     0,    93,    51,    92,     0,    94,     0,
     0,     0,     0,     0,     0,     0,    93,    51,     0,     0,
    94,   933,    48,     0,   934,    96,    97,    90,    48,     0,
    91,     0,     0,   933,     0,    92,    95,    96,    97,     0,
     0,    92,     0,     0,     0,    93,    51,     0,     0,    94,
     0,    93,    51,     0,     0,    94,    48,     0,    91,     0,
    90,     0,   823,     0,     0,  1113,    96,    97,   826,    92,
     0,  1114,    96,    97,     0,    90,     0,     0,     0,    93,
    51,     0,     0,    94,    48,     0,     0,     0,     0,     0,
     0,    91,     0,     0,     0,     0,   823,    92,     0,  1118,
    96,    97,     0,     0,     0,     0,    91,    93,    51,     0,
     0,    94,    90,     0,     0,     0,     0,    48,     0,     0,
     0,    90,     0,     0,   826,     0,     0,  1119,    96,    97,
    92,     0,    48,     0,     0,     0,     0,     0,     0,     0,
    93,    51,     0,    91,    94,    92,     0,     0,     0,    90,
     0,     0,    91,     0,     0,    93,    51,   933,     0,    94,
  1150,    96,    97,     0,     0,     0,     0,     0,     0,    48,
     0,     0,   933,     0,     0,  1153,    96,    97,    48,     0,
    91,     0,    92,     0,     0,     0,     0,     0,     0,     0,
     0,    92,    93,    51,     0,     0,    94,     0,     0,     0,
     0,    93,    51,     0,     0,    94,    48,     0,     0,   823,
     0,     0,  1155,    96,    97,     0,     0,     0,   826,    92,
     0,  1156,    96,    97,     0,     0,     0,     0,     0,    93,
    51,     0,     0,    94,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   933,     0,     0,  1181,
    96,    97
};

static const short yycheck[] = {    13,
   150,   146,     2,   207,    24,   712,    93,    94,     9,    10,
    11,    12,   368,    14,    15,    16,    17,    18,    19,    96,
    34,    18,   201,     1,    15,    47,    47,    46,     1,    46,
   311,   312,   313,    46,    81,   112,     1,   124,   177,   154,
    46,   156,   112,    15,    96,   115,    46,    47,   152,    37,
    47,  1106,     1,   100,    47,     2,    46,    37,    46,    46,
   112,    46,    37,    49,    50,    52,    72,    18,    46,    89,
     9,    51,    18,    46,    96,    96,    51,    91,   416,    76,
   418,    46,    17,   421,    19,    20,  1141,   493,   494,   495,
   496,   497,    46,   112,   562,   112,   115,    46,   115,   112,
    47,   205,   115,    96,    39,    40,   112,    42,    43,    44,
   130,    46,    85,    47,    46,   129,   136,   118,   119,   120,
   121,   122,   113,    96,   112,    76,   117,   112,   404,   149,
    76,    96,   146,   153,   112,    46,    49,    50,   152,   112,
   154,   113,    96,   850,   348,   117,    46,   112,    18,    46,
   289,   151,   291,    46,   154,    94,    95,    37,   112,    18,
   146,    37,    96,   177,   154,    18,   156,   154,    13,   152,
    46,    46,   186,   260,    49,    72,    51,   191,   192,   114,
   112,    18,   182,    47,   112,    37,   462,    46,   188,   189,
   190,   205,    85,   207,    46,   182,   183,   197,   198,   199,
   200,   112,    82,    96,   151,   486,    76,   311,   191,    46,
   491,   225,   112,   213,   214,   112,   217,    76,   333,   112,
    96,   502,   205,    76,   207,   215,    37,   342,   343,    37,
    46,     2,    96,   146,    46,   182,   112,    46,   113,    76,
    46,   188,   189,   190,    96,    47,    14,   261,   716,   717,
   197,   198,   199,   200,   268,   269,   270,    37,   278,   279,
   112,   112,   276,   114,   177,   404,   280,   281,   606,    47,
   608,    82,   610,   611,    46,    46,    47,   558,   382,    85,
    51,    52,    16,   112,    96,   299,    94,    95,   201,   101,
    96,   274,   275,    18,    96,   101,    18,   311,   312,   313,
   112,    49,    47,   579,    84,  1012,   112,    75,   308,    77,
    78,    79,   299,    81,    37,    37,    47,    51,    96,   333,
    91,    92,    47,   462,    96,    47,    37,   112,   311,   312,
   313,   481,   100,    39,   348,    37,    42,    47,    37,    84,
   112,   327,   328,   333,    46,   345,   622,    46,   552,   705,
   706,    76,   342,   343,    76,    82,    83,   357,   129,   498,
    47,   308,    18,    94,    95,   348,   380,   357,   382,    46,
   357,    94,    95,    84,   524,   146,   289,   364,   291,   660,
   151,   662,   486,   154,   155,   564,    96,    37,   856,    46,
    46,    47,   673,     1,    96,   499,    46,    96,   345,   382,
   414,   516,   388,   809,   810,   811,   177,   683,    46,    96,
   112,   182,   183,   112,   327,   328,   187,   188,   189,   190,
    76,    37,    37,    36,    47,    46,   197,   198,   199,   200,
    17,    46,    19,    20,   112,   206,    52,   208,   209,   210,
   579,    49,   213,   214,    46,    47,    96,    85,    46,   553,
    16,   727,    39,    40,   225,    42,    43,    44,    96,    46,
   480,    37,   112,   477,   235,    37,    79,    18,    81,   619,
    46,    37,   486,    96,   112,   388,     1,   491,    94,    95,
    52,    96,    46,   622,   498,   499,    73,    74,    46,   503,
   477,   404,   768,    51,    96,    20,    47,   112,    47,   270,
   514,    47,   516,   486,   518,    46,    46,    46,    46,    79,
   112,    81,    47,    46,    39,    40,   499,    42,    43,    44,
    96,    46,    94,    95,    46,    76,   516,   114,   299,    47,
   100,    82,    83,    15,    18,    49,   112,   308,   552,   553,
   311,   691,   556,   314,   683,  1013,  1014,    96,    73,   462,
    96,   537,   539,    91,    92,    96,   832,    96,    59,   330,
   101,    96,   333,    47,    46,    46,    67,   567,   568,   552,
   553,   112,    38,   112,   345,   558,    39,    39,    96,    42,
    42,    44,    44,    46,    46,   498,   357,   112,   727,   114,
    72,   129,    76,   364,    18,   366,    47,   100,    82,    83,
    94,    95,   373,    85,    46,    47,    16,    46,   146,    47,
    73,    73,    46,    95,    96,    96,   154,    99,    46,    47,
    47,   392,    47,    47,   537,    46,    47,    37,    37,   768,
   112,   112,    46,   115,   116,   117,   137,   138,   139,   140,
    47,    51,   642,    16,   182,    96,   660,   851,   662,   112,
   112,   564,    76,    46,    96,   669,    47,    96,    46,    47,
   805,    47,    96,   434,    37,   112,   579,   114,    96,    96,
   112,    96,   953,   112,   175,    96,    46,   764,   112,   662,
   694,   695,    96,    47,   112,    36,    46,   225,   688,    96,
    46,   112,   968,   832,    37,   642,    96,   235,   112,    46,
    47,    46,   978,    96,    47,    96,   477,     1,    96,   622,
    96,    47,    51,    46,     8,   486,    46,   731,    46,   112,
   491,    15,    46,    51,   112,    18,    96,   498,    79,   730,
    81,   394,   270,   396,   397,   398,   399,   400,   401,    47,
    96,   688,   112,   406,   407,   516,   409,   410,   519,    96,
    50,    96,    46,    46,    47,    49,   112,    47,  1034,    16,
    96,   299,     1,    96,    47,   112,    96,   112,   539,     8,
   683,   542,   786,   311,   114,    47,    15,  1053,    72,   112,
    37,    47,   112,    76,   798,    96,   806,    47,    96,    82,
    83,    85,    96,    47,   565,   333,   567,   568,   112,   300,
   114,    95,    96,    37,   818,    99,    96,    46,   822,    47,
    49,   825,    51,    96,   727,    47,    47,    47,   112,   357,
    47,   115,   116,   117,    96,    47,   364,    36,   366,   968,
    96,    47,    18,    72,   984,   373,    96,   851,   112,   978,
   114,    75,    96,    77,    78,    79,    85,    81,   349,   350,
   351,    37,    82,    83,    47,   768,    95,    96,    96,    47,
    99,    47,    47,   863,    96,    96,   100,    18,   851,    96,
    79,   642,    81,   112,   113,    18,   115,   116,   117,  1160,
   381,   100,    47,    47,    47,    47,    47,   901,   888,   660,
    76,    86,    87,    47,   807,  1034,   434,   911,   669,    17,
    47,    19,    20,    96,   904,    47,    47,    39,    96,   923,
    42,    96,   926,    47,  1053,   915,   863,   688,   932,   832,
    47,    39,    40,     8,    42,    43,    44,    48,    46,    38,
    15,    96,    96,    96,    75,    96,    77,    78,    79,   477,
    81,   888,    96,   112,    47,   114,    47,    46,   486,    96,
    47,    47,    51,   491,    96,    47,   956,   904,   559,   100,
   974,    46,    96,    50,   964,    37,   966,   981,   915,    96,
   953,    47,    47,    94,    95,   476,   990,   991,   516,    86,
    87,   995,   996,   997,   998,    37,  1000,    72,    75,    29,
    77,    78,    79,    96,    81,    96,   114,    47,    84,    96,
    85,   539,    50,   504,    96,    47,    82,    83,    16,   956,
    95,    96,    51,   100,    99,  1015,    47,   964,  1018,   966,
  1020,    96,    39,   686,   687,    42,    51,   112,    16,    37,
   115,   116,   117,  1047,   805,    76,    16,  1051,  1052,    16,
    52,     8,    76,    51,    94,    95,    47,   818,    15,    37,
    17,   822,    94,    95,   825,   968,    52,    37,    12,   722,
   723,    16,   725,   726,    50,   978,    37,    16,  1015,    46,
     2,  1018,    39,  1020,    51,    42,    43,    44,    96,    46,
    16,   682,    94,    95,   685,    86,    87,    88,    89,    90,
    91,    46,   863,    94,    95,    47,    51,    46,    94,    95,
    32,    37,    51,    37,    75,    72,    73,    74,    79,    80,
    81,    52,  1112,   714,    46,    47,    47,   888,    85,    51,
    52,  1034,   660,    39,    47,    82,    42,    59,    95,    96,
    52,   669,    99,   904,   101,    67,    47,   112,    37,   114,
  1053,    46,    47,    20,   915,   112,    51,   114,   115,   116,
   117,    50,   923,    94,    95,   926,    79,    73,    81,    91,
    92,   932,    39,    40,    81,    42,    43,    44,    79,    46,
    81,    50,    94,    95,  1188,  1189,    75,  1191,  1192,    81,
    79,    80,    81,    47,    47,   956,  1200,    46,    47,  1203,
  1204,  1205,    51,   964,   112,   966,    73,   129,    52,    39,
    47,  1215,    42,    12,    47,   137,   138,   139,   140,     4,
   142,     6,    39,   145,   146,    42,    79,     1,    81,   151,
    46,    75,   154,   155,     8,    79,    80,    81,    75,  1000,
    96,    15,    79,    80,    81,   112,    79,   114,    81,   840,
    79,    47,    81,   175,  1015,   177,    73,  1018,    47,  1020,
   182,   183,     8,   274,   275,   187,   188,   189,   190,    15,
    39,   193,    46,    42,    47,   197,   198,   199,   200,    17,
     9,    19,    20,    79,   206,    81,   208,   209,   210,    50,
   818,   213,   214,    49,   822,    47,    39,   825,    72,    42,
    46,    39,    40,   225,    42,    43,    44,    39,    46,    81,
    42,    85,    47,   235,    75,    79,    80,    81,    79,    80,
    81,    95,    96,    75,    47,    99,    72,    79,    80,    81,
     2,    47,    77,    78,    79,    47,    81,    15,   112,    85,
    75,   115,   116,   117,    79,    80,    81,    96,   270,    95,
    96,  1112,    75,    99,    96,   100,    79,    80,    81,    75,
    49,    47,   284,    79,    80,    81,   112,    47,    46,   115,
   116,   117,    47,    33,    46,    47,   114,   299,   300,    51,
    52,    47,    46,  1144,    47,    49,   308,    51,    39,   311,
    47,    42,   314,    39,    72,   923,    42,    39,   926,    79,
    42,    81,    39,    47,   932,    42,    47,    85,   330,    75,
  1171,   333,    37,    79,    80,    81,    46,    95,    96,    91,
    92,    99,    79,   345,    81,    47,    81,   349,   350,   351,
   352,    73,    51,    12,   112,   357,    47,   115,   116,   117,
    46,    47,   364,    51,   366,    51,    47,  1038,  1039,    96,
    47,   373,  1043,  1044,  1045,  1046,    96,   129,    96,   381,
    47,    52,    17,    37,    19,    20,    47,    47,    46,    96,
   392,    47,  1000,    39,   146,    96,    42,    49,    44,   151,
    46,    96,   154,   155,    39,    40,    47,    42,    43,    44,
    47,    46,    46,    47,    47,    75,    47,    51,  1089,    79,
    80,    81,  1093,  1094,    47,   177,    47,    73,    46,    47,
   182,   183,   434,    51,    82,   187,   188,   189,   190,    85,
     4,     5,     6,    81,    37,   197,   198,   199,   200,    46,
    96,    50,    46,    37,    50,   101,    96,    52,   460,    50,
    50,    47,   464,   465,   466,    52,   112,    52,   470,   471,
   472,    46,   474,   225,   476,   477,    75,   479,    47,   114,
    79,    80,    81,   235,   486,    47,   594,    39,   596,   491,
    42,   599,    44,    47,    46,    96,   498,    17,    47,    19,
    20,    37,   504,    75,   612,    47,    75,    79,    80,    81,
    79,    80,    81,    52,   516,    47,    49,   519,   270,    39,
    40,    73,    42,    43,    44,   527,    46,  1198,  1199,    47,
  1201,  1202,    47,    85,   245,    47,    47,   539,  1209,    47,
   542,  1212,  1213,  1214,    96,    47,    47,   299,    57,    96,
    38,    50,    47,  1224,    47,    49,   308,    49,    47,   311,
   112,    46,   314,   565,    47,   567,   568,    75,    47,   677,
   678,    79,    80,    81,    52,    84,    85,    50,   330,    47,
    47,   333,    52,    92,    93,    94,    95,    96,    97,    98,
    47,    47,    47,   345,   114,    49,    20,    47,   112,   112,
    38,    46,    75,     1,    47,   357,    79,    80,    81,   112,
     8,    46,   364,    49,   366,    39,    40,    15,    42,    43,
    44,   373,   624,   625,    46,   733,   628,    47,    51,   631,
   738,    50,   740,   635,   742,   637,   744,   639,   746,   747,
   642,    50,   750,    47,   646,   753,     2,    47,    46,   651,
   758,    49,    51,    51,    50,    52,    75,    51,   660,    51,
    79,    80,    81,    50,    46,    51,    75,   669,    51,    47,
    79,    80,    81,   675,    72,    47,    47,    46,   112,    75,
    47,    47,   434,    79,    80,    81,   688,    85,    75,    47,
    46,    47,    79,    80,    81,    49,    52,    95,    96,   112,
    46,    99,    49,    46,    52,   416,    50,   418,    46,    51,
   421,    51,    51,    50,   112,   113,    10,   115,   116,   117,
    47,    57,   830,   831,    46,   477,    47,    21,    22,    23,
    24,    47,    47,    96,   486,    91,    92,    96,    75,   491,
    42,    35,    79,    80,    81,    96,   498,    50,    84,    85,
    42,    96,    46,    52,    47,    49,    92,    93,    82,   867,
    96,    97,    98,    52,   516,   873,    52,   875,    52,   877,
   772,    52,    75,   129,    47,   777,    79,    80,    81,    47,
   782,    47,    96,    47,   464,   465,   466,   539,    47,    96,
   146,    96,   472,    42,    47,   151,    96,    47,   154,    47,
    47,   803,   115,   805,   115,   115,    52,   101,   102,   103,
    52,   105,   106,   107,   108,   109,   818,   111,   112,   821,
   822,    52,    47,   825,    57,   115,   182,   183,    47,    47,
    47,   187,   188,   189,   190,    96,    46,   115,    47,    47,
    47,   197,   198,   199,   200,    47,    47,    47,    47,    47,
   115,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,   863,    47,    96,    97,    98,    47,    51,    51,   225,
   115,   115,    51,    86,    87,    88,    89,    90,    91,   235,
   591,    94,    95,   594,    51,   596,   888,    47,   599,    47,
   642,    47,    47,   115,    51,   606,    47,   608,    51,   610,
   611,   612,   904,    15,    51,    51,    51,     0,   660,    52,
    52,    52,    52,   915,   270,    52,    52,   669,    52,    52,
    52,   923,     0,   523,   926,   412,   590,   498,   564,   102,
   932,   644,   671,    -1,    46,    -1,   688,    -1,    -1,    -1,
    -1,    -1,    -1,   299,    -1,   625,    -1,   627,   628,    -1,
   630,   631,   308,   633,   956,   311,   636,    -1,   638,   639,
    72,   641,   964,    -1,   966,   676,   677,   678,    -1,    -1,
  1078,    -1,    -1,    85,    -1,  1083,    -1,   333,    -1,    -1,
    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,   345,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1000,    -1,
   112,   357,    -1,   115,   116,   117,    -1,  1115,   364,    -1,
   366,    -1,  1120,  1015,    -1,    -1,  1018,   373,  1020,  1127,
    -1,    -1,   733,    -1,   735,    -1,    -1,   738,    -1,   740,
    -1,   742,    -1,   744,   745,   746,   747,    -1,    -1,   750,
    -1,    -1,   753,    -1,    -1,    -1,    -1,   758,    -1,  1157,
     8,    -1,    -1,   805,    -1,    -1,    -1,    15,    -1,    -1,
    -1,    -1,    20,    -1,    -1,    -1,   818,    -1,    -1,    -1,
   822,    -1,    -1,   825,    -1,    -1,    -1,    -1,   434,    -1,
    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
    -1,     8,   772,    -1,   774,   775,    -1,   777,    15,   779,
   780,    -1,    -1,    -1,   784,   785,    23,    24,    -1,    -1,
   790,   863,   792,   793,    72,    73,   796,   797,    -1,   830,
   831,   477,    -1,    -1,    -1,    -1,    -1,    85,    -1,    46,
   486,    -1,    -1,    -1,    -1,   491,   888,    95,    96,    -1,
    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    15,    -1,   904,    -1,   112,    72,   867,   115,   116,   117,
   516,    -1,   873,   915,   875,    -1,   877,    -1,    85,    -1,
    -1,   923,    -1,    -1,   926,    -1,    -1,    -1,    95,    96,
   932,    46,    99,   539,    -1,   102,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   112,   113,    -1,   115,   116,
   117,    -1,    -1,    -1,   956,    -1,    -1,    72,    -1,    -1,
    -1,   891,   964,    -1,   966,   895,    -1,    -1,   898,   899,
    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   909,
    95,    96,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,  1000,    -1,
   115,   116,   117,     3,    -1,    -1,    -1,     7,     8,    -1,
    10,    11,    -1,  1015,    -1,    -1,  1018,    17,  1020,    19,
    20,    21,    22,    -1,    -1,    25,    26,    27,    28,    -1,
    30,    31,    32,    -1,    34,    35,   642,    -1,    -1,    39,
    40,    -1,    42,    43,    44,   975,    46,    -1,    -1,    49,
    -1,    -1,   982,    -1,   660,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   669,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    15,    72,    73,    74,    -1,    -1,    -1,    -1,    23,
    24,    -1,   688,    -1,    -1,    85,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     8,  1024,    -1,    96,    -1,    -1,  1029,
    15,   101,    46,   103,   104,   105,   106,   107,    -1,    -1,
    -1,    -1,   112,    -1,   114,    -1,  1077,  1078,    -1,    -1,
    -1,  1082,  1083,    -1,    -1,    15,    -1,    -1,    72,    -1,
    -1,    46,    -1,    -1,    49,    -1,    51,    -1,    -1,    -1,
  1070,    85,  1072,  1073,    -1,  1075,    -1,    -1,    -1,    -1,
    -1,    95,    96,    -1,  1115,    99,    46,    72,   102,  1120,
    -1,    -1,    -1,    -1,    -1,  1126,  1127,    -1,   112,   113,
    85,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
    95,    96,    72,    -1,    99,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    85,  1157,   112,   113,   805,
   115,   116,   117,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,    -1,   818,    -1,    -1,    -1,   822,    -1,    -1,   825,
    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
    -1,     3,    -1,    -1,    -1,     7,     8,    -1,    10,    11,
    -1,    -1,    -1,    15,    -1,    17,    -1,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,   863,    30,    31,
    32,    -1,    34,    35,    -1,    -1,    -1,    39,    40,    -1,
    42,    43,    44,    -1,    46,    -1,    -1,    49,    -1,    -1,
    -1,    -1,   888,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   904,    -1,
    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,   915,
    -1,    -1,    -1,    85,    -1,    -1,    -1,   923,    -1,    -1,
   926,    -1,    -1,    95,    96,    -1,   932,    99,    -1,   101,
   102,   103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,
   112,   113,   114,   115,   116,   117,    -1,     3,    -1,    -1,
   956,     7,     8,    -1,    10,    11,    -1,    -1,   964,    15,
   966,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    -1,    30,    31,    32,    -1,    34,    35,
    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,
    46,    -1,    -1,    49,  1000,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1015,
    -1,    -1,  1018,    -1,  1020,    -1,    72,    73,    74,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
    96,    -1,    -1,    99,    -1,   101,   102,   103,   104,   105,
   106,   107,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
   116,   117,     3,    -1,    -1,    -1,     7,     8,    -1,    10,
    11,    -1,    -1,    -1,    15,    -1,    17,    -1,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
    31,    32,    -1,    34,    35,    -1,    -1,    -1,    39,    40,
    -1,    42,    43,    44,    -1,    46,    -1,    -1,    49,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
   101,   102,   103,   104,   105,   106,   107,    -1,    -1,    -1,
    -1,   112,   113,   114,   115,   116,   117,     3,    -1,    -1,
    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,    -1,
    -1,    17,    -1,    19,    20,    21,    22,    -1,    -1,    25,
    26,    27,    28,    -1,    30,    31,    32,    -1,    34,    35,
    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,     8,
    46,    -1,    -1,    49,    -1,    -1,    15,    -1,    17,    -1,
    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
    -1,    -1,    -1,    -1,    15,    -1,    -1,    -1,    -1,    -1,
    96,    -1,    -1,    -1,    -1,   101,    -1,   103,   104,   105,
   106,   107,    -1,    72,    73,    74,   112,    -1,   114,    -1,
    -1,    -1,    -1,    -1,    -1,    46,    85,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     8,    95,    96,    -1,    -1,
    99,    -1,    15,   102,    17,    -1,    19,    20,    -1,    -1,
    -1,    72,    -1,   112,   113,   114,   115,   116,   117,    -1,
    -1,    -1,    -1,    -1,    85,    -1,    39,    40,    -1,    42,
    43,    44,     8,    46,    95,    96,    -1,    -1,    99,    15,
    -1,    17,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,
    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,    72,
    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    95,    96,    -1,    -1,    99,    -1,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,   112,
    -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    85,
    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    95,
    96,    -1,    15,    99,    17,    -1,   102,    -1,    -1,    -1,
    23,    24,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
   116,   117,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
    43,    44,     8,    46,    -1,    -1,    -1,    -1,    -1,    15,
    -1,    17,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,   102,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,   112,
   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    85,
    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    95,
    96,    -1,    15,    99,    17,    -1,   102,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
   116,   117,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
    43,    44,     8,    46,    -1,    -1,    49,    -1,    51,    15,
    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
    46,    -1,    85,    49,    -1,    51,    -1,    -1,    -1,    -1,
    -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,   112,
   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    85,
    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    95,
    96,    -1,    15,    99,    17,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
   116,   117,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
    43,    44,     8,    46,    -1,    -1,    49,    -1,    51,    15,
    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
    46,    -1,    85,    49,    -1,    51,    -1,    -1,    -1,    -1,
     8,    -1,    95,    96,    -1,    -1,    99,    15,    -1,    17,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,   112,
    -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    85,
    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,    95,
    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,   115,
   116,   117,    -1,    -1,    72,    73,    74,    -1,    39,    -1,
    -1,    42,    43,    44,    -1,    46,    -1,    85,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,    96,    -1,
    -1,    99,    15,   101,    17,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,   112,    -1,   114,   115,   116,   117,
    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,    42,
    43,    44,     8,    46,    95,    96,    -1,    -1,    99,    15,
    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   112,    -1,   114,   115,   116,   117,    -1,    -1,    72,
    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     8,    -1,    95,    96,    -1,    -1,    99,    15,    -1,    17,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,   112,
    -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    85,
    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,    95,
    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,   115,
   116,   117,    -1,    -1,    72,    73,    74,    -1,    39,    -1,
    -1,    42,    43,    44,    -1,    46,    -1,    85,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,    96,    -1,
    -1,    99,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,   112,    -1,   114,   115,   116,   117,
    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,    42,
    43,    44,     8,    46,    95,    96,    -1,    -1,    99,    15,
    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   112,    -1,   114,   115,   116,   117,    -1,    -1,    72,
    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     8,    -1,    95,    96,    -1,    -1,    99,    15,    -1,    17,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,   112,
    -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    85,
    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,    95,
    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,   115,
   116,   117,    -1,    -1,    72,    73,    74,    -1,    39,    -1,
    -1,    42,    43,    44,    -1,    46,    -1,    85,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,    96,    -1,
    -1,    99,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,   112,    -1,   114,   115,   116,   117,
    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,    42,
    43,    44,     8,    46,    95,    96,    -1,    -1,    99,    15,
    -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    -1,
    -1,   112,    -1,   114,   115,   116,   117,    -1,    -1,    72,
    73,    74,    -1,    39,    40,    -1,    42,    43,    44,     8,
    46,    -1,    85,    -1,    -1,    -1,    15,    -1,     8,    -1,
    -1,    -1,    95,    96,     8,    15,    99,    -1,    -1,    -1,
    -1,    15,    -1,    23,    24,    -1,    72,    73,    -1,   112,
    -1,   114,   115,   116,   117,    -1,    -1,    46,    -1,    85,
    49,    -1,    51,    -1,    -1,    -1,    46,    -1,    -1,    95,
    96,    -1,    46,    99,    -1,    49,    -1,    51,    -1,    -1,
    -1,    -1,    -1,    72,    -1,    -1,   112,    15,    -1,   115,
   116,   117,    72,    -1,    -1,    -1,    85,    -1,    72,    15,
    -1,    -1,    -1,    -1,    -1,    85,    95,    96,    -1,    -1,
    99,    85,    -1,    -1,    -1,    95,    96,    -1,    46,    99,
    -1,    95,    96,   112,   113,    99,   115,   116,   117,    -1,
    46,    -1,   112,   113,    15,   115,   116,   117,   112,   113,
    -1,   115,   116,   117,    72,    -1,    15,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    85,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    46,    -1,    95,    96,    85,
    -1,    99,    -1,    -1,    -1,    15,    -1,    46,    -1,    95,
    96,    15,    -1,    99,   112,    -1,    -1,   115,   116,   117,
    -1,    72,    -1,    -1,    -1,    -1,   112,    -1,    -1,   115,
   116,   117,    -1,    72,    85,    -1,    46,    -1,    -1,    15,
    -1,    -1,    46,    -1,    95,    96,    85,    -1,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,
    99,   112,    72,    -1,   115,   116,   117,    15,    72,    -1,
    46,    -1,    -1,   112,    -1,    85,   115,   116,   117,    -1,
    -1,    85,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,    95,    96,    -1,    -1,    99,    72,    -1,    46,    -1,
    15,    -1,   112,    -1,    -1,   115,   116,   117,   112,    85,
    -1,   115,   116,   117,    -1,    15,    -1,    -1,    -1,    95,
    96,    -1,    -1,    99,    72,    -1,    -1,    -1,    -1,    -1,
    -1,    46,    -1,    -1,    -1,    -1,   112,    85,    -1,   115,
   116,   117,    -1,    -1,    -1,    -1,    46,    95,    96,    -1,
    -1,    99,    15,    -1,    -1,    -1,    -1,    72,    -1,    -1,
    -1,    15,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
    85,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    95,    96,    -1,    46,    99,    85,    -1,    -1,    -1,    15,
    -1,    -1,    46,    -1,    -1,    95,    96,   112,    -1,    99,
   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    -1,    -1,   112,    -1,    -1,   115,   116,   117,    72,    -1,
    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    85,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,
    -1,    95,    96,    -1,    -1,    99,    72,    -1,    -1,   112,
    -1,    -1,   115,   116,   117,    -1,    -1,    -1,   112,    85,
    -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    95,
    96,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,    -1,   115,
   116,   117
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 147 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 177 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 178 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 182 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 183 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 187 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 191 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 192 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 210 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 213 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 215 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 220 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 225 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 228 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 233 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 243 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 348 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 349 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 351 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 352 "msv.y"
{yyval.tnode=new CSyntaxNode(RETURN_STA, yyvsp[0].cString,NULL,VOIDTYPE);;
    break;}
case 37:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 41:
#line 357 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 359 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 360 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 362 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 46:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 47:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 48:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 49:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 50:
#line 373 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 374 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 52:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 54:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 55:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 56:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 57:
#line 384 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 58:
#line 390 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 59:
#line 394 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 60:
#line 403 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 414 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 415 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 64:
#line 418 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 65:
#line 431 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 66:
#line 436 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 67:
#line 440 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 68:
#line 446 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 69:
#line 447 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 70:
#line 453 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-7].returntype);
	   ;
    break;}
case 71:
#line 458 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, POINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-8].returntype);
	   ;
    break;}
case 72:
#line 464 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, DOUBLEPOINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-9].returntype);
	   ;
    break;}
case 73:
#line 470 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-7].cString, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 74:
#line 476 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-8].cString, yyvsp[-4].tnode, POINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 75:
#line 482 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-9].cString, yyvsp[-4].tnode, DOUBLEPOINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 76:
#line 492 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 77:
#line 497 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 78:
#line 502 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 79:
#line 511 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 80:
#line 519 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 81:
#line 530 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 82:
#line 543 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 83:
#line 544 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 84:
#line 545 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 85:
#line 550 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 86:
#line 554 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 87:
#line 558 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 88:
#line 562 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 89:
#line 566 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 90:
#line 570 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 91:
#line 576 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 92:
#line 578 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 93:
#line 581 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 94:
#line 586 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 95:
#line 597 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 96:
#line 598 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 97:
#line 599 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 98:
#line 602 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 99:
#line 603 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 100:
#line 604 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 101:
#line 612 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 102:
#line 616 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 103:
#line 620 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 104:
#line 625 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 105:
#line 631 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 106:
#line 636 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 107:
#line 643 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 108:
#line 649 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 109:
#line 660 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 110:
#line 661 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 111:
#line 662 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 112:
#line 667 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 113:
#line 674 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 114:
#line 677 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 115:
#line 678 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 116:
#line 687 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 117:
#line 690 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 118:
#line 691 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 119:
#line 692 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 120:
#line 693 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 121:
#line 694 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 122:
#line 695 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 123:
#line 696 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 124:
#line 700 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 125:
#line 702 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 704 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 127:
#line 706 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 128:
#line 708 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 129:
#line 710 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 130:
#line 712 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 131:
#line 714 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 132:
#line 716 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 133:
#line 718 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 134:
#line 720 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 135:
#line 722 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 136:
#line 724 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 137:
#line 728 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 138:
#line 729 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 139:
#line 732 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 140:
#line 733 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 141:
#line 734 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 142:
#line 737 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 143:
#line 738 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 144:
#line 739 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 145:
#line 742 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 146:
#line 746 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 147:
#line 752 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 148:
#line 754 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 149:
#line 756 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 150:
#line 758 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 151:
#line 760 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 152:
#line 761 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 153:
#line 766 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 154:
#line 767 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 155:
#line 768 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 156:
#line 774 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 157:
#line 775 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 158:
#line 777 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 159:
#line 779 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 160:
#line 781 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 161:
#line 783 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 162:
#line 784 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 163:
#line 790 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 164:
#line 791 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 165:
#line 793 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 166:
#line 795 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 167:
#line 800 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 168:
#line 801 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 169:
#line 805 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 170:
#line 806 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 171:
#line 810 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 811 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 173:
#line 815 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 816 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 175:
#line 817 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 176:
#line 818 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 177:
#line 819 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 821 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 822 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 823 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 181:
#line 824 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 182:
#line 825 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 183:
#line 826 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 184:
#line 827 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 185:
#line 828 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 186:
#line 829 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 187:
#line 832 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 188:
#line 833 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 189:
#line 834 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 190:
#line 835 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 191:
#line 836 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 192:
#line 837 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 193:
#line 838 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 194:
#line 839 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 195:
#line 842 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 196:
#line 843 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 197:
#line 847 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 198:
#line 848 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 199:
#line 849 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 200:
#line 850 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 201:
#line 857 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 202:
#line 861 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 203:
#line 869 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 881 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 205:
#line 885 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 206:
#line 894 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 207:
#line 906 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 208:
#line 910 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 209:
#line 918 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 210:
#line 921 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 211:
#line 922 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 212:
#line 927 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 213:
#line 931 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 214:
#line 935 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 215:
#line 940 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 216:
#line 943 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 217:
#line 952 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 218:
#line 953 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 219:
#line 954 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 220:
#line 957 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 221:
#line 958 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 222:
#line 961 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 223:
#line 962 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 224:
#line 965 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 225:
#line 966 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 226:
#line 967 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 227:
#line 968 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 228:
#line 969 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 229:
#line 970 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 230:
#line 973 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 231:
#line 974 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 232:
#line 975 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 233:
#line 976 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 234:
#line 977 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 235:
#line 978 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 236:
#line 980 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 237:
#line 981 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 238:
#line 983 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 239:
#line 984 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 240:
#line 986 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 241:
#line 994 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 242:
#line 995 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 243:
#line 996 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 244:
#line 997 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 245:
#line 998 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 246:
#line 1004 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 1006 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 248:
#line 1007 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 249:
#line 1010 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 250:
#line 1011 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 251:
#line 1012 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 1015 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 1016 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 254:
#line 1019 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 255:
#line 1020 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 256:
#line 1023 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 257:
#line 1024 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 258:
#line 1027 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 259:
#line 1028 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 260:
#line 1033 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 261:
#line 1034 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 262:
#line 1035 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 263:
#line 1036 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 264:
#line 1037 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 265:
#line 1038 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 266:
#line 1046 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 267:
#line 1047 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 268:
#line 1051 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 269:
#line 1052 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 270:
#line 1059 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 271:
#line 1063 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 272:
#line 1068 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 273:
#line 1074 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 274:
#line 1080 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 275:
#line 1086 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 276:
#line 1096 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 277:
#line 1102 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 278:
#line 1108 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 279:
#line 1114 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 280:
#line 1123 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 281:
#line 1127 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 282:
#line 1131 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 283:
#line 1137 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 284:
#line 1141 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 285:
#line 1145 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 286:
#line 1151 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 287:
#line 1157 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 288:
#line 1165 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 289:
#line 1173 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 290:
#line 1180 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 291:
#line 1186 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 292:
#line 1192 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 293:
#line 1196 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 294:
#line 1203 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 295:
#line 1208 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 296:
#line 1212 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 297:
#line 1216 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 298:
#line 1220 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 299:
#line 1226 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 300:
#line 1232 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 301:
#line 1238 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 302:
#line 1245 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 303:
#line 1253 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 304:
#line 1259 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 305:
#line 1274 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 306:
#line 1279 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 307:
#line 1284 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 308:
#line 1292 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 309:
#line 1299 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 310:
#line 1305 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 311:
#line 1311 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 312:
#line 1314 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 313:
#line 1324 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 314:
#line 1328 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 315:
#line 1337 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 316:
#line 1338 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 317:
#line 1343 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 318:
#line 1347 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 319:
#line 1356 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 320:
#line 1357 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 321:
#line 1365 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 322:
#line 1367 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 323:
#line 1374 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 324:
#line 1376 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 325:
#line 1382 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 326:
#line 1383 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 327:
#line 1387 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 328:
#line 1392 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 329:
#line 1397 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 330:
#line 1402 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 331:
#line 1409 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 332:
#line 1412 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 333:
#line 1413 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 334:
#line 1419 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 335:
#line 1421 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 336:
#line 1441 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 337:
#line 1442 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 338:
#line 1444 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 339:
#line 1446 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 340:
#line 1447 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 341:
#line 1453 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 342:
#line 1460 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 343:
#line 1468 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 344:
#line 1476 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 345:
#line 1480 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 346:
#line 1484 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 347:
#line 1490 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 348:
#line 1494 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 349:
#line 1500 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 350:
#line 1504 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 351:
#line 1511 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 352:
#line 1515 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 353:
#line 1519 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 354:
#line 1526 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 355:
#line 1530 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 356:
#line 1533 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 357:
#line 1538 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 358:
#line 1547 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 359:
#line 1548 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 360:
#line 1554 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 361:
#line 1555 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 362:
#line 1559 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 363:
#line 1560 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 364:
#line 1565 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 365:
#line 1566 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 366:
#line 1567 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 367:
#line 1568 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 368:
#line 1569 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 369:
#line 1572 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 370:
#line 1573 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 371:
#line 1574 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 372:
#line 1580 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1581 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1582 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1584 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1585 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1586 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1588 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1589 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 380:
#line 1590 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 381:
#line 1591 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 382:
#line 1593 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 383:
#line 1594 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 384:
#line 1595 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 385:
#line 1596 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 386:
#line 1597 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 387:
#line 1598 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 388:
#line 1599 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 389:
#line 1603 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 390:
#line 1604 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 391:
#line 1605 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 392:
#line 1606 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 393:
#line 1607 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 394:
#line 1608 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 395:
#line 1609 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1611 "msv.y"
