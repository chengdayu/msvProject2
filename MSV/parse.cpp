
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	RETURN	262
#define	IF	263
#define	ELSE	264
#define	EMPTY	265
#define	AWAIT	266
#define	PROJECTION	267
#define	PBEGIN	268
#define	PEND	269
#define	POINTERNULL	270
#define	ARRAY	271
#define	STRUCT	272
#define	DOT	273
#define	UNION	274
#define	FILEDECLARATION	275
#define	MORE	276
#define	DEFINE	277
#define	MY_TRUE	278
#define	MY_FALSE	279
#define	EXIST	280
#define	FRAME	281
#define	FOR	282
#define	WHILE	283
#define	DO	284
#define	TRUE	285
#define	FALSE	286
#define	REPEAT	287
#define	UNTIL	288
#define	DISPLAY	289
#define	SKIP	290
#define	THEN	291
#define	COMMA	292
#define	COLON	293
#define	INTDECLARATION	294
#define	STRDECLARATION	295
#define	POINTERDECLARATION	296
#define	CHARDECLARATION	297
#define	VOIDDECLARATION	298
#define	FLOATDECLARATION	299
#define	LISTDECLARATION	300
#define	OPEN_PAR	301
#define	CLOSE_PAR	302
#define	TIMES	303
#define	OPEN_BPAR	304
#define	CLOSE_BPAR	305
#define	OPEN_MPAR	306
#define	CLOSE_MPAR	307
#define	FUNCTION	308
#define	OVER	309
#define	CYLINDER	310
#define	OVEREP	311
#define	INTER_OR	312
#define	NON_DETERMINED	313
#define	SEND	314
#define	RECEIVE	315
#define	PROCESS	316
#define	CHANNEL	317
#define	PUT	318
#define	GET	319
#define	ERROR_TOKEN	320
#define	STRFUNCHEAD	321
#define	STRFUNCTAIL	322
#define	STRFUNCCAT	323
#define	STRFUNCCMP	324
#define	STRFUNCCPY	325
#define	STRFUNCLEN	326
#define	EXTERN	327
#define	UNSIGNED	328
#define	SIGNED	329
#define	CHOP	330
#define	IMPLY	331
#define	IFF	332
#define	PROPIMPLY	333
#define	OR	334
#define	PARALLEL	335
#define	AND	336
#define	ASS_P	337
#define	ASS_N	338
#define	CON	339
#define	ADDRESS	340
#define	NE	341
#define	EQ	342
#define	GE	343
#define	LE	344
#define	GT	345
#define	LT	346
#define	LST	347
#define	RST	348
#define	ADD	349
#define	SUB	350
#define	MUL	351
#define	DIV	352
#define	MOD	353
#define	BNE	354
#define	CHOPSTAR	355
#define	NEXT	356
#define	NEGATION	357
#define	LENGTH	358
#define	REQUEST	359
#define	FINAL	360
#define	KEEP	361
#define	ALWAYS	362
#define	HALT	363
#define	W_NEXT	364
#define	PREFIX	365
#define	SOMETIMES	366
#define	ID	367
#define	STRLITERAL	368
#define	STRUCT_TYPE	369
#define	INTLITERAL	370
#define	FLOATLITERAL	371
#define	CHARLITERAL	372

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1221
#define	YYFLAG		-32768
#define	YYNTBASE	118

#define YYTRANSLATE(x) ((unsigned)(x) <= 372 ? yytranslate[x] : 193)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   114,   116,   118,   120,
   122,   127,   132,   137,   142,   151,   153,   155,   157,   162,
   164,   166,   168,   170,   175,   179,   187,   197,   204,   210,
   220,   222,   224,   226,   234,   238,   240,   244,   246,   247,
   257,   268,   280,   291,   303,   316,   321,   327,   332,   337,
   340,   343,   346,   349,   351,   354,   357,   361,   365,   369,
   373,   381,   390,   402,   416,   418,   420,   422,   424,   426,
   428,   431,   438,   443,   449,   455,   464,   473,   476,   479,
   482,   483,   490,   498,   499,   502,   506,   508,   510,   512,
   514,   518,   521,   523,   535,   548,   560,   572,   590,   609,
   627,   646,   666,   685,   703,   722,   740,   742,   744,   746,
   748,   750,   761,   765,   767,   772,   778,   790,   803,   815,
   827,   840,   844,   848,   851,   852,   855,   858,   861,   869,
   876,   881,   885,   887,   891,   895,   901,   903,   907,   910,
   911,   913,   917,   919,   922,   925,   927,   929,   931,   933,
   935,   937,   941,   943,   945,   947,   949,   951,   953,   955,
   957,   959,   961,   963,   965,   967,   969,   973,   975,   977,
   981,   986,   991,   996,  1001,  1006,  1011,  1015,  1019,  1023,
  1024,  1027,  1030,  1033,  1036,  1039,  1043,  1048,  1053,  1058,
  1064,  1070,  1076,  1082,  1088,  1095,  1101,  1107,  1114,  1120,
  1127,  1135,  1142,  1149,  1157,  1164,  1171,  1177,  1185,  1192,
  1194,  1196,  1199,  1203,  1207,  1211,  1215,  1217,  1219,  1221,
  1225,  1229,  1233,  1237,  1241,  1245,  1249,  1253,  1257,  1261,
  1263,  1265,  1267,  1269,  1271,  1273,  1276,  1279,  1281,  1283,
  1287,  1290,  1294,  1299,  1305,  1310,  1314,  1319,  1325,  1330,
  1333,  1337,  1342,  1345,  1349,  1354,  1359,  1365,  1373,  1378,
  1382,  1388,  1397,  1398,  1403,  1407,  1412,  1417,  1423,  1429,
  1435,  1441,  1448,  1458,  1459,  1467,  1477,  1486,  1492,  1497,
  1500,  1503,  1509,  1511,  1512,  1515,  1519,  1526,  1527,  1530,
  1534,  1537,  1541,  1544,  1546,  1550,  1552,  1554,  1556,  1558,
  1562,  1563,  1566,  1567,  1571,  1573,  1576,  1580,  1584,  1588,
  1592,  1598,  1608,  1610,  1612,  1613,  1615,  1616,  1618,  1619,
  1627,  1635,  1641,  1644,  1646,  1647,  1653,  1656,  1657,  1662,
  1668,  1669,  1673,  1678,  1684,  1689,  1695,  1700,  1701,  1705,
  1709,  1714,  1719,  1724,  1729,  1734,  1739,  1744,  1749,  1756,
  1761,  1766,  1771,  1778,  1782,  1786,  1791,  1795,  1796,  1800,
  1804,  1808,  1812,  1815
};

static const short yyrhs[] = {   119,
   122,     0,    13,   120,    14,     0,     0,   120,    81,   120,
     0,   120,    79,   120,     0,   120,    77,   120,     0,   120,
    78,   120,     0,   120,    75,   120,     0,   107,   120,     0,
   106,   120,     0,   111,   120,     0,   109,   120,     0,   101,
   120,     0,    35,     0,    23,     0,    24,     0,   103,   143,
     0,    10,     0,    21,     0,   108,   120,     0,   105,   120,
     0,   102,   120,     0,    49,   120,   121,    50,    12,    49,
   120,    50,     0,   112,     0,    22,   112,    38,   158,     0,
   120,   100,     0,    46,   120,    47,     0,    37,   120,   121,
     0,     0,   122,    81,   122,     0,   122,    79,   122,     0,
   122,    75,   122,     0,   134,     0,   129,     0,   182,     0,
     7,   112,     0,   185,     0,   176,     0,   177,     0,   178,
     0,   101,    46,   122,    47,     0,   106,    46,   122,    47,
     0,   107,    46,   122,    47,     0,    11,    46,   157,    47,
     0,    32,    49,   122,    50,    33,    46,   157,    47,     0,
    35,     0,    10,     0,    21,     0,   103,    46,   143,    47,
     0,   189,     0,   187,     0,    30,     0,    31,     0,   105,
    46,   122,    47,     0,   122,    80,   122,     0,    46,   175,
    47,    76,    51,   122,    52,     0,    26,    46,   168,   173,
    47,    81,    46,   122,    47,     0,    49,   122,   174,    50,
    12,   166,     0,    49,   122,    50,    12,   166,     0,    22,
   112,    46,   162,    47,    82,    49,   124,    50,     0,   127,
     0,   125,     0,   126,     0,    25,   168,   163,    38,    49,
   122,    50,     0,    46,   122,    47,     0,   129,     0,   129,
    81,   123,     0,   122,     0,     0,    53,   161,   112,    46,
   162,    47,    49,   122,    50,     0,    53,   161,    96,   112,
    46,   162,    47,    49,   122,    50,     0,    53,   161,    96,
    96,   112,    46,   162,    47,    49,   122,    50,     0,    53,
    17,   114,   112,    46,   162,    47,    49,   122,    50,     0,
    53,    17,   114,    96,   112,    46,   162,    47,    49,   122,
    50,     0,    53,    17,   114,    96,    96,   112,    46,   162,
    47,    49,   122,    50,     0,   112,    46,   164,    47,     0,
    72,   112,    46,   164,    47,     0,   140,    46,   164,    47,
     0,   128,    49,   123,    50,     0,    17,   112,     0,    19,
   112,     0,    74,   130,     0,    73,   130,     0,   130,     0,
   131,   132,     0,   114,   132,     0,    17,   112,   132,     0,
    19,   112,   132,     0,    17,   114,   132,     0,    19,   114,
   132,     0,    46,    96,   168,    47,    46,   162,    47,     0,
    46,    96,    96,   168,    47,    46,   162,    47,     0,    46,
    96,   112,    51,   143,   141,    52,    47,    46,   162,    47,
     0,    46,    96,   112,    51,   143,   141,    52,    47,    46,
   162,    47,    82,   150,     0,    39,     0,    44,     0,    42,
     0,    40,     0,    43,     0,    20,     0,   168,   133,     0,
   112,    51,   143,   141,    52,   133,     0,   168,    82,   138,
   133,     0,   112,    16,    82,   150,   133,     0,   112,    16,
    82,   169,   133,     0,   112,    51,   143,   141,    52,    82,
   150,   133,     0,   112,    51,   143,   141,    52,    82,   169,
   133,     0,    96,   132,     0,    37,   132,     0,    37,     1,
     0,     0,   112,    51,   143,   141,    52,     0,     0,    37,
   112,    51,   143,   141,    52,     0,     0,     0,    37,     1,
     0,   135,   137,   138,     0,   168,     0,   191,     0,   140,
     0,   142,     0,    46,   135,    47,     0,   101,   135,     0,
   136,     0,    46,    46,    42,    96,    47,   115,    47,    51,
   143,   141,    52,     0,    46,    46,    73,    42,    96,    47,
   115,    47,    51,   143,   141,    52,     0,    46,    46,    39,
    96,    47,   115,    47,    51,   143,   141,    52,     0,    46,
    46,    44,    96,    47,   115,    47,    51,   143,   141,    52,
     0,    46,    46,    42,    96,    47,    46,    46,    42,    96,
    47,   115,    47,    47,    51,   143,   141,    52,     0,    46,
    46,    42,    96,    47,    46,    46,    73,    42,    96,    47,
   115,    47,    47,    51,   143,   141,    52,     0,    46,    46,
    42,    96,    47,    46,    46,    39,    96,    47,   115,    47,
    47,    51,   143,   141,    52,     0,    46,    46,    73,    42,
    96,    47,    46,    46,    42,    96,    47,   115,    47,    47,
    51,   143,   141,    52,     0,    46,    46,    73,    42,    96,
    47,    46,    46,    73,    42,    96,    47,   115,    47,    47,
    51,   143,   141,    52,     0,    46,    46,    73,    42,    96,
    47,    46,    46,    39,    96,    47,   115,    47,    47,    51,
   143,   141,    52,     0,    46,    46,    39,    96,    47,    46,
    46,    42,    96,    47,   115,    47,    47,    51,   143,   141,
    52,     0,    46,    46,    39,    96,    47,    46,    46,    73,
    42,    96,    47,   115,    47,    47,    51,   143,   141,    52,
     0,    46,    46,    39,    96,    47,    46,    46,    39,    96,
    47,   115,    47,    47,    51,   143,   141,    52,     0,    82,
     0,    83,     0,   143,     0,   150,     0,   169,     0,    46,
   169,    47,    46,   131,    47,    46,   162,    47,   126,     0,
    46,   138,    47,     0,   139,     0,    96,    46,   136,    47,
     0,   112,    51,   143,   141,    52,     0,    46,    46,    39,
    96,    47,   112,    47,    51,   143,   141,    52,     0,    46,
    46,    73,    39,    96,    47,   112,    47,    51,   143,   141,
    52,     0,    46,    46,    44,    96,    47,   112,    47,    51,
   143,   141,    52,     0,    46,    46,    42,    96,    47,   112,
    47,    51,   143,   141,    52,     0,    46,    46,    73,    42,
    96,    47,   112,    47,    51,   143,   141,    52,     0,    46,
   140,    47,     0,    37,   143,   141,     0,    37,     1,     0,
     0,    96,   168,     0,    96,   142,     0,    96,   140,     0,
    46,   142,    47,    51,   143,   141,    52,     0,    96,    46,
   161,    96,    47,   143,     0,    96,    46,   143,    47,     0,
    46,   142,    47,     0,   146,     0,   146,   159,   143,     0,
   143,   149,   146,     0,     8,   157,    36,   143,   145,     0,
   146,     0,   146,   149,   146,     0,     9,   143,     0,     0,
   147,     0,   146,   148,   147,     0,   170,     0,    95,   147,
     0,    99,   147,     0,    15,     0,   172,     0,   168,     0,
   140,     0,   142,     0,   126,     0,    46,   143,    47,     0,
   171,     0,   154,     0,   155,     0,   191,     0,    96,     0,
    97,     0,    98,     0,    92,     0,    93,     0,    85,     0,
    57,     0,    84,     0,    94,     0,    95,     0,   150,    84,
   150,     0,   151,     0,   152,     0,    46,   150,    47,     0,
    51,   143,   153,    52,     0,    51,   169,   153,    52,     0,
    51,   150,   153,    52,     0,    49,   143,   153,    50,     0,
    49,   169,   153,    50,     0,    49,   150,   153,    50,     0,
    37,   143,   153,     0,    37,   169,   153,     0,    37,   150,
   153,     0,     0,    37,     1,     0,    85,   168,     0,    85,
   140,     0,    85,   191,     0,    85,   154,     0,    46,   154,
    47,     0,    46,    39,    47,   144,     0,    46,    44,    47,
   144,     0,    46,    42,    47,   144,     0,    46,    74,    39,
    47,   144,     0,    46,    74,    42,    47,   144,     0,    46,
    73,    39,    47,   144,     0,    46,    73,    42,    47,   144,
     0,    46,    39,    96,    47,   156,     0,    46,    73,    39,
    96,    47,   156,     0,    46,    44,    96,    47,   156,     0,
    46,    42,    96,    47,   156,     0,    46,    73,    42,    96,
    47,   156,     0,    46,    43,    96,    47,   156,     0,    46,
    39,    96,    96,    47,   156,     0,    46,    73,    39,    96,
    96,    47,   156,     0,    46,    44,    96,    96,    47,   156,
     0,    46,    42,    96,    96,    47,   156,     0,    46,    73,
    42,    96,    96,    47,   156,     0,    46,    43,    96,    96,
    47,   156,     0,    46,    17,   114,    96,    47,   156,     0,
    46,   114,    96,    47,   156,     0,    46,    17,   114,    96,
    96,    47,   156,     0,    46,   114,    96,    96,    47,   156,
     0,   144,     0,   158,     0,   102,   157,     0,   157,    81,
   157,     0,   157,    79,   157,     0,    46,   157,    47,     0,
   143,   159,   143,     0,    23,     0,    24,     0,   143,     0,
   143,    87,   169,     0,   143,    86,   169,     0,   169,    87,
   143,     0,   169,    86,   143,     0,   143,    87,    15,     0,
   143,    86,    15,     0,    15,    87,   143,     0,    15,    86,
   143,     0,   143,    87,   171,     0,   143,    86,   171,     0,
    88,     0,    89,     0,    86,     0,    90,     0,    91,     0,
    87,     0,    73,    39,     0,    73,    42,     0,   160,     0,
   131,     0,   161,   168,   163,     0,   161,   163,     0,   114,
   168,   163,     0,   114,    96,   168,   163,     0,   114,    96,
    96,   168,   163,     0,   114,   168,    16,   163,     0,   112,
   168,   163,     0,   112,    96,   168,   163,     0,   112,    96,
    96,   168,   163,     0,   112,   168,    16,   163,     0,   114,
   163,     0,   114,    96,   163,     0,   114,    96,    96,   163,
     0,   112,   163,     0,   112,    96,   163,     0,   112,    96,
    96,   163,     0,   161,   168,    16,   163,     0,   161,    96,
   168,    16,   163,     0,   161,   168,    16,    51,   143,    52,
   163,     0,   161,    96,   168,   163,     0,   161,    96,   163,
     0,   161,    96,    96,   168,   163,     0,    46,    96,   168,
    47,    46,   162,    47,   163,     0,     0,    37,   161,   168,
   163,     0,    37,   161,   163,     0,    37,   112,   168,   163,
     0,    37,   114,   168,   163,     0,    37,   114,    96,   168,
   163,     0,    37,   112,   168,    16,   163,     0,    37,   114,
   168,    16,   163,     0,    37,   161,   168,    16,   163,     0,
    37,   161,    96,   168,    16,   163,     0,    37,    46,    96,
   168,    47,    46,   162,    47,   163,     0,     0,    37,   161,
   168,    51,   143,    52,   163,     0,    37,   161,   168,    51,
   143,    37,   143,    52,   163,     0,    37,   161,   168,    16,
    51,   143,    52,   163,     0,    37,   161,    96,   168,   163,
     0,    37,   161,    96,   163,     0,    37,     1,     0,   138,
   165,     0,   112,    46,   164,    47,   165,     0,   161,     0,
     0,    85,     1,     0,    37,   138,   165,     0,    37,   112,
    46,   164,    47,   165,     0,     0,    37,     1,     0,    49,
   122,    50,     0,     1,    50,     0,    46,   157,    47,     0,
     1,    47,     0,   112,     0,    46,   168,    47,     0,   113,
     0,   115,     0,   117,     0,   116,     0,    37,   168,   173,
     0,     0,    37,     1,     0,     0,    37,   122,   174,     0,
   158,     0,   102,   175,     0,   175,    81,   175,     0,   175,
    79,   175,     0,    46,   175,    47,     0,    28,   167,   166,
     0,    27,   143,    48,    29,   166,     0,    27,    46,   179,
    37,   180,    37,   181,    47,   166,     0,   134,     0,   130,
     0,     0,   157,     0,     0,   134,     0,     0,     3,    46,
   147,    47,    49,   183,    50,     0,     4,   147,    38,    46,
   122,    47,   184,     0,     6,    38,    46,   122,    47,     0,
     5,   183,     0,   183,     0,     0,     8,   157,    36,   166,
   186,     0,     9,   166,     0,     0,    34,    46,   138,    47,
     0,    34,    46,   138,   188,    47,     0,     0,    37,   138,
   188,     0,   104,    46,   168,    47,     0,   104,    46,   168,
   190,    47,     0,   104,    46,   140,    47,     0,   104,    46,
   140,   190,    47,     0,   104,    46,   191,    47,     0,     0,
    37,   168,   190,     0,    37,   140,   190,     0,   168,    18,
   168,   192,     0,   140,    18,   168,   192,     0,   142,    18,
   168,   192,     0,   168,    18,   140,   192,     0,   140,    18,
   140,   192,     0,   142,    18,   140,   192,     0,   168,    76,
   168,   192,     0,   140,    76,   168,   192,     0,    46,   154,
    47,    76,   168,   192,     0,   142,    76,   168,   192,     0,
   168,    76,   140,   192,     0,   140,    76,   140,   192,     0,
    46,   154,    47,    76,   140,   192,     0,   168,    18,   126,
     0,   168,    76,   126,     0,   142,    76,   140,   192,     0,
    46,   191,    47,     0,     0,    18,   168,   192,     0,    18,
   140,   192,     0,    76,   168,   192,     0,    76,   140,   192,
     0,    18,   126,     0,    76,   126,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   177,   178,   182,   183,   184,   185,   186,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   204,   205,   206,
   207,   208,   209,   213,   214,   219,   220,   224,   228,   233,
   235,   242,   348,   349,   351,   352,   353,   354,   355,   356,
   357,   359,   360,   362,   363,   364,   365,   366,   367,   373,
   374,   375,   376,   377,   378,   380,   383,   389,   393,   408,
   418,   420,   421,   423,   437,   441,   445,   452,   453,   458,
   463,   469,   475,   481,   487,   497,   502,   507,   516,   524,
   535,   549,   550,   551,   555,   559,   563,   567,   571,   575,
   582,   584,   586,   591,   603,   604,   605,   608,   609,   610,
   617,   621,   625,   630,   636,   641,   648,   654,   665,   667,
   668,   672,   679,   683,   684,   692,   696,   697,   698,   699,
   700,   701,   702,   705,   707,   709,   711,   713,   715,   717,
   719,   721,   723,   725,   727,   729,   734,   735,   738,   739,
   740,   743,   744,   745,   748,   752,   757,   759,   761,   763,
   765,   767,   771,   773,   774,   780,   781,   782,   784,   786,
   788,   790,   796,   797,   799,   800,   806,   807,   811,   812,
   816,   817,   821,   822,   823,   824,   825,   827,   828,   829,
   830,   831,   832,   833,   834,   835,   838,   839,   840,   841,
   842,   843,   844,   845,   847,   849,   853,   854,   855,   856,
   862,   866,   874,   886,   890,   899,   911,   915,   923,   927,
   928,   931,   936,   940,   945,   949,   956,   959,   960,   963,
   964,   967,   968,   971,   972,   973,   974,   975,   976,   979,
   980,   981,   982,   983,   984,   986,   987,   989,   990,   992,
  1000,  1001,  1002,  1003,  1004,  1010,  1012,  1013,  1016,  1017,
  1018,  1021,  1022,  1025,  1026,  1029,  1030,  1033,  1034,  1039,
  1040,  1041,  1042,  1043,  1044,  1051,  1053,  1056,  1058,  1064,
  1068,  1073,  1079,  1085,  1091,  1101,  1107,  1113,  1119,  1127,
  1131,  1135,  1141,  1145,  1149,  1155,  1161,  1168,  1174,  1180,
  1184,  1191,  1197,  1200,  1204,  1208,  1214,  1220,  1226,  1233,
  1241,  1247,  1262,  1268,  1271,  1279,  1287,  1293,  1299,  1303,
  1312,  1316,  1323,  1327,  1328,  1332,  1336,  1346,  1347,  1355,
  1357,  1364,  1366,  1372,  1373,  1377,  1382,  1387,  1392,  1398,
  1402,  1403,  1409,  1410,  1421,  1432,  1433,  1435,  1437,  1443,
  1449,  1457,  1465,  1469,  1473,  1479,  1483,  1489,  1493,  1500,
  1504,  1508,  1515,  1519,  1523,  1527,  1537,  1538,  1544,  1545,
  1549,  1550,  1555,  1556,  1557,  1558,  1559,  1562,  1563,  1564,
  1570,  1571,  1572,  1574,  1575,  1576,  1578,  1579,  1580,  1581,
  1583,  1584,  1585,  1586,  1587,  1588,  1589,  1593,  1594,  1595,
  1596,  1597,  1598,  1599
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","RETURN","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN",
"PEND","POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE",
"DEFINE","MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE",
"REPEAT","UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N",
"CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function_define","function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp","option_exp_else_statement",
"simple_ari_exp","member_in_exp","bi_operator","ari_operator","array_exp","option_list_value",
"option_struct_list_value","inner_option_list_value","address_exp","type_cast",
"casted_element","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   118,   119,   119,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   121,   121,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   123,   123,   124,   124,   125,
   125,   125,   125,   125,   125,   126,   126,   126,   127,   128,
   128,   129,   129,   129,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   131,   131,   131,   131,   131,   131,
   132,   132,   132,   132,   132,   132,   132,   132,   133,   133,
   133,    -1,    -1,    -1,    -1,   134,   135,   135,   135,   135,
   135,   135,   135,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   137,   137,   138,   138,
   138,   138,   138,   138,   139,   140,   140,   140,   140,   140,
   140,   140,   141,   141,   141,   142,   142,   142,   142,   142,
   142,   142,   143,   143,   143,   143,   144,   144,   145,   145,
   146,   146,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   148,   148,   148,   148,
   148,   148,   148,   148,   149,   149,   150,   150,   150,   150,
   151,   151,   151,   152,   152,   152,   153,   153,   153,   153,
   153,   154,   154,   154,   154,   154,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   156,
   157,   157,   157,   157,   157,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   159,
   159,   159,   159,   159,   159,   160,   160,   161,   161,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   164,   164,   164,   164,   164,   165,   165,   165,   165,   166,
   166,   167,   167,   168,   168,   169,   170,   171,   172,   173,
   173,   173,   174,   174,   175,   175,   175,   175,   175,   176,
   177,   178,   179,   179,   179,   180,   180,   181,   181,   182,
   183,   183,   184,   184,   184,   185,   186,   186,   187,   187,
   188,   188,   189,   189,   189,   189,   189,   190,   190,   190,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   192,   192,   192,
   192,   192,   192,   192
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     2,     1,     1,     1,     1,
     4,     4,     4,     4,     8,     1,     1,     1,     4,     1,
     1,     1,     1,     4,     3,     7,     9,     6,     5,     9,
     1,     1,     1,     7,     3,     1,     3,     1,     0,     9,
    10,    11,    10,    11,    12,     4,     5,     4,     4,     2,
     2,     2,     2,     1,     2,     2,     3,     3,     3,     3,
     7,     8,    11,    13,     1,     1,     1,     1,     1,     1,
     2,     6,     4,     5,     5,     8,     8,     2,     2,     2,
     0,     6,     7,     0,     2,     3,     1,     1,     1,     1,
     3,     2,     1,    11,    12,    11,    11,    17,    18,    17,
    18,    19,    18,    17,    18,    17,     1,     1,     1,     1,
     1,    10,     3,     1,     4,     5,    11,    12,    11,    11,
    12,     3,     3,     2,     0,     2,     2,     2,     7,     6,
     4,     3,     1,     3,     3,     5,     1,     3,     2,     0,
     1,     3,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     1,     3,
     4,     4,     4,     4,     4,     4,     3,     3,     3,     0,
     2,     2,     2,     2,     2,     3,     4,     4,     4,     5,
     5,     5,     5,     5,     6,     5,     5,     6,     5,     6,
     7,     6,     6,     7,     6,     6,     5,     7,     6,     1,
     1,     2,     3,     3,     3,     3,     1,     1,     1,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     1,
     1,     1,     1,     1,     1,     2,     2,     1,     1,     3,
     2,     3,     4,     5,     4,     3,     4,     5,     4,     2,
     3,     4,     2,     3,     4,     4,     5,     7,     4,     3,
     5,     8,     0,     4,     3,     4,     4,     5,     5,     5,
     5,     6,     9,     0,     7,     9,     8,     5,     4,     2,
     2,     5,     1,     0,     2,     3,     6,     0,     2,     3,
     2,     3,     2,     1,     3,     1,     1,     1,     1,     3,
     0,     2,     0,     3,     1,     2,     3,     3,     3,     3,
     5,     9,     1,     1,     0,     1,     0,     1,     0,     7,
     7,     5,     2,     1,     0,     5,     2,     0,     4,     5,
     0,     3,     4,     5,     4,     5,     4,     0,     3,     3,
     4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
     4,     4,     6,     3,     3,     4,     3,     0,     3,     3,
     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,     0,    47,     0,     0,     0,   100,    48,
     0,     0,     0,     0,     0,    52,    53,     0,     0,    46,
    95,    98,    97,    99,    96,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   324,     0,
     1,    62,    63,    61,     0,    34,    84,     0,    33,     0,
   123,   119,   120,   117,    38,    39,    40,    35,    37,    51,
    50,   118,     0,     0,    29,    13,    22,     0,   176,     0,
     0,     0,     0,   327,   329,   328,   181,   179,   180,    17,
   163,   171,   184,   185,   178,   173,   183,   177,   186,    21,
    10,     9,    20,    12,    11,     2,     0,     0,     0,     0,
     0,    26,     0,    36,   176,   247,   248,     0,     0,   326,
   249,     0,   241,     0,     0,    80,     0,    81,     0,     0,
     0,   324,   304,     0,   345,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   181,     0,   179,   180,
   184,   335,   178,     0,   186,     0,     0,     0,   269,   268,
     0,     0,     0,     0,     0,    83,    82,     0,   324,   158,
   157,   156,     0,     0,   122,   119,     0,     0,     0,     0,
     0,   314,     0,     0,   324,    86,   111,     0,     0,     0,
     0,     0,    85,   137,   138,     0,     0,   314,     0,     0,
     0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   179,   180,     0,
   184,   178,   186,     0,   213,     0,   215,   212,   214,   174,
   175,   195,   196,     0,   193,   194,   192,   262,   265,   260,
   261,   263,   264,   190,   191,   187,   188,   189,     0,     0,
     8,     6,     7,     5,     4,     0,     0,     0,     0,   249,
     0,   242,   262,   265,     0,     0,     0,     0,     0,     0,
     0,    87,    89,    88,    90,   293,     0,     0,     0,   331,
     0,    95,    97,    99,    96,     0,     0,   344,   343,     0,
     0,   323,     0,     0,     0,   340,     0,     0,     0,     0,
     0,     0,   144,   139,   140,   198,   199,   141,     0,     0,
    95,    97,    96,     0,     0,     0,     0,   324,   156,     0,
   336,    65,   121,   152,   162,     0,   325,     0,     0,     0,
   387,     0,     0,     0,     0,   266,   267,     0,     0,   314,
     0,     0,     0,     0,     0,     0,     0,   119,   120,     0,
   117,   118,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   324,   318,   313,     0,   155,   108,     0,     0,
     0,     0,   101,    32,    31,    55,    30,     0,    66,   116,
     0,   388,   388,     0,   388,   388,   388,   388,   388,   388,
   384,   388,   388,   385,   388,   388,    25,    29,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   182,   216,     0,
     0,     0,     0,     0,     0,   165,   172,   164,     0,   257,
   256,   245,   255,   251,   259,   254,   250,   258,   246,   358,
   244,   243,   253,   252,    44,     0,   304,   304,   304,     0,
   310,     0,     0,     0,   304,     0,     0,     0,     0,     0,
     0,     0,   347,     0,   322,   321,     0,     0,     0,     0,
     0,     0,     0,     0,   210,   210,   210,   210,   210,   210,
     0,     0,   359,     0,     0,     0,     0,     0,     0,    95,
    97,    95,    97,   339,   156,     0,     0,     0,     0,     0,
     0,     0,   338,   337,   333,     0,     0,     0,     0,     0,
     0,   293,     0,     0,   324,     0,   161,     0,    95,    97,
    96,     0,    41,     0,     0,    49,     0,   365,     0,   363,
     0,   367,    54,    42,    43,   315,   314,     0,   311,    76,
     0,     0,     0,   155,   110,   109,   111,    79,     0,     0,
     0,     0,     0,   375,   372,    78,   382,   378,   376,   373,
   386,   380,   374,   371,   381,   377,    28,     0,   170,     0,
   217,   167,     0,     0,   219,     0,     0,     0,     0,   218,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   356,     0,   304,   283,   304,   304,   280,   304,   304,
   271,   304,     0,     0,   304,     0,   304,   304,   295,   304,
     0,   332,   331,     0,     0,     0,     0,     0,     0,     0,
   346,     0,   341,   320,     0,   143,   200,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   361,
   360,     0,   197,     0,     0,     0,     0,     0,     0,   155,
   293,   339,   155,   388,   388,     0,   334,    59,     0,     0,
     0,   293,     0,   293,     0,    77,     0,     0,     0,     0,
     0,     0,    95,    97,     0,     0,     0,     0,   368,   368,
   366,   364,     0,   319,   324,   318,   154,   155,   146,   111,
   111,     0,   103,    67,   393,   388,   388,   394,   388,   388,
     0,     0,   166,     0,     0,     0,   240,   224,     0,   227,
     0,   229,     0,   226,     0,     0,     0,     0,     0,   222,
     0,     0,   223,     0,     0,   220,   221,   237,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   357,     0,   304,
   284,   304,   304,   276,   304,   281,   304,   304,   272,     0,
   290,   304,   304,   270,     0,     0,   304,   296,   304,   304,
   297,   309,   304,   304,     0,   294,     0,   330,     0,     0,
     0,   349,     0,     0,   211,   210,   210,   210,   204,   206,
   205,   201,   203,   202,     0,   145,   362,     0,   324,   327,
     0,   324,   327,   324,   327,     0,     0,   293,     0,     0,
     0,   383,   379,     0,    58,     0,   293,     0,   293,     0,
     0,   155,   160,     0,     0,     0,     0,     0,     0,   370,
   369,    76,   314,   316,   153,   104,   105,   111,   390,   389,
   392,   391,     0,   169,   236,     0,   168,   230,   233,   235,
   232,     0,   225,     0,   228,     0,   239,     0,     0,     0,
     0,     0,     0,   350,     0,   285,   304,   277,   279,   282,
   304,   273,   275,   304,   304,   289,     0,   286,    69,     0,
   299,   298,   300,   304,   308,     0,   301,     0,    64,     0,
   348,     0,     0,     0,   207,   209,   208,     0,     0,     0,
     0,     0,     0,     0,     0,   324,     0,   324,   327,     0,
   146,    91,   159,    56,   293,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   312,     0,     0,   102,    23,   238,   231,   234,     0,
     0,     0,   293,   278,   274,   291,   287,     0,    68,     0,
   293,   302,     0,     0,   304,     0,     0,    45,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    92,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    76,   111,   111,     0,     0,     0,   304,    60,     0,   304,
     0,   305,    57,   342,   293,     0,     0,     0,   155,   155,
     0,     0,     0,   155,   155,   155,   155,     0,     0,     0,
     0,     0,     0,   293,     0,     0,     0,     0,     0,    70,
     0,     0,     0,     0,     0,     0,     0,   317,   106,   107,
     0,   352,   304,   288,   304,   307,   304,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   155,     0,     0,     0,   155,   155,     0,     0,     0,    73,
     0,    71,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   355,   292,   303,   306,     0,   327,   327,     0,   147,
   126,   327,   327,     0,   150,   124,   149,   127,     0,     0,
     0,     0,     0,     0,    93,     0,    74,    72,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   354,   351,
     0,     0,   142,     0,     0,     0,   327,     0,     0,   327,
   148,   327,   327,     0,   151,   125,     0,    75,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   353,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   327,    94,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   155,   155,     0,   155,   155,
     0,     0,     0,     0,     0,     0,   155,     0,     0,   155,
   155,   155,     0,   136,   134,     0,   130,   128,     0,     0,
     0,   155,   135,   129,   133,   131,     0,   132,     0,     0,
     0
};

static const short yydefgoto[] = {  1219,
     2,    21,   217,   156,   388,   960,    62,    97,    64,    65,
    66,    67,    68,   378,   383,    69,    70,    71,   206,   374,
   313,    98,   552,    99,   131,   727,   723,   101,   102,   259,
   244,   315,   316,   317,   652,   103,   104,   728,   271,   133,
   275,   170,   459,   460,   289,   376,   549,   450,   149,   105,
   134,   106,   107,   108,   468,   344,   164,    75,    76,    77,
   300,   642,   902,    78,   757,  1130,    79,   612,    80,   494,
    81,   539,   109,   564
};

static const short yypact[] = {   160,
  1238,  2953,-32768,-32768,   125,-32768,-32768,-32768,  1238,  1238,
  1238,  1238,   917,  1238,  1238,  1238,  1238,  1238,  1238,-32768,
   331,   109,   137,  1609,-32768,   295,   556,   944,-32768,-32768,
   313,   -15,   350,   926,   339,-32768,-32768,   384,   413,-32768,
-32768,-32768,-32768,-32768,-32768,  2366,  2953,   903,   353,  1423,
  1423,   368,    -8,   483,   512,   537,   550,   581,   610,   408,
  1003,-32768,-32768,-32768,   553,-32768,-32768,   408,-32768,   -19,
-32768,    48,    66,    87,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   606,   877,   828,   592,   592,  1609,-32768,  3520,
    -9,   743,   743,-32768,-32768,-32768,-32768,    48,    66,   684,
  2112,-32768,-32768,-32768,    87,-32768,-32768,-32768,-32768,   592,
   592,   592,   592,   592,   592,-32768,  1238,  1238,  1238,  1238,
  1238,-32768,   743,-32768,   416,-32768,-32768,  2225,  1609,-32768,
  1904,   730,-32768,  1178,  1609,   408,   408,   408,   408,   669,
   -15,-32768,   698,   -15,  2403,   658,   699,  1609,    71,  2953,
  1925,  1609,  2615,   450,  2010,  1066,  1073,   233,   799,   640,
   714,-32768,   665,   571,   238,  1131,   653,    23,-32768,-32768,
   584,   740,  1141,  1144,   745,-32768,-32768,  3922,   870,-32768,
-32768,-32768,  2845,   157,-32768,   154,   917,   460,  2953,  2953,
  2953,  3267,   917,   408,   543,-32768,   454,  2953,  2953,  2953,
  2953,  1056,-32768,-32768,-32768,  1925,    -3,  3267,    -3,    -3,
    -3,   199,   199,  2078,-32768,  1238,   776,   783,   766,    39,
   186,   848,   223,  3557,   587,  1065,   894,    -2,   271,   257,
   939,   387,   949,   172,   985,    66,-32768,  1018,-32768,-32768,
-32768,-32768,-32768,   743,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   743,   917,
  1274,   815,   815,   418,   930,   993,   917,   917,  2990,  1358,
   829,-32768,   -11,    -5,   917,    71,  1609,  1609,   917,   917,
   883,-32768,-32768,-32768,-32768,  1322,   999,   659,  1022,  1032,
  1207,    39,   186,   848,   223,  3435,   473,-32768,-32768,  1048,
  1080,-32768,   980,  1044,  2953,-32768,  1134,  3147,  2444,  2444,
   486,   947,-32768,   684,  1030,-32768,-32768,-32768,   890,  1210,
   230,   284,   315,  1455,  1558,  1027,   368,  1072,  1084,  3027,
-32768,-32768,-32768,-32768,  1098,  1089,-32768,  1107,  2010,  2010,
-32768,  2953,  1175,  1155,   642,-32768,-32768,   694,  1145,  3267,
   408,   408,   501,   797,  1122,  2730,  1170,    -2,   271,   714,
   387,   949,   373,   888,   172,   596,   727,  1180,  1216,  1251,
  1351,    52,   851,  1196,-32768,  1224,    24,-32768,  1186,   917,
    45,  1925,-32768,  1063,  1171,  1171,-32768,  1232,  1208,-32768,
    98,   216,   216,  1239,   216,   216,   216,   216,   216,   216,
-32768,   287,   216,-32768,   287,   216,-32768,   828,  1288,   917,
  1229,   743,   326,   743,   341,   360,   743,   381,   385,   425,
   478,  1093,   523,   526,  1309,  1312,   532,-32768,  1089,   781,
   464,   271,   939,   387,   949,  1670,-32768,   684,  1286,   684,
   684,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   684,  1354,
  1289,-32768,   684,   684,-32768,  1292,    64,   140,   152,  1335,
-32768,  1304,   -15,   535,   169,  1352,    27,  1355,   545,  3472,
  1361,   253,  1609,    71,-32768,-32768,  1493,  1376,  3230,  1363,
   257,   243,  1365,  3350,   305,    62,  1377,   305,    62,  1377,
  3983,  1925,-32768,  1372,   955,   508,   559,   568,   569,   570,
   588,  1309,  1312,  1107,  1374,   917,  1381,  3110,  1113,   917,
    -3,  1371,  1347,-32768,   970,    71,  1417,   821,  1387,  1325,
  1393,  1322,  1394,   -15,  1405,  1084,-32768,  1410,  1362,  1364,
  1385,  1572,-32768,   566,   464,-32768,    -3,-32768,  1412,-32768,
  1421,-32768,-32768,-32768,-32768,-32768,  3267,   736,-32768,-32768,
   685,  1418,     9,    24,-32768,-32768,  1440,-32768,  1056,   139,
  1438,   199,   199,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1437,    58,   595,
-32768,  1217,   743,  1441,-32768,   743,  1444,   743,  1445,-32768,
   743,  1446,   601,   612,   634,   570,   647,   743,   673,   743,
   680,   743,   743,   743,  1449,  1406,  1407,  1409,  1117,  1383,
    71,-32768,   -15,   179,-32768,   410,   198,-32768,   496,   226,
-32768,   593,  1424,   -15,   637,   -15,   796,     4,-32768,   491,
  2953,-32768,  1032,  1430,   374,   230,   284,   315,  1132,   414,
   869,  1475,-32768,-32768,  1467,-32768,-32768,  1473,  3387,   243,
  1221,  1471,  1472,  1479,  1478,  1483,  1486,  3605,  1476,  1505,
-32768,   955,-32768,  1104,  1308,  1524,   681,   687,  1499,    24,
  1322,-32768,    24,   216,   216,  2953,-32768,-32768,    71,  1434,
  1502,  1322,  1503,  1322,  1507,-32768,  1374,   917,   917,  1509,
  1510,  1514,  1456,  1470,  1362,  1364,  1385,  1162,  1534,  1534,
-32768,-32768,  1532,-32768,   946,  1196,-32768,    24,-32768,   112,
  1440,  1531,-32768,-32768,-32768,   287,   216,-32768,   287,   216,
  1238,   917,-32768,   743,  1537,   743,-32768,-32768,   743,-32768,
   743,-32768,   743,-32768,   743,  1826,  2069,  2581,   692,-32768,
   743,  1539,-32768,   743,  1540,-32768,-32768,-32768,   743,  1543,
  1546,  1547,  1456,  1511,   743,  1561,  1555,-32768,  1559,     4,
-32768,   698,   698,-32768,     4,-32768,   698,   698,-32768,   -15,
-32768,   820,    38,-32768,  1576,  1580,   698,-32768,   698,   698,
-32768,-32768,   994,   272,   917,-32768,  1563,-32768,  1562,   441,
   588,   157,  1609,  1751,-32768,   305,    62,  1377,-32768,-32768,
-32768,-32768,-32768,-32768,  3642,-32768,-32768,  3690,  1001,  1581,
  3727,  1111,  1582,  1126,  1588,  3958,  3995,  1322,  1593,  1600,
  1596,-32768,-32768,  1296,-32768,  1564,  1322,  1602,  1322,  1610,
  1611,    24,   684,    44,   116,  1116,  1612,  1614,  1470,-32768,
-32768,  1196,  3267,-32768,-32768,-32768,-32768,   555,-32768,-32768,
-32768,-32768,  1012,   684,-32768,   743,  1670,-32768,-32768,-32768,
-32768,  4020,-32768,   743,-32768,   743,-32768,  1550,  1552,  1554,
  1620,  1631,  1627,-32768,  1628,-32768,   698,-32768,-32768,-32768,
   698,-32768,-32768,   698,   698,-32768,   917,-32768,  2953,  1629,
-32768,-32768,-32768,   698,-32768,   917,-32768,    19,-32768,  2953,
-32768,  1633,  1161,  1636,-32768,-32768,-32768,  3775,  1607,  1625,
  3812,  1634,  1637,  1639,  1642,  1151,  3860,  1179,  1648,  1649,
  1652,-32768,-32768,-32768,  1322,  1653,  1635,  1654,  1657,  2953,
  1626,  1656,  1660,  1581,  1663,  1665,  1582,  1666,  1588,  1591,
   161,-32768,  1669,     9,-32768,-32768,-32768,-32768,-32768,  1598,
  1672,  2953,  1322,-32768,-32768,-32768,-32768,   323,  1003,  1673,
  1322,-32768,   905,   917,   698,  1403,    71,-32768,  1674,   703,
   708,  1195,   917,   917,   709,   718,  1204,   917,   917,   917,
   917,  1677,  3897,  1678,  1679,-32768,  1687,  1689,  1685,  2953,
  1692,  2953,  1571,  1652,   936,  1015,  1697,  1700,  1702,  1648,
  1196,   112,  1440,  2953,  1453,  1711,   698,-32768,  1712,   698,
   929,-32768,-32768,-32768,  1322,   744,   747,   771,    24,    24,
   775,   777,   790,    24,    24,    24,    24,   917,   803,   816,
  1205,   917,   917,  1322,  1698,  2953,  1707,  2953,  1786,-32768,
  1664,  1668,  1723,  1676,  1680,  1728,  1028,-32768,-32768,-32768,
  1484,-32768,   698,-32768,   698,-32768,   698,  1726,  4056,  4062,
   822,  1727,  1729,  4068,  4103,   823,  1731,  1732,  1733,  1740,
    24,   831,   840,   842,    24,    24,  1752,  2953,  1796,-32768,
  1834,-32768,  1753,  1755,  1682,  1757,  1762,  1684,  1715,  1722,
  1756,  1299,-32768,-32768,-32768,   242,  1773,  1774,  4110,-32768,
-32768,  1779,  1781,  4144,-32768,-32768,-32768,-32768,  1777,  4151,
  4185,   853,  1778,  1780,  1693,  1855,-32768,-32768,  1716,  1718,
  1790,  1724,  1725,  1795,  1798,  1800,  1747,  1383,-32768,-32768,
   200,   610,-32768,  1803,  1805,  1806,  1807,  1808,  1809,  1812,
-32768,  1815,  1816,  4192,-32768,-32768,   955,-32768,  1773,  1774,
  1735,  1779,  1781,  1749,  1754,  1758,  1821,-32768,   286,   870,
  1823,  1827,  1835,  1836,  1838,  1845,  1847,  1850,  1861,  1030,
  1807,  1812,  1815,  1816,  1797,   917,   917,  1865,   917,   917,
  1867,  1872,  1873,  1879,  1861,    24,    24,   917,    24,    24,
   917,   917,   917,  1876,  1885,  1893,    24,  1895,  1897,    24,
    24,    24,   917,-32768,-32768,  1899,-32768,-32768,  1903,  1906,
  1908,    24,-32768,-32768,-32768,-32768,  1909,-32768,  1928,  1962,
-32768
};

static const short yypgoto[] = {-32768,
-32768,     8,  1560,   203,  1408,-32768,-32768,     1,-32768,-32768,
  -187,   -38,   836,    32,  -488,  -143,   -17,  1481,-32768,  -121,
-32768,   377,  -476,  1326,   -13,  -360,-32768,  1487,   -84,-32768,
  1388,  -275,-32768,-32768,  -407,     5,-32768,  1215,   -18,   -32,
  1868,-32768,   -47,  -463,  1123,  -203,  -699,  -138,-32768,   927,
   142,-32768,  1002,-32768,  1340,  1462,  -113,-32768,-32768,-32768,
-32768,-32768,-32768,-32768, -1060,-32768,-32768,-32768,-32768,  1318,
-32768,  -318,  1624,    43
};


#define	YYLAST		4309


static const short yytable[] = {   100,
   171,   299,    63,   443,   394,   132,   844,   240,   241,   446,
   306,   176,   177,   162,   389,   207,    84,    85,    86,    87,
   146,   110,   111,   112,   113,   114,   115,   632,   158,   312,
   141,  1129,   482,   486,   489,   185,   234,   183,   266,   326,
   288,   331,   391,   208,   334,   555,   157,    63,   541,   141,
   161,   581,   546,   585,   662,   964,   590,   309,   685,   310,
   551,   346,   204,   205,   347,   207,   722,  1158,   713,   218,
   965,   304,   141,   209,   288,    91,   230,   712,   653,   654,
   655,   656,   657,   210,   390,   412,    52,    52,   887,   932,
   141,   196,   184,   208,   231,   237,   142,   234,   651,   203,
   288,   130,   179,   179,   212,    96,   298,   130,   179,   141,
   272,    96,   242,   243,   270,   142,   281,   242,   243,   305,
   162,   130,   162,   209,   261,   262,   263,   264,   265,   303,
   355,   230,   231,   319,   413,   158,    91,   314,   142,   270,
   194,   211,   942,   560,   375,   495,   523,    52,   381,   231,
    63,   242,   243,   157,   123,   933,   195,   231,   934,   614,
   375,   935,   213,   179,   354,   158,   185,   282,   283,   284,
   285,   207,     1,   364,   437,   142,   288,   606,   314,   377,
   607,   407,   608,    63,   560,   141,   480,   360,   288,    63,
    63,    63,   314,   819,   314,   495,   821,   141,    63,    63,
    63,    63,   363,   482,    61,   288,   998,   820,   650,   179,
   230,   609,   401,   404,   141,   288,   509,   430,   828,   663,
   830,   846,   847,   408,   141,   513,   514,   936,   231,   209,
   937,   845,   414,   562,   288,   617,    83,   740,   433,   743,
   465,   746,   747,   141,   391,  1159,   438,   620,   124,   166,
   179,   142,    52,   440,   441,   270,    91,   184,   451,   452,
   557,   449,   288,   142,   628,   453,   454,    52,   179,   417,
    49,   141,   999,   231,   760,  1000,   412,   710,   471,   333,
   142,   415,   230,   179,   341,   176,   177,  1131,   210,   647,
   142,   563,   318,   765,   481,   485,   488,   162,   141,   604,
   231,  1048,   375,   428,   562,    63,   162,   162,   288,   142,
    59,  1160,   231,    49,   204,   205,   270,   335,   418,  -118,
  -118,   770,   896,   162,   606,   497,   495,   607,   196,   608,
   414,  1159,   208,   318,   231,   643,   314,   142,   158,   147,
   135,   651,    63,   703,   116,   471,   211,   318,   640,   318,
   242,   243,   307,  1132,   920,   931,   157,   480,   609,   945,
   231,   417,   563,   926,   195,   928,   554,   360,   314,   360,
   660,   389,   583,   650,  1007,   797,   237,   678,    72,   498,
   840,   841,   282,   284,   148,   357,   650,   586,   905,   906,
   907,   369,   370,   371,   509,   144,   579,  1160,   242,   243,
   384,   385,   386,   387,   212,   117,   588,   118,   119,   120,
   499,   121,   556,   178,   444,   447,   242,   243,   534,   141,
   724,   584,   159,    72,   140,   763,   706,   591,   180,   186,
   122,   412,   150,   337,   433,   565,   587,   567,   568,   569,
   570,   571,   572,   355,   573,   574,   288,   575,   576,   483,
   487,   490,   471,   141,   641,   589,   230,    91,   151,   141,
   749,   988,   213,    52,   172,   481,   228,   235,    52,   790,
   230,   414,   758,   184,   231,   162,   592,   354,   314,   179,
   593,   207,   579,   231,   179,   195,   141,   856,   231,  1006,
   381,   318,   670,   176,   270,   178,   673,  1009,   121,   375,
   283,   267,   268,   194,   228,   365,   784,   477,   304,   194,
   334,   768,   231,  1049,  1050,    88,   471,   122,   141,   195,
   594,   159,    89,   318,   417,   195,    72,   288,   187,   159,
   180,   491,   288,   314,   314,   382,   194,   708,   433,   209,
   825,   785,  1062,  1063,   515,   327,   141,  1067,  1068,  1069,
  1070,  1058,   195,    90,   228,    52,   305,   188,   379,   358,
   186,   328,   715,   718,   366,    72,    72,    72,   472,   598,
  1077,   179,   600,   595,    72,    72,    72,    72,   604,    49,
   141,    52,   189,   392,   195,   395,   397,   399,   402,   405,
   141,   381,    91,   380,  1109,   190,   524,   179,  1113,  1114,
   228,   202,    92,    52,   695,   664,    93,   696,   773,   697,
   431,   534,   525,   207,   665,   666,   598,   338,   599,    59,
   483,   601,    94,    95,    96,   423,   191,   605,   424,   288,
   626,    63,   537,   318,   600,   230,   944,   796,   698,   943,
   635,   724,   538,   214,   230,   228,   142,   736,   901,   339,
    91,   340,   777,   231,   584,   192,   195,   210,   737,   461,
   193,    52,   231,   587,   592,   667,   184,   136,  1002,   137,
   872,   209,   159,   288,   832,   833,    63,   179,    29,   348,
   738,    72,   212,   668,   228,   707,   335,   180,   318,   318,
   725,-32768,    88,   600,   711,   349,   584,    41,    42,    89,
    43,    44,    45,   180,   462,   301,   228,   587,   854,  1195,
  1196,   337,  1198,  1199,   286,   211,   822,   823,    72,   741,
  1206,  -120,  -120,  1209,  1210,  1211,   744,   816,   853,   592,
    90,   168,   159,   817,   288,  1217,   704,   518,   862,   535,
   213,   431,   739,    88,   212,   302,  -117,  -117,   235,   412,
    89,   242,   243,   519,   414,   412,    49,    89,   849,   850,
   336,   851,   852,   537,   414,   276,   345,   561,   742,    91,
   463,   898,   464,   540,   903,   745,   742,   242,   243,    92,
    52,   308,   745,    93,   309,   350,   310,   745,    90,   520,
  1059,   230,   798,  1060,   230,   375,    59,   230,  1016,    94,
    95,    96,   213,  1017,  1021,   521,   431,    49,   277,   231,
   278,   780,   231,  1022,    49,   231,   207,   600,   410,   606,
    91,  1064,   607,  1065,   608,   409,   430,    91,  1014,   314,
    92,   311,   288,   787,    93,   885,   600,    92,    52,   584,
   353,    93,   587,   527,   208,   334,   159,   705,   130,   412,
    94,    95,    96,   609,    59,   228,   288,    94,    95,    96,
   228,   277,   414,   278,   216,    91,  1061,   228,  1099,  1104,
   584,  1170,   587,   958,   209,   442,    52,  1110,   824,   411,
  -119,  -119,   963,   169,   228,  1066,  1111,   674,   600,    63,
   242,   243,   179,   120,   230,   121,   547,   230,  1072,  1144,
    63,   193,   117,   230,   118,   119,   120,   277,   121,   278,
   535,  1073,   231,   699,   122,   231,   680,   745,   745,   167,
   193,   231,    29,   215,    88,   496,   584,   122,    74,   455,
    63,    89,   681,    88,   536,   587,   561,  1112,   716,   719,
    89,    41,    42,   416,    43,    44,    45,   277,   745,   278,
  1011,   117,    63,   118,   119,   120,  1010,   121,   143,  1019,
  1020,   277,    90,   278,  1024,  1025,  1026,  1027,   277,   230,
   278,   145,   163,    74,  1041,   168,   122,  1042,   182,    74,
  1057,   242,   243,   492,   318,   429,   197,   231,    49,   427,
    63,   843,    63,   493,   197,   341,   193,    49,   242,   243,
   662,    91,   207,   309,    63,   310,   342,    72,  1043,   894,
    91,    92,    52,   169,  1071,    93,   232,   238,  1075,  1076,
    92,    52,   242,   243,    93,   228,   475,   169,    59,   122,
   288,    94,    95,    96,   228,   212,    63,    59,    63,   439,
    94,    95,    96,   169,   198,   337,   192,   909,   199,   200,
   201,   193,    72,  1044,   232,   138,  1045,   139,   277,   466,
   278,   946,   197,   197,   197,   197,  1089,   287,   467,  1090,
   290,   163,   173,   504,   174,    29,    74,   198,    63,   163,
   329,   199,   200,   201,   473,  1003,   117,  1046,   118,   119,
   120,   959,   121,   476,    41,    42,  1133,    43,    44,    45,
  1091,   175,   966,   425,   232,   339,   426,   340,   474,   361,
    74,   122,   332,   495,   367,    74,    74,    74,    89,   -63,
   197,   169,   506,   169,    74,    74,    74,    74,    50,    51,
   507,   596,   993,   393,   597,   396,   398,   400,   403,   406,
   198,   199,   200,   201,   199,   200,   201,   -63,   510,   808,
   232,   -63,   -63,   -63,  1005,   753,   192,   912,   754,   672,
   434,   193,  1186,  1187,   511,  1189,  1190,   342,   186,    60,
   596,   192,   914,   791,  1197,    49,   193,  1200,  1201,  1202,
   343,   228,   512,   478,   228,   169,   516,   228,    91,  1212,
   522,   339,  1037,   340,  1039,   232,   192,   982,    92,    52,
   753,   193,    93,   839,   517,   198,  1051,   968,   198,   199,
   200,   201,   199,   200,   201,   809,   533,   528,   810,    95,
    96,   795,   163,   197,   192,   984,   542,   938,    88,   193,
   939,    74,   548,   596,   232,    89,  1018,   182,  1079,   277,
  1081,   278,   596,   596,   198,  1023,  1074,     3,   199,   200,
   201,   201,   351,   505,   137,   352,   232,   139,     4,     5,
     6,     7,   543,   279,   280,    72,   484,   553,    74,   309,
   550,   310,     8,   245,   445,   448,    72,   197,   197,   526,
  1116,   558,   163,     9,   228,   566,    10,   228,   559,   361,
   198,   434,    49,   228,   199,   200,   201,   544,   238,   578,
   246,   247,   755,  1128,   756,    91,    72,   197,   254,   255,
   242,   243,   256,   257,   258,    92,    52,   287,   351,    93,
   469,   136,    89,   469,   580,   198,   169,    73,    72,   199,
   200,   201,    59,   130,   610,    94,    95,    96,    11,    12,
    13,    29,    14,    15,    16,    17,    18,   924,    19,    20,
   118,   119,   120,   811,   121,   602,   434,   169,   603,   228,
    41,    42,   611,    43,    44,    45,    72,   456,    72,   278,
   198,   160,    73,   122,   199,   200,   201,   181,    73,    49,
    72,   623,   169,   616,   619,   622,   755,   613,   756,   625,
   627,   630,    91,   633,   168,   197,   163,   545,   197,   624,
   631,   634,    92,    52,   428,   232,    93,   333,   645,   646,
   232,   648,    72,   651,    72,   229,   236,   232,   661,   812,
   669,   676,   813,    95,    96,   198,   671,   340,   679,   199,
   200,   201,   682,   457,   232,   458,   683,   675,   684,   173,
   686,   174,    29,   273,   274,   250,   251,   252,   253,  1013,
   687,   242,   243,   229,    72,   688,   689,   690,   701,   691,
   361,    41,    42,   700,    43,    44,    45,   702,   175,   709,
   160,   173,  1134,   174,    29,    73,   381,   198,   160,   181,
   692,   199,   200,   201,   334,   721,   287,   729,   717,   720,
   731,   733,   735,   500,    42,   749,   501,    44,    45,  1052,
   175,   750,   751,   229,   752,   775,   169,   561,   359,    73,
   789,   792,   793,   236,    73,    73,    73,   169,   794,   169,
   799,   800,   806,    73,    73,    73,    73,   198,   801,   802,
  1092,   199,   200,   201,   803,   561,    60,   804,    89,   759,
   762,   492,   644,   767,   818,   826,   772,   827,   829,   229,
   776,   837,   779,   831,   783,   834,   835,    74,   198,   432,
   836,   197,   199,   200,   201,   838,   197,   198,    60,    90,
   537,   199,   200,   201,   173,   232,   174,    29,   842,   615,
   618,   621,   848,   856,   232,   864,   866,   629,   173,   868,
   174,    29,   869,   870,   229,    49,   502,    42,   873,   503,
    44,    45,    74,   175,   874,   875,   871,   900,    91,   925,
   693,    42,   899,   694,    44,    45,    88,   175,    92,    52,
  1040,   160,    93,   125,   889,    82,   890,   910,   913,   904,
    73,   126,   127,   229,   915,   814,   181,   198,   815,    95,
    96,   199,   200,   201,   921,   198,   922,   923,   927,   199,
   200,   201,   181,   169,   128,   229,   929,   973,   940,   930,
   941,   933,   169,   936,   169,   938,   950,    73,   951,   165,
    82,    60,   952,   953,   961,   974,    82,   994,   169,   967,
    49,   160,   969,   990,   978,    60,   877,   979,   359,   980,
   432,   881,   981,    91,   985,   986,   884,   236,   987,   989,
   991,   995,   997,    92,    52,   992,   909,    93,   996,   999,
   129,   912,   914,   233,   239,  1001,   197,  1004,    74,  1015,
    59,   130,  1008,    94,    95,    96,   245,  1028,  1032,  1033,
   436,   232,  1034,  1036,   232,  1035,   761,   232,   764,   766,
  1038,   769,   771,   982,   774,  1047,  1078,   778,   984,   781,
   782,   233,   786,   246,   247,   432,  1080,  1053,  1055,  1083,
   169,   254,   255,  1084,  1085,   256,   257,   258,   165,  1088,
    29,  1086,  1096,    82,  1147,  1087,   165,  1121,  1100,  1124,
  1101,   198,  1105,  1106,  1107,   199,   200,   201,   169,    41,
    42,  1108,    43,    44,    45,   160,   169,  1127,  1115,  1119,
   730,  1120,   732,  1122,   229,   734,   362,    82,  1123,   229,
  1125,   368,    82,    82,    82,    74,   229,  1126,   748,  1135,
  1136,    82,    82,    82,    82,  1138,    74,  1139,  1141,  1145,
  1149,  1146,  1150,   229,   232,  1082,  1151,   232,  1152,  1153,
    89,  1154,  1157,   232,  1155,  1117,  1156,   233,   208,  1171,
   169,  1161,  1162,  1163,  1164,  1165,    74,   435,  1166,   359,
   198,  1167,  1168,  1172,   199,   200,   201,  1175,  1173,   169,
   198,    90,  1174,  1176,   199,   200,   201,  1177,    74,   730,
   734,  1178,   876,  1118,   878,   879,  1179,   880,  1180,   882,
   883,  1181,   233,  1182,   886,   888,  1183,    49,   582,   891,
   582,   892,   893,   582,  1148,   895,   897,  1184,   198,   232,
    91,  1185,   199,   200,   201,  1188,    74,  1191,    74,   165,
    92,    52,  1192,  1193,    93,  1194,  1203,  1220,    82,   198,
    74,   233,    88,   199,   200,   201,  1204,   809,   855,    89,
    94,    95,    96,   858,  1205,   859,  1207,   860,  1208,   861,
  1213,   730,   734,   233,  1214,   863,    73,  1215,   865,  1216,
  1218,  1221,    74,   867,    74,    82,   714,   577,   260,   726,
   308,   659,   788,   309,   229,   310,   677,   807,     0,   165,
     0,     0,     0,   229,     0,     0,   362,     0,   435,   273,
   274,   250,   251,   252,   253,   239,    49,   242,   243,   954,
     0,    73,     0,   955,    74,     0,   956,   957,     0,    91,
     0,     0,     0,     0,     0,     0,   962,    88,     0,    92,
   311,     0,     0,    93,   125,     0,     0,     0,     0,     0,
   863,   865,   126,   127,     0,     0,    59,   130,     0,    94,
    95,    96,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   435,     0,   330,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   582,
   947,     0,   582,     0,   582,     0,   865,   582,   948,     0,
   949,    49,     0,    89,   582,    88,   582,  1012,   582,   582,
   582,     0,   125,   165,    91,     0,     0,     0,     0,     0,
   126,   127,   233,     0,    92,    52,     0,   233,    93,     0,
     0,   155,     0,     0,    90,     0,     0,    73,     0,     0,
     0,    59,   130,    90,    94,    95,    96,     0,     0,  1054,
   229,   233,  1056,   229,     0,     0,   229,     0,     0,     0,
    49,     0,     0,     0,     0,     0,     0,     0,     0,    49,
   582,   582,   582,    91,     0,     0,     0,   362,     0,     0,
     0,     0,    91,    92,    52,     0,     0,    93,   245,     0,
     0,     0,    92,    52,     0,  1093,    93,  1094,     0,  1095,
   812,     0,     0,    94,    95,    96,     0,     0,     0,    59,
   130,     0,    94,    95,    96,   246,   247,   248,   249,   250,
   251,   252,   253,   254,   255,     0,     0,   256,   257,   258,
   582,     0,   857,     0,    73,   582,     0,   582,     0,   582,
     0,   582,   582,   582,   582,    73,     0,   582,     0,     0,
   582,     0,    88,   229,     0,   582,   229,     0,     0,   125,
     0,   219,   229,     0,     0,     0,     0,   126,   127,     0,
     0,     0,     0,     0,    82,    73,     0,     0,     0,     0,
     0,     0,     0,   220,     0,     0,   221,   222,   223,     0,
   269,     0,   233,     0,   730,     0,     0,    73,     0,   730,
     0,   233,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    49,   225,   226,    82,
     0,     0,   582,   582,     0,     0,     0,     0,   229,    91,
     0,     0,     0,   865,     0,    73,     0,    73,   865,    92,
    52,     0,     0,    93,     0,   730,   129,     0,     0,    73,
     0,     0,     0,     0,     0,     0,    59,   130,   227,    94,
    95,    96,   582,     0,     0,     0,     0,     0,   582,     0,
   582,     0,   582,     0,     0,     0,     0,     0,   865,     0,
     0,    73,     0,    73,     0,     0,     0,     0,    22,     0,
     0,     0,    23,   152,     0,    25,    26,     0,     0,     0,
   125,     0,    27,     0,    28,    29,    30,    31,   126,   127,
    32,    33,    34,    35,     0,    36,    37,    38,     0,    39,
    40,     0,     0,    73,    41,    42,     0,    43,    44,    45,
    88,   153,     0,     0,    47,    82,     0,    89,    48,   291,
     0,   174,    29,     0,     0,     0,     0,     0,   233,     0,
     0,   233,     0,     0,   233,     0,     0,    49,    50,    51,
     0,   292,    42,     0,   293,   294,   295,     0,   296,     0,
    91,    88,     0,     0,     0,     0,     0,     0,    89,     0,
    92,   154,     0,     0,    93,     0,    53,   155,    54,    55,
    56,    57,    58,     0,    49,   225,   226,    59,   130,    60,
    94,    95,    96,     0,     0,     0,     0,    91,     0,   484,
     0,     0,   309,     0,   310,     0,     0,    92,    52,     0,
     0,    93,     0,   184,     0,     0,     0,     0,     0,     0,
     0,     0,    82,     0,    59,    49,   297,    94,    95,    96,
     0,     0,     0,    82,     0,     0,     0,     0,    91,     0,
     0,   233,     0,     0,   233,     0,     0,     0,    92,    52,
   233,     0,    93,     0,     0,   582,   582,     0,     0,     0,
   582,   582,     0,    82,     0,    59,   130,     0,    94,    95,
    96,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    82,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   582,     0,     0,     0,     0,
   582,     0,     0,     0,     0,    89,   582,   582,     0,     0,
     0,     0,     0,     0,     0,     0,   233,     0,     0,     0,
     0,     0,     0,    82,     0,    82,     0,    22,     0,     0,
     0,    23,   152,     0,    25,    26,    90,    82,     0,   125,
   582,   320,     0,    28,    29,    30,    31,   126,   127,    32,
    33,    34,    35,     0,    36,    37,    38,     0,    39,    40,
     0,     0,    49,   321,    42,     0,   322,   294,   323,    82,
   153,    82,     0,    47,     0,    91,     0,    48,     0,     0,
     0,     0,     0,     0,     0,    92,    52,     0,     0,    93,
     0,     0,     0,     0,     0,     0,    49,   324,   325,     0,
     0,     0,   814,     0,     0,    94,    95,    96,     0,    91,
     0,    82,     0,     0,     0,     0,     0,     0,     0,    92,
   154,     0,     0,    93,     0,    53,   155,    54,    55,    56,
    57,    58,     0,     0,     0,     0,    59,   130,   297,    94,
    95,    96,    22,     0,     0,     0,    23,   152,     0,    25,
    26,     0,     0,     0,   125,     0,    27,     0,    28,    29,
    30,    31,   126,   127,    32,    33,    34,    35,     0,    36,
    37,    38,     0,    39,    40,     0,     0,     0,   529,    42,
     0,   530,    44,   531,     0,   153,     0,     0,    47,     0,
     0,     0,    48,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    49,   532,    51,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    91,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    92,   154,     0,     0,    93,     0,
    53,   155,    54,    55,    56,    57,    58,     0,     0,     0,
     0,    59,   130,    60,    94,    95,    96,    22,     0,     0,
     0,    23,    24,     0,    25,    26,     0,     0,     0,     0,
     0,    27,     0,    28,    29,    30,    31,     0,     0,    32,
    33,    34,    35,     0,    36,    37,    38,     0,    39,    40,
     0,     0,     0,    41,    42,     0,    43,    44,    45,     0,
   356,     0,     0,    47,     0,     0,     0,    48,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    49,    50,    51,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    52,     0,     0,     0,     0,    53,     0,    54,    55,    56,
    57,    58,     0,     0,     0,    22,    59,     0,    60,    23,
    24,     0,    25,    26,     0,     0,     0,     0,     0,    27,
     0,    28,    29,    30,    31,     0,     0,    32,    33,    34,
    35,     0,    36,    37,    38,     0,    39,    40,     0,     0,
     0,    41,    42,     0,    43,    44,    45,    88,    46,     0,
     0,    47,     0,     0,   125,    48,   219,     0,     0,     0,
     0,     0,   126,   127,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    49,    50,    51,     0,   419,     0,
     0,   420,   222,   421,    88,   269,     0,     0,     0,     0,
     0,   125,     0,   219,     0,     0,     0,     0,    52,   126,
   127,     0,     0,    53,     0,    54,    55,    56,    57,    58,
     0,    49,   422,   226,    59,   220,    60,     0,   221,   222,
   223,     0,   508,     0,    91,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    92,    52,     0,     0,    93,     0,
     0,   129,     0,     0,     0,     0,     0,     0,    49,   225,
   226,    59,   130,   227,    94,    95,    96,     0,     0,     0,
     0,    91,     0,     0,     0,     0,     0,    88,     0,     0,
     0,    92,    52,     0,   125,    93,   219,     0,   155,     0,
     0,     0,   126,   127,     0,     0,     0,     0,    59,   130,
   227,    94,    95,    96,     0,     0,     0,     0,   419,     0,
     0,   420,   222,   421,    88,   508,     0,     0,     0,     0,
     0,    89,     0,   219,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    49,   422,   226,     0,   220,     0,     0,   221,   222,
   223,     0,   479,     0,    91,   309,     0,   310,     0,     0,
     0,     0,     0,     0,    92,    52,     0,     0,    93,     0,
     0,   155,     0,     0,     0,     0,     0,     0,    49,   225,
   226,    59,   130,   227,    94,    95,    96,     0,     0,     0,
     0,    91,     0,     0,     0,     0,     0,    88,     0,     0,
     0,    92,   311,     0,    89,    93,   219,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    59,   130,
   227,    94,    95,    96,     0,     0,     0,     0,   419,     0,
     0,   420,   222,   421,    88,   479,     0,     0,   309,     0,
   310,    89,     0,     0,     0,     0,    29,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    49,   422,   226,     0,    41,    42,     0,    43,    44,
    45,     0,   308,     0,    91,   309,     0,   310,     0,     0,
     0,     0,     0,     0,    92,   311,     0,     0,    93,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    49,   168,
     0,    59,   130,   227,    94,    95,    96,     0,     0,     0,
     0,   372,     0,     0,     0,     0,     0,    88,     0,     0,
     0,    92,   311,     0,    89,    93,   219,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   373,   130,
     0,    94,    95,    96,     0,     0,     0,     0,   220,     0,
     0,   221,   222,   223,    88,   649,     0,     0,   309,     0,
   310,    89,     0,   219,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    49,   225,   226,     0,   419,     0,     0,   420,   222,
   421,     0,   649,     0,    91,   309,     0,   310,     0,     0,
     0,     0,    88,     0,    92,    52,     0,     0,    93,    89,
     0,   219,     0,     0,     0,     0,     0,     0,    49,   422,
   226,    59,     0,   227,    94,    95,    96,     0,     0,     0,
     0,    91,     0,   419,     0,     0,   420,   222,   421,    88,
   470,    92,    52,     0,     0,    93,    89,     0,   219,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    59,     0,
   227,    94,    95,    96,     0,     0,    49,   422,   226,     0,
   636,     0,     0,   637,   222,   638,     0,   470,     0,    91,
     0,     0,     0,     0,     0,     0,     0,    88,     0,    92,
   154,     0,     0,    93,    89,   184,   219,     0,     0,     0,
     0,     0,     0,    49,   639,   226,    59,     0,   227,    94,
    95,    96,     0,     0,     0,     0,    91,     0,   220,     0,
     0,   221,   222,   223,    88,   224,    92,    52,     0,     0,
    93,    89,   184,   219,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    59,     0,   227,    94,    95,    96,     0,
     0,    49,   225,   226,     0,   419,     0,     0,   420,   222,
   421,     0,   224,     0,    91,     0,     0,     0,     0,     0,
     0,     0,    88,     0,    92,    52,     0,     0,    93,    89,
     0,   219,     0,     0,     0,     0,     0,     0,    49,   422,
   226,    59,     0,   227,    94,    95,    96,     0,     0,     0,
     0,    91,     0,   419,     0,     0,   420,   222,   421,    88,
   805,    92,    52,     0,     0,    93,    89,     0,   219,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    59,     0,
   227,    94,    95,    96,     0,     0,    49,   422,   226,     0,
   636,     0,     0,   637,   222,   638,     0,   224,     0,    91,
     0,     0,     0,     0,     0,     0,     0,    88,     0,    92,
    52,     0,     0,    93,    89,     0,   219,     0,     0,     0,
     0,     0,     0,    49,   639,   226,    59,     0,   227,    94,
    95,    96,     0,     0,     0,     0,    91,     0,   220,     0,
     0,   221,   222,   223,    88,   908,    92,    52,     0,     0,
    93,    89,     0,   219,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    59,     0,   227,    94,    95,    96,     0,
     0,    49,   225,   226,     0,   220,     0,     0,   221,   222,
   223,     0,   911,     0,    91,     0,     0,     0,     0,     0,
     0,     0,    88,     0,    92,    52,     0,     0,    93,    89,
     0,   219,     0,     0,     0,     0,     0,     0,    49,   225,
   226,    59,     0,   227,    94,    95,    96,     0,     0,     0,
     0,    91,     0,   970,     0,     0,   971,   222,   421,    88,
   224,    92,    52,     0,     0,    93,    89,     0,   219,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    59,     0,
   227,    94,    95,    96,     0,     0,    49,   972,   226,     0,
   975,     0,     0,   976,   222,   421,     0,   224,     0,    91,
     0,     0,     0,     0,     0,     0,     0,    88,     0,    92,
    52,     0,     0,    93,    89,     0,   219,     0,     0,     0,
     0,     0,     0,    49,   977,   226,    59,     0,   227,    94,
    95,    96,     0,     0,     0,     0,    91,     0,   220,     0,
     0,   221,   222,   223,    88,   983,    92,    52,     0,     0,
    93,    89,     0,   219,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    59,     0,   227,    94,    95,    96,    88,
     0,    49,   225,   226,     0,  1029,    89,     0,  1030,   222,
   421,    29,   224,     0,    91,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    92,    52,     0,     0,    93,     0,
    41,    42,     0,    43,    44,    45,     0,   224,    49,  1031,
   226,    59,    89,   227,    94,    95,    96,     0,     0,     0,
     0,    91,     0,     0,     0,     0,     0,     0,     0,     0,
    88,    92,    52,    49,   168,    93,     0,    89,     0,     0,
     0,     0,    29,    90,     0,     0,    91,     0,    59,    89,
   227,    94,    95,    96,     0,     0,    92,    52,     0,     0,
    93,    41,    42,     0,    43,    44,    45,     0,   658,    49,
     0,     0,     0,    59,    89,     0,    94,    95,    96,     0,
   917,     0,    91,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    92,    52,    49,   168,    93,     0,     0,     0,
     0,     0,     0,     0,     0,    90,    49,    91,     0,   916,
    89,     0,    94,    95,    96,     0,    89,    92,    52,    91,
     0,    93,    89,     0,     0,     0,     0,     0,     0,    92,
    52,    49,     0,    93,    59,     0,     0,    94,    95,    96,
     0,    90,     0,     0,    91,     0,   918,    90,     0,   919,
    95,    96,     0,    90,    92,    52,     0,    89,    93,     0,
     0,     0,     0,     0,    89,     0,     0,    49,     0,     0,
     0,   918,     0,    49,    94,    95,    96,     0,     0,    49,
    91,     0,     0,     0,     0,     0,    91,     0,    90,     0,
    92,    52,    91,     0,    93,    90,    92,    52,    89,     0,
    93,     0,    92,    52,     0,    89,    93,   809,     0,     0,
  1097,    95,    96,   812,    49,     0,  1098,    95,    96,   809,
     0,    49,  1102,    95,    96,     0,     0,    91,     0,    90,
     0,     0,     0,     0,    91,     0,    90,    92,    52,    89,
     0,    93,     0,     0,    92,    52,    89,     0,    93,     0,
     0,     0,     0,     0,   812,    49,     0,  1103,    95,    96,
     0,   918,    49,     0,  1137,    95,    96,     0,    91,     0,
    90,     0,     0,     0,     0,    91,     0,    90,    92,    52,
     0,     0,    93,     0,     0,    92,    52,     0,     0,    93,
     0,     0,     0,     0,     0,   918,    49,     0,  1140,    95,
    96,     0,   809,    49,     0,  1142,    95,    96,     0,    91,
     0,     0,     0,     0,     0,     0,    91,     0,     0,    92,
    52,     0,     0,    93,     0,     0,    92,    52,     0,     0,
    93,     0,     0,     0,     0,     0,   812,     0,     0,  1143,
    95,    96,     0,   918,     0,     0,  1169,    95,    96
};

static const short yycheck[] = {    13,
    48,   145,     2,    15,   208,    24,   706,    92,    93,    15,
   149,    50,    51,    46,   202,    18,     9,    10,    11,    12,
    34,    14,    15,    16,    17,    18,    19,     1,    46,   151,
    46,  1092,   308,   309,   310,    53,    46,    46,   123,   153,
    37,   155,    46,    46,    47,     1,    46,    47,   367,    46,
    46,   412,     1,   414,    46,    37,   417,    49,   522,    51,
    37,    39,    82,    83,    42,    18,     9,  1128,   557,    88,
    52,     1,    46,    76,    37,    85,    90,   554,   486,   487,
   488,   489,   490,    18,   206,    47,    96,    96,    51,    46,
    46,    60,   101,    46,    90,    91,   112,    46,    37,    68,
    37,   113,   112,   112,    18,   117,   145,   113,   112,    46,
   129,   117,    94,    95,   128,   112,   135,    94,    95,    49,
   153,   113,   155,    76,   117,   118,   119,   120,   121,   148,
   178,   145,   128,   152,    96,   153,    85,   151,   112,   153,
    96,    76,   842,    46,   192,    84,   350,    96,    37,   145,
   150,    94,    95,   153,    46,   112,   112,   153,   115,    96,
   208,    46,    76,   112,   178,   183,   184,   136,   137,   138,
   139,    18,    13,   187,   259,   112,    37,    39,   192,   193,
    42,   214,    44,   183,    46,    46,   308,   183,    37,   189,
   190,   191,   206,   670,   208,    84,   673,    46,   198,   199,
   200,   201,    46,   479,     2,    37,    46,   671,   484,   112,
   224,    73,   212,   213,    46,    37,   330,    46,   682,   495,
   684,   710,   711,   216,    46,   339,   340,   112,   224,    76,
   115,   708,    47,    18,    37,    96,   112,   598,   234,   600,
   288,   602,   603,    46,    46,    46,   260,    96,   112,    47,
   112,   112,    96,   267,   268,   269,    85,   101,   277,   278,
   382,   275,    37,   112,    96,   279,   280,    96,   112,    47,
    72,    46,   112,   269,    96,   115,    47,   553,   296,    47,
   112,    96,   296,   112,    47,   324,   325,    46,    18,    47,
   112,    76,   151,    96,   308,   309,   310,   330,    46,    47,
   296,  1001,   350,    47,    18,   305,   339,   340,    37,   112,
   112,   112,   308,    72,    82,    83,   330,    47,    96,    82,
    83,    96,    51,   356,    39,    96,    84,    42,   297,    44,
    47,    46,    46,   192,   330,   474,   350,   112,   356,     1,
    46,    37,   342,   547,    14,   363,    76,   206,    96,   208,
    94,    95,   150,   112,   818,   832,   356,   479,    73,   848,
   356,    47,    76,   827,   112,   829,   380,   363,   382,   365,
   492,   559,    47,   649,    52,   651,   372,   516,     2,    96,
   699,   700,   351,   352,    46,   183,   662,    47,   796,   797,
   798,   189,   190,   191,   508,    46,   410,   112,    94,    95,
   198,   199,   200,   201,    18,    75,    47,    77,    78,    79,
    96,    81,   381,    46,   273,   274,    94,    95,    46,    46,
    47,    96,    46,    47,   112,    16,   548,    47,    52,    53,
   100,    47,    49,    47,   430,   393,    96,   395,   396,   397,
   398,   399,   400,   491,   402,   403,    37,   405,   406,   308,
   309,   310,   470,    46,   473,    96,   470,    85,    46,    46,
    47,   925,    76,    96,   112,   479,    90,    91,    96,    96,
   484,    47,   611,   101,   470,   508,    96,   491,   492,   112,
    96,    18,   496,   479,   112,   112,    46,    47,   484,   953,
    37,   350,   506,   532,   508,    46,   510,   961,    81,   547,
   469,    86,    87,    96,   128,    46,    16,   305,     1,    96,
    47,    16,   508,  1002,  1003,     8,   534,   100,    46,   112,
    96,   145,    15,   382,    47,   112,   150,    37,    46,   153,
   154,    46,    37,   547,   548,    82,    96,   551,   534,    76,
   679,    51,  1019,  1020,   342,    96,    46,  1024,  1025,  1026,
  1027,  1015,   112,    46,   178,    96,    49,    46,    16,   183,
   184,   112,   562,   563,   188,   189,   190,   191,    96,    47,
  1034,   112,    47,    96,   198,   199,   200,   201,    47,    72,
    46,    96,    46,   207,   112,   209,   210,   211,   212,   213,
    46,    37,    85,    51,  1071,    46,    96,   112,  1075,  1076,
   224,    49,    95,    96,    39,    47,    99,    42,    16,    44,
   234,    46,   112,    18,    47,    47,    47,    47,    96,   112,
   479,    96,   115,   116,   117,    39,    46,    96,    42,    37,
    96,   631,    37,   492,    47,   649,    82,   651,    73,   843,
    96,    47,    47,    38,   658,   269,   112,    47,   792,    79,
    85,    81,    16,   649,    96,    46,   112,    18,    47,     1,
    51,    96,   658,    96,    96,    96,   101,   112,   944,   114,
   755,    76,   296,    37,   688,   689,   676,   112,    20,    96,
    47,   305,    18,    96,   308,     1,    47,   311,   547,   548,
    96,   100,     8,    47,   553,   112,    96,    39,    40,    15,
    42,    43,    44,   327,    46,    48,   330,    96,   722,  1186,
  1187,    47,  1189,  1190,    46,    76,   674,   675,   342,    47,
  1197,    82,    83,  1200,  1201,  1202,    47,    47,   721,    96,
    46,    73,   356,    47,    37,  1212,     1,    96,    47,   363,
    76,   365,    96,     8,    18,    47,    82,    83,   372,    47,
    15,    94,    95,   112,    47,    47,    72,    15,   716,   717,
    47,   719,   720,    37,    47,    36,   114,   391,    96,    85,
   112,   785,   114,    47,   793,    96,    96,    94,    95,    95,
    96,    46,    96,    99,    49,    46,    51,    96,    46,    96,
    47,   805,   651,    47,   808,   843,   112,   811,    96,   115,
   116,   117,    76,    96,    96,   112,   430,    72,    79,   805,
    81,    16,   808,    96,    72,   811,    18,    47,    36,    39,
    85,    47,    42,    47,    44,    50,    46,    85,   967,   843,
    95,    96,    37,   631,    99,    16,    47,    95,    96,    96,
    96,    99,    96,    47,    46,    47,   470,   112,   113,    47,
   115,   116,   117,    73,   112,   479,    37,   115,   116,   117,
   484,    79,    47,    81,    37,    85,    96,   491,    47,    47,
    96,  1147,    96,   887,    76,    47,    96,    47,   676,   114,
    82,    83,   896,    48,   508,    96,    47,   511,    47,   889,
    94,    95,   112,    79,   908,    81,    46,   911,    96,    47,
   900,    51,    75,   917,    77,    78,    79,    79,    81,    81,
   534,    96,   908,   537,   100,   911,    96,    96,    96,    17,
    51,   917,    20,    47,     8,    36,    96,   100,     2,    47,
   930,    15,   112,     8,    47,    96,   560,    96,   562,   563,
    15,    39,    40,    96,    42,    43,    44,    79,    96,    81,
   964,    75,   952,    77,    78,    79,    52,    81,    32,   973,
   974,    79,    46,    81,   978,   979,   980,   981,    79,   983,
    81,    46,    46,    47,    39,    73,   100,    42,    52,    53,
    52,    94,    95,    37,   843,    47,    60,   983,    72,    96,
   990,    46,   992,    47,    68,    47,    51,    72,    94,    95,
    46,    85,    18,    49,  1004,    51,    37,   631,    73,    16,
    85,    95,    96,   178,  1028,    99,    90,    91,  1032,  1033,
    95,    96,    94,    95,    99,   649,    47,   192,   112,   100,
    37,   115,   116,   117,   658,    18,  1036,   112,  1038,    47,
   115,   116,   117,   208,    75,    47,    46,    47,    79,    80,
    81,    51,   676,    39,   128,   112,    42,   114,    79,    38,
    81,    50,   136,   137,   138,   139,    39,   141,    37,    42,
   144,   145,    17,    47,    19,    20,   150,    75,  1078,   153,
   154,    79,    80,    81,    37,   944,    75,    73,    77,    78,
    79,   889,    81,    50,    39,    40,  1096,    42,    43,    44,
    73,    46,   900,    39,   178,    79,    42,    81,    29,   183,
   184,   100,    47,    84,   188,   189,   190,   191,    15,    47,
   194,   286,    51,   288,   198,   199,   200,   201,    73,    74,
    47,    39,   930,   207,    42,   209,   210,   211,   212,   213,
    75,    79,    80,    81,    79,    80,    81,    75,    51,    46,
   224,    79,    80,    81,   952,    39,    46,    47,    42,    47,
   234,    51,  1176,  1177,    76,  1179,  1180,    37,   792,   114,
    39,    46,    47,    42,  1188,    72,    51,  1191,  1192,  1193,
    50,   805,    76,    50,   808,   350,    12,   811,    85,  1203,
    46,    79,   990,    81,   992,   269,    46,    47,    95,    96,
    39,    51,    99,    42,    50,    75,  1004,    47,    75,    79,
    80,    81,    79,    80,    81,   112,    47,    96,   115,   116,
   117,     1,   296,   297,    46,    47,    47,   112,     8,    51,
   115,   305,    37,    39,   308,    15,    42,   311,  1036,    79,
  1038,    81,    39,    39,    75,    42,    42,    10,    79,    80,
    81,    81,   112,   327,   114,   112,   330,   114,    21,    22,
    23,    24,    47,    86,    87,   889,    46,    82,   342,    49,
    47,    51,    35,    57,   273,   274,   900,   351,   352,   353,
  1078,    50,   356,    46,   908,    47,    49,   911,    81,   363,
    75,   365,    72,   917,    79,    80,    81,    47,   372,    12,
    84,    85,     4,     5,     6,    85,   930,   381,    92,    93,
    94,    95,    96,    97,    98,    95,    96,   391,   112,    99,
   114,   112,    15,   114,    96,    75,   491,     2,   952,    79,
    80,    81,   112,   113,    49,   115,   116,   117,   101,   102,
   103,    20,   105,   106,   107,   108,   109,    52,   111,   112,
    77,    78,    79,    46,    81,    47,   430,   522,    47,   983,
    39,    40,     9,    42,    43,    44,   990,    46,   992,    81,
    75,    46,    47,   100,    79,    80,    81,    52,    53,    72,
  1004,    47,   547,   457,   458,   459,     4,    96,     6,   463,
   464,   465,    85,   467,    73,   469,   470,    47,   472,    96,
    49,    47,    95,    96,    47,   479,    99,    47,    33,    47,
   484,    47,  1036,    37,  1038,    90,    91,   491,    47,   112,
    47,    51,   115,   116,   117,    75,    46,    81,    12,    79,
    80,    81,    46,   112,   508,   114,   112,   511,    46,    17,
    47,    19,    20,    86,    87,    88,    89,    90,    91,    47,
   524,    94,    95,   128,  1078,    51,    47,    96,    47,    96,
   534,    39,    40,   537,    42,    43,    44,    47,    46,    52,
   145,    17,  1096,    19,    20,   150,    37,    75,   153,   154,
    96,    79,    80,    81,    47,    49,   560,    47,   562,   563,
    47,    47,    47,    39,    40,    47,    42,    43,    44,    47,
    46,    96,    96,   178,    96,    82,   671,  1131,   183,   184,
    81,    37,    46,   188,   189,   190,   191,   682,    46,   684,
    50,    50,    47,   198,   199,   200,   201,    75,    50,    52,
    47,    79,    80,    81,    52,  1159,   114,    52,    15,   613,
   614,    37,    50,   617,    46,   112,   620,    46,    46,   224,
   624,    96,   626,    47,   628,    47,    47,   631,    75,   234,
    47,   635,    79,    80,    81,    96,   640,    75,   114,    46,
    37,    79,    80,    81,    17,   649,    19,    20,    47,   457,
   458,   459,    52,    47,   658,    47,    47,   465,    17,    47,
    19,    20,    47,    47,   269,    72,    39,    40,    38,    42,
    43,    44,   676,    46,    50,    47,    96,    46,    85,    46,
    39,    40,    50,    42,    43,    44,     8,    46,    95,    96,
    50,   296,    99,    15,    49,     2,    47,    47,    47,   794,
   305,    23,    24,   308,    47,   112,   311,    75,   115,   116,
   117,    79,    80,    81,    52,    75,    47,    52,    47,    79,
    80,    81,   327,   818,    46,   330,    47,    51,    47,    49,
    47,   112,   827,   112,   829,   112,    47,   342,    38,    46,
    47,   114,    46,    46,    46,    51,    53,    52,   843,    47,
    72,   356,    47,    49,    51,   114,   760,    51,   363,    51,
   365,   765,    51,    85,    47,    47,   770,   372,    47,    47,
    47,    46,   112,    95,    96,    49,    47,    99,    46,   112,
   102,    47,    47,    90,    91,    47,   790,    46,   792,    46,
   112,   113,    50,   115,   116,   117,    57,    51,    51,    51,
   244,   805,    46,    49,   808,    47,   614,   811,   616,   617,
    49,   619,   620,    47,   622,    46,    49,   625,    47,   627,
   628,   128,   630,    84,    85,   430,    50,    47,    47,    96,
   925,    92,    93,    96,    42,    96,    97,    98,   145,    42,
    20,    96,    47,   150,    82,    96,   153,    96,    52,    96,
    52,    75,    52,    52,    52,    79,    80,    81,   953,    39,
    40,    52,    42,    43,    44,   470,   961,    42,    47,    47,
   586,    47,   588,    47,   479,   591,   183,   184,    47,   484,
    96,   188,   189,   190,   191,   889,   491,    96,   604,    47,
    47,   198,   199,   200,   201,    47,   900,    47,    52,    52,
   115,    52,   115,   508,   908,    50,    47,   911,   115,   115,
    15,    47,    96,   917,    47,    50,    47,   224,    46,   115,
  1015,    47,    47,    47,    47,    47,   930,   234,    47,   534,
    75,    47,    47,   115,    79,    80,    81,    47,   115,  1034,
    75,    46,   115,    51,    79,    80,    81,    51,   952,   665,
   666,    47,   760,    50,   762,   763,    51,   765,    51,   767,
   768,    47,   269,    47,   772,   773,    47,    72,   412,   777,
   414,   779,   780,   417,    50,   783,   784,    47,    75,   983,
    85,   115,    79,    80,    81,    51,   990,    51,   992,   296,
    95,    96,    51,    51,    99,    47,    51,     0,   305,    75,
  1004,   308,     8,    79,    80,    81,    52,   112,   724,    15,
   115,   116,   117,   729,    52,   731,    52,   733,    52,   735,
    52,   737,   738,   330,    52,   741,   631,    52,   744,    52,
    52,     0,  1036,   749,  1038,   342,   559,   408,   101,   582,
    46,   491,   633,    49,   649,    51,   515,   660,    -1,   356,
    -1,    -1,    -1,   658,    -1,    -1,   363,    -1,   365,    86,
    87,    88,    89,    90,    91,   372,    72,    94,    95,   877,
    -1,   676,    -1,   881,  1078,    -1,   884,   885,    -1,    85,
    -1,    -1,    -1,    -1,    -1,    -1,   894,     8,    -1,    95,
    96,    -1,    -1,    99,    15,    -1,    -1,    -1,    -1,    -1,
   816,   817,    23,    24,    -1,    -1,   112,   113,    -1,   115,
   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   430,    -1,    46,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   583,
   856,    -1,   586,    -1,   588,    -1,   862,   591,   864,    -1,
   866,    72,    -1,    15,   598,     8,   600,   965,   602,   603,
   604,    -1,    15,   470,    85,    -1,    -1,    -1,    -1,    -1,
    23,    24,   479,    -1,    95,    96,    -1,   484,    99,    -1,
    -1,   102,    -1,    -1,    46,    -1,    -1,   792,    -1,    -1,
    -1,   112,   113,    46,   115,   116,   117,    -1,    -1,  1007,
   805,   508,  1010,   808,    -1,    -1,   811,    -1,    -1,    -1,
    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
   664,   665,   666,    85,    -1,    -1,    -1,   534,    -1,    -1,
    -1,    -1,    85,    95,    96,    -1,    -1,    99,    57,    -1,
    -1,    -1,    95,    96,    -1,  1053,    99,  1055,    -1,  1057,
   112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,   112,
   113,    -1,   115,   116,   117,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
   724,    -1,   726,    -1,   889,   729,    -1,   731,    -1,   733,
    -1,   735,   736,   737,   738,   900,    -1,   741,    -1,    -1,
   744,    -1,     8,   908,    -1,   749,   911,    -1,    -1,    15,
    -1,    17,   917,    -1,    -1,    -1,    -1,    23,    24,    -1,
    -1,    -1,    -1,    -1,   631,   930,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
    46,    -1,   649,    -1,  1060,    -1,    -1,   952,    -1,  1065,
    -1,   658,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,   676,
    -1,    -1,   816,   817,    -1,    -1,    -1,    -1,   983,    85,
    -1,    -1,    -1,  1099,    -1,   990,    -1,   992,  1104,    95,
    96,    -1,    -1,    99,    -1,  1111,   102,    -1,    -1,  1004,
    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
   116,   117,   856,    -1,    -1,    -1,    -1,    -1,   862,    -1,
   864,    -1,   866,    -1,    -1,    -1,    -1,    -1,  1144,    -1,
    -1,  1036,    -1,  1038,    -1,    -1,    -1,    -1,     3,    -1,
    -1,    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,
    15,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    -1,    30,    31,    32,    -1,    34,
    35,    -1,    -1,  1078,    39,    40,    -1,    42,    43,    44,
     8,    46,    -1,    -1,    49,   792,    -1,    15,    53,    17,
    -1,    19,    20,    -1,    -1,    -1,    -1,    -1,   805,    -1,
    -1,   808,    -1,    -1,   811,    -1,    -1,    72,    73,    74,
    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
    85,     8,    -1,    -1,    -1,    -1,    -1,    -1,    15,    -1,
    95,    96,    -1,    -1,    99,    -1,   101,   102,   103,   104,
   105,   106,   107,    -1,    72,    73,    74,   112,   113,   114,
   115,   116,   117,    -1,    -1,    -1,    -1,    85,    -1,    46,
    -1,    -1,    49,    -1,    51,    -1,    -1,    95,    96,    -1,
    -1,    99,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   889,    -1,   112,    72,   114,   115,   116,   117,
    -1,    -1,    -1,   900,    -1,    -1,    -1,    -1,    85,    -1,
    -1,   908,    -1,    -1,   911,    -1,    -1,    -1,    95,    96,
   917,    -1,    99,    -1,    -1,  1059,  1060,    -1,    -1,    -1,
  1064,  1065,    -1,   930,    -1,   112,   113,    -1,   115,   116,
   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   952,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1099,    -1,    -1,    -1,    -1,
  1104,    -1,    -1,    -1,    -1,    15,  1110,  1111,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   983,    -1,    -1,    -1,
    -1,    -1,    -1,   990,    -1,   992,    -1,     3,    -1,    -1,
    -1,     7,     8,    -1,    10,    11,    46,  1004,    -1,    15,
  1144,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    -1,    30,    31,    32,    -1,    34,    35,
    -1,    -1,    72,    39,    40,    -1,    42,    43,    44,  1036,
    46,  1038,    -1,    49,    -1,    85,    -1,    53,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    85,
    -1,  1078,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
    96,    -1,    -1,    99,    -1,   101,   102,   103,   104,   105,
   106,   107,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
   116,   117,     3,    -1,    -1,    -1,     7,     8,    -1,    10,
    11,    -1,    -1,    -1,    15,    -1,    17,    -1,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
    31,    32,    -1,    34,    35,    -1,    -1,    -1,    39,    40,
    -1,    42,    43,    44,    -1,    46,    -1,    -1,    49,    -1,
    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
   101,   102,   103,   104,   105,   106,   107,    -1,    -1,    -1,
    -1,   112,   113,   114,   115,   116,   117,     3,    -1,    -1,
    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,    -1,
    -1,    17,    -1,    19,    20,    21,    22,    -1,    -1,    25,
    26,    27,    28,    -1,    30,    31,    32,    -1,    34,    35,
    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,
    46,    -1,    -1,    49,    -1,    -1,    -1,    53,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    96,    -1,    -1,    -1,    -1,   101,    -1,   103,   104,   105,
   106,   107,    -1,    -1,    -1,     3,   112,    -1,   114,     7,
     8,    -1,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
    -1,    19,    20,    21,    22,    -1,    -1,    25,    26,    27,
    28,    -1,    30,    31,    32,    -1,    34,    35,    -1,    -1,
    -1,    39,    40,    -1,    42,    43,    44,     8,    46,    -1,
    -1,    49,    -1,    -1,    15,    53,    17,    -1,    -1,    -1,
    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    39,    -1,
    -1,    42,    43,    44,     8,    46,    -1,    -1,    -1,    -1,
    -1,    15,    -1,    17,    -1,    -1,    -1,    -1,    96,    23,
    24,    -1,    -1,   101,    -1,   103,   104,   105,   106,   107,
    -1,    72,    73,    74,   112,    39,   114,    -1,    42,    43,
    44,    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,
    74,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
    -1,    85,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,    95,    96,    -1,    15,    99,    17,    -1,   102,    -1,
    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,   112,   113,
   114,   115,   116,   117,    -1,    -1,    -1,    -1,    39,    -1,
    -1,    42,    43,    44,     8,    46,    -1,    -1,    -1,    -1,
    -1,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    -1,    39,    -1,    -1,    42,    43,
    44,    -1,    46,    -1,    85,    49,    -1,    51,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,
    74,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
    -1,    85,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,    95,    96,    -1,    15,    99,    17,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
   114,   115,   116,   117,    -1,    -1,    -1,    -1,    39,    -1,
    -1,    42,    43,    44,     8,    46,    -1,    -1,    49,    -1,
    51,    15,    -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    -1,    39,    40,    -1,    42,    43,
    44,    -1,    46,    -1,    85,    49,    -1,    51,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,
    -1,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
    -1,    85,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,    95,    96,    -1,    15,    99,    17,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
    -1,   115,   116,   117,    -1,    -1,    -1,    -1,    39,    -1,
    -1,    42,    43,    44,     8,    46,    -1,    -1,    49,    -1,
    51,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    -1,    39,    -1,    -1,    42,    43,
    44,    -1,    46,    -1,    85,    49,    -1,    51,    -1,    -1,
    -1,    -1,     8,    -1,    95,    96,    -1,    -1,    99,    15,
    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,
    74,   112,    -1,   114,   115,   116,   117,    -1,    -1,    -1,
    -1,    85,    -1,    39,    -1,    -1,    42,    43,    44,     8,
    46,    95,    96,    -1,    -1,    99,    15,    -1,    17,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
   114,   115,   116,   117,    -1,    -1,    72,    73,    74,    -1,
    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    85,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,
    96,    -1,    -1,    99,    15,   101,    17,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,   112,    -1,   114,   115,
   116,   117,    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,
    -1,    42,    43,    44,     8,    46,    95,    96,    -1,    -1,
    99,    15,   101,    17,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   112,    -1,   114,   115,   116,   117,    -1,
    -1,    72,    73,    74,    -1,    39,    -1,    -1,    42,    43,
    44,    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     8,    -1,    95,    96,    -1,    -1,    99,    15,
    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,
    74,   112,    -1,   114,   115,   116,   117,    -1,    -1,    -1,
    -1,    85,    -1,    39,    -1,    -1,    42,    43,    44,     8,
    46,    95,    96,    -1,    -1,    99,    15,    -1,    17,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
   114,   115,   116,   117,    -1,    -1,    72,    73,    74,    -1,
    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    85,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,
    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,   112,    -1,   114,   115,
   116,   117,    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,
    -1,    42,    43,    44,     8,    46,    95,    96,    -1,    -1,
    99,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   112,    -1,   114,   115,   116,   117,    -1,
    -1,    72,    73,    74,    -1,    39,    -1,    -1,    42,    43,
    44,    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     8,    -1,    95,    96,    -1,    -1,    99,    15,
    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,
    74,   112,    -1,   114,   115,   116,   117,    -1,    -1,    -1,
    -1,    85,    -1,    39,    -1,    -1,    42,    43,    44,     8,
    46,    95,    96,    -1,    -1,    99,    15,    -1,    17,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
   114,   115,   116,   117,    -1,    -1,    72,    73,    74,    -1,
    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    85,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,
    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,   112,    -1,   114,   115,
   116,   117,    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,
    -1,    42,    43,    44,     8,    46,    95,    96,    -1,    -1,
    99,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   112,    -1,   114,   115,   116,   117,     8,
    -1,    72,    73,    74,    -1,    39,    15,    -1,    42,    43,
    44,    20,    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
    39,    40,    -1,    42,    43,    44,    -1,    46,    72,    73,
    74,   112,    15,   114,   115,   116,   117,    -1,    -1,    -1,
    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     8,    95,    96,    72,    73,    99,    -1,    15,    -1,    -1,
    -1,    -1,    20,    46,    -1,    -1,    85,    -1,   112,    15,
   114,   115,   116,   117,    -1,    -1,    95,    96,    -1,    -1,
    99,    39,    40,    -1,    42,    43,    44,    -1,    46,    72,
    -1,    -1,    -1,   112,    15,    -1,   115,   116,   117,    -1,
    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    95,    96,    72,    73,    99,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    46,    72,    85,    -1,   112,
    15,    -1,   115,   116,   117,    -1,    15,    95,    96,    85,
    -1,    99,    15,    -1,    -1,    -1,    -1,    -1,    -1,    95,
    96,    72,    -1,    99,   112,    -1,    -1,   115,   116,   117,
    -1,    46,    -1,    -1,    85,    -1,   112,    46,    -1,   115,
   116,   117,    -1,    46,    95,    96,    -1,    15,    99,    -1,
    -1,    -1,    -1,    -1,    15,    -1,    -1,    72,    -1,    -1,
    -1,   112,    -1,    72,   115,   116,   117,    -1,    -1,    72,
    85,    -1,    -1,    -1,    -1,    -1,    85,    -1,    46,    -1,
    95,    96,    85,    -1,    99,    46,    95,    96,    15,    -1,
    99,    -1,    95,    96,    -1,    15,    99,   112,    -1,    -1,
   115,   116,   117,   112,    72,    -1,   115,   116,   117,   112,
    -1,    72,   115,   116,   117,    -1,    -1,    85,    -1,    46,
    -1,    -1,    -1,    -1,    85,    -1,    46,    95,    96,    15,
    -1,    99,    -1,    -1,    95,    96,    15,    -1,    99,    -1,
    -1,    -1,    -1,    -1,   112,    72,    -1,   115,   116,   117,
    -1,   112,    72,    -1,   115,   116,   117,    -1,    85,    -1,
    46,    -1,    -1,    -1,    -1,    85,    -1,    46,    95,    96,
    -1,    -1,    99,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,    -1,    -1,    -1,    -1,   112,    72,    -1,   115,   116,
   117,    -1,   112,    72,    -1,   115,   116,   117,    -1,    85,
    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,    95,
    96,    -1,    -1,    99,    -1,    -1,    95,    96,    -1,    -1,
    99,    -1,    -1,    -1,    -1,    -1,   112,    -1,    -1,   115,
   116,   117,    -1,   112,    -1,    -1,   115,   116,   117
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 147 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 177 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 178 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 182 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 183 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 187 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 191 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 192 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 210 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 213 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 215 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 220 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 225 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 228 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 233 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 243 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 348 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 349 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 351 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 352 "msv.y"
{yyval.tnode=new CSyntaxNode(RETURN_STA, yyvsp[0].cString,NULL,VOIDTYPE);;
    break;}
case 37:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 41:
#line 357 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 359 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 360 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 362 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 46:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 47:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 48:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 49:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 50:
#line 373 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 374 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 52:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 54:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 55:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 56:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 57:
#line 384 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 58:
#line 390 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 59:
#line 394 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 60:
#line 409 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 420 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 421 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 64:
#line 424 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 65:
#line 437 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 66:
#line 442 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 67:
#line 446 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 68:
#line 452 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 69:
#line 453 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 70:
#line 459 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-7].returntype);
	   ;
    break;}
case 71:
#line 464 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, POINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-8].returntype);
	   ;
    break;}
case 72:
#line 470 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, DOUBLEPOINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-9].returntype);
	   ;
    break;}
case 73:
#line 476 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-7].cString, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 74:
#line 482 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-8].cString, yyvsp[-4].tnode, POINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 75:
#line 488 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-9].cString, yyvsp[-4].tnode, DOUBLEPOINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 76:
#line 498 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 77:
#line 503 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 78:
#line 508 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 79:
#line 517 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 80:
#line 525 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 81:
#line 536 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 82:
#line 549 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 83:
#line 550 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 84:
#line 551 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 85:
#line 556 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 86:
#line 560 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 87:
#line 564 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 88:
#line 568 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 89:
#line 572 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 90:
#line 576 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 91:
#line 582 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 92:
#line 584 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 93:
#line 587 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 94:
#line 592 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 95:
#line 603 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 96:
#line 604 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 97:
#line 605 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 98:
#line 608 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 99:
#line 609 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 100:
#line 610 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 101:
#line 618 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 102:
#line 622 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 103:
#line 626 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 104:
#line 631 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 105:
#line 637 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 106:
#line 642 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 107:
#line 649 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 108:
#line 655 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 109:
#line 666 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 110:
#line 667 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 111:
#line 668 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 112:
#line 673 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 113:
#line 680 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 114:
#line 683 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 115:
#line 684 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 116:
#line 693 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 117:
#line 696 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 118:
#line 697 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 119:
#line 698 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 120:
#line 699 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 121:
#line 700 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 122:
#line 701 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 123:
#line 702 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 124:
#line 706 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 125:
#line 708 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 710 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 127:
#line 712 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 128:
#line 714 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 129:
#line 716 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 130:
#line 718 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 131:
#line 720 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 132:
#line 722 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 133:
#line 724 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 134:
#line 726 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 135:
#line 728 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 136:
#line 730 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 137:
#line 734 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 138:
#line 735 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 139:
#line 738 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 140:
#line 739 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 141:
#line 740 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 142:
#line 743 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 143:
#line 744 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 144:
#line 745 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 145:
#line 748 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 146:
#line 752 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 147:
#line 758 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 148:
#line 760 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 149:
#line 762 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 150:
#line 764 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 151:
#line 766 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 152:
#line 767 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 153:
#line 772 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 154:
#line 773 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 155:
#line 774 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 156:
#line 780 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 157:
#line 781 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 158:
#line 783 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 159:
#line 785 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 160:
#line 787 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 161:
#line 789 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 162:
#line 790 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 163:
#line 796 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 164:
#line 797 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 165:
#line 799 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 166:
#line 801 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 167:
#line 806 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 168:
#line 807 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 169:
#line 811 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 170:
#line 812 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 171:
#line 816 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 817 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 173:
#line 821 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 822 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 175:
#line 823 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 176:
#line 824 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 177:
#line 825 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 827 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 828 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 829 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 181:
#line 830 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 182:
#line 831 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 183:
#line 832 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 184:
#line 833 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 185:
#line 834 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 186:
#line 835 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 187:
#line 838 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 188:
#line 839 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 189:
#line 840 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 190:
#line 841 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 191:
#line 842 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 192:
#line 843 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 193:
#line 844 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 194:
#line 845 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 195:
#line 848 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 196:
#line 849 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 197:
#line 853 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 198:
#line 854 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 199:
#line 855 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 200:
#line 856 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 201:
#line 863 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 202:
#line 867 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 203:
#line 875 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 887 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 205:
#line 891 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 206:
#line 900 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 207:
#line 912 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 208:
#line 916 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 209:
#line 924 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 210:
#line 927 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 211:
#line 928 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 212:
#line 933 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 213:
#line 937 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 214:
#line 941 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 215:
#line 946 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 216:
#line 949 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 217:
#line 958 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 218:
#line 959 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 219:
#line 960 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 220:
#line 963 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 221:
#line 964 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 222:
#line 967 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 223:
#line 968 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 224:
#line 971 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 225:
#line 972 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 226:
#line 973 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 227:
#line 974 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 228:
#line 975 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 229:
#line 976 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 230:
#line 979 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 231:
#line 980 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 232:
#line 981 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 233:
#line 982 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 234:
#line 983 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 235:
#line 984 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 236:
#line 986 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 237:
#line 987 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 238:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 239:
#line 990 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 240:
#line 992 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 241:
#line 1000 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 242:
#line 1001 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 243:
#line 1002 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 244:
#line 1003 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 245:
#line 1004 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 246:
#line 1010 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 1012 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 248:
#line 1013 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 249:
#line 1016 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 250:
#line 1017 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 251:
#line 1018 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 1021 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 1022 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 254:
#line 1025 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 255:
#line 1026 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 256:
#line 1029 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 257:
#line 1030 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 258:
#line 1033 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 259:
#line 1034 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 260:
#line 1039 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 261:
#line 1040 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 262:
#line 1041 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 263:
#line 1042 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 264:
#line 1043 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 265:
#line 1044 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 266:
#line 1052 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 267:
#line 1053 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 268:
#line 1057 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 269:
#line 1058 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 270:
#line 1065 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 271:
#line 1069 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 272:
#line 1074 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 273:
#line 1080 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 274:
#line 1086 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 275:
#line 1092 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 276:
#line 1102 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 277:
#line 1108 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 278:
#line 1114 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 279:
#line 1120 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 280:
#line 1128 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 281:
#line 1132 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 282:
#line 1136 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 283:
#line 1142 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 284:
#line 1146 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 285:
#line 1150 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 286:
#line 1156 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 287:
#line 1162 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 288:
#line 1169 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 289:
#line 1175 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 290:
#line 1181 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 291:
#line 1185 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 292:
#line 1192 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 293:
#line 1197 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 294:
#line 1201 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 295:
#line 1205 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 296:
#line 1209 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 297:
#line 1215 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 298:
#line 1221 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 299:
#line 1227 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 300:
#line 1234 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 301:
#line 1242 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 302:
#line 1248 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 303:
#line 1263 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 304:
#line 1268 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 305:
#line 1273 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 306:
#line 1281 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 307:
#line 1288 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 308:
#line 1294 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 309:
#line 1300 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 310:
#line 1303 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1313 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 312:
#line 1317 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 313:
#line 1324 "msv.y"
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
case 314:
#line 1327 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 315:
#line 1328 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 316:
#line 1333 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 317:
#line 1337 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 318:
#line 1346 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 319:
#line 1347 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 320:
#line 1355 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 321:
#line 1357 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 322:
#line 1364 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 323:
#line 1366 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 324:
#line 1372 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 325:
#line 1373 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 326:
#line 1377 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 327:
#line 1382 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 328:
#line 1387 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 329:
#line 1392 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 330:
#line 1399 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 331:
#line 1402 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 332:
#line 1403 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 333:
#line 1409 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 334:
#line 1411 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 335:
#line 1431 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 336:
#line 1432 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 337:
#line 1434 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 338:
#line 1436 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 339:
#line 1437 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 340:
#line 1443 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 341:
#line 1450 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 342:
#line 1458 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 343:
#line 1466 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 344:
#line 1470 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 345:
#line 1474 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 346:
#line 1480 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 347:
#line 1484 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 348:
#line 1490 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 349:
#line 1494 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 350:
#line 1501 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 351:
#line 1505 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 352:
#line 1509 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 353:
#line 1516 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 354:
#line 1520 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 355:
#line 1523 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 356:
#line 1528 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 357:
#line 1537 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 358:
#line 1538 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 359:
#line 1544 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 360:
#line 1545 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 361:
#line 1549 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 362:
#line 1550 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 363:
#line 1555 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 364:
#line 1556 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 365:
#line 1557 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 366:
#line 1558 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 367:
#line 1559 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 368:
#line 1562 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 369:
#line 1563 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 370:
#line 1564 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 371:
#line 1570 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1571 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1572 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1574 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1575 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1576 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1578 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1579 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1580 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 380:
#line 1581 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 381:
#line 1583 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 382:
#line 1584 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 383:
#line 1585 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 384:
#line 1586 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 385:
#line 1587 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 386:
#line 1588 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 387:
#line 1589 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 388:
#line 1593 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 389:
#line 1594 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 390:
#line 1595 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 391:
#line 1596 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 392:
#line 1597 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 393:
#line 1598 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 394:
#line 1599 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1601 "msv.y"
