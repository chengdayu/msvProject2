
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	IF	261
#define	ELSE	262
#define	EMPTY	263
#define	AWAIT	264
#define	PROJECTION	265
#define	PBEGIN	266
#define	PEND	267
#define	POINTERNULL	268
#define	ARRAY	269
#define	STRUCT	270
#define	DOT	271
#define	UNION	272
#define	FOPEN	273
#define	FCLOSE	274
#define	FILEDECLARATION	275
#define	FGETS	276
#define	FPUTS	277
#define	FGETC	278
#define	FPUTC	279
#define	MORE	280
#define	DEFINE	281
#define	MY_TRUE	282
#define	MY_FALSE	283
#define	EXIST	284
#define	FRAME	285
#define	FOR	286
#define	WHILE	287
#define	DO	288
#define	TRUE	289
#define	FALSE	290
#define	REPEAT	291
#define	UNTIL	292
#define	DISPLAY	293
#define	SKIP	294
#define	THEN	295
#define	COMMA	296
#define	COLON	297
#define	INTDECLARATION	298
#define	STRDECLARATION	299
#define	POINTERDECLARATION	300
#define	CHARDECLARATION	301
#define	VOIDDECLARATION	302
#define	FLOATDECLARATION	303
#define	LISTDECLARATION	304
#define	OPEN_PAR	305
#define	CLOSE_PAR	306
#define	TIMES	307
#define	OPEN_BPAR	308
#define	CLOSE_BPAR	309
#define	OPEN_MPAR	310
#define	CLOSE_MPAR	311
#define	FUNCTION	312
#define	OVER	313
#define	CYLINDER	314
#define	OVEREP	315
#define	INTER_OR	316
#define	NON_DETERMINED	317
#define	SEND	318
#define	RECEIVE	319
#define	PROCESS	320
#define	CHANNEL	321
#define	PUT	322
#define	GET	323
#define	ERROR_TOKEN	324
#define	STRFUNCHEAD	325
#define	STRFUNCTAIL	326
#define	STRFUNCCAT	327
#define	STRFUNCCMP	328
#define	STRFUNCCPY	329
#define	STRFUNCLEN	330
#define	SIZEOF	331
#define	SYSTEM	332
#define	CEIL	333
#define	FLOOR	334
#define	ROUND	335
#define	SIN	336
#define	COS	337
#define	TAN	338
#define	ASIN	339
#define	ACOS	340
#define	ATAN	341
#define	SINH	342
#define	COSH	343
#define	TANH	344
#define	EXP	345
#define	LOG	346
#define	LOG10	347
#define	SQRT	348
#define	ATAN2	349
#define	POW	350
#define	ABS	351
#define	FABS	352
#define	LABS	353
#define	FMOD	354
#define	MODF	355
#define	LDEXP	356
#define	FREXP	357
#define	UNSIGNED	358
#define	SIGNED	359
#define	MALLOC	360
#define	FREE	361
#define	CHOP	362
#define	IMPLY	363
#define	IFF	364
#define	PROPIMPLY	365
#define	OR	366
#define	PARALLEL	367
#define	AND	368
#define	ASS_P	369
#define	ASS_N	370
#define	CON	371
#define	ADDRESS	372
#define	NE	373
#define	EQ	374
#define	GE	375
#define	LE	376
#define	GT	377
#define	LT	378
#define	LST	379
#define	RST	380
#define	ADD	381
#define	SUB	382
#define	MUL	383
#define	DIV	384
#define	MOD	385
#define	BNE	386
#define	CHOPSTAR	387
#define	NEXT	388
#define	NEGATION	389
#define	LENGTH	390
#define	REQUEST	391
#define	FINAL	392
#define	KEEP	393
#define	ALWAYS	394
#define	HALT	395
#define	W_NEXT	396
#define	PREFIX	397
#define	SOMETIMES	398
#define	ID	399
#define	STRLITERAL	400
#define	STRUCT_TYPE	401
#define	INTLITERAL	402
#define	FLOATLITERAL	403
#define	CHARLITERAL	404

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1372
#define	YYFLAG		-32768
#define	YYNTBASE	150

#define YYTRANSLATE(x) ((unsigned)(x) <= 404 ? yytranslate[x] : 236)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   217,
   226,   236,   238,   243,   248,   250,   258,   262,   264,   268,
   270,   271,   276,   281,   283,   285,   290,   293,   296,   299,
   302,   304,   307,   310,   314,   318,   322,   326,   334,   343,
   355,   369,   371,   373,   375,   377,   379,   381,   384,   391,
   396,   402,   408,   417,   426,   429,   432,   435,   436,   443,
   451,   452,   455,   462,   471,   476,   483,   490,   497,   502,
   506,   508,   510,   512,   514,   518,   521,   523,   535,   548,
   560,   572,   590,   609,   627,   646,   666,   685,   703,   722,
   740,   742,   744,   746,   748,   750,   761,   765,   767,   772,
   778,   790,   803,   815,   827,   840,   844,   848,   851,   852,
   855,   858,   861,   869,   876,   881,   885,   887,   891,   895,
   901,   903,   907,   910,   911,   913,   917,   919,   922,   925,
   927,   929,   931,   933,   935,   937,   941,   943,   945,   947,
   949,   951,   953,   955,   957,   959,   961,   963,   965,   967,
   969,   971,   973,   977,   979,   981,   985,   990,   995,  1000,
  1005,  1010,  1015,  1019,  1023,  1027,  1028,  1031,  1034,  1037,
  1040,  1043,  1047,  1052,  1057,  1062,  1068,  1074,  1080,  1086,
  1092,  1099,  1105,  1111,  1118,  1124,  1131,  1139,  1146,  1153,
  1161,  1168,  1175,  1181,  1189,  1196,  1198,  1203,  1205,  1208,
  1211,  1214,  1218,  1222,  1226,  1229,  1234,  1239,  1244,  1249,
  1251,  1253,  1255,  1257,  1259,  1261,  1266,  1271,  1278,  1285,
  1292,  1297,  1299,  1301,  1303,  1305,  1307,  1309,  1312,  1315,
  1318,  1321,  1324,  1327,  1330,  1333,  1336,  1339,  1342,  1345,
  1348,  1351,  1354,  1357,  1364,  1371,  1378,  1385,  1392,  1395,
  1398,  1401,  1403,  1406,  1410,  1414,  1418,  1422,  1424,  1426,
  1428,  1432,  1436,  1440,  1444,  1448,  1452,  1456,  1460,  1464,
  1468,  1470,  1472,  1474,  1476,  1478,  1480,  1483,  1486,  1488,
  1490,  1494,  1497,  1501,  1506,  1512,  1517,  1521,  1526,  1532,
  1537,  1540,  1544,  1549,  1552,  1556,  1561,  1566,  1572,  1579,
  1588,  1596,  1601,  1605,  1611,  1620,  1621,  1626,  1630,  1635,
  1640,  1646,  1652,  1658,  1664,  1671,  1681,  1682,  1690,  1700,
  1709,  1715,  1720,  1723,  1726,  1732,  1733,  1736,  1740,  1747,
  1748,  1751,  1755,  1758,  1762,  1765,  1767,  1771,  1773,  1775,
  1777,  1779,  1783,  1784,  1787,  1788,  1792,  1794,  1797,  1801,
  1805,  1809,  1813,  1819,  1829,  1831,  1833,  1834,  1836,  1837,
  1839,  1840,  1848,  1856,  1859,  1861,  1862,  1868,  1871,  1872,
  1877,  1883,  1884,  1888,  1893,  1899,  1904,  1910,  1915,  1916,
  1920,  1924,  1929,  1934,  1939,  1944,  1949,  1954,  1959,  1964,
  1971,  1976,  1981,  1986,  1993,  1997,  2001,  2006,  2010,  2011,
  2015,  2019,  2023,  2027,  2030
};

static const short yyrhs[] = {   151,
   154,     0,    11,   152,    12,     0,     0,   152,   113,   152,
     0,   152,   111,   152,     0,   152,   109,   152,     0,   152,
   110,   152,     0,   152,   107,   152,     0,   139,   152,     0,
   138,   152,     0,   143,   152,     0,   141,   152,     0,   133,
   152,     0,    39,     0,    27,     0,    28,     0,   135,   175,
     0,     8,     0,    25,     0,   140,   152,     0,   137,   152,
     0,   134,   152,     0,    53,   152,   153,    54,    10,    53,
   152,    54,     0,   144,     0,    26,   144,    42,   201,     0,
   152,   132,     0,    50,   152,    51,     0,    41,   152,   153,
     0,     0,   154,   113,   154,     0,   154,   111,   154,     0,
   154,   107,   154,     0,   166,     0,   160,     0,   225,     0,
   228,     0,   219,     0,   220,     0,   221,     0,   133,    50,
   154,    51,     0,   138,    50,   154,    51,     0,   139,    50,
   154,    51,     0,     9,    50,   200,    51,     0,    36,    53,
   154,    54,    37,    50,   200,    51,     0,    39,     0,     8,
     0,    25,     0,   135,    50,   175,    51,     0,   232,     0,
   230,     0,    34,     0,    35,     0,   137,    50,   154,    51,
     0,   154,   112,   154,     0,    50,   218,    51,   108,    55,
   154,    56,     0,    30,    50,   211,   216,    51,   113,    50,
   154,    51,     0,    53,   154,   217,    54,    10,   209,     0,
    53,   154,    54,    10,   209,     0,    26,   144,    50,   205,
    51,   114,    53,   156,    54,     0,    57,   144,    50,   205,
    51,    53,   154,    54,     0,    65,   144,    50,   205,    51,
   114,    53,   156,    54,     0,   158,     0,   106,    50,   211,
    51,     0,    77,    50,   198,    51,     0,   157,     0,    29,
   211,   206,    42,    53,   154,    54,     0,    50,   154,    51,
     0,   160,     0,   160,   113,   155,     0,   154,     0,     0,
   144,    50,   207,    51,     0,   172,    50,   207,    51,     0,
   165,     0,   191,     0,   159,    53,   155,    54,     0,    15,
   144,     0,    17,   144,     0,   104,   161,     0,   103,   161,
     0,   161,     0,   162,   163,     0,   146,   163,     0,    15,
   144,   163,     0,    17,   144,   163,     0,    15,   146,   163,
     0,    17,   146,   163,     0,    50,   128,   211,    51,    50,
   205,    51,     0,    50,   128,   128,   211,    51,    50,   205,
    51,     0,    50,   128,   144,    55,   175,   173,    56,    51,
    50,   205,    51,     0,    50,   128,   144,    55,   175,   173,
    56,    51,    50,   205,    51,   114,   182,     0,    43,     0,
    48,     0,    46,     0,    44,     0,    47,     0,    20,     0,
   211,   164,     0,   144,    55,   175,   173,    56,   164,     0,
   211,   114,   170,   164,     0,   144,    14,   114,   182,   164,
     0,   144,    14,   114,   212,   164,     0,   144,    55,   175,
   173,    56,   114,   182,   164,     0,   144,    55,   175,   173,
    56,   114,   212,   164,     0,   128,   163,     0,    41,   163,
     0,    41,     1,     0,     0,   144,    55,   175,   173,    56,
     0,     0,    41,   144,    55,   175,   173,    56,     0,     0,
     0,    41,     1,     0,    18,    50,   167,    41,   212,    51,
     0,    21,    50,   211,    41,   213,    41,   211,    51,     0,
    23,    50,   211,    51,     0,    22,    50,   211,    41,   211,
    51,     0,    24,    50,   211,    41,   211,    51,     0,    24,
    50,   172,    41,   211,    51,     0,    19,    50,   211,    51,
     0,   167,   169,   170,     0,   211,     0,   234,     0,   172,
     0,   174,     0,    50,   167,    51,     0,   133,   167,     0,
   168,     0,    50,    50,    46,   128,    51,   147,    51,    55,
   175,   173,    56,     0,    50,    50,   103,    46,   128,    51,
   147,    51,    55,   175,   173,    56,     0,    50,    50,    43,
   128,    51,   147,    51,    55,   175,   173,    56,     0,    50,
    50,    48,   128,    51,   147,    51,    55,   175,   173,    56,
     0,    50,    50,    46,   128,    51,    50,    50,    46,   128,
    51,   147,    51,    51,    55,   175,   173,    56,     0,    50,
    50,    46,   128,    51,    50,    50,   103,    46,   128,    51,
   147,    51,    51,    55,   175,   173,    56,     0,    50,    50,
    46,   128,    51,    50,    50,    43,   128,    51,   147,    51,
    51,    55,   175,   173,    56,     0,    50,    50,   103,    46,
   128,    51,    50,    50,    46,   128,    51,   147,    51,    51,
    55,   175,   173,    56,     0,    50,    50,   103,    46,   128,
    51,    50,    50,   103,    46,   128,    51,   147,    51,    51,
    55,   175,   173,    56,     0,    50,    50,   103,    46,   128,
    51,    50,    50,    43,   128,    51,   147,    51,    51,    55,
   175,   173,    56,     0,    50,    50,    43,   128,    51,    50,
    50,    46,   128,    51,   147,    51,    51,    55,   175,   173,
    56,     0,    50,    50,    43,   128,    51,    50,    50,   103,
    46,   128,    51,   147,    51,    51,    55,   175,   173,    56,
     0,    50,    50,    43,   128,    51,    50,    50,    43,   128,
    51,   147,    51,    51,    55,   175,   173,    56,     0,   114,
     0,   115,     0,   175,     0,   182,     0,   212,     0,    50,
   212,    51,    50,   162,    51,    50,   205,    51,   157,     0,
    50,   170,    51,     0,   171,     0,   128,    50,   168,    51,
     0,   144,    55,   175,   173,    56,     0,    50,    50,    43,
   128,    51,   144,    51,    55,   175,   173,    56,     0,    50,
    50,   103,    43,   128,    51,   144,    51,    55,   175,   173,
    56,     0,    50,    50,    48,   128,    51,   144,    51,    55,
   175,   173,    56,     0,    50,    50,    46,   128,    51,   144,
    51,    55,   175,   173,    56,     0,    50,    50,   103,    46,
   128,    51,   144,    51,    55,   175,   173,    56,     0,    50,
   172,    51,     0,    41,   175,   173,     0,    41,     1,     0,
     0,   128,   211,     0,   128,   174,     0,   128,   172,     0,
    50,   174,    51,    55,   175,   173,    56,     0,   128,    50,
   204,   128,    51,   175,     0,   128,    50,   175,    51,     0,
    50,   174,    51,     0,   178,     0,   178,   202,   175,     0,
   175,   181,   178,     0,     6,   200,    40,   175,   177,     0,
   178,     0,   178,   181,   178,     0,     7,   175,     0,     0,
   179,     0,   178,   180,   179,     0,   213,     0,   127,   179,
     0,   131,   179,     0,    13,     0,   215,     0,   211,     0,
   172,     0,   174,     0,   157,     0,    50,   175,    51,     0,
   199,     0,   214,     0,   186,     0,   187,     0,   234,     0,
   190,     0,   128,     0,   129,     0,   130,     0,   124,     0,
   125,     0,   117,     0,    61,     0,   116,     0,   126,     0,
   127,     0,   182,   116,   182,     0,   183,     0,   184,     0,
    50,   182,    51,     0,    55,   175,   185,    56,     0,    55,
   212,   185,    56,     0,    55,   182,   185,    56,     0,    53,
   175,   185,    54,     0,    53,   212,   185,    54,     0,    53,
   182,   185,    54,     0,    41,   175,   185,     0,    41,   212,
   185,     0,    41,   182,   185,     0,     0,    41,     1,     0,
   117,   211,     0,   117,   172,     0,   117,   234,     0,   117,
   186,     0,    50,   186,    51,     0,    50,    43,    51,   176,
     0,    50,    48,    51,   176,     0,    50,    46,    51,   176,
     0,    50,   104,    43,    51,   176,     0,    50,   104,    46,
    51,   176,     0,    50,   103,    43,    51,   176,     0,    50,
   103,    46,    51,   176,     0,    50,    43,   128,    51,   188,
     0,    50,   103,    43,   128,    51,   188,     0,    50,    48,
   128,    51,   188,     0,    50,    46,   128,    51,   188,     0,
    50,   103,    46,   128,    51,   188,     0,    50,    47,   128,
    51,   188,     0,    50,    43,   128,   128,    51,   188,     0,
    50,   103,    43,   128,   128,    51,   188,     0,    50,    48,
   128,   128,    51,   188,     0,    50,    46,   128,   128,    51,
   188,     0,    50,   103,    46,   128,   128,    51,   188,     0,
    50,    47,   128,   128,    51,   188,     0,    50,    15,   146,
   128,    51,   188,     0,    50,   146,   128,    51,   188,     0,
    50,    15,   146,   128,   128,    51,   188,     0,    50,   146,
   128,   128,    51,   188,     0,   176,     0,   105,    50,   175,
    51,     0,   204,     0,    43,   128,     0,    48,   128,     0,
    46,   128,     0,   103,    43,   128,     0,   103,    46,   128,
     0,    15,   146,   128,     0,   146,   128,     0,    76,    50,
   175,    51,     0,    76,    50,   189,    51,     0,    76,    50,
   146,    51,     0,    76,    50,   212,    51,     0,   192,     0,
   193,     0,   194,     0,   196,     0,   195,     0,   197,     0,
    70,    50,   198,    51,     0,    71,    50,   198,    51,     0,
    72,    50,   198,    41,   198,    51,     0,    73,    50,   198,
    41,   198,    51,     0,    74,    50,   198,    41,   198,    51,
     0,    75,    50,   198,    51,     0,   211,     0,   172,     0,
   174,     0,   212,     0,   191,     0,   234,     0,    80,   175,
     0,    78,   175,     0,    79,   175,     0,    81,   175,     0,
    82,   175,     0,    83,   175,     0,    84,   175,     0,    85,
   175,     0,    86,   175,     0,    87,   175,     0,    88,   175,
     0,    89,   175,     0,    90,   175,     0,    91,   175,     0,
    92,   175,     0,    93,   175,     0,    94,    50,   175,    41,
   175,    51,     0,    95,    50,   175,    41,   175,    51,     0,
    99,    50,   175,    41,   175,    51,     0,   100,    50,   175,
    41,   175,    51,     0,   101,    50,   175,    41,   175,    51,
     0,    96,   175,     0,    97,   175,     0,    98,   175,     0,
   201,     0,   134,   200,     0,   200,   113,   200,     0,   200,
   111,   200,     0,    50,   200,    51,     0,   175,   202,   175,
     0,    27,     0,    28,     0,   175,     0,   175,   119,   212,
     0,   175,   118,   212,     0,   212,   119,   175,     0,   212,
   118,   175,     0,   175,   119,    13,     0,   175,   118,    13,
     0,    13,   119,   175,     0,    13,   118,   175,     0,   175,
   119,   214,     0,   175,   118,   214,     0,   120,     0,   121,
     0,   118,     0,   122,     0,   123,     0,   119,     0,   103,
    43,     0,   103,    46,     0,   203,     0,   162,     0,   204,
   211,   206,     0,   204,   206,     0,   146,   211,   206,     0,
   146,   128,   211,   206,     0,   146,   128,   128,   211,   206,
     0,   146,   211,    14,   206,     0,   144,   211,   206,     0,
   144,   128,   211,   206,     0,   144,   128,   128,   211,   206,
     0,   144,   211,    14,   206,     0,   146,   206,     0,   146,
   128,   206,     0,   146,   128,   128,   206,     0,   144,   206,
     0,   144,   128,   206,     0,   144,   128,   128,   206,     0,
   204,   211,    14,   206,     0,   204,   128,   211,    14,   206,
     0,   204,   211,    55,   175,    56,   206,     0,   204,   211,
    55,   175,    41,   175,    56,   206,     0,   204,   211,    14,
    55,   175,    56,   206,     0,   204,   128,   211,   206,     0,
   204,   128,   206,     0,   204,   128,   128,   211,   206,     0,
    50,   128,   211,    51,    50,   205,    51,   206,     0,     0,
    41,   204,   211,   206,     0,    41,   204,   206,     0,    41,
   144,   211,   206,     0,    41,   146,   211,   206,     0,    41,
   146,   128,   211,   206,     0,    41,   144,   211,    14,   206,
     0,    41,   146,   211,    14,   206,     0,    41,   204,   211,
    14,   206,     0,    41,   204,   128,   211,    14,   206,     0,
    41,    50,   128,   211,    51,    50,   205,    51,   206,     0,
     0,    41,   204,   211,    55,   175,    56,   206,     0,    41,
   204,   211,    55,   175,    41,   175,    56,   206,     0,    41,
   204,   211,    14,    55,   175,    56,   206,     0,    41,   204,
   128,   211,   206,     0,    41,   204,   128,   206,     0,    41,
     1,     0,   170,   208,     0,   144,    50,   207,    51,   208,
     0,     0,   117,     1,     0,    41,   170,   208,     0,    41,
   144,    50,   207,    51,   208,     0,     0,    41,     1,     0,
    53,   154,    54,     0,     1,    54,     0,    50,   200,    51,
     0,     1,    51,     0,   144,     0,    50,   211,    51,     0,
   145,     0,   147,     0,   149,     0,   148,     0,    41,   211,
   216,     0,     0,    41,     1,     0,     0,    41,   154,   217,
     0,   201,     0,   134,   218,     0,   218,   113,   218,     0,
   218,   111,   218,     0,    50,   218,    51,     0,    32,   210,
   209,     0,    31,   175,    52,    33,   209,     0,    31,    50,
   222,    41,   223,    41,   224,    51,   209,     0,   166,     0,
   161,     0,     0,   200,     0,     0,   166,     0,     0,     3,
    50,   179,    51,    53,   226,    54,     0,     4,   179,    42,
    50,   154,    51,   227,     0,     5,   226,     0,   226,     0,
     0,     6,   200,    40,   209,   229,     0,     7,   209,     0,
     0,    38,    50,   170,    51,     0,    38,    50,   170,   231,
    51,     0,     0,    41,   170,   231,     0,   136,    50,   211,
    51,     0,   136,    50,   211,   233,    51,     0,   136,    50,
   172,    51,     0,   136,    50,   172,   233,    51,     0,   136,
    50,   234,    51,     0,     0,    41,   211,   233,     0,    41,
   172,   233,     0,   211,    16,   211,   235,     0,   172,    16,
   211,   235,     0,   174,    16,   211,   235,     0,   211,    16,
   172,   235,     0,   172,    16,   172,   235,     0,   174,    16,
   172,   235,     0,   211,   108,   211,   235,     0,   172,   108,
   211,   235,     0,    50,   186,    51,   108,   211,   235,     0,
   174,   108,   211,   235,     0,   211,   108,   172,   235,     0,
   172,   108,   172,   235,     0,    50,   186,    51,   108,   172,
   235,     0,   211,    16,   157,     0,   211,   108,   157,     0,
   174,   108,   172,   235,     0,    50,   234,    51,     0,     0,
    16,   211,   235,     0,    16,   172,   235,     0,   108,   211,
   235,     0,   108,   172,   235,     0,    16,   157,     0,   108,
   157,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   159,   190,   191,   195,   196,   197,   198,   199,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   217,   218,   219,
   220,   221,   222,   226,   227,   232,   233,   237,   241,   246,
   248,   255,   361,   363,   365,   366,   367,   368,   369,   370,
   372,   373,   375,   376,   377,   378,   379,   380,   386,   387,
   388,   389,   390,   391,   393,   396,   402,   406,   415,   424,
   428,   432,   433,   437,   442,   444,   458,   462,   466,   473,
   474,   479,   484,   489,   490,   495,   503,   514,   528,   529,
   530,   534,   538,   542,   546,   550,   554,   561,   563,   565,
   570,   582,   583,   584,   587,   588,   589,   596,   600,   604,
   609,   615,   620,   627,   633,   644,   646,   647,   651,   658,
   662,   663,   670,   672,   674,   676,   678,   680,   682,   694,
   698,   699,   700,   701,   702,   703,   704,   707,   709,   711,
   713,   715,   717,   719,   721,   723,   725,   727,   729,   731,
   736,   737,   740,   741,   742,   746,   747,   748,   751,   755,
   760,   762,   764,   766,   768,   770,   774,   776,   777,   783,
   784,   785,   787,   789,   791,   793,   799,   800,   802,   803,
   809,   810,   814,   815,   819,   820,   825,   826,   827,   828,
   829,   831,   832,   833,   834,   835,   836,   837,   838,   839,
   840,   841,   847,   848,   849,   850,   851,   852,   853,   854,
   856,   858,   862,   863,   864,   865,   871,   875,   883,   895,
   899,   908,   920,   924,   932,   936,   937,   940,   945,   949,
   954,   958,   965,   968,   969,   972,   973,   976,   977,   980,
   981,   982,   983,   984,   985,   988,   989,   990,   991,   992,
   993,   995,   996,   998,   999,  1001,  1002,  1006,  1008,  1009,
  1010,  1011,  1012,  1013,  1014,  1018,  1020,  1021,  1022,  1027,
  1029,  1030,  1031,  1032,  1033,  1036,  1043,  1050,  1057,  1064,
  1071,  1079,  1080,  1081,  1082,  1083,  1084,  1090,  1094,  1097,
  1100,  1101,  1102,  1103,  1104,  1105,  1108,  1109,  1110,  1113,
  1114,  1115,  1116,  1119,  1120,  1123,  1124,  1127,  1129,  1130,
  1131,  1137,  1138,  1139,  1140,  1141,  1147,  1149,  1150,  1153,
  1156,  1157,  1160,  1161,  1164,  1165,  1168,  1169,  1172,  1173,
  1178,  1179,  1180,  1181,  1182,  1183,  1190,  1192,  1195,  1197,
  1203,  1207,  1212,  1218,  1224,  1230,  1240,  1246,  1252,  1258,
  1267,  1271,  1275,  1281,  1285,  1289,  1295,  1301,  1308,  1316,
  1324,  1330,  1336,  1340,  1347,  1353,  1356,  1360,  1364,  1370,
  1376,  1382,  1389,  1397,  1403,  1418,  1424,  1427,  1435,  1443,
  1449,  1455,  1459,  1468,  1472,  1482,  1483,  1487,  1491,  1501,
  1502,  1510,  1512,  1519,  1521,  1527,  1528,  1532,  1537,  1542,
  1547,  1553,  1557,  1558,  1564,  1565,  1576,  1587,  1588,  1590,
  1592,  1598,  1604,  1612,  1620,  1624,  1628,  1634,  1638,  1644,
  1648,  1654,  1660,  1666,  1667,  1668,  1671,  1681,  1682,  1688,
  1689,  1693,  1694,  1699,  1700,  1701,  1702,  1703,  1706,  1707,
  1708,  1714,  1715,  1716,  1718,  1719,  1720,  1722,  1723,  1724,
  1725,  1727,  1728,  1729,  1730,  1731,  1732,  1733,  1737,  1738,
  1739,  1740,  1741,  1742,  1743
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND","POINTERNULL",
"ARRAY","STRUCT","DOT","UNION","FOPEN","FCLOSE","FILEDECLARATION","FGETS","FPUTS",
"FGETC","FPUTC","MORE","DEFINE","MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE",
"DO","TRUE","FALSE","REPEAT","UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON",
"INTDECLARATION","STRDECLARATION","POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION",
"FLOATDECLARATION","LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR",
"CLOSE_BPAR","OPEN_MPAR","CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP",
"INTER_OR","NON_DETERMINED","SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET",
"ERROR_TOKEN","STRFUNCHEAD","STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY",
"STRFUNCLEN","SIZEOF","SYSTEM","CEIL","FLOOR","ROUND","SIN","COS","TAN","ASIN",
"ACOS","ATAN","SINH","COSH","TANH","EXP","LOG","LOG10","SQRT","ATAN2","POW",
"ABS","FABS","LABS","FMOD","MODF","LDEXP","FREXP","UNSIGNED","SIGNED","MALLOC",
"FREE","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N",
"CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"file_statement","ass_statement","ass_left","leftaddrshift","assign_operator",
"ass_right","rightaddrshift","array","option_ari_exp","point_exp","ari_exp",
"type_cast_alg_exp","option_exp_else_statement","simple_ari_exp","member_in_exp",
"bi_operator","ari_operator","array_exp","option_list_value","option_struct_list_value",
"inner_option_list_value","address_exp","type_cast","casted_element","all_sizeof_type",
"size_of","String_Function","String_Function_head","String_Function_tail","String_Function_cat",
"String_Function_cmp","String_Function_cpy","String_Function_len","str_func_parameter",
"math_function","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","option_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   150,   151,   151,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   153,   153,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   155,   155,   156,
   156,   157,   157,   157,   157,   158,   159,   159,   160,   160,
   160,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   162,   162,   162,   162,   162,   162,   163,   163,   163,
   163,   163,   163,   163,   163,   164,   164,   164,    -1,    -1,
    -1,    -1,   165,   165,   165,   165,   165,   165,   165,   166,
   167,   167,   167,   167,   167,   167,   167,   168,   168,   168,
   168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
   169,   169,   170,   170,   170,   170,   170,   170,   171,   172,
   172,   172,   172,   172,   172,   172,   173,   173,   173,   174,
   174,   174,   174,   174,   174,   174,   175,   175,   175,   175,
   176,   176,   177,   177,   178,   178,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   180,   180,   180,   180,   180,   180,   180,   180,
   181,   181,   182,   182,   182,   182,   183,   183,   183,   184,
   184,   184,   185,   185,   185,   185,   185,   186,   186,   186,
   186,   186,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   188,   188,   189,   189,   189,
   189,   189,   189,   189,   189,   190,   190,   190,   190,   191,
   191,   191,   191,   191,   191,   192,   193,   194,   195,   196,
   197,   198,   198,   198,   198,   198,   198,   199,   199,   199,
   199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
   199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
   199,   200,   200,   200,   200,   200,   201,   201,   201,   201,
   201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   202,   202,   202,   202,   202,   202,   203,   203,   204,   204,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   206,   206,   206,   206,
   206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
   206,   206,   206,   207,   207,   207,   207,   208,   208,   208,
   208,   209,   209,   210,   210,   211,   211,   212,   213,   214,
   215,   216,   216,   216,   217,   217,   218,   218,   218,   218,
   218,   219,   220,   221,   222,   222,   222,   223,   223,   224,
   224,   225,   226,   227,   227,   227,   228,   229,   229,   230,
   230,   231,   231,   232,   232,   232,   232,   232,   233,   233,
   233,   234,   234,   234,   234,   234,   234,   234,   234,   234,
   234,   234,   234,   234,   234,   234,   234,   234,   235,   235,
   235,   235,   235,   235,   235
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     9,     8,
     9,     1,     4,     4,     1,     7,     3,     1,     3,     1,
     0,     4,     4,     1,     1,     4,     2,     2,     2,     2,
     1,     2,     2,     3,     3,     3,     3,     7,     8,    11,
    13,     1,     1,     1,     1,     1,     1,     2,     6,     4,
     5,     5,     8,     8,     2,     2,     2,     0,     6,     7,
     0,     2,     6,     8,     4,     6,     6,     6,     4,     3,
     1,     1,     1,     1,     3,     2,     1,    11,    12,    11,
    11,    17,    18,    17,    18,    19,    18,    17,    18,    17,
     1,     1,     1,     1,     1,    10,     3,     1,     4,     5,
    11,    12,    11,    11,    12,     3,     3,     2,     0,     2,
     2,     2,     7,     6,     4,     3,     1,     3,     3,     5,
     1,     3,     2,     0,     1,     3,     1,     2,     2,     1,
     1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     1,     3,     4,     4,     4,     4,
     4,     4,     3,     3,     3,     0,     2,     2,     2,     2,
     2,     3,     4,     4,     4,     5,     5,     5,     5,     5,
     6,     5,     5,     6,     5,     6,     7,     6,     6,     7,
     6,     6,     5,     7,     6,     1,     4,     1,     2,     2,
     2,     3,     3,     3,     2,     4,     4,     4,     4,     1,
     1,     1,     1,     1,     1,     4,     4,     6,     6,     6,
     4,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     6,     6,     6,     6,     6,     2,     2,
     2,     1,     2,     3,     3,     3,     3,     1,     1,     1,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
     3,     2,     3,     4,     5,     4,     3,     4,     5,     4,
     2,     3,     4,     2,     3,     4,     4,     5,     6,     8,
     7,     4,     3,     5,     8,     0,     4,     3,     4,     4,
     5,     5,     5,     5,     6,     9,     0,     7,     9,     8,
     5,     4,     2,     2,     5,     0,     2,     3,     6,     0,
     2,     3,     2,     3,     2,     1,     3,     1,     1,     1,
     1,     3,     0,     2,     0,     3,     1,     2,     3,     3,
     3,     3,     5,     9,     1,     1,     0,     1,     0,     1,
     0,     7,     7,     2,     1,     0,     5,     2,     0,     4,
     5,     0,     3,     4,     5,     4,     5,     4,     0,     3,
     3,     4,     4,     4,     4,     4,     4,     4,     4,     6,
     4,     4,     4,     6,     3,     3,     4,     3,     0,     3,
     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,     0,     0,    97,
     0,     0,     0,     0,    47,     0,     0,     0,     0,     0,
    51,    52,     0,     0,    45,    92,    95,    94,    96,    93,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   386,     0,     1,    65,    62,     0,    34,    81,     0,
    74,    33,     0,   127,   123,   124,    75,   260,   261,   262,
   264,   263,   265,   121,    37,    38,    39,    35,    36,    50,
    49,   122,     0,     0,    29,    13,    22,     0,   180,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   389,   391,
   390,   185,   183,   184,    17,   167,   175,   189,   190,   192,
   187,   182,   177,   188,   181,   191,    21,    10,     9,    20,
    12,    11,     2,     0,     0,     0,     0,     0,    26,     0,
   180,   308,   309,     0,     0,   388,   310,     0,   302,     0,
     0,    77,     0,    78,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   386,   367,     0,   407,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   185,     0,
   183,   184,   189,   397,   182,     0,   191,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    80,    79,     0,     0,   386,   162,   161,   160,     0,     0,
   126,   123,     0,     0,     0,     0,     0,   376,     0,     0,
   386,    83,   108,     0,     0,     0,     0,     0,    82,   141,
   142,     0,     0,   376,     0,     0,     0,     0,     0,     0,
    27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   183,   184,     0,   189,   182,   191,     0,
   279,   280,   278,   281,   282,   283,   284,   285,   286,   287,
   288,   289,   290,   291,   292,   293,     0,     0,   299,   300,
   301,     0,     0,     0,     0,   219,     0,   221,   218,   220,
   178,   179,   201,   202,     0,   199,   200,   198,   323,   326,
   321,   322,   324,   325,   196,   197,   193,   194,   195,     0,
     0,     8,     6,     7,     5,     4,     0,     0,     0,     0,
   310,     0,   303,   323,   326,     0,     0,     0,     0,     0,
     0,     0,    84,    86,    85,    87,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   356,     0,     0,     0,   393,
     0,    92,    94,    96,    93,     0,     0,   406,   405,     0,
     0,   385,     0,     0,     0,   402,     0,     0,     0,     0,
     0,     0,   148,   143,   144,   204,   205,   145,     0,     0,
    92,    94,    93,     0,     0,     0,     0,   386,   160,     0,
   398,    67,   125,   156,   166,     0,   387,     0,     0,     0,
   448,     0,     0,     0,   356,   356,     0,   273,   274,   276,
     0,   272,   275,   277,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   330,     0,   329,     0,     0,
     0,   123,   124,     0,   121,   122,     0,     0,     0,     0,
     0,     0,     0,     0,   386,   380,     0,   159,   105,     0,
     0,     0,     0,    98,    32,    31,    54,    30,     0,    68,
   120,   449,   449,     0,   449,   449,   449,   449,   449,   449,
   445,   449,   449,   446,   449,   449,    25,    29,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   186,   222,     0,
    92,    94,    93,     0,     0,     0,     0,   248,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   169,   176,   168,     0,   318,   317,   306,   316,   312,   320,
   315,   311,   319,   307,   419,   305,   304,   314,   313,    43,
     0,     0,     0,     0,   119,     0,     0,   115,     0,     0,
     0,     0,     0,   367,   367,   367,     0,   373,     0,     0,
     0,   367,     0,     0,     0,     0,     0,     0,   409,     0,
   384,   383,     0,     0,     0,     0,     0,     0,     0,     0,
   216,   216,   216,   216,   216,   216,     0,     0,   420,     0,
     0,     0,     0,     0,     0,    92,    94,    92,    94,   401,
   160,     0,     0,     0,     0,     0,     0,     0,   400,   399,
   395,     0,     0,     0,     0,   266,   267,     0,     0,     0,
   271,    64,     0,   386,     0,    63,   327,   328,   165,     0,
    92,    94,    93,     0,    40,    48,     0,   426,     0,   424,
     0,   428,    53,    41,    42,   377,   376,     0,   374,    72,
     0,     0,     0,   159,   107,   106,   108,    76,     0,     0,
     0,   436,   433,    73,   443,   439,   437,   434,   447,   441,
   435,   432,   442,   438,    28,     0,   174,     0,   223,   171,
     0,     0,   225,     0,     0,     0,     0,   224,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   249,   251,   250,   327,   328,   258,
   255,   256,   257,   259,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   417,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   367,   344,   367,   367,
   341,   367,   367,   332,   367,     0,     0,   367,     0,   367,
   367,   358,   367,     0,   394,   393,     0,     0,     0,     0,
     0,     0,     0,   408,     0,   403,   382,     0,   147,   206,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   422,   421,     0,   203,     0,     0,     0,     0,
     0,     0,   159,   356,   401,   159,   449,   449,     0,   396,
    58,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    92,    94,   429,   429,   427,   425,     0,
   381,   386,   380,   158,   159,   150,   108,   108,     0,   100,
    69,   454,   449,   449,   455,   449,   449,     0,     0,   170,
     0,     0,     0,     0,   246,   230,     0,   233,     0,   235,
     0,   232,     0,     0,     0,     0,     0,   228,     0,     0,
   229,     0,     0,   226,   227,   243,     0,   254,   252,   253,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   418,     0,   113,     0,   116,   118,   117,     0,
   367,   345,   367,   367,   337,   367,   342,   367,   367,   333,
     0,   353,   367,   367,     0,   331,     0,     0,   367,   359,
   367,   367,   360,   372,   367,   367,     0,   357,     0,   392,
     0,     0,     0,   411,     0,     0,   217,   216,   216,   216,
   210,   212,   211,   207,   209,   208,     0,   149,   423,     0,
   386,   389,     0,   386,   389,   386,   389,     0,     0,   356,
     0,     0,     0,   444,   440,     0,    57,     0,     0,   268,
   269,   270,   159,   164,     0,     0,     0,     0,     0,   431,
   430,    72,   376,   378,   157,   101,   102,   108,   451,   450,
   453,   452,     0,   173,   242,     0,   172,     0,   236,   239,
   241,   238,     0,   231,     0,   234,     0,   245,   294,   295,
   296,   297,   298,     0,     0,     0,     0,     0,   412,     0,
     0,   346,   367,   338,   340,   343,   367,   334,   336,   367,
   367,   352,     0,   347,     0,    71,     0,   362,   361,   363,
   367,   371,     0,   364,     0,    66,     0,   410,     0,     0,
     0,   213,   215,   214,     0,     0,     0,     0,     0,     0,
     0,     0,   386,     0,   386,   389,     0,   150,    88,   163,
    55,     0,    71,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   375,     0,     0,    99,    23,   244,
     0,   237,   240,     0,     0,   114,   356,   339,   335,   354,
   348,     0,     0,   367,    70,     0,   356,   365,     0,     0,
   367,     0,     0,    44,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    89,     0,    60,     0,     0,     0,     0,     0,     0,
     0,     0,    72,   108,   108,   247,     0,     0,   367,     0,
   349,    59,     0,   367,     0,   368,    56,   404,   356,     0,
     0,     0,   159,   159,     0,     0,     0,   159,   159,   159,
   159,     0,     0,     0,     0,     0,     0,   356,    61,     0,
     0,     0,     0,     0,     0,     0,   379,   103,   104,     0,
   367,   351,   367,   367,   370,   367,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   159,
     0,     0,     0,   159,   159,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   416,   355,   350,   366,   369,
     0,   389,   389,     0,   151,   130,   389,   389,     0,   154,
   128,   153,   131,     0,     0,     0,     0,     0,     0,    90,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   415,   413,     0,     0,   146,     0,     0,     0,   389,     0,
     0,   389,   152,   389,   389,     0,   155,   129,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   414,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   389,
    91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   159,   159,     0,   159,
   159,     0,     0,     0,     0,     0,     0,   159,     0,     0,
   159,   159,   159,     0,   140,   138,     0,   134,   132,     0,
     0,     0,   159,   139,   133,   137,   135,     0,   136,     0,
     0,     0
};

static const short yydefgoto[] = {  1370,
     2,    21,   273,   208,   489,  1126,   142,    76,    77,    78,
    79,    80,   479,   484,    81,    82,    83,    84,   262,   476,
   403,   143,   682,   144,   177,   875,   870,   146,   147,   340,
   325,   405,   406,   407,   805,   148,   149,   876,   537,   150,
    87,    88,    89,    90,    91,    92,    93,   441,   151,   352,
   179,   356,   458,   586,   587,   379,   477,   679,   565,   201,
   152,   180,   153,   154,   155,   595,   434,   216,    95,    96,
    97,   390,   795,  1069,    98,   912,  1282,    99,   756,   100,
   620,   101,   669,   156,   692
};

static const short yypact[] = {    -2,
   702,  6683,-32768,-32768,  -109,-32768,-32768,-32768,   702,   702,
   702,   702,  7379,   702,   702,   702,   702,   702,   702,-32768,
    84,    -9,  6775,-32768,    37,   164,   285,    76,   202,-32768,
   210,   246,   269,   291,-32768,   264,   -28,   394,  7479,   448,
-32768,-32768,   397,   444,-32768,-32768,-32768,-32768,-32768,-32768,
  3207,  6683,   426,   449,   617,   633,   642,   674,   681,   723,
   755,   722,   722,   863,    98,    -8,   873,   888,   917,   922,
   941,   338,   100,  1406,-32768,-32768,   765,-32768,-32768,   100,
-32768,-32768,   496,-32768,   311,    66,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   167,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   769,   756,   575,   775,   775,  6775,-32768,  5122,
   945,  7379,  7379,  7379,  7379,  7379,  7379,  7379,  7379,  7379,
  7379,  7379,  7379,  7379,  7379,  7379,  7379,   979,  1024,  7379,
  7379,  7379,  1037,  1042,  1061,   221,  9259,  9259,-32768,-32768,
-32768,-32768,   311,    66,   515,  1273,-32768,-32768,-32768,-32768,
-32768,   167,-32768,-32768,-32768,-32768,   775,   775,   775,   775,
   775,   775,-32768,   702,   702,   702,   702,   702,-32768,  9259,
   942,-32768,-32768,  3638,  6775,-32768,  1416,   912,-32768,  1062,
  6775,   100,   100,   100,   100,   236,   -28,   -28,   -28,   -28,
    19,  1089,   -28,-32768,   998,   -28,  3775,   637,  1002,  6775,
   319,  6683,  6977,  6775,  3354,   198,  6877,  1078,  1101,   889,
   183,   207,  1111,-32768,   215,   992,   943,   968,  1115,  1122,
   492,   492,   492,   492,   492,   492,   492,   386,   991,  1060,
-32768,-32768,   -28,  6291,  1141,-32768,-32768,-32768,  6544,   236,
-32768,   180,  7379,   283,  6683,  6683,  6683,  7077,  7379,   100,
    13,-32768,    57,  6683,  6683,  6683,  6683,   969,-32768,-32768,
-32768,  6977,    19,  7077,    19,    19,    19,  1389,  1389,  7179,
-32768,   702,  1156,   913,  1082,    -5,   122,  1108,   255,  5239,
   320,   605,  1109,    34,   263,   500,  1180,   309,  1211,  4537,
   515,   515,   515,   515,   515,   515,   515,   515,   515,   515,
   515,   515,   515,   515,   515,   515,  7379,  7379,   515,   515,
   515,  7379,  7379,  7379,   284,  1248,    66,-32768,  1259,-32768,
-32768,-32768,-32768,-32768,  9259,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  9259,
  7379,  1417,   192,   192,   -68,  1144,  1230,  7379,  7379,  3912,
  1201,  1001,-32768,    10,    23,  7379,   319,  6775,  6775,  7379,
  7379,  1008,-32768,-32768,-32768,-32768,   261,  1243,  1235,  1250,
  1252,  1255,    31,  1253,  1262,   613,  1256,   675,  1270,  1284,
  1012,    -5,   122,  1108,   255,  4888,   334,-32768,-32768,  1291,
  1300,-32768,  1017,  1281,  6683,-32768,  1314,  4303,  7279,  7279,
   352,   428,-32768,   515,  1226,-32768,-32768,-32768,   925,  1081,
   305,   362,   472,   832,  1103,  1027,    98,  1288,  1303,  4049,
-32768,-32768,-32768,-32768,  1301,  1251,-32768,  1263,  6877,  6877,
-32768,  6683,  1347,  1306,   613,   613,   284,   180,    66,-32768,
  1312,   167,-32768,-32768,  1324,  1343,  1346,  1358,  1353,  1354,
   100,   100,   450,  1363,   606,-32768,   588,-32768,  1287,  3501,
  1158,    34,   263,  1111,   309,  1211,   799,   442,   538,  1365,
  1197,  1254,  1265,    36,   643,  1368,  1366,    74,-32768,  1318,
  7379,    38,  6977,-32768,  1092,  1320,  1320,-32768,  1381,  1325,
-32768,   301,   301,  1392,   301,   301,   301,   301,   301,   301,
-32768,   380,   301,-32768,   380,   301,-32768,   575,  1435,  7379,
  1321,  9259,   501,  9259,   510,   517,  9259,   530,   551,   566,
   571,   634,   573,   574,  1395,  1397,   580,-32768,  1251,  1305,
  1327,  1328,  1330,   733,   592,   850,  1415,-32768,  1426,   111,
   329,   402,   412,   528,   307,   328,   263,  1180,   309,  1211,
  1221,-32768,   515,  1414,   515,   515,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   515,  1474,  1369,-32768,   515,   515,-32768,
   767,  1440,   328,  1359,-32768,  1345,   -28,-32768,   441,  1447,
   -28,   -28,  1371,    -7,    97,    99,  1455,-32768,  1380,   -28,
   459,   148,  1461,    78,  1465,   463,  5005,   364,  6775,   319,
-32768,-32768,  1376,  1492,  4420,  1481,   500,   156,  1489,  4654,
   547,     6,  1500,   547,     6,  1500,  6407,  6977,-32768,  1494,
  1120,  2969,   618,   652,   658,   660,   692,  1395,  1397,  1263,
  1495,  7379,  1498,  4186,  1044,  7379,    19,  1496,  1439,-32768,
   989,   319,  1543,  1503,  1504,-32768,-32768,   492,   492,   492,
-32768,-32768,   -28,  1501,  1303,-32768,-32768,-32768,-32768,  1506,
  1430,  1431,  1436,  1151,-32768,-32768,    19,-32768,  1509,-32768,
  1514,-32768,-32768,-32768,-32768,-32768,  7077,  2767,-32768,-32768,
  3070,  1511,    25,    74,-32768,-32768,  1525,-32768,   969,  1389,
  1389,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1515,    18,   694,-32768,  1116,
  7568,  1518,-32768,  7568,  1519,  7568,  1520,-32768,  7568,  1521,
   696,   710,   716,   660,   720,  9259,   730,  9259,   732,  9259,
  9259,  7568,  1522,  1446,-32768,-32768,-32768,  1449,  1451,-32768,
-32768,-32768,-32768,-32768,  7379,  7379,  7379,  7379,  7379,  1452,
  1453,  1454,   916,  1579,   319,-32768,  1430,  1431,  1436,  1003,
  1533,  1544,  1535,  1536,  1538,   -28,   165,-32768,   113,   223,
-32768,   411,   224,-32768,  1049,  1477,   -28,   621,   -28,   879,
     7,-32768,  1145,  6683,-32768,  1284,  1479,   387,   305,   362,
   472,  1023,   471,  1150,  1552,-32768,-32768,  1545,-32768,-32768,
  1546,  4771,   156,  2868,  1547,  1548,  1549,  1541,  1542,  1550,
  5356,  1554,  1558,-32768,  1120,-32768,  7657,  7746,  7835,   736,
   761,  1557,    74,   613,-32768,    74,   301,   301,  6683,-32768,
-32768,   319,  1555,  1486,  1560,  1562,  1565,  1495,  7379,  7379,
  1570,  1571,  1575,  1505,  1507,  1568,  1568,-32768,-32768,  1577,
-32768,   848,  1368,-32768,    74,-32768,   365,  1525,  1576,-32768,
-32768,-32768,   380,   301,-32768,   380,   301,   702,  7379,-32768,
  7568,  1583,  9259,  1586,-32768,-32768,  7568,-32768,  7568,-32768,
  7568,-32768,  7568,  7924,  8013,  8102,   763,-32768,  7568,  1588,
-32768,  7568,  1589,-32768,-32768,-32768,  7568,-32768,-32768,-32768,
   884,   894,   905,   915,   918,  1590,  1591,  1593,  1505,  1517,
  9259,  1594,-32768,  1507,-32768,   -28,-32768,-32768,-32768,  1596,
     7,-32768,   998,   998,-32768,     7,-32768,   998,   998,-32768,
   -28,-32768,   880,   768,  7379,-32768,  1584,  1598,   998,-32768,
   998,   998,-32768,-32768,   960,   993,  7379,-32768,  1383,-32768,
  1601,   490,   692,   236,  6775,  1432,-32768,   547,     6,  1500,
-32768,-32768,-32768,-32768,-32768,-32768,  5473,-32768,-32768,  5590,
    15,  1602,  5707,   891,  1603,  1289,  1605,  8191,  8280,   613,
  1604,  1606,  1607,-32768,-32768,  1398,-32768,  6683,  1609,-32768,
-32768,-32768,    74,   515,    -1,   136,   609,  1608,  1613,-32768,
-32768,  1368,  7077,-32768,-32768,-32768,-32768,   147,-32768,-32768,
-32768,-32768,   721,   515,-32768,  7568,  1221,  7379,-32768,-32768,
-32768,-32768,  8369,-32768,  7568,-32768,  7568,-32768,-32768,-32768,
-32768,-32768,-32768,  1524,  1527,  1528,  1614,  1616,-32768,  1615,
  1619,-32768,   998,-32768,-32768,-32768,   998,-32768,-32768,   998,
   998,-32768,  7379,-32768,   321,  6683,  1623,-32768,-32768,-32768,
   998,-32768,  7379,-32768,   545,-32768,  6683,-32768,  1624,  1065,
  1625,-32768,-32768,-32768,  5824,  1622,  1630,  5941,  1632,  1633,
  1634,  1635,  1319,  6058,  1331,  1627,  1629,  1640,-32768,-32768,
-32768,  1390,  6683,  1618,  1642,  1643,  1602,  1645,  1646,  1603,
  1647,  1605,  1559,   137,-32768,  1648,    25,-32768,-32768,-32768,
   928,-32768,-32768,  1561,  1651,-32768,   613,-32768,-32768,-32768,
-32768,   456,  7379,   998,  1406,  1639,   613,-32768,   881,  7379,
   998,  1311,   319,-32768,  1652,   803,   804,  1040,  7379,  7379,
   811,   820,  1051,  7379,  7379,  7379,  7379,  1649,  6175,  1653,
  1654,-32768,  1656,-32768,  1657,  1640,   840,  1099,  1659,  1663,
  1666,  1627,  1368,   365,  1525,-32768,  6683,  1667,   998,   950,
-32768,-32768,  1668,   998,   962,-32768,-32768,-32768,   613,   821,
   822,   823,    74,    74,   830,   836,   845,    74,    74,    74,
    74,  7379,   853,   854,  1098,  7379,  7379,   613,-32768,  1592,
  1597,  1675,  1610,  1611,  1676,  1249,-32768,-32768,-32768,  1329,
   998,-32768,   998,   998,-32768,   998,  1689,  8458,  8547,   855,
  1658,  1685,  8636,  8725,   857,  1686,  1690,  1691,  1692,    74,
   859,   864,   865,    74,    74,  1694,  1700,  1701,  1641,  1702,
  1707,  1644,  1650,  1655,  1714,  1188,-32768,-32768,-32768,-32768,
  1450,  1710,  1711,  8814,-32768,-32768,  1712,  1717,  8903,-32768,
-32768,-32768,-32768,  1715,  8992,  9081,   868,  1718,  1719,  1662,
  1626,  1637,  1726,  1638,  1660,  1728,  1729,  1730,  1661,  1579,
-32768,-32768,   163,   338,-32768,  1720,  1731,  1735,  1737,  1740,
  1741,  1742,-32768,  1743,  1744,  9170,-32768,-32768,  1120,  1710,
  1711,  1664,  1712,  1717,  1669,  1671,  1672,  1745,-32768,   758,
  1141,  1746,  1747,  1753,  1750,  1754,  1757,  1764,  1769,  1772,
  1226,  1737,  1742,  1743,  1744,  1680,  7379,  7379,  1773,  7379,
  7379,  1774,  1775,  1776,  1781,  1772,    74,    74,  7379,    74,
    74,  7379,  7379,  7379,  1778,  1768,  1780,    74,  1782,  1783,
    74,    74,    74,  7379,-32768,-32768,  1784,-32768,-32768,  1785,
  1786,  1787,    74,-32768,-32768,-32768,-32768,  1789,-32768,  1797,
  1798,-32768
};

static const short yypgoto[] = {-32768,
-32768,    44,  1326,   218,  1148,   754,     0,-32768,-32768,  -248,
   -56,  -218,    -6,  -654,-32768,  -194,    73,  1229,-32768,  -179,
-32768,   280,   904,  1510,   -13,  -441,-32768,  1497,  -126,-32768,
  1138,  -381,-32768,-32768,  -584,   577,-32768,  1153,-32768,-32768,
   -92,-32768,-32768,-32768,-32768,-32768,-32768,  -132,-32768,   -19,
   -38,  1703,-32768,  -213,  -421,  1563,  -259,  -845,  -200,-32768,
  1033,   350,  1274,   753,-32768,  1066,  1212,  -167,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -785,-32768,-32768,-32768,-32768,
  1041,-32768,  -449,  1677,   297
};


#define	YYLAST		9408


static const short yytable[] = {   145,
   396,    75,   389,   178,   494,   231,   232,  1004,     1,   490,
   321,   322,   214,   644,   645,   456,   608,   612,   615,   671,
   459,   193,   558,   402,   869,   198,   480,   806,   807,   808,
   809,   810,   860,   378,   103,   561,   676,   416,   685,   421,
   170,   239,   193,   347,   168,   512,   804,   378,  1095,   263,
   209,    75,   104,   105,   106,   107,   193,   157,   158,   159,
   160,   161,   162,   169,   248,  1076,   252,   481,   373,   249,
   709,   456,   713,   259,   815,   718,   538,   399,   785,   400,
   579,   266,   491,   264,   424,   315,   181,   193,   274,   445,
   446,   447,   448,   449,   450,   163,   286,   482,   291,   292,
   293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   681,   194,   309,   310,   311,    65,
   767,   621,   513,   210,   240,   186,   924,   193,   440,   440,
   440,   440,   440,   440,   440,   235,   194,   378,   241,   378,
   388,   265,  1096,   323,   324,  1097,   193,   234,   193,   193,
   194,   745,   136,   378,   176,   353,  1105,   456,   141,   456,
   351,   362,   235,    65,   592,   250,   214,   176,   214,   176,
   483,   141,   514,   267,   235,   363,   364,   365,   366,   235,
   393,   251,   268,   286,   409,  1098,  1160,   482,   378,   404,
   164,   351,   165,   166,   167,   263,   168,   193,   263,   323,
   324,    75,  1006,  1007,   209,   378,   800,   342,   343,   344,
   345,   346,  1310,   552,   193,   169,   456,   456,   606,    74,
   457,   194,   266,   608,   770,    65,   773,   250,   803,   467,
   268,   507,   264,   424,   404,   478,   323,   324,    75,   816,
   194,   235,   194,   251,    75,    75,    75,   234,   404,   515,
   404,   187,   635,    75,    75,    75,    75,   425,   368,   188,
  1107,   639,   640,   378,   378,   427,   286,   501,   504,   218,
   315,   621,   193,   193,   269,   781,   536,   210,   266,  1099,
  1161,    85,  1100,  1162,   888,   367,   891,   265,   894,   895,
   265,   194,   921,   540,   541,   189,  -123,  -123,   542,   543,
   544,   857,   167,   687,   168,   517,  1311,   182,   194,   183,
   571,   210,   241,   425,   267,   508,   690,  1207,   190,   394,
  -124,  -124,   269,   169,   268,   417,   263,   553,  -121,  -121,
   211,    85,   437,   545,   555,   556,   351,   136,   566,   567,
   191,   418,   564,   263,   236,   242,   568,   569,    65,   750,
   926,   931,   751,  1108,   752,   512,   545,   231,   232,   427,
   264,  1123,   523,    65,   235,   524,   194,   194,   240,   746,
   267,   395,   286,  1072,  1073,  1074,  1124,   136,   424,   235,
   252,   214,   518,   193,   607,   611,   614,   248,    65,   284,
   214,   214,   249,   240,    75,   690,  1000,  1001,   456,   796,
   136,   617,   982,   459,   235,   482,   351,   192,   691,   753,
    65,    65,   514,   193,   732,   316,   269,   850,   265,   397,
   803,   214,   959,   136,   929,   606,   235,   235,   184,   264,
   185,    75,   623,   803,    65,   265,   193,   871,   813,   572,
   490,   831,   747,   196,   363,   365,   323,   324,   199,   202,
   235,   378,   748,   284,   323,   324,   461,   263,   572,   209,
  1281,   598,   471,   472,   473,   242,   635,   684,   618,   404,
   374,   485,   486,   487,   488,   686,   211,   251,   619,    65,
   621,    85,   667,   750,   211,   236,   751,   691,   752,   624,
   579,   793,   668,   203,  1309,   235,   707,   200,   853,   193,
   438,   438,   438,   438,   438,   438,   438,   251,   193,  1208,
  1209,  1169,   193,   284,   952,   835,   836,   837,   462,   242,
   193,   897,   517,   468,    85,    85,    85,   323,   324,   451,
   251,   183,   210,    85,    85,    85,    85,   323,   324,   193,
  1016,   437,   492,   753,   495,   497,   499,   502,   505,   265,
   528,   711,   408,   268,   913,   440,   440,   440,  1087,   284,
   714,    55,    56,    57,    58,    59,    60,   716,   749,   219,
   443,   443,   443,   443,   443,   443,   443,   653,   667,   794,
   719,   323,   324,   286,   235,  1130,   779,   804,   670,   364,
   788,   607,   220,   654,   546,   214,   286,   408,   250,   625,
  1131,   512,   194,   457,   404,   456,   251,   231,   707,   260,
   261,   408,   603,   408,   251,   272,   514,   250,   823,    65,
   351,   517,   826,   726,   728,   323,   324,   213,   712,   284,
   732,   987,    30,   251,   939,   235,   176,   715,   659,   539,
   323,   324,   740,   572,   717,   269,   573,   525,   657,   641,
   526,   658,   580,   323,   324,    46,    47,   720,    48,    49,
    50,   378,   583,   404,   404,   211,   221,   855,   817,   572,
   323,   324,   323,   324,    85,   588,   724,   284,   721,   725,
   236,   164,   222,   165,   166,   167,   287,   168,   391,   862,
   865,   223,   677,   722,    30,  1168,   236,   249,   723,   284,
   727,   729,   818,   559,   562,  1173,   169,   733,   819,     3,
   726,    85,   318,   323,   324,   455,   546,    46,    47,   741,
    48,    49,    50,   224,   589,  1164,     4,     5,     6,     7,
   225,   901,   902,   903,   904,   905,   228,  1071,   229,   211,
     8,    30,   728,  1106,   871,   712,   884,   609,   613,   616,
   287,     9,  1101,   316,    10,  1102,   584,  1217,   585,  1068,
   885,   456,   323,   324,    46,    47,   886,    48,    49,    50,
   728,   230,   226,   287,  1109,   738,  1236,   455,   739,   715,
   889,   287,   892,    75,  1038,   720,   978,   820,   286,   693,
   958,   695,   696,   697,   698,   699,   700,   286,   701,   702,
   750,   703,   704,   751,   227,   752,   271,  1310,   378,   757,
   270,   979,   758,  1023,   759,   464,   571,   258,   590,   821,
   591,   872,  1053,   712,   546,   993,   994,   164,    75,   165,
   166,   167,   408,   168,    11,    12,    13,   715,    14,    15,
    16,    17,    18,   720,    19,    20,   228,   887,   229,   666,
   573,    30,   169,   512,   514,  1014,   287,   890,   580,   893,
   753,   512,   164,   890,   165,   166,   167,    73,   168,   760,
   514,  1218,  1219,   728,   626,    47,   211,   627,    49,    50,
  1223,   230,  1200,   136,   284,  1201,  1224,   169,   893,   284,
   893,   548,   942,  1051,    65,   728,   284,  1003,   456,   240,
   742,  1311,   249,   512,   514,  1254,-32768,  1259,   456,  1265,
   235,  1013,   233,   284,  1266,   728,   827,  1321,  1296,   378,
   378,  1055,   243,   761,   323,   324,   287,   438,   438,   438,
  1180,  1181,  1178,  1065,  1029,  1070,  1174,   244,  1185,   423,
   248,  1079,  1202,   464,  1030,   249,   846,  1186,   712,   715,
  1220,   357,   510,   286,   609,  1031,   286,   712,   909,   286,
   456,   910,   287,   715,   622,  1032,   245,   408,  1033,   863,
   866,   246,  1225,  1061,   287,   323,   324,    73,  1166,   456,
  1231,  1232,   893,   228,   893,   229,   712,    75,    30,   404,
   247,   715,  1267,   431,   290,   893,   287,   443,   443,   443,
   378,   949,   260,   261,  1111,  1213,   323,   324,   432,   323,
   324,    46,    47,   464,    48,    49,    50,  1216,   230,   323,
   324,   433,   358,   358,   359,   359,   408,   408,   307,   432,
   323,   324,   858,   378,    94,   358,   287,   359,   378,  1122,
   323,   324,   428,   323,   324,   909,   986,  1063,   914,  1129,
   318,   557,   392,   323,   324,    75,  -122,  -122,   570,   348,
   349,   286,   934,    85,   286,   724,    75,   601,   953,   195,
   286,    62,    63,   308,   254,   323,   324,   630,   255,   256,
   257,   284,   724,   215,    94,  1182,   312,   323,   324,   378,
   284,   313,    75,   724,   825,   254,  1187,   238,    94,   255,
   256,   257,   429,   935,   430,   253,   560,   563,    85,  1170,
   314,   358,   253,   359,    73,  1134,  1175,   228,   358,   229,
   359,   548,    30,   984,   985,  1183,  1184,   358,   422,   359,
  1188,  1189,  1190,  1191,   452,   286,   185,   429,   376,   430,
   724,  1203,   288,  1233,  1204,   628,    47,   548,   629,    49,
    50,   -65,   230,   960,   429,   451,   430,   596,   946,  1009,
  1010,   426,  1011,  1012,   435,   228,    75,   229,   319,   815,
    30,   436,   399,   287,   400,   358,   326,   359,  1230,   360,
   361,   287,  1234,  1235,   254,   378,   287,   453,   255,   256,
   257,   911,  1280,   844,    47,   249,   845,    49,    50,   947,
   230,  1205,   255,   256,   257,  1092,   288,   -65,   665,   509,
   287,   -65,   -65,   -65,   253,   253,   253,   253,    94,   369,
   370,   371,   372,   375,   182,   377,   596,   511,   380,   215,
   529,   327,   328,   242,    94,   516,   527,   215,   419,   335,
   336,   323,   324,   337,   338,   339,   284,   673,    73,   284,
  1285,   528,   284,   442,   442,   442,   442,   442,   442,   442,
   358,   431,   359,   263,   254,   454,   288,    85,   255,   256,
   257,   465,    94,  1125,   268,   169,   469,    94,    94,    94,
   554,   326,   253,   574,  1132,   575,    94,    94,    94,    94,
   576,  1243,   577,   581,  1244,   493,    73,   496,   498,   500,
   503,   506,   582,   254,   674,   578,   427,   255,   256,   257,
  1125,   593,   288,  1337,  1338,   675,  1340,  1341,   354,   355,
   331,   332,   333,   334,   594,  1348,   323,   324,  1351,  1352,
  1353,   599,   600,   326,   602,    85,   327,   328,   248,  1081,
  1363,   621,   632,   249,   335,   336,    85,   549,   337,   338,
   339,  1245,   408,   633,   284,   636,   642,   284,   637,   643,
   254,  1177,   646,   284,   255,   256,   257,   604,   248,  1148,
   638,   254,    85,   249,   647,   255,   256,   257,   287,  1246,
   248,  1150,   288,   648,  1210,   249,   649,   287,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   650,   465,
   337,   338,   339,   651,   652,   377,    28,    29,   678,    31,
    32,    33,    34,   656,   660,   672,   680,   254,   215,   253,
   254,   255,   256,   257,   255,   256,   257,    94,   284,   797,
   288,   683,   257,   238,   688,   254,  1066,   689,   373,   255,
   256,   257,   694,  1154,   706,   730,    85,   731,   708,   631,
   734,    30,   288,  1091,   735,   736,  1165,   737,    55,    56,
    57,    58,    59,    60,    94,   743,   754,    28,    29,   549,
    31,    32,    33,    34,    46,    47,   744,    48,    49,    50,
   755,   359,   254,   253,   253,   655,   255,   256,   257,   254,
   423,   139,   215,   255,   256,   257,   254,   424,   766,  1283,
   255,   256,   257,   176,   254,   776,   319,   777,   255,   256,
   257,    86,   254,   784,   253,   787,   255,   256,   257,    55,
    56,    57,    58,    59,    60,   165,   166,   167,   798,   168,
  1286,   799,    72,   354,   355,   331,   332,   333,   334,   801,
   804,   323,   324,   287,   814,   822,   287,   824,   169,   287,
   829,   430,   832,   833,   834,   839,   840,   841,   842,   848,
   212,    86,   580,   843,   849,   482,   856,   868,   877,   879,
   881,   883,   897,   898,   237,    86,   899,   549,   900,   906,
   907,   908,   911,   915,   916,   917,   918,   859,   919,   580,
   937,   951,   954,  1284,   955,   956,   964,   965,   618,   989,
   961,   962,   963,   465,   968,   966,   980,   988,   667,   763,
   990,   377,   991,   764,   765,   992,   769,   772,   775,   285,
   995,   996,   778,   780,   783,   997,   786,  1002,   253,   215,
   253,  1008,   998,  1016,   999,  1018,  1056,   288,  1025,  1027,
  1034,  1035,   288,  1036,  1037,   317,  1041,  1039,  1057,   288,
  1067,   287,  1077,  1080,   287,  1082,  1089,  1115,  1103,  1088,
   287,  1093,  1090,  1104,  1114,  1116,   288,  1096,  1117,   828,
  1099,  1101,  1127,  1156,  1133,  1135,  1139,  1151,   102,  1152,
   442,   442,   442,   285,  1140,   838,  1144,  1145,  1146,  1147,
  1153,  1157,  1172,  1076,  1158,    86,  1079,  1081,  1163,   847,
  1167,  1179,  1159,  1192,  1161,  1198,   212,  1196,  1197,  1148,
  1199,    86,  1206,  1255,   212,   237,  1150,  1211,  1214,  1237,
  1239,  1242,   864,   867,  1238,   287,   981,   217,   102,   983,
   439,   439,   439,   439,   439,   439,   439,  1240,  1241,  1251,
  1256,  1260,   102,   285,  1270,  1261,  1262,  1263,   463,    86,
  1271,  1272,  1274,   317,    86,    86,    86,  1275,  1005,  1279,
  1287,  1288,  1290,    86,    86,    86,    86,  1291,  1273,   264,
  1293,  1276,  1300,  1297,  1298,  1299,  1302,  1277,  1305,  1306,
  1307,  1312,  1278,  1301,  1303,  1313,   289,  1314,  1308,   285,
  1315,  1316,  1317,  1318,  1319,  1326,  1371,  1372,   920,   923,
  1327,  1328,   928,  1329,  1330,   933,  1304,  1332,  1331,   938,
  1322,   941,   320,   945,  1333,  1323,    94,  1324,  1325,  1334,
   253,   551,  1335,  1355,   547,   253,  1336,  1339,  1342,  1343,
  1344,  1345,  1354,   705,   288,  1356,   861,  1358,  1359,  1364,
  1365,  1366,  1367,   288,  1369,   812,  1155,   873,   341,   762,
   289,   950,   830,   969,     0,     0,     0,     0,     0,   285,
     0,    94,   102,     0,     0,     0,   878,     0,   880,     0,
     0,   882,     0,   217,     0,     0,   463,     0,   102,     0,
     0,   217,     0,     0,   896,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   212,  1094,   444,   444,   444,
   444,   444,   444,   444,    86,     0,     0,   285,     0,     0,
   237,     0,     0,     0,     0,   466,   102,     0,     0,     0,
   470,   102,   102,   102,     0,     0,   237,     0,     0,   285,
   102,   102,   102,   102,     0,     0,     0,     0,     0,     0,
     0,    86,     0,     0,     0,     0,   547,     0,  1040,     0,
     0,     0,     0,  1043,     0,     0,   289,     0,  1047,     0,
     0,     0,     0,  1050,     0,     0,     0,     0,     0,   212,
   878,   882,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   317,   253,     0,    94,     0,     0,     0,
     0,   550,     0,     0,     0,     0,     0,     0,     0,   288,
     0,     0,   288,     0,     0,   288,     0,     0,   710,     0,
   710,     0,     0,   710,     0,     0,     0,     0,     0,     0,
    94,     0,     0,  1015,     0,     0,   289,     0,     0,  1019,
     0,  1020,     0,  1021,     0,  1022,     0,   878,   882,     0,
     0,  1024,     0,   466,  1026,     0,     0,     0,     0,  1028,
     0,     0,     0,     0,   547,     0,     0,     0,     0,     0,
     0,     0,   217,     0,     0,     0,     0,     0,     0,     0,
     0,   102,     0,     0,   289,     0,     0,     0,     0,     0,
   463,     0,     0,     0,     0,     0,  1221,  1222,    94,     0,
     0,  1226,  1227,  1228,  1229,     0,   289,     0,     0,    94,
     0,     0,     0,     0,     0,     0,   212,   288,   102,     0,
   288,     0,     0,   550,   285,     0,   288,     0,     0,   285,
     0,     0,     0,     0,     0,    94,   285,     0,     0,     0,
  1024,  1026,     0,  1264,     0,     0,   217,  1268,  1269,     0,
     0,     0,     0,   285,     0,     0,   768,   771,   774,     0,
   320,     0,     0,     0,   782,     0,     0,   439,   439,   439,
     0,     0,     0,     0,     0,     0,     0,     0,  1110,     0,
     0,     0,     0,     0,     0,  1026,     0,  1112,     0,  1113,
     0,   288,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
     0,     0,     0,     0,     0,     0,     0,   710,     0,     0,
   710,     0,   710,     0,     0,   710,     0,     0,     0,     0,
     0,   550,   710,     0,   710,     0,   710,   710,   710,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1346,  1347,     0,  1349,  1350,     0,     0,   466,     0,     0,
     0,  1357,     0,     0,  1360,  1361,  1362,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1368,     0,     0,     0,
     0,     0,     0,   217,     0,     0,     0,     0,     0,     0,
     0,   289,     0,     0,     0,     0,   289,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   289,   285,     0,   710,   710,   710,     0,     0,     0,     0,
   285,     0,     0,     0,   444,   444,   444,     0,     0,   922,
     0,   925,   927,     0,   930,   932,     0,   936,    86,     0,
   940,     0,   943,   944,     0,   948,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   710,     0,  1017,
     0,   878,     0,   710,     0,   710,   878,   710,     0,   710,
   710,   710,   710,     0,     0,   710,     0,     0,   710,     0,
     0,     0,     0,   710,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1026,     0,     0,     0,
     0,  1026,     0,     0,     0,     0,     0,     0,   878,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1026,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   102,     0,     0,    86,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   710,   710,   285,     0,   289,   285,
     0,     0,   285,  1042,     0,  1044,  1045,   289,  1046,     0,
  1048,  1049,     0,     0,     0,  1052,  1054,    86,     0,     0,
     0,  1058,     0,  1059,  1060,   102,     0,  1062,  1064,     0,
     0,     0,   710,     0,     0,     0,     0,     0,     0,   710,
     0,   710,     0,   710,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    86,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    86,     0,     0,     0,
     0,     0,     0,     0,   285,     0,     0,   285,     0,     0,
     0,     0,     0,   285,     0,     0,     0,     0,     0,     0,
     0,     0,    86,     0,     0,  1118,     0,     0,     0,  1119,
     0,     0,  1120,  1121,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1128,     0,     0,     0,     0,     0,     0,
   102,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   289,     0,     0,   289,     0,     0,   289,
     0,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     0,     0,     0,     0,   102,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    86,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1171,     0,     0,     0,
     0,     0,     0,  1176,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   710,   710,     0,     0,     0,   710,
   710,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1212,   102,     0,     0,     0,  1215,     0,     0,     0,
     0,     0,     0,   102,     0,     0,     0,     0,     0,     0,
   710,   289,     0,     0,   289,   710,     0,     0,     0,     0,
   289,   710,   710,     0,     0,     0,     0,   851,     0,   102,
     0,     0,   108,  1247,     0,  1248,  1249,     0,  1250,   109,
     0,     0,     0,     0,    28,    29,     0,    31,    32,    33,
    34,     0,   710,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   398,     0,     0,   399,
     0,   400,     0,     0,     0,   289,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   111,   102,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   957,     0,
     0,     0,     0,   108,     0,     0,     0,     0,     0,     0,
   109,     0,     0,   136,     0,    28,    29,     0,    31,    32,
    33,    34,     0,   137,   401,     0,     0,   138,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   852,   176,     0,   139,   140,   141,     0,   610,     0,     0,
   399,     0,   400,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   111,     0,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   394,
     0,     0,     0,     0,   108,     0,     0,     0,     0,     0,
     0,   109,     0,     0,   136,     0,    28,    29,     0,    31,
    32,    33,    34,     0,   137,    65,     0,     0,   138,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    72,   176,     0,   139,   140,   141,     0,   110,     0,
     0,   395,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   111,     0,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   854,     0,     0,     0,     0,   108,     0,     0,     0,     0,
     0,     0,   109,     0,     0,   136,     0,    28,    29,     0,
    31,    32,    33,    34,     0,   137,    65,     0,     0,   138,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,     0,     0,   139,   140,   141,     0,   110,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   111,     0,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   136,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   137,    65,     0,     0,
   138,     0,     0,     0,     0,     0,     0,     0,     0,    22,
     0,     0,   204,    72,    24,    25,   139,   140,   141,   171,
     0,    26,     0,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,   172,   173,    37,    38,    39,    40,     0,
    41,    42,    43,     0,    44,    45,     0,     0,     0,    46,
    47,     0,    48,    49,    50,     0,   205,     0,     0,    52,
     0,     0,     0,    53,     0,     0,     0,     0,     0,     0,
     0,    54,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   111,    61,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,     0,    62,
    63,     0,    64,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   136,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,   206,     0,     0,   138,     0,    66,
   207,    67,    68,    69,    70,    71,     0,     0,     0,     0,
    72,   176,    73,   139,   140,   141,    22,     0,     0,   204,
     0,    24,    25,     0,     0,     0,   171,     0,   410,     0,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
   172,   173,    37,    38,    39,    40,     0,    41,    42,    43,
     0,    44,    45,     0,     0,     0,   411,    47,     0,   412,
   384,   413,     0,   205,     0,     0,    52,     0,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,    54,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   111,
    61,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,     0,   414,   415,     0,    64,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   136,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   137,   206,     0,     0,   138,     0,    66,   207,    67,    68,
    69,    70,    71,     0,     0,     0,     0,    72,   176,   387,
   139,   140,   141,    22,     0,     0,   204,     0,    24,    25,
     0,     0,     0,   171,     0,    26,     0,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,   172,   173,    37,
    38,    39,    40,     0,    41,    42,    43,     0,    44,    45,
     0,     0,     0,   661,    47,     0,   662,    49,   663,     0,
   205,     0,     0,    52,     0,     0,     0,    53,     0,     0,
     0,     0,     0,     0,     0,    54,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   111,    61,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,     0,   664,    63,     0,    64,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   136,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,   206,     0,
     0,   138,     0,    66,   207,    67,    68,    69,    70,    71,
     0,     0,     0,   108,    72,   176,    73,   139,   140,   141,
   171,     0,   275,     0,     0,    28,    29,     0,    31,    32,
    33,    34,     0,     0,   172,   173,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   276,     0,     0,   277,   278,   279,     0,   350,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   111,     0,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,     0,
   281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,    65,     0,     0,   138,     0,
     0,   175,     0,     0,     0,     0,     0,     0,     0,     0,
   108,    72,   176,   283,   139,   140,   141,   109,     0,   381,
     0,   229,    28,    29,    30,    31,    32,    33,    34,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   382,    47,     0,
   383,   384,   385,     0,   386,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   111,     0,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,     0,   281,   282,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   136,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,    65,     0,     0,   138,     0,   240,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   108,    72,     0,
   387,   139,   140,   141,   171,     0,   275,     0,     0,    28,
    29,     0,    31,    32,    33,    34,     0,     0,   172,   173,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   519,     0,     0,   520,   278,   521,
     0,   350,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   111,     0,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,     0,   522,   282,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   136,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,    65,
     0,     0,   138,     0,     0,   175,     0,     0,     0,     0,
     0,     0,     0,     0,   108,    72,   176,   283,   139,   140,
   141,   171,     0,   275,     0,     0,    28,    29,     0,    31,
    32,    33,    34,     0,     0,   172,   173,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   276,     0,     0,   277,   278,   279,     0,   634,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   111,     0,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   136,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,    65,     0,     0,   138,
     0,     0,   207,     0,     0,     0,     0,     0,     0,     0,
     0,   108,    72,   176,   283,   139,   140,   141,   171,     0,
   275,     0,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,   172,   173,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   519,     0,
     0,   520,   278,   521,     0,   634,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   111,     0,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,     0,   522,   282,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   136,     0,     0,     0,     0,     0,   108,     0,
     0,     0,   137,    65,     0,   109,   138,   275,     0,   207,
    28,    29,     0,    31,    32,    33,    34,     0,     0,    72,
   176,   283,   139,   140,   141,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   276,     0,     0,   277,   278,
   279,     0,   605,     0,     0,   399,     0,   400,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   111,     0,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,     0,   281,   282,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   136,
     0,     0,     0,     0,     0,   108,     0,     0,     0,   137,
   401,     0,   109,   138,   275,     0,     0,    28,    29,     0,
    31,    32,    33,    34,     0,     0,    72,   176,   283,   139,
   140,   141,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   519,     0,     0,   520,   278,   521,     0,   605,
     0,     0,   399,     0,   400,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   111,     0,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,     0,   522,   282,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   136,     0,     0,     0,
     0,     0,   108,     0,     0,     0,   137,   401,     0,   109,
   138,   530,     0,     0,    28,    29,    30,    31,    32,    33,
    34,     0,     0,    72,   176,   283,   139,   140,   141,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   531,
    47,     0,   532,    49,   533,     0,   110,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   111,     0,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,     0,   534,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   136,     0,     0,     0,     0,     0,   108,
     0,     0,     0,   137,    65,     0,   109,   138,   275,     0,
     0,    28,    29,     0,    31,    32,    33,    34,     0,     0,
    72,   176,   535,   139,   140,   141,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   276,     0,     0,   277,
   278,   279,     0,   802,     0,     0,   399,     0,   400,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   111,
     0,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,     0,   281,   282,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   136,     0,     0,     0,     0,     0,   108,     0,     0,     0,
   137,    65,     0,   109,   138,   275,     0,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,    72,     0,   283,
   139,   140,   141,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   519,     0,     0,   520,   278,   521,     0,
   802,     0,     0,   399,     0,   400,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   111,     0,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,     0,   522,   282,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   136,     0,     0,
     0,     0,     0,   108,     0,     0,     0,   137,    65,     0,
   109,   138,   275,     0,     0,    28,    29,     0,    31,    32,
    33,    34,     0,     0,    72,     0,   283,   139,   140,   141,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   519,     0,     0,   520,   278,   521,     0,   597,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   111,     0,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,     0,
   522,   282,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   136,     0,     0,     0,     0,     0,
   108,     0,     0,     0,   137,   206,     0,   109,   138,   275,
   240,     0,    28,    29,     0,    31,    32,    33,    34,     0,
     0,    72,     0,   283,   139,   140,   141,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   789,     0,     0,
   790,   278,   791,     0,   597,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   111,     0,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,     0,   792,   282,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   136,     0,     0,     0,     0,     0,   108,     0,     0,
     0,   137,    65,     0,   109,   138,   275,   240,     0,    28,
    29,     0,    31,    32,    33,    34,     0,     0,    72,     0,
   283,   139,   140,   141,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   276,     0,     0,   277,   278,   279,
     0,   280,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   111,     0,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,     0,   281,   282,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   136,     0,
     0,     0,     0,     0,   108,     0,     0,     0,   137,    65,
     0,   109,   138,   275,     0,     0,    28,    29,     0,    31,
    32,    33,    34,     0,     0,    72,     0,   283,   139,   140,
   141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   519,     0,     0,   520,   278,   521,     0,   280,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   111,     0,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     0,   522,   282,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   136,     0,     0,     0,     0,
     0,   108,     0,     0,     0,   137,    65,     0,   109,   138,
   275,     0,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,    72,     0,   283,   139,   140,   141,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   519,     0,
     0,   520,   278,   521,     0,   967,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   111,     0,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,     0,   522,   282,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   136,     0,     0,     0,     0,     0,   108,     0,
     0,     0,   137,    65,     0,   109,   138,   275,     0,     0,
    28,    29,     0,    31,    32,    33,    34,     0,     0,    72,
     0,   283,   139,   140,   141,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   789,     0,     0,   790,   278,
   791,     0,   280,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   111,     0,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,     0,   792,   282,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   136,
     0,     0,     0,     0,     0,   108,     0,     0,     0,   137,
    65,     0,   109,   138,   275,     0,     0,    28,    29,     0,
    31,    32,    33,    34,     0,     0,    72,     0,   283,   139,
   140,   141,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   276,     0,     0,   277,   278,   279,     0,  1075,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   111,     0,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,     0,   281,   282,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   136,     0,     0,     0,
     0,     0,   108,     0,     0,     0,   137,    65,     0,   109,
   138,   275,     0,     0,    28,    29,     0,    31,    32,    33,
    34,     0,     0,    72,     0,   283,   139,   140,   141,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   276,
     0,     0,   277,   278,   279,     0,  1078,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   111,     0,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,     0,   281,
   282,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   136,     0,     0,     0,     0,     0,   108,
     0,     0,     0,   137,    65,     0,   109,   138,   275,     0,
     0,    28,    29,     0,    31,    32,    33,    34,     0,     0,
    72,     0,   283,   139,   140,   141,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1136,     0,     0,  1137,
   278,   521,     0,   280,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   111,
     0,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,     0,  1138,   282,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   136,     0,     0,     0,     0,     0,   108,     0,     0,     0,
   137,    65,     0,   109,   138,   275,     0,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,    72,     0,   283,
   139,   140,   141,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1141,     0,     0,  1142,   278,   521,     0,
   280,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   111,     0,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,     0,  1143,   282,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   136,     0,     0,
     0,     0,     0,   108,     0,     0,     0,   137,    65,     0,
   109,   138,   275,     0,     0,    28,    29,     0,    31,    32,
    33,    34,     0,     0,    72,     0,   283,   139,   140,   141,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   276,     0,     0,   277,   278,   279,     0,  1149,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   111,     0,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,     0,
   281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   136,     0,     0,     0,     0,     0,
   108,     0,     0,     0,   137,    65,     0,   109,   138,   275,
     0,     0,    28,    29,     0,    31,    32,    33,    34,     0,
     0,    72,     0,   283,   139,   140,   141,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1193,     0,     0,
  1194,   278,   521,     0,   280,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   111,     0,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,     0,  1195,   282,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   136,     0,     0,     0,     0,   108,     0,     0,     0,
     0,   137,    65,   109,     0,   138,     0,     0,    28,    29,
    30,    31,    32,    33,    34,     0,     0,     0,    72,     0,
   283,   139,   140,   141,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    46,    47,     0,    48,    49,    50,     0,
   280,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   111,     0,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,     0,   455,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   136,     0,     0,
     0,     0,   108,     0,     0,     0,     0,   137,    65,   109,
     0,   138,     0,     0,    28,    29,    30,    31,    32,    33,
    34,     0,     0,     0,    72,     0,     0,   139,   140,   141,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
    47,     0,    48,    49,    50,     0,   811,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   111,     0,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,     0,   455,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   136,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,    65,     0,     0,   138,     0,     0,
     0,     0,     0,     0,     0,     0,    22,     0,     0,    23,
    72,    24,    25,   139,   140,   141,     0,     0,    26,     0,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
     0,     0,    37,    38,    39,    40,     0,    41,    42,    43,
     0,    44,    45,     0,     0,     0,    46,    47,     0,    48,
    49,    50,     0,   460,     0,     0,    52,     0,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,    54,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,     0,
    61,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    62,    63,     0,    64,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   136,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    65,     0,     0,     0,     0,    66,     0,    67,    68,
    69,    70,    71,     0,     0,    22,     0,    72,    23,    73,
    24,    25,     0,     0,     0,     0,     0,    26,     0,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,     0,
     0,    37,    38,    39,    40,     0,    41,    42,    43,     0,
    44,    45,     0,     0,     0,    46,    47,     0,    48,    49,
    50,     0,    51,     0,     0,    52,     0,     0,     0,    53,
     0,     0,     0,     0,     0,     0,     0,    54,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,     0,    61,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   108,     0,     0,     0,     0,    62,    63,   171,    64,     0,
     0,     0,    28,    29,     0,    31,    32,    33,    34,     0,
     0,   172,   173,     0,     0,     0,     0,     0,     0,     0,
    65,     0,     0,     0,     0,    66,     0,    67,    68,    69,
    70,    71,     0,     0,   174,     0,    72,     0,    73,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   111,     0,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,     0,     0,     0,     0,
     0,     0,   108,     0,     0,     0,     0,     0,     0,   171,
     0,   136,     0,     0,    28,    29,     0,    31,    32,    33,
    34,   137,    65,   172,   173,   138,     0,     0,   175,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    72,   176,
     0,   139,   140,   141,     0,     0,   420,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   111,     0,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,     0,     0,
     0,     0,   108,     0,     0,     0,     0,     0,     0,   109,
     0,     0,     0,   136,    28,    29,     0,    31,    32,    33,
    34,     0,     0,   137,    65,     0,     0,   138,     0,     0,
   207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    72,   176,     0,   139,   140,   141,   398,     0,     0,   399,
     0,   400,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   111,     0,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,     0,     0,
     0,     0,   108,     0,     0,     0,     0,     0,     0,   109,
     0,     0,     0,   136,    28,    29,     0,    31,    32,    33,
    34,     0,     0,   137,   401,     0,     0,   138,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    72,   176,     0,   139,   140,   141,   398,     0,     0,   399,
     0,   400,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   111,     0,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,     0,     0,
     0,     0,     0,     0,   108,     0,     0,     0,     0,     0,
     0,   171,     0,   474,     0,     0,    28,    29,     0,    31,
    32,    33,    34,   137,   401,   172,   173,   138,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   475,   176,     0,   139,   140,   141,     0,     0,   110,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   111,     0,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     0,     0,     0,     0,   108,     0,     0,     0,     0,     0,
     0,   109,     0,     0,     0,   136,    28,    29,     0,    31,
    32,    33,    34,     0,     0,   137,    65,     0,     0,   138,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,   176,     0,   139,   140,   141,   610,     0,
     0,   399,     0,   400,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   111,     0,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     0,     0,     0,     0,   108,     0,     0,     0,     0,     0,
     0,   109,     0,     0,     0,   136,    28,    29,     0,    31,
    32,    33,    34,     0,     0,   137,    65,     0,     0,   138,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,   176,     0,   139,   140,   141,   110,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   111,     0,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     0,     0,     0,     0,   108,     0,     0,     0,     0,     0,
     0,   109,     0,     0,     0,   136,    28,    29,     0,    31,
    32,    33,    34,     0,     0,   137,    65,     0,     0,   138,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,     0,     0,   139,   140,   141,   197,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   111,     0,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   109,     0,     0,     0,     0,    28,    29,     0,    31,    32,
    33,    34,     0,     0,     0,   136,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,    65,     0,     0,   138,
     0,     0,     0,     0,     0,     0,     0,   110,     0,     0,
     0,     0,    72,     0,     0,   139,   140,   141,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   111,     0,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   109,
     0,     0,   874,     0,    28,    29,     0,    31,    32,    33,
    34,     0,     0,     0,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,    65,     0,     0,   138,     0,
     0,     0,     0,     0,     0,     0,   970,     0,     0,     0,
     0,    72,     0,     0,   139,   140,   141,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   111,     0,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   109,     0,
     0,   874,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   136,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,    65,     0,     0,   138,     0,     0,
     0,     0,     0,     0,     0,   973,     0,     0,     0,     0,
   971,     0,     0,   972,   140,   141,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   111,     0,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   109,     0,     0,
   874,     0,    28,    29,     0,    31,    32,    33,    34,     0,
     0,     0,   136,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,    65,     0,     0,   138,     0,     0,     0,
     0,     0,     0,     0,   110,     0,     0,     0,     0,   974,
     0,     0,   975,   140,   141,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   111,     0,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   109,     0,     0,   874,
     0,    28,    29,     0,    31,    32,    33,    34,     0,     0,
     0,   136,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,    65,     0,     0,   138,     0,     0,     0,     0,
     0,     0,     0,   110,     0,     0,     0,     0,   976,     0,
     0,   977,   140,   141,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   111,
     0,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   109,     0,     0,   874,     0,
    28,    29,     0,    31,    32,    33,    34,     0,     0,     0,
   136,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   137,    65,     0,     0,   138,     0,     0,     0,     0,     0,
     0,     0,   110,     0,     0,     0,     0,   971,     0,     0,
   139,   140,   141,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   111,     0,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   109,     0,     0,   874,     0,    28,
    29,     0,    31,    32,    33,    34,     0,     0,     0,   136,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
    65,     0,     0,   138,     0,     0,     0,     0,     0,     0,
     0,   110,     0,     0,     0,     0,   974,     0,     0,   139,
   140,   141,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   111,     0,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   109,     0,     0,   874,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   136,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,    65,
     0,     0,   138,     0,     0,     0,     0,     0,     0,     0,
   110,     0,     0,     0,     0,   976,     0,     0,   139,   140,
   141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   111,     0,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   109,     0,     0,   874,     0,    28,    29,     0,
    31,    32,    33,    34,     0,     0,     0,   136,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,    65,     0,
     0,   138,     0,     0,     0,     0,     0,     0,     0,  1084,
     0,     0,     0,     0,  1083,     0,     0,   139,   140,   141,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   111,     0,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   109,     0,     0,   874,     0,    28,    29,     0,    31,
    32,    33,    34,     0,     0,     0,   136,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   137,    65,     0,     0,
   138,     0,     0,     0,     0,     0,     0,     0,   110,     0,
     0,     0,     0,  1085,     0,     0,  1086,   140,   141,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   111,     0,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   109,     0,     0,   874,     0,    28,    29,     0,    31,    32,
    33,    34,     0,     0,     0,   136,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,    65,     0,     0,   138,
     0,     0,     0,     0,     0,     0,     0,   110,     0,     0,
     0,     0,  1085,     0,     0,   139,   140,   141,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   111,     0,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   109,
     0,     0,   874,     0,    28,    29,     0,    31,    32,    33,
    34,     0,     0,     0,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,    65,     0,     0,   138,     0,
     0,     0,     0,     0,     0,     0,   110,     0,     0,     0,
     0,   971,     0,     0,  1252,   140,   141,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   111,     0,   112,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   109,     0,
     0,   874,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   136,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,    65,     0,     0,   138,     0,     0,
     0,     0,     0,     0,     0,   110,     0,     0,     0,     0,
   974,     0,     0,  1253,   140,   141,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   111,     0,   112,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   109,     0,     0,
   874,     0,    28,    29,     0,    31,    32,    33,    34,     0,
     0,     0,   136,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,    65,     0,     0,   138,     0,     0,     0,
     0,     0,     0,     0,   110,     0,     0,     0,     0,   971,
     0,     0,  1257,   140,   141,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   111,     0,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   109,     0,     0,   874,
     0,    28,    29,     0,    31,    32,    33,    34,     0,     0,
     0,   136,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,    65,     0,     0,   138,     0,     0,     0,     0,
     0,     0,     0,   110,     0,     0,     0,     0,   974,     0,
     0,  1258,   140,   141,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   111,
     0,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   109,     0,     0,   874,     0,
    28,    29,     0,    31,    32,    33,    34,     0,     0,     0,
   136,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   137,    65,     0,     0,   138,     0,     0,     0,     0,     0,
     0,     0,   110,     0,     0,     0,     0,  1085,     0,     0,
  1289,   140,   141,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   111,     0,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   109,     0,     0,   874,     0,    28,
    29,     0,    31,    32,    33,    34,     0,     0,     0,   136,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
    65,     0,     0,   138,     0,     0,     0,     0,     0,     0,
     0,   110,     0,     0,     0,     0,  1085,     0,     0,  1292,
   140,   141,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   111,     0,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   109,     0,     0,   874,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   136,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,    65,
     0,     0,   138,     0,     0,     0,     0,     0,     0,     0,
   110,     0,     0,     0,     0,   971,     0,     0,  1294,   140,
   141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   111,     0,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   109,     0,     0,   874,     0,    28,    29,     0,
    31,    32,    33,    34,     0,     0,     0,   136,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,    65,     0,
     0,   138,     0,     0,     0,     0,     0,     0,     0,   110,
     0,     0,     0,     0,   974,     0,     0,  1295,   140,   141,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   111,     0,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   109,     0,     0,   874,     0,    28,    29,     0,    31,
    32,    33,    34,     0,     0,     0,   136,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   137,    65,     0,     0,
   138,     0,     0,     0,     0,     0,     0,     0,   110,     0,
     0,     0,     0,  1085,     0,     0,  1320,   140,   141,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   111,     0,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   136,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,    65,     0,     0,   138,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,     0,     0,   139,   140,   141
};

static const short yycheck[] = {    13,
   201,     2,   197,    23,   264,    62,    63,   853,    11,   258,
   137,   138,    51,   435,   436,   234,   398,   399,   400,   469,
   234,    50,    13,   203,     7,    39,    14,   612,   613,   614,
   615,   616,   687,    41,   144,    13,     1,   205,     1,   207,
    50,    50,    50,   170,   113,    51,    41,    41,    50,    16,
    51,    52,     9,    10,    11,    12,    50,    14,    15,    16,
    17,    18,    19,   132,    50,    51,    73,    55,    50,    55,
   512,   290,   514,    80,    50,   517,   290,    53,     1,    55,
    50,    16,   262,    50,    51,    50,    50,    50,   108,   222,
   223,   224,   225,   226,   227,    12,   110,    41,   112,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,    41,   144,   130,   131,   132,   128,
   128,   116,   128,    51,   133,    50,    14,    50,   221,   222,
   223,   224,   225,   226,   227,   144,   144,    41,    66,    41,
   197,   108,   144,   126,   127,   147,    50,    50,    50,    50,
   144,    41,   117,    41,   145,   175,  1002,   376,   149,   378,
   174,   181,   144,   128,   378,   128,   205,   145,   207,   145,
   114,   149,    51,   108,   144,   182,   183,   184,   185,   144,
   200,   144,    16,   197,   204,    50,    50,    41,    41,   203,
   107,   205,   109,   110,   111,    16,   113,    50,    16,   126,
   127,   202,   857,   858,   205,    41,    51,   164,   165,   166,
   167,   168,    50,   340,    50,   132,   435,   436,   398,     2,
   234,   144,    16,   605,   128,   128,   128,   128,   610,   243,
    16,   270,    50,    51,   248,   249,   126,   127,   239,   621,
   144,   144,   144,   144,   245,   246,   247,    50,   262,   128,
   264,    50,   420,   254,   255,   256,   257,    51,   186,    50,
   114,   429,   430,    41,    41,    51,   280,   268,   269,    52,
    50,   116,    50,    50,   108,   128,   290,   205,    16,   144,
   144,     2,   147,   147,   726,    50,   728,   108,   730,   731,
   108,   144,   128,   307,   308,    50,   114,   115,   312,   313,
   314,   683,   111,   483,   113,    51,   144,   144,   144,   146,
    50,   239,   240,    51,   108,   272,    16,  1163,    50,     1,
   114,   115,   108,   132,    16,   128,    16,   341,   114,   115,
    51,    52,    50,    50,   348,   349,   350,   117,   358,   359,
    50,   144,   356,    16,    65,    66,   360,   361,   128,    43,
   128,   128,    46,  1008,    48,    51,    50,   414,   415,    51,
    50,    41,    43,   128,   144,    46,   144,   144,   133,    41,
   108,    53,   386,   958,   959,   960,    56,   117,    51,   144,
   387,   420,   128,    50,   398,   399,   400,    50,   128,   110,
   429,   430,    55,   133,   395,    16,   846,   847,   617,   600,
   117,    50,   824,   617,   144,    41,   420,   144,   108,   103,
   128,   128,    51,    50,    51,   136,   108,   677,   108,   202,
   802,   460,   804,   117,    14,   605,   144,   144,   144,    50,
   146,   432,   128,   815,   128,   108,    50,    51,   618,   367,
   689,   642,    41,    50,   451,   452,   126,   127,     1,    53,
   144,    41,    41,   174,   126,   127,   239,    16,   386,   460,
  1246,   128,   245,   246,   247,   186,   634,   481,    41,   483,
   191,   254,   255,   256,   257,   482,   197,   144,    51,   128,
   116,   202,    41,    43,   205,   206,    46,   108,    48,   128,
    50,   128,    51,    50,  1280,   144,   510,    50,   678,    50,
   221,   222,   223,   224,   225,   226,   227,   144,    50,  1164,
  1165,    56,    50,   234,   128,   648,   649,   650,   239,   240,
    50,    51,    51,   244,   245,   246,   247,   126,   127,   144,
   144,   146,   460,   254,   255,   256,   257,   126,   127,    50,
    51,    50,   263,   103,   265,   266,   267,   268,   269,   108,
    51,    51,   203,    16,   755,   648,   649,   650,   980,   280,
    51,    70,    71,    72,    73,    74,    75,    51,    41,   144,
   221,   222,   223,   224,   225,   226,   227,   128,    41,   599,
    51,   126,   127,   597,   144,    41,   128,    41,    51,   596,
   128,   605,   144,   144,   315,   634,   610,   248,   128,   128,
    56,    51,   144,   617,   618,   824,   144,   664,   622,   114,
   115,   262,   395,   264,   144,    41,    51,   128,   632,   128,
   634,    51,   636,    51,    51,   126,   127,    51,   128,   350,
    51,   832,    20,   144,    14,   144,   145,   128,    51,   290,
   126,   127,    51,   571,   128,   108,   367,    43,    43,   432,
    46,    46,   373,   126,   127,    43,    44,   128,    46,    47,
    48,    41,    50,   677,   678,   386,    50,   681,    51,   597,
   126,   127,   126,   127,   395,     1,    43,   398,   128,    46,
   401,   107,    50,   109,   110,   111,   110,   113,    52,   690,
   691,    50,    50,   128,    20,  1117,   417,    55,   128,   420,
   128,   128,    51,   354,   355,  1127,   132,   128,    51,     8,
    51,   432,   136,   126,   127,   103,   437,    43,    44,   128,
    46,    47,    48,    50,    50,  1107,    25,    26,    27,    28,
    50,   745,   746,   747,   748,   749,    15,   956,    17,   460,
    39,    20,    51,  1003,    51,   128,    51,   398,   399,   400,
   174,    50,   144,   474,    53,   147,   144,  1179,   146,   954,
    51,   980,   126,   127,    43,    44,    51,    46,    47,    48,
    51,    50,    50,   197,    54,    43,  1198,   103,    46,   128,
    51,   205,    51,   784,   911,   128,    51,   128,   802,   493,
   804,   495,   496,   497,   498,   499,   500,   811,   502,   503,
    43,   505,   506,    46,    50,    48,    51,    50,    41,    43,
    42,    51,    46,    51,    48,   239,    50,    53,   144,   128,
   146,   128,    55,   128,   545,   839,   840,   107,   829,   109,
   110,   111,   483,   113,   133,   134,   135,   128,   137,   138,
   139,   140,   141,   128,   143,   144,    15,   128,    17,    51,
   571,    20,   132,    51,    51,   869,   280,   128,   579,   128,
   103,    51,   107,   128,   109,   110,   111,   146,   113,   103,
    51,    51,    51,    51,    43,    44,   597,    46,    47,    48,
    51,    50,    43,   117,   605,    46,    51,   132,   128,   610,
   128,   315,    14,    14,   128,    51,   617,    50,  1117,   133,
    51,   144,    55,    51,    51,    51,   132,    51,  1127,    51,
   144,   868,    50,   634,    51,    51,   637,  1299,    51,    41,
    41,   935,    50,   574,   126,   127,   350,   648,   649,   650,
   128,   128,  1133,   947,    51,   955,    56,    50,   128,    51,
    50,    51,   103,   367,    51,    55,   667,   128,   128,   128,
   128,    40,    40,   967,   605,    51,   970,   128,    43,   973,
  1179,    46,   386,   128,    40,    51,    50,   618,    51,   690,
   691,    50,   128,    14,   398,   126,   127,   146,    51,  1198,
   128,   128,   128,    15,   128,    17,   128,   988,    20,  1003,
    50,   128,   128,    51,    50,   128,   420,   648,   649,   650,
    41,   784,   114,   115,  1018,    56,   126,   127,    41,   126,
   127,    43,    44,   437,    46,    47,    48,    56,    50,   126,
   127,    54,   111,   111,   113,   113,   677,   678,    50,    41,
   126,   127,   683,    41,     2,   111,   460,   113,    41,  1053,
   126,   127,    51,   126,   127,    43,   829,    55,    46,  1063,
   474,    51,    51,   126,   127,  1056,   114,   115,    51,   118,
   119,  1075,    14,   784,  1078,    43,  1067,    51,    46,    37,
  1084,   103,   104,    50,   107,   126,   127,    51,   111,   112,
   113,   802,    43,    51,    52,    46,    50,   126,   127,    41,
   811,    50,  1093,    43,    51,   107,    46,    65,    66,   111,
   112,   113,   111,    55,   113,    73,   354,   355,   829,  1123,
    50,   111,    80,   113,   146,    51,  1130,    15,   111,    17,
   113,   545,    20,   827,   828,  1139,  1140,   111,    51,   113,
  1144,  1145,  1146,  1147,   144,  1149,   146,   111,    50,   113,
    43,    43,   110,    46,    46,    43,    44,   571,    46,    47,
    48,    51,    50,   804,   111,   144,   113,   146,    14,   863,
   864,    51,   866,   867,    50,    15,  1167,    17,   136,    50,
    20,    50,    53,   597,    55,   111,    61,   113,  1192,   118,
   119,   605,  1196,  1197,   107,    41,   610,   128,   111,   112,
   113,     4,     5,    43,    44,    55,    46,    47,    48,    55,
    50,   103,   111,   112,   113,   988,   174,   107,    51,    54,
   634,   111,   112,   113,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   144,   193,   146,   146,   196,   197,
    51,   116,   117,   954,   202,   128,   128,   205,   206,   124,
   125,   126,   127,   128,   129,   130,   967,    51,   146,   970,
  1251,    51,   973,   221,   222,   223,   224,   225,   226,   227,
   111,    51,   113,    16,   107,   233,   234,   988,   111,   112,
   113,   239,   240,  1056,    16,   132,   244,   245,   246,   247,
    51,    61,   250,    41,  1067,    51,   254,   255,   256,   257,
    41,    43,    41,    41,    46,   263,   146,   265,   266,   267,
   268,   269,    41,   107,    51,    51,    51,   111,   112,   113,
  1093,    42,   280,  1327,  1328,    51,  1330,  1331,   118,   119,
   120,   121,   122,   123,    41,  1339,   126,   127,  1342,  1343,
  1344,    41,    33,    61,    54,  1056,   116,   117,    50,    51,
  1354,   116,    55,    55,   124,   125,  1067,   315,   128,   129,
   130,   103,  1003,    51,  1075,    55,    10,  1078,   108,    54,
   107,    51,    51,  1084,   111,   112,   113,    54,    50,    51,
   108,   107,  1093,    55,    51,   111,   112,   113,   802,    51,
    50,    51,   350,    41,  1167,    55,    41,   811,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,    41,   367,
   128,   129,   130,    51,    51,   373,    18,    19,    41,    21,
    22,    23,    24,    51,   128,    51,    51,   107,   386,   387,
   107,   111,   112,   113,   111,   112,   113,   395,  1149,    54,
   398,   114,   113,   401,    54,   107,    54,   113,    50,   111,
   112,   113,    51,    54,    10,    51,  1167,    51,   128,   417,
   146,    20,   420,    56,   128,   128,  1107,   128,    70,    71,
    72,    73,    74,    75,   432,    51,    53,    18,    19,   437,
    21,    22,    23,    24,    43,    44,    51,    46,    47,    48,
     7,   113,   107,   451,   452,   453,   111,   112,   113,   107,
    51,   147,   460,   111,   112,   113,   107,    51,   128,    50,
   111,   112,   113,   145,   107,    51,   474,   128,   111,   112,
   113,     2,   107,    53,   482,    51,   111,   112,   113,    70,
    71,    72,    73,    74,    75,   109,   110,   111,    37,   113,
  1251,    51,   144,   118,   119,   120,   121,   122,   123,    51,
    41,   126,   127,   967,    51,    51,   970,    50,   132,   973,
    55,   113,    10,    51,    51,    55,    51,   128,   128,    51,
    51,    52,  1283,   128,    51,    41,    56,    53,    51,    51,
    51,    51,    51,   128,    65,    66,   128,   545,   128,   128,
   128,   128,     4,    51,    41,    51,    51,   684,    51,  1310,
   114,   113,    41,   144,    50,    50,    56,    56,    41,   114,
    54,    54,    54,   571,    51,    56,    50,    53,    41,   577,
    51,   579,    51,   581,   582,    51,   584,   585,   586,   110,
    51,    51,   590,   591,   592,    51,   594,    51,   596,   597,
   598,    56,   128,    51,   128,    50,    53,   605,    51,    51,
    51,    51,   610,    51,   128,   136,    51,    54,    51,   617,
    50,  1075,    51,    51,  1078,    51,    51,    42,    51,    56,
  1084,    53,    56,    51,    51,    51,   634,   144,    50,   637,
   144,   144,    50,    56,    51,    51,    55,    51,     2,    51,
   648,   649,   650,   174,    55,   653,    55,    55,    55,    55,
    51,    50,    54,    51,    50,   186,    51,    51,    51,   667,
    50,    50,   144,    55,   144,    50,   197,    55,    55,    51,
    54,   202,    50,    56,   205,   206,    51,    51,    51,   128,
    46,    46,   690,   691,   128,  1149,   823,    51,    52,   826,
   221,   222,   223,   224,   225,   226,   227,   128,   128,    51,
    56,    56,    66,   234,    51,    56,    56,    56,   239,   240,
    51,    51,    51,   244,   245,   246,   247,    51,   855,    46,
    51,    51,    51,   254,   255,   256,   257,    51,   128,    50,
    56,   128,   147,    56,    56,   114,    51,   128,    51,    51,
    51,    51,   128,   147,   147,    51,   110,    51,   128,   280,
    51,    51,    51,    51,    51,    51,     0,     0,   766,   767,
    55,    55,   770,    51,    55,   773,   147,    51,    55,   777,
   147,   779,   136,   781,    51,   147,   784,   147,   147,    51,
   788,   325,    51,    56,   315,   793,   147,    55,    55,    55,
    55,    51,    55,   508,   802,    56,   689,    56,    56,    56,
    56,    56,    56,   811,    56,   617,  1093,   710,   146,   576,
   174,   786,   641,   813,    -1,    -1,    -1,    -1,    -1,   350,
    -1,   829,   186,    -1,    -1,    -1,   714,    -1,   716,    -1,
    -1,   719,    -1,   197,    -1,    -1,   367,    -1,   202,    -1,
    -1,   205,    -1,    -1,   732,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   386,   993,   221,   222,   223,
   224,   225,   226,   227,   395,    -1,    -1,   398,    -1,    -1,
   401,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,
   244,   245,   246,   247,    -1,    -1,   417,    -1,    -1,   420,
   254,   255,   256,   257,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   432,    -1,    -1,    -1,    -1,   437,    -1,   916,    -1,
    -1,    -1,    -1,   921,    -1,    -1,   280,    -1,   926,    -1,
    -1,    -1,    -1,   931,    -1,    -1,    -1,    -1,    -1,   460,
   818,   819,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   474,   952,    -1,   954,    -1,    -1,    -1,
    -1,   315,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   967,
    -1,    -1,   970,    -1,    -1,   973,    -1,    -1,   512,    -1,
   514,    -1,    -1,   517,    -1,    -1,    -1,    -1,    -1,    -1,
   988,    -1,    -1,   871,    -1,    -1,   350,    -1,    -1,   877,
    -1,   879,    -1,   881,    -1,   883,    -1,   885,   886,    -1,
    -1,   889,    -1,   367,   892,    -1,    -1,    -1,    -1,   897,
    -1,    -1,    -1,    -1,   545,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   395,    -1,    -1,   398,    -1,    -1,    -1,    -1,    -1,
   571,    -1,    -1,    -1,    -1,    -1,  1183,  1184,  1056,    -1,
    -1,  1188,  1189,  1190,  1191,    -1,   420,    -1,    -1,  1067,
    -1,    -1,    -1,    -1,    -1,    -1,   597,  1075,   432,    -1,
  1078,    -1,    -1,   437,   605,    -1,  1084,    -1,    -1,   610,
    -1,    -1,    -1,    -1,    -1,  1093,   617,    -1,    -1,    -1,
   978,   979,    -1,  1230,    -1,    -1,   460,  1234,  1235,    -1,
    -1,    -1,    -1,   634,    -1,    -1,   584,   585,   586,    -1,
   474,    -1,    -1,    -1,   592,    -1,    -1,   648,   649,   650,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1016,    -1,
    -1,    -1,    -1,    -1,    -1,  1023,    -1,  1025,    -1,  1027,
    -1,  1149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1167,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   711,    -1,    -1,
   714,    -1,   716,    -1,    -1,   719,    -1,    -1,    -1,    -1,
    -1,   545,   726,    -1,   728,    -1,   730,   731,   732,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1337,  1338,    -1,  1340,  1341,    -1,    -1,   571,    -1,    -1,
    -1,  1348,    -1,    -1,  1351,  1352,  1353,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1363,    -1,    -1,    -1,
    -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   605,    -1,    -1,    -1,    -1,   610,    -1,    -1,    -1,
    -1,    -1,    -1,   784,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   634,   802,    -1,   817,   818,   819,    -1,    -1,    -1,    -1,
   811,    -1,    -1,    -1,   648,   649,   650,    -1,    -1,   767,
    -1,   769,   770,    -1,   772,   773,    -1,   775,   829,    -1,
   778,    -1,   780,   781,    -1,   783,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   871,    -1,   873,
    -1,  1219,    -1,   877,    -1,   879,  1224,   881,    -1,   883,
   884,   885,   886,    -1,    -1,   889,    -1,    -1,   892,    -1,
    -1,    -1,    -1,   897,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1254,    -1,    -1,    -1,
    -1,  1259,    -1,    -1,    -1,    -1,    -1,    -1,  1266,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1296,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   784,    -1,    -1,   954,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   978,   979,   967,    -1,   802,   970,
    -1,    -1,   973,   921,    -1,   923,   924,   811,   926,    -1,
   928,   929,    -1,    -1,    -1,   933,   934,   988,    -1,    -1,
    -1,   939,    -1,   941,   942,   829,    -1,   945,   946,    -1,
    -1,    -1,  1016,    -1,    -1,    -1,    -1,    -1,    -1,  1023,
    -1,  1025,    -1,  1027,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1056,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1067,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1075,    -1,    -1,  1078,    -1,    -1,
    -1,    -1,    -1,  1084,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1093,    -1,    -1,  1043,    -1,    -1,    -1,  1047,
    -1,    -1,  1050,  1051,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1061,    -1,    -1,    -1,    -1,    -1,    -1,
   954,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   967,    -1,    -1,   970,    -1,    -1,   973,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1149,    -1,
    -1,    -1,    -1,    -1,   988,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1167,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1124,    -1,    -1,    -1,
    -1,    -1,    -1,  1131,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1218,  1219,    -1,    -1,    -1,  1223,
  1224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1169,  1056,    -1,    -1,    -1,  1174,    -1,    -1,    -1,
    -1,    -1,    -1,  1067,    -1,    -1,    -1,    -1,    -1,    -1,
  1254,  1075,    -1,    -1,  1078,  1259,    -1,    -1,    -1,    -1,
  1084,  1265,  1266,    -1,    -1,    -1,    -1,     1,    -1,  1093,
    -1,    -1,     6,  1211,    -1,  1213,  1214,    -1,  1216,    13,
    -1,    -1,    -1,    -1,    18,    19,    -1,    21,    22,    23,
    24,    -1,  1296,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    53,
    -1,    55,    -1,    -1,    -1,  1149,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    74,    75,    76,  1167,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,     1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,
    13,    -1,    -1,   117,    -1,    18,    19,    -1,    21,    22,
    23,    24,    -1,   127,   128,    -1,    -1,   131,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   144,   145,    -1,   147,   148,   149,    -1,    50,    -1,    -1,
    53,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,     1,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    13,    -1,    -1,   117,    -1,    18,    19,    -1,    21,
    22,    23,    24,    -1,   127,   128,    -1,    -1,   131,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   145,    -1,   147,   148,   149,    -1,    50,    -1,
    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
    -1,    -1,    13,    -1,    -1,   117,    -1,    18,    19,    -1,
    21,    22,    23,    24,    -1,   127,   128,    -1,    -1,   131,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    50,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
    -1,    -1,     6,   144,     8,     9,   147,   148,   149,    13,
    -1,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
    34,    35,    36,    -1,    38,    39,    -1,    -1,    -1,    43,
    44,    -1,    46,    47,    48,    -1,    50,    -1,    -1,    53,
    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    65,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,    -1,   103,
   104,    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   127,   128,    -1,    -1,   131,    -1,   133,
   134,   135,   136,   137,   138,   139,    -1,    -1,    -1,    -1,
   144,   145,   146,   147,   148,   149,     3,    -1,    -1,     6,
    -1,     8,     9,    -1,    -1,    -1,    13,    -1,    15,    -1,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
    -1,    38,    39,    -1,    -1,    -1,    43,    44,    -1,    46,
    47,    48,    -1,    50,    -1,    -1,    53,    -1,    -1,    -1,
    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,    -1,   103,   104,    -1,   106,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   127,   128,    -1,    -1,   131,    -1,   133,   134,   135,   136,
   137,   138,   139,    -1,    -1,    -1,    -1,   144,   145,   146,
   147,   148,   149,     3,    -1,    -1,     6,    -1,     8,     9,
    -1,    -1,    -1,    13,    -1,    15,    -1,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    -1,    34,    35,    36,    -1,    38,    39,
    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
    50,    -1,    -1,    53,    -1,    -1,    -1,    57,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,    -1,   103,   104,    -1,   106,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,
    -1,   131,    -1,   133,   134,   135,   136,   137,   138,   139,
    -1,    -1,    -1,     6,   144,   145,   146,   147,   148,   149,
    13,    -1,    15,    -1,    -1,    18,    19,    -1,    21,    22,
    23,    24,    -1,    -1,    27,    28,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,    -1,    46,    47,    48,    -1,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,    -1,
   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     6,   144,   145,   146,   147,   148,   149,    13,    -1,    15,
    -1,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
    46,    47,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,
    76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,    -1,   103,   104,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   127,   128,    -1,    -1,   131,    -1,   133,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,   144,    -1,
   146,   147,   148,   149,    13,    -1,    15,    -1,    -1,    18,
    19,    -1,    21,    22,    23,    24,    -1,    -1,    27,    28,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,    47,    48,
    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,
    -1,    -1,   131,    -1,    -1,   134,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     6,   144,   145,   146,   147,   148,
   149,    13,    -1,    15,    -1,    -1,    18,    19,    -1,    21,
    22,    23,    24,    -1,    -1,    27,    28,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    43,    -1,    -1,    46,    47,    48,    -1,    50,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,   131,
    -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     6,   144,   145,   146,   147,   148,   149,    13,    -1,
    15,    -1,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
    -1,    46,    47,    48,    -1,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,     6,    -1,
    -1,    -1,   127,   128,    -1,    13,   131,    15,    -1,   134,
    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,   144,
   145,   146,   147,   148,   149,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,    47,
    48,    -1,    50,    -1,    -1,    53,    -1,    55,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,    -1,   103,   104,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,   127,
   128,    -1,    13,   131,    15,    -1,    -1,    18,    19,    -1,
    21,    22,    23,    24,    -1,    -1,   144,   145,   146,   147,
   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    -1,    -1,    46,    47,    48,    -1,    50,
    -1,    -1,    53,    -1,    55,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,
    -1,    -1,     6,    -1,    -1,    -1,   127,   128,    -1,    13,
   131,    15,    -1,    -1,    18,    19,    20,    21,    22,    23,
    24,    -1,    -1,   144,   145,   146,   147,   148,   149,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
    44,    -1,    46,    47,    48,    -1,    50,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,    -1,   103,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,   127,   128,    -1,    13,   131,    15,    -1,
    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,
   144,   145,   146,   147,   148,   149,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,
    47,    48,    -1,    50,    -1,    -1,    53,    -1,    55,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,    -1,   103,   104,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   117,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
   127,   128,    -1,    13,   131,    15,    -1,    -1,    18,    19,
    -1,    21,    22,    23,    24,    -1,    -1,   144,    -1,   146,
   147,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    43,    -1,    -1,    46,    47,    48,    -1,
    50,    -1,    -1,    53,    -1,    55,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,   127,   128,    -1,
    13,   131,    15,    -1,    -1,    18,    19,    -1,    21,    22,
    23,    24,    -1,    -1,   144,    -1,   146,   147,   148,   149,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,    -1,    46,    47,    48,    -1,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,    -1,
   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
     6,    -1,    -1,    -1,   127,   128,    -1,    13,   131,    15,
   133,    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,
    -1,   144,    -1,   146,   147,   148,   149,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,
    46,    47,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,
    76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,    -1,   103,   104,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   117,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
    -1,   127,   128,    -1,    13,   131,    15,   133,    -1,    18,
    19,    -1,    21,    22,    23,    24,    -1,    -1,   144,    -1,
   146,   147,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,    47,    48,
    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,   127,   128,
    -1,    13,   131,    15,    -1,    -1,    18,    19,    -1,    21,
    22,    23,    24,    -1,    -1,   144,    -1,   146,   147,   148,
   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    43,    -1,    -1,    46,    47,    48,    -1,    50,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,
    -1,     6,    -1,    -1,    -1,   127,   128,    -1,    13,   131,
    15,    -1,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,   144,    -1,   146,   147,   148,   149,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
    -1,    46,    47,    48,    -1,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,     6,    -1,
    -1,    -1,   127,   128,    -1,    13,   131,    15,    -1,    -1,
    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,   144,
    -1,   146,   147,   148,   149,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,    47,
    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,    -1,   103,   104,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,   127,
   128,    -1,    13,   131,    15,    -1,    -1,    18,    19,    -1,
    21,    22,    23,    24,    -1,    -1,   144,    -1,   146,   147,
   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    -1,    -1,    46,    47,    48,    -1,    50,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,
    -1,    -1,     6,    -1,    -1,    -1,   127,   128,    -1,    13,
   131,    15,    -1,    -1,    18,    19,    -1,    21,    22,    23,
    24,    -1,    -1,   144,    -1,   146,   147,   148,   149,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
    -1,    -1,    46,    47,    48,    -1,    50,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,    -1,   103,
   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,   127,   128,    -1,    13,   131,    15,    -1,
    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,
   144,    -1,   146,   147,   148,   149,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,
    47,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,    -1,   103,   104,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   117,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
   127,   128,    -1,    13,   131,    15,    -1,    -1,    18,    19,
    -1,    21,    22,    23,    24,    -1,    -1,   144,    -1,   146,
   147,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    43,    -1,    -1,    46,    47,    48,    -1,
    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,   127,   128,    -1,
    13,   131,    15,    -1,    -1,    18,    19,    -1,    21,    22,
    23,    24,    -1,    -1,   144,    -1,   146,   147,   148,   149,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,    -1,    46,    47,    48,    -1,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,    -1,
   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
     6,    -1,    -1,    -1,   127,   128,    -1,    13,   131,    15,
    -1,    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,
    -1,   144,    -1,   146,   147,   148,   149,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,
    46,    47,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,
    76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,    -1,   103,   104,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   117,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,
    -1,   127,   128,    13,    -1,   131,    -1,    -1,    18,    19,
    20,    21,    22,    23,    24,    -1,    -1,    -1,   144,    -1,
   146,   147,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,    -1,   103,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
    -1,    -1,     6,    -1,    -1,    -1,    -1,   127,   128,    13,
    -1,   131,    -1,    -1,    18,    19,    20,    21,    22,    23,
    24,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
    44,    -1,    46,    47,    48,    -1,    50,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,    -1,   103,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   127,   128,    -1,    -1,   131,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,     6,
   144,     8,     9,   147,   148,   149,    -1,    -1,    15,    -1,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    -1,    -1,    29,    30,    31,    32,    -1,    34,    35,    36,
    -1,    38,    39,    -1,    -1,    -1,    43,    44,    -1,    46,
    47,    48,    -1,    50,    -1,    -1,    53,    -1,    -1,    -1,
    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    -1,
    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,    -1,   106,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,   136,
   137,   138,   139,    -1,    -1,     3,    -1,   144,     6,   146,
     8,     9,    -1,    -1,    -1,    -1,    -1,    15,    -1,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
    -1,    29,    30,    31,    32,    -1,    34,    35,    36,    -1,
    38,    39,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
    48,    -1,    50,    -1,    -1,    53,    -1,    -1,    -1,    57,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
    -1,    -1,    70,    71,    72,    73,    74,    75,    -1,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     6,    -1,    -1,    -1,    -1,   103,   104,    13,   106,    -1,
    -1,    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,
    -1,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   128,    -1,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
   138,   139,    -1,    -1,    50,    -1,   144,    -1,   146,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,
    76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,    -1,    -1,    -1,    -1,
    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    13,
    -1,   117,    -1,    -1,    18,    19,    -1,    21,    22,    23,
    24,   127,   128,    27,    28,   131,    -1,    -1,   134,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,   145,
    -1,   147,   148,   149,    -1,    -1,    50,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    13,
    -1,    -1,    -1,   117,    18,    19,    -1,    21,    22,    23,
    24,    -1,    -1,   127,   128,    -1,    -1,   131,    -1,    -1,
   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   144,   145,    -1,   147,   148,   149,    50,    -1,    -1,    53,
    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    13,
    -1,    -1,    -1,   117,    18,    19,    -1,    21,    22,    23,
    24,    -1,    -1,   127,   128,    -1,    -1,   131,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   144,   145,    -1,   147,   148,   149,    50,    -1,    -1,    53,
    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,    -1,    -1,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    13,    -1,   117,    -1,    -1,    18,    19,    -1,    21,
    22,    23,    24,   127,   128,    27,    28,   131,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   144,   145,    -1,   147,   148,   149,    -1,    -1,    50,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    13,    -1,    -1,    -1,   117,    18,    19,    -1,    21,
    22,    23,    24,    -1,    -1,   127,   128,    -1,    -1,   131,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   144,   145,    -1,   147,   148,   149,    50,    -1,
    -1,    53,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    13,    -1,    -1,    -1,   117,    18,    19,    -1,    21,
    22,    23,    24,    -1,    -1,   127,   128,    -1,    -1,   131,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   144,   145,    -1,   147,   148,   149,    50,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    13,    -1,    -1,    -1,   117,    18,    19,    -1,    21,
    22,    23,    24,    -1,    -1,   127,   128,    -1,    -1,   131,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   144,    -1,    -1,   147,   148,   149,    50,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
    13,    -1,    -1,    -1,    -1,    18,    19,    -1,    21,    22,
    23,    24,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,   131,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,
    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,    13,
    -1,    -1,   105,    -1,    18,    19,    -1,    21,    22,    23,
    24,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,   131,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,
    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,    13,    -1,
    -1,   105,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   127,   128,    -1,    -1,   131,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,    13,    -1,    -1,
   105,    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,
    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,   144,
    -1,    -1,   147,   148,   149,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,
    76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,    13,    -1,    -1,   105,
    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,
    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,   144,    -1,
    -1,   147,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,    13,    -1,    -1,   105,    -1,
    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,    -1,
   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    50,    -1,    -1,    -1,    -1,   144,    -1,    -1,
   147,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,    13,    -1,    -1,   105,    -1,    18,
    19,    -1,    21,    22,    23,    24,    -1,    -1,    -1,   117,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,
   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    50,    -1,    -1,    -1,    -1,   144,    -1,    -1,   147,
   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,    13,    -1,    -1,   105,    -1,    18,    19,
    -1,    21,    22,    23,    24,    -1,    -1,    -1,   117,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,
    -1,    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    50,    -1,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,    13,    -1,    -1,   105,    -1,    18,    19,    -1,
    21,    22,    23,    24,    -1,    -1,    -1,   117,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,
    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
    -1,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,    13,    -1,    -1,   105,    -1,    18,    19,    -1,    21,
    22,    23,    24,    -1,    -1,    -1,   117,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
    13,    -1,    -1,   105,    -1,    18,    19,    -1,    21,    22,
    23,    24,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,   131,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,
    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,    13,
    -1,    -1,   105,    -1,    18,    19,    -1,    21,    22,    23,
    24,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,   131,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,
    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,    13,    -1,
    -1,   105,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   127,   128,    -1,    -1,   131,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,    13,    -1,    -1,
   105,    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,
    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,   144,
    -1,    -1,   147,   148,   149,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,
    76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,    13,    -1,    -1,   105,
    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,
    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,   144,    -1,
    -1,   147,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,    13,    -1,    -1,   105,    -1,
    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,    -1,
   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   127,   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    50,    -1,    -1,    -1,    -1,   144,    -1,    -1,
   147,   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,    13,    -1,    -1,   105,    -1,    18,
    19,    -1,    21,    22,    23,    24,    -1,    -1,    -1,   117,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,
   128,    -1,    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    50,    -1,    -1,    -1,    -1,   144,    -1,    -1,   147,
   148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,    13,    -1,    -1,   105,    -1,    18,    19,
    -1,    21,    22,    23,    24,    -1,    -1,    -1,   117,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,
    -1,    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    50,    -1,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,    13,    -1,    -1,   105,    -1,    18,    19,    -1,
    21,    22,    23,    24,    -1,    -1,    -1,   117,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,
    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
    -1,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,    13,    -1,    -1,   105,    -1,    18,    19,    -1,    21,
    22,    23,    24,    -1,    -1,    -1,   117,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,   131,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   144,    -1,    -1,   147,   148,   149
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 160 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 190 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 191 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 200 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 209 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 210 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 211 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 212 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 217 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 218 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 220 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 221 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 223 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 226 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 228 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 232 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 233 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 238 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 241 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 246 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 248 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 256 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 361 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 363 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 365 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 366 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 367 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 368 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 369 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 370 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 372 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 373 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 379 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 380 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 386 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 387 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 388 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 389 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 390 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 391 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 394 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 397 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 403 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 407 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 416 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 425 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 61:
#line 429 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 63:
#line 434 "msv.y"
{
            yyval.tnode=new CSyntaxNode(FREE_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 64:
#line 438 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(SYSTEM_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 65:
#line 442 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 66:
#line 445 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 67:
#line 458 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 68:
#line 463 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 69:
#line 467 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 70:
#line 473 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 71:
#line 474 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 72:
#line 480 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 73:
#line 485 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 74:
#line 489 "msv.y"
{ yyval.tnode=yyvsp[0].tnode; ;
    break;}
case 75:
#line 490 "msv.y"
{ yyval.tnode=yyvsp[0].tnode; ;
    break;}
case 76:
#line 496 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 77:
#line 504 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 78:
#line 515 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 79:
#line 528 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 80:
#line 529 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 81:
#line 530 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 82:
#line 535 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 83:
#line 539 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 84:
#line 543 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 85:
#line 547 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 86:
#line 551 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 87:
#line 555 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 88:
#line 561 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 89:
#line 563 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 90:
#line 566 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 91:
#line 571 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 92:
#line 582 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 93:
#line 583 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 94:
#line 584 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 95:
#line 587 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 96:
#line 588 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 97:
#line 589 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 98:
#line 597 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 601 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 100:
#line 605 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 101:
#line 610 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 102:
#line 616 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 103:
#line 621 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 104:
#line 628 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 105:
#line 634 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 106:
#line 645 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 107:
#line 646 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 108:
#line 647 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 652 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 110:
#line 659 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 111:
#line 662 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 112:
#line 663 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 113:
#line 671 "msv.y"
{yyval.tnode=new CSyntaxNode(FOPEN_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 114:
#line 673 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETS_EXP,yyvsp[-5].tnode,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 115:
#line 675 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETC_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 116:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTS_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 117:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 118:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 119:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(FCLOSE_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 120:
#line 695 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 121:
#line 698 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 122:
#line 699 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 123:
#line 700 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 124:
#line 701 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 125:
#line 702 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 126:
#line 703 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 127:
#line 704 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 128:
#line 708 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 129:
#line 710 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 130:
#line 712 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 131:
#line 714 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 132:
#line 716 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 133:
#line 718 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 134:
#line 720 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 135:
#line 722 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 136:
#line 724 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 137:
#line 726 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 138:
#line 728 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 139:
#line 730 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 140:
#line 732 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 141:
#line 736 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 142:
#line 737 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 143:
#line 740 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 144:
#line 741 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 145:
#line 742 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 146:
#line 746 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 147:
#line 747 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 148:
#line 748 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 149:
#line 751 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 150:
#line 755 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 151:
#line 761 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 152:
#line 763 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 153:
#line 765 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 154:
#line 767 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 155:
#line 769 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 156:
#line 770 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 157:
#line 775 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 158:
#line 776 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 159:
#line 777 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 160:
#line 783 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 161:
#line 784 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 162:
#line 786 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 163:
#line 788 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 164:
#line 790 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 165:
#line 792 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 166:
#line 793 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 167:
#line 799 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 168:
#line 800 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 169:
#line 802 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 170:
#line 804 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 171:
#line 809 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 810 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 173:
#line 814 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 815 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 175:
#line 819 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 820 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 177:
#line 825 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 826 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 179:
#line 827 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 180:
#line 828 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 181:
#line 829 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 182:
#line 831 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 183:
#line 832 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 184:
#line 833 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 185:
#line 834 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 186:
#line 835 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 187:
#line 836 "msv.y"
{yyval.tnode=yyvsp[0].tnode;
    break;}
case 188:
#line 837 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 189:
#line 838 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 190:
#line 839 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 191:
#line 840 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 192:
#line 841 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 193:
#line 847 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 194:
#line 848 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 195:
#line 849 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 196:
#line 850 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 197:
#line 851 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 198:
#line 852 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 199:
#line 853 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 200:
#line 854 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 201:
#line 857 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 202:
#line 858 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 203:
#line 862 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 204:
#line 863 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 205:
#line 864 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 206:
#line 865 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 207:
#line 872 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 208:
#line 876 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 209:
#line 884 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 210:
#line 896 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 211:
#line 900 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 212:
#line 909 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 213:
#line 921 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 214:
#line 925 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 215:
#line 933 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 216:
#line 936 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 217:
#line 937 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 218:
#line 942 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 219:
#line 946 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 220:
#line 950 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 221:
#line 955 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 222:
#line 958 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 223:
#line 967 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 224:
#line 968 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 225:
#line 969 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 226:
#line 972 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 227:
#line 973 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 228:
#line 976 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 229:
#line 977 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 230:
#line 980 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 231:
#line 981 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 232:
#line 982 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 233:
#line 983 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 234:
#line 984 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 235:
#line 985 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 236:
#line 988 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 237:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 238:
#line 990 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 239:
#line 991 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 240:
#line 992 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 241:
#line 993 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 242:
#line 995 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 243:
#line 996 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 244:
#line 998 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 245:
#line 999 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 246:
#line 1001 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 247:
#line 1002 "msv.y"
{yyval.tnode=new CSyntaxNode(MALLOC_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 248:
#line 1007 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 249:
#line 1008 "msv.y"
{yyval.returntype=INTPTYPE;;
    break;}
case 250:
#line 1009 "msv.y"
{yyval.returntype=FLOATPTYPE;;
    break;}
case 251:
#line 1010 "msv.y"
{yyval.returntype=CHARPTYPE;;
    break;}
case 252:
#line 1011 "msv.y"
{yyval.returntype=UINTPTYPE;;
    break;}
case 253:
#line 1012 "msv.y"
{yyval.returntype=UCHARPTYPE;;
    break;}
case 254:
#line 1013 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 255:
#line 1014 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 256:
#line 1019 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 257:
#line 1020 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].returntype);;
    break;}
case 258:
#line 1021 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].cString, STRUCTTYPE);;
    break;}
case 259:
#line 1022 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, STRTYPE);;
    break;}
case 260:
#line 1028 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 261:
#line 1029 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 262:
#line 1030 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 263:
#line 1031 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 264:
#line 1032 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 265:
#line 1033 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 266:
#line 1038 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCHEAD_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 267:
#line 1045 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCTAIL_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 268:
#line 1052 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCAT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 269:
#line 1059 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCMP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 270:
#line 1066 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCPY_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 271:
#line 1073 "msv.y"
{
						yyval.tnode=new CSyntaxNode(STRFUNCLEN_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 272:
#line 1079 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 273:
#line 1080 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 274:
#line 1081 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 275:
#line 1082 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 276:
#line 1083 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 277:
#line 1084 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 278:
#line 1091 "msv.y"
{yyval.tnode=new CSyntaxNode(ROUND_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 279:
#line 1094 "msv.y"
{yyval.tnode=new CSyntaxNode(CEIL_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 280:
#line 1097 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOOR_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 281:
#line 1100 "msv.y"
{yyval.tnode=new CSyntaxNode(SIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 282:
#line 1101 "msv.y"
{yyval.tnode=new CSyntaxNode(COS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 283:
#line 1102 "msv.y"
{yyval.tnode=new CSyntaxNode(TAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 284:
#line 1103 "msv.y"
{yyval.tnode=new CSyntaxNode(ASIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 285:
#line 1104 "msv.y"
{yyval.tnode=new CSyntaxNode(ACOS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 286:
#line 1105 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 287:
#line 1108 "msv.y"
{yyval.tnode=new CSyntaxNode(SINH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 288:
#line 1109 "msv.y"
{yyval.tnode=new CSyntaxNode(COSH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 289:
#line 1110 "msv.y"
{yyval.tnode=new CSyntaxNode(TANH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 290:
#line 1113 "msv.y"
{yyval.tnode=new CSyntaxNode(EXP_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 291:
#line 1114 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 292:
#line 1115 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG10_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 293:
#line 1116 "msv.y"
{yyval.tnode=new CSyntaxNode(SQRT_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 294:
#line 1119 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN2_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 295:
#line 1120 "msv.y"
{yyval.tnode=new CSyntaxNode(POW_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 296:
#line 1123 "msv.y"
{yyval.tnode=new CSyntaxNode(FMOD_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 297:
#line 1124 "msv.y"
{yyval.tnode=new CSyntaxNode(MODF_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 298:
#line 1127 "msv.y"
{yyval.tnode=new CSyntaxNode(LDEXP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 299:
#line 1129 "msv.y"
{yyval.tnode=new CSyntaxNode(ABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 300:
#line 1130 "msv.y"
{yyval.tnode=new CSyntaxNode(FABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 301:
#line 1131 "msv.y"
{yyval.tnode=new CSyntaxNode(LABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 302:
#line 1137 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 303:
#line 1138 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 304:
#line 1139 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 305:
#line 1140 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 306:
#line 1141 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 307:
#line 1147 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 308:
#line 1149 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 309:
#line 1150 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 310:
#line 1153 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 311:
#line 1156 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 312:
#line 1157 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 313:
#line 1160 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 314:
#line 1161 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 315:
#line 1164 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 316:
#line 1165 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 317:
#line 1168 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 318:
#line 1169 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 319:
#line 1172 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 320:
#line 1173 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 321:
#line 1178 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 322:
#line 1179 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 323:
#line 1180 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 324:
#line 1181 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 325:
#line 1182 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 326:
#line 1183 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 327:
#line 1191 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 328:
#line 1192 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 329:
#line 1196 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 330:
#line 1197 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 331:
#line 1204 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 332:
#line 1208 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 333:
#line 1213 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 334:
#line 1219 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 335:
#line 1225 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 336:
#line 1231 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 337:
#line 1241 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 338:
#line 1247 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 339:
#line 1253 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 340:
#line 1259 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 341:
#line 1268 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 342:
#line 1272 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 343:
#line 1276 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 344:
#line 1282 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 345:
#line 1286 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 346:
#line 1290 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 347:
#line 1296 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 348:
#line 1302 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 349:
#line 1310 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 350:
#line 1318 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 351:
#line 1325 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 352:
#line 1331 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 353:
#line 1337 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 354:
#line 1341 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 355:
#line 1348 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 356:
#line 1353 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 357:
#line 1357 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 358:
#line 1361 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 359:
#line 1365 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 360:
#line 1371 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 361:
#line 1377 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 362:
#line 1383 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 363:
#line 1390 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 364:
#line 1398 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 365:
#line 1404 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 366:
#line 1419 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 367:
#line 1424 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 368:
#line 1429 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 369:
#line 1437 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 370:
#line 1444 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 371:
#line 1450 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 372:
#line 1456 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 373:
#line 1459 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 374:
#line 1469 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 375:
#line 1473 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 376:
#line 1482 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 377:
#line 1483 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 378:
#line 1488 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 379:
#line 1492 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 380:
#line 1501 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 381:
#line 1502 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 382:
#line 1510 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 383:
#line 1512 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 384:
#line 1519 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 385:
#line 1521 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 386:
#line 1527 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 387:
#line 1528 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 388:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 389:
#line 1537 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 390:
#line 1542 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 391:
#line 1547 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 392:
#line 1554 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 393:
#line 1557 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 394:
#line 1558 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 395:
#line 1564 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 396:
#line 1566 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 397:
#line 1586 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 398:
#line 1587 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 399:
#line 1589 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 400:
#line 1591 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 401:
#line 1592 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 402:
#line 1598 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 403:
#line 1605 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 404:
#line 1613 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 405:
#line 1621 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 406:
#line 1625 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 407:
#line 1629 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 408:
#line 1635 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 409:
#line 1639 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 410:
#line 1645 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 411:
#line 1649 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 412:
#line 1655 "msv.y"
{
			yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 413:
#line 1661 "msv.y"
{
			yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 414:
#line 1666 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 415:
#line 1667 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 416:
#line 1668 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 417:
#line 1672 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 418:
#line 1681 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 419:
#line 1682 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 420:
#line 1688 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 421:
#line 1689 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 422:
#line 1693 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 423:
#line 1694 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 424:
#line 1699 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 425:
#line 1700 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 426:
#line 1701 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 427:
#line 1702 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 428:
#line 1703 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 429:
#line 1706 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 430:
#line 1707 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 431:
#line 1708 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 432:
#line 1714 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 433:
#line 1715 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 434:
#line 1716 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 435:
#line 1718 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 436:
#line 1719 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 437:
#line 1720 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 438:
#line 1722 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 439:
#line 1723 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 440:
#line 1724 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 441:
#line 1725 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 442:
#line 1727 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 443:
#line 1728 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 444:
#line 1729 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 445:
#line 1730 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 446:
#line 1731 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 447:
#line 1732 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 448:
#line 1733 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 449:
#line 1737 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 450:
#line 1738 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 451:
#line 1739 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 452:
#line 1740 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 453:
#line 1741 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 454:
#line 1742 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 455:
#line 1743 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1745 "msv.y"
