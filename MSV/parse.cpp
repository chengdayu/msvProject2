
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	IF	262
#define	ELSE	263
#define	EMPTY	264
#define	AWAIT	265
#define	PROJECTION	266
#define	PBEGIN	267
#define	PEND	268
#define	POINTERNULL	269
#define	ARRAY	270
#define	STRUCT	271
#define	DOT	272
#define	UNION	273
#define	FILEDECLARATION	274
#define	MORE	275
#define	DEFINE	276
#define	MY_TRUE	277
#define	MY_FALSE	278
#define	EXIST	279
#define	FRAME	280
#define	FOR	281
#define	WHILE	282
#define	DO	283
#define	TRUE	284
#define	FALSE	285
#define	REPEAT	286
#define	UNTIL	287
#define	DISPLAY	288
#define	SKIP	289
#define	THEN	290
#define	COMMA	291
#define	COLON	292
#define	INTDECLARATION	293
#define	STRDECLARATION	294
#define	POINTERDECLARATION	295
#define	CHARDECLARATION	296
#define	VOIDDECLARATION	297
#define	FLOATDECLARATION	298
#define	LISTDECLARATION	299
#define	OPEN_PAR	300
#define	CLOSE_PAR	301
#define	TIMES	302
#define	OPEN_BPAR	303
#define	CLOSE_BPAR	304
#define	OPEN_MPAR	305
#define	CLOSE_MPAR	306
#define	FUNCTION	307
#define	OVER	308
#define	CYLINDER	309
#define	OVEREP	310
#define	INTER_OR	311
#define	NON_DETERMINED	312
#define	SEND	313
#define	RECEIVE	314
#define	PROCESS	315
#define	CHANNEL	316
#define	PUT	317
#define	GET	318
#define	ERROR_TOKEN	319
#define	EXTERN	320
#define	UNSIGNED	321
#define	SIGNED	322
#define	CHOP	323
#define	OR	324
#define	PARALLEL	325
#define	AND	326
#define	ASS_P	327
#define	ASS_N	328
#define	CON	329
#define	ADDRESS	330
#define	BOOL_AND	331
#define	IMPLY	332
#define	IFF	333
#define	PROPIMPLY	334
#define	NE	335
#define	EQ	336
#define	GE	337
#define	LE	338
#define	GT	339
#define	LT	340
#define	LST	341
#define	RST	342
#define	ADD	343
#define	SUB	344
#define	MUL	345
#define	DIV	346
#define	MOD	347
#define	BNE	348
#define	BOOL_OR	349
#define	CHOPSTAR	350
#define	NEXT	351
#define	NEGATION	352
#define	LENGTH	353
#define	REQUEST	354
#define	FINAL	355
#define	KEEP	356
#define	ALWAYS	357
#define	HALT	358
#define	W_NEXT	359
#define	PREFIX	360
#define	SOMETIMES	361
#define	ID	362
#define	STRLITERAL	363
#define	STRUCT_TYPE	364
#define	INTLITERAL	365
#define	FLOATLITERAL	366
#define	CHARLITERAL	367

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1049
#define	YYFLAG		-32768
#define	YYNTBASE	113

#define YYTRANSLATE(x) ((unsigned)(x) <= 367 ? yytranslate[x] : 185)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   216,
   226,   228,   230,   238,   242,   244,   248,   250,   251,   256,
   262,   267,   272,   275,   278,   281,   284,   286,   289,   292,
   296,   300,   304,   308,   316,   325,   337,   351,   353,   355,
   357,   359,   361,   363,   366,   373,   378,   384,   390,   399,
   408,   411,   414,   417,   418,   425,   433,   434,   437,   441,
   443,   445,   447,   449,   453,   456,   458,   470,   483,   495,
   507,   525,   544,   562,   581,   601,   620,   638,   657,   675,
   677,   679,   681,   683,   694,   698,   700,   705,   711,   715,
   727,   740,   752,   764,   777,   781,   785,   788,   789,   792,
   795,   798,   806,   813,   818,   822,   824,   828,   832,   836,
   839,   845,   847,   850,   851,   853,   857,   859,   861,   863,
   865,   867,   869,   871,   873,   875,   877,   879,   881,   884,
   887,   889,   891,   893,   897,   899,   901,   903,   905,   907,
   909,   911,   913,   915,   917,   921,   923,   925,   929,   934,
   939,   944,   949,   954,   958,   962,   966,   967,   970,   973,
   976,   979,   982,   986,   991,   996,  1001,  1007,  1013,  1019,
  1025,  1031,  1038,  1044,  1050,  1057,  1063,  1070,  1078,  1085,
  1092,  1100,  1107,  1114,  1120,  1128,  1135,  1137,  1139,  1141,
  1143,  1145,  1147,  1149,  1152,  1155,  1157,  1159,  1163,  1166,
  1170,  1175,  1181,  1186,  1190,  1195,  1201,  1206,  1209,  1213,
  1218,  1221,  1225,  1230,  1235,  1241,  1249,  1254,  1258,  1264,
  1273,  1274,  1277,  1278,  1281,  1283,  1285,  1286,  1289,  1293,
  1294,  1297,  1301,  1304,  1308,  1311,  1313,  1317,  1319,  1321,
  1323,  1325,  1329,  1330,  1333,  1334,  1338,  1339,  1342,  1346,
  1350,  1354,  1358,  1364,  1374,  1376,  1378,  1379,  1381,  1382,
  1384,  1385,  1393,  1401,  1407,  1410,  1412,  1413,  1419,  1422,
  1423,  1428,  1434,  1435,  1439,  1444,  1450,  1455,  1461,  1466,
  1467,  1471,  1475,  1480,  1485,  1490,  1495,  1500,  1505,  1510,
  1515,  1522,  1527,  1532,  1537,  1544,  1548,  1552,  1557,  1561,
  1562,  1566,  1570,  1574,  1578,  1581
};

static const short yyrhs[] = {   114,
   117,     0,    12,   115,    13,     0,     0,   115,    71,   115,
     0,   115,    69,   115,     0,   115,    78,   115,     0,   115,
    79,   115,     0,   115,    68,   115,     0,   102,   115,     0,
   101,   115,     0,   106,   115,     0,   104,   115,     0,    96,
   115,     0,    34,     0,    22,     0,    23,     0,    98,   138,
     0,     9,     0,    20,     0,   103,   115,     0,   100,   115,
     0,    97,   115,     0,    48,   115,   116,    49,    11,    48,
   115,    49,     0,   107,     0,    21,   107,    37,   138,     0,
   115,    95,     0,    45,   115,    46,     0,    36,   115,   116,
     0,     0,   117,    71,   117,     0,   117,    69,   117,     0,
   117,    68,   117,     0,   128,     0,   123,     0,   174,     0,
   177,     0,   168,     0,   169,     0,   170,     0,    96,    45,
   117,    46,     0,   101,    45,   117,    46,     0,   102,    45,
   117,    46,     0,    10,    45,   138,    46,     0,    31,    48,
   117,    49,    32,    45,   138,    46,     0,    34,     0,     9,
     0,    20,     0,    98,    45,   138,    46,     0,   181,     0,
   179,     0,    29,     0,    30,     0,   100,    45,   117,    46,
     0,   117,    70,   117,     0,    45,   167,    46,    77,    50,
   117,    51,     0,    25,    45,   160,   165,    46,    71,    45,
   117,    46,     0,    48,   117,   166,    49,    11,   158,     0,
    48,   117,    49,    11,   158,     0,    52,   107,    45,   154,
    46,    48,   117,    49,     0,    21,   107,    45,   154,    46,
    72,    48,   119,    49,     0,   121,     0,   120,     0,    24,
   160,   155,    37,    48,   117,    49,     0,    45,   117,    46,
     0,   123,     0,   123,    71,   118,     0,   117,     0,     0,
   107,    45,   156,    46,     0,    65,   107,    45,   156,    46,
     0,   134,    45,   156,    46,     0,   122,    48,   118,    49,
     0,    16,   107,     0,    18,   107,     0,    67,   124,     0,
    66,   124,     0,   124,     0,   125,   126,     0,   109,   126,
     0,    16,   107,   126,     0,    18,   107,   126,     0,    16,
   109,   126,     0,    18,   109,   126,     0,    45,    90,   160,
    46,    45,   154,    46,     0,    45,    90,    90,   160,    46,
    45,   154,    46,     0,    45,    90,   107,    50,   138,   136,
    51,    46,    45,   154,    46,     0,    45,    90,   107,    50,
   138,   136,    51,    46,    45,   154,    46,    72,   144,     0,
    38,     0,    43,     0,    41,     0,    39,     0,    42,     0,
    19,     0,   160,   127,     0,   107,    50,   138,   136,    51,
   127,     0,   160,    72,   132,   127,     0,   107,    15,    72,
   144,   127,     0,   107,    15,    72,   161,   127,     0,   107,
    50,   138,   136,    51,    72,   144,   127,     0,   107,    50,
   138,   136,    51,    72,   161,   127,     0,    90,   126,     0,
    36,   126,     0,    36,     1,     0,     0,   107,    50,   138,
   136,    51,     0,     0,    36,   107,    50,   138,   136,    51,
     0,     0,     0,    36,     1,     0,   129,   131,   132,     0,
   160,     0,   183,     0,   134,     0,   137,     0,    45,   129,
    46,     0,    96,   129,     0,   130,     0,    45,    45,    41,
    90,    46,   110,    46,    50,   138,   136,    51,     0,    45,
    45,    66,    41,    90,    46,   110,    46,    50,   138,   136,
    51,     0,    45,    45,    38,    90,    46,   110,    46,    50,
   138,   136,    51,     0,    45,    45,    43,    90,    46,   110,
    46,    50,   138,   136,    51,     0,    45,    45,    41,    90,
    46,    45,    45,    41,    90,    46,   110,    46,    46,    50,
   138,   136,    51,     0,    45,    45,    41,    90,    46,    45,
    45,    66,    41,    90,    46,   110,    46,    46,    50,   138,
   136,    51,     0,    45,    45,    41,    90,    46,    45,    45,
    38,    90,    46,   110,    46,    46,    50,   138,   136,    51,
     0,    45,    45,    66,    41,    90,    46,    45,    45,    41,
    90,    46,   110,    46,    46,    50,   138,   136,    51,     0,
    45,    45,    66,    41,    90,    46,    45,    45,    66,    41,
    90,    46,   110,    46,    46,    50,   138,   136,    51,     0,
    45,    45,    66,    41,    90,    46,    45,    45,    38,    90,
    46,   110,    46,    46,    50,   138,   136,    51,     0,    45,
    45,    38,    90,    46,    45,    45,    41,    90,    46,   110,
    46,    46,    50,   138,   136,    51,     0,    45,    45,    38,
    90,    46,    45,    45,    66,    41,    90,    46,   110,    46,
    46,    50,   138,   136,    51,     0,    45,    45,    38,    90,
    46,    45,    45,    38,    90,    46,   110,    46,    46,    50,
   138,   136,    51,     0,    72,     0,    73,     0,   138,     0,
   144,     0,    45,   161,    46,    45,   125,    46,    45,   154,
    46,   120,     0,    45,   132,    46,     0,   133,     0,    90,
    45,   130,    46,     0,   107,    50,   138,   136,    51,     0,
    45,   134,    46,     0,    45,    45,    38,    90,    46,   160,
    46,    50,   138,   136,    51,     0,    45,    45,    66,    38,
    90,    46,   160,    46,    50,   138,   136,    51,     0,    45,
    45,    43,    90,    46,   160,    46,    50,   138,   136,    51,
     0,    45,    45,    41,    90,    46,   160,    46,    50,   138,
   136,    51,     0,    45,    45,    66,    41,    90,    46,   160,
    46,    50,   138,   136,    51,     0,    45,   135,    46,     0,
    36,   138,   136,     0,    36,     1,     0,     0,    90,   160,
     0,    90,   137,     0,    90,   134,     0,    45,   137,    46,
    50,   138,   136,    51,     0,    90,    45,   153,    90,    46,
   138,     0,    90,    45,   138,    46,     0,    45,   137,    46,
     0,   141,     0,   141,   151,   138,     0,   141,    76,   138,
     0,   141,    94,   138,     0,    97,   138,     0,     7,   138,
    35,   138,   140,     0,   141,     0,     8,   138,     0,     0,
   142,     0,   141,   143,   142,     0,   162,     0,   163,     0,
   164,     0,   161,     0,   160,     0,   134,     0,   137,     0,
   120,     0,   148,     0,   149,     0,   183,     0,   135,     0,
    89,   142,     0,    93,   142,     0,    14,     0,    22,     0,
    23,     0,    45,   138,    46,     0,    88,     0,    89,     0,
    90,     0,    91,     0,    92,     0,    86,     0,    87,     0,
    75,     0,    56,     0,    74,     0,   144,    74,   144,     0,
   145,     0,   146,     0,    45,   144,    46,     0,    50,   138,
   147,    51,     0,    50,   161,   147,    51,     0,    50,   144,
   147,    51,     0,    48,   138,   147,    49,     0,    48,   144,
   147,    49,     0,    36,   138,   147,     0,    36,   161,   147,
     0,    36,   144,   147,     0,     0,    36,     1,     0,    75,
   160,     0,    75,   134,     0,    75,   183,     0,    75,   148,
     0,    45,   148,    46,     0,    45,    38,    46,   139,     0,
    45,    43,    46,   139,     0,    45,    41,    46,   139,     0,
    45,    67,    38,    46,   139,     0,    45,    67,    41,    46,
   139,     0,    45,    66,    38,    46,   139,     0,    45,    66,
    41,    46,   139,     0,    45,    38,    90,    46,   150,     0,
    45,    66,    38,    90,    46,   150,     0,    45,    43,    90,
    46,   150,     0,    45,    41,    90,    46,   150,     0,    45,
    66,    41,    90,    46,   150,     0,    45,    42,    90,    46,
   150,     0,    45,    38,    90,    90,    46,   150,     0,    45,
    66,    38,    90,    90,    46,   150,     0,    45,    43,    90,
    90,    46,   150,     0,    45,    41,    90,    90,    46,   150,
     0,    45,    66,    41,    90,    90,    46,   150,     0,    45,
    42,    90,    90,    46,   150,     0,    45,    16,   109,    90,
    46,   150,     0,    45,   109,    90,    46,   150,     0,    45,
    16,   109,    90,    90,    46,   150,     0,    45,   109,    90,
    90,    46,   150,     0,   139,     0,    82,     0,    83,     0,
    80,     0,    84,     0,    85,     0,    81,     0,    66,    38,
     0,    66,    41,     0,   152,     0,   125,     0,   153,   160,
   155,     0,   153,   155,     0,   109,   160,   155,     0,   109,
    90,   160,   155,     0,   109,    90,    90,   160,   155,     0,
   109,   160,    15,   155,     0,   107,   160,   155,     0,   107,
    90,   160,   155,     0,   107,    90,    90,   160,   155,     0,
   107,   160,    15,   155,     0,   109,   155,     0,   109,    90,
   155,     0,   109,    90,    90,   155,     0,   107,   155,     0,
   107,    90,   155,     0,   107,    90,    90,   155,     0,   153,
   160,    15,   155,     0,   153,    90,   160,    15,   155,     0,
   153,   160,    15,    50,   138,    51,   155,     0,   153,    90,
   160,   155,     0,   153,    90,   155,     0,   153,    90,    90,
   160,   155,     0,    45,    90,   160,    46,    45,   154,    46,
   155,     0,     0,    36,   154,     0,     0,   132,   157,     0,
   153,     0,   109,     0,     0,    75,     1,     0,    36,   132,
   157,     0,     0,    36,     1,     0,    48,   117,    49,     0,
     1,    49,     0,    45,   138,    46,     0,     1,    46,     0,
   107,     0,    45,   160,    46,     0,   108,     0,   110,     0,
   112,     0,   111,     0,    36,   160,   165,     0,     0,    36,
     1,     0,     0,    36,   117,   166,     0,     0,    97,   167,
     0,   167,    71,   167,     0,   167,    69,   167,     0,    45,
   167,    46,     0,    27,   159,   158,     0,    26,   138,    47,
    28,   158,     0,    26,    45,   171,    36,   172,    36,   173,
    46,   158,     0,   128,     0,   124,     0,     0,   138,     0,
     0,   128,     0,     0,     3,    45,   142,    46,    48,   175,
    49,     0,     4,   142,    37,    45,   117,    46,   176,     0,
     6,    37,    45,   117,    46,     0,     5,   175,     0,   175,
     0,     0,     7,   138,    35,   158,   178,     0,     8,   158,
     0,     0,    33,    45,   132,    46,     0,    33,    45,   132,
   180,    46,     0,     0,    36,   132,   180,     0,    99,    45,
   160,    46,     0,    99,    45,   160,   182,    46,     0,    99,
    45,   134,    46,     0,    99,    45,   134,   182,    46,     0,
    99,    45,   183,    46,     0,     0,    36,   160,   182,     0,
    36,   134,   182,     0,   160,    17,   160,   184,     0,   134,
    17,   160,   184,     0,   137,    17,   160,   184,     0,   160,
    17,   134,   184,     0,   134,    17,   134,   184,     0,   137,
    17,   134,   184,     0,   160,    77,   160,   184,     0,   134,
    77,   160,   184,     0,    45,   148,    46,    77,   160,   184,
     0,   137,    77,   160,   184,     0,   160,    77,   134,   184,
     0,   134,    77,   134,   184,     0,    45,   148,    46,    77,
   134,   184,     0,   160,    17,   120,     0,   160,    77,   120,
     0,   137,    77,   134,   184,     0,    45,   183,    46,     0,
     0,    17,   160,   184,     0,    17,   134,   184,     0,    77,
   160,   184,     0,    77,   134,   184,     0,    17,   120,     0,
    77,   120,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   148,   179,   180,   184,   185,   186,   187,   188,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   206,   207,   208,
   209,   210,   211,   215,   216,   221,   222,   226,   230,   235,
   237,   244,   353,   354,   356,   357,   358,   359,   360,   361,
   363,   364,   366,   367,   368,   369,   370,   371,   377,   378,
   379,   380,   381,   382,   384,   387,   393,   397,   403,   411,
   421,   423,   425,   439,   443,   447,   454,   455,   460,   465,
   470,   479,   487,   498,   512,   513,   514,   518,   522,   526,
   530,   534,   538,   545,   547,   549,   554,   566,   567,   568,
   571,   572,   573,   580,   584,   588,   593,   599,   604,   611,
   617,   628,   630,   631,   635,   642,   646,   647,   655,   659,
   660,   661,   662,   663,   664,   665,   668,   670,   672,   674,
   676,   678,   680,   682,   684,   686,   688,   690,   692,   697,
   698,   701,   702,   703,   704,   705,   708,   712,   713,   717,
   722,   727,   732,   737,   742,   748,   750,   751,   757,   758,
   759,   761,   763,   765,   767,   773,   774,   775,   776,   777,
   778,   782,   786,   787,   791,   792,   796,   797,   798,   799,
   800,   801,   802,   803,   804,   805,   806,   807,   808,   809,
   810,   811,   812,   813,   816,   817,   818,   819,   820,   821,
   822,   823,   824,   825,   830,   831,   832,   833,   839,   843,
   851,   863,   876,   888,   892,   900,   904,   905,   908,   913,
   917,   922,   926,   933,   936,   937,   940,   941,   944,   945,
   948,   949,   950,   951,   952,   953,   956,   957,   958,   959,
   960,   961,   963,   964,   966,   967,   969,   980,   981,   982,
   983,   984,   985,   992,   994,   997,   999,  1005,  1009,  1014,
  1020,  1026,  1032,  1042,  1048,  1054,  1060,  1068,  1072,  1076,
  1082,  1086,  1090,  1096,  1102,  1109,  1115,  1121,  1125,  1133,
  1139,  1142,  1143,  1148,  1159,  1163,  1167,  1168,  1172,  1186,
  1187,  1195,  1197,  1204,  1206,  1212,  1213,  1217,  1222,  1227,
  1232,  1238,  1242,  1243,  1249,  1250,  1261,  1271,  1272,  1274,
  1276,  1282,  1288,  1296,  1304,  1308,  1312,  1318,  1322,  1328,
  1332,  1339,  1343,  1347,  1354,  1358,  1362,  1366,  1376,  1377,
  1383,  1384,  1388,  1389,  1394,  1395,  1396,  1397,  1398,  1401,
  1402,  1403,  1409,  1410,  1411,  1413,  1414,  1415,  1417,  1418,
  1419,  1420,  1422,  1423,  1424,  1425,  1426,  1427,  1428,  1432,
  1433,  1434,  1435,  1436,  1437,  1438
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND",
"POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE","DEFINE",
"MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT",
"UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","OR","PARALLEL","AND","ASS_P","ASS_N","CON","ADDRESS","BOOL_AND",
"IMPLY","IFF","PROPIMPLY","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB",
"MUL","DIV","MOD","BNE","BOOL_OR","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST",
"FINAL","KEEP","ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL",
"STRUCT_TYPE","INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition",
"complexProposition","poptional_projection","statement","option_struct_declaration",
"empty_statement","function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","array_cast_exp","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp",
"option_exp_else_statement","simple_ari_exp","member_in_exp","arith_operator",
"array_exp","option_list_value","option_struct_list_value","inner_option_list_value",
"address_exp","type_cast","casted_element","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   113,   114,   114,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   116,   116,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   118,   118,   119,   119,   120,   120,
   120,   121,   122,   122,   123,   123,   123,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   125,   125,   125,
   125,   125,   125,   126,   126,   126,   126,   126,   126,   126,
   126,   127,   127,   127,    -1,    -1,    -1,    -1,   128,   129,
   129,   129,   129,   129,   129,   129,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   131,
   131,   132,   132,   132,   132,   132,   133,   134,   134,   135,
   135,   135,   135,   135,   135,   136,   136,   136,   137,   137,
   137,   137,   137,   137,   137,   138,   138,   138,   138,   138,
   138,   139,   140,   140,   141,   141,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   144,   144,   144,   144,   145,   145,
   145,   146,   146,   147,   147,   147,   147,   147,   148,   148,
   148,   148,   148,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   150,   151,   151,   151,
   151,   151,   151,   152,   152,   153,   153,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   155,   155,   156,   156,   156,   156,   156,   157,   157,
   157,   158,   158,   159,   159,   160,   160,   161,   162,   163,
   164,   165,   165,   165,   166,   166,   167,   167,   167,   167,
   167,   168,   169,   170,   171,   171,   171,   172,   172,   173,
   173,   174,   175,   175,   176,   176,   176,   177,   178,   178,
   179,   179,   180,   180,   181,   181,   181,   181,   181,   182,
   182,   182,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   184,
   184,   184,   184,   184,   184,   184
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     8,     9,
     1,     1,     7,     3,     1,     3,     1,     0,     4,     5,
     4,     4,     2,     2,     2,     2,     1,     2,     2,     3,
     3,     3,     3,     7,     8,    11,    13,     1,     1,     1,
     1,     1,     1,     2,     6,     4,     5,     5,     8,     8,
     2,     2,     2,     0,     6,     7,     0,     2,     3,     1,
     1,     1,     1,     3,     2,     1,    11,    12,    11,    11,
    17,    18,    17,    18,    19,    18,    17,    18,    17,     1,
     1,     1,     1,    10,     3,     1,     4,     5,     3,    11,
    12,    11,    11,    12,     3,     3,     2,     0,     2,     2,
     2,     7,     6,     4,     3,     1,     3,     3,     3,     2,
     5,     1,     2,     0,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
     1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     3,     1,     1,     3,     4,     4,
     4,     4,     4,     3,     3,     3,     0,     2,     2,     2,
     2,     2,     3,     4,     4,     4,     5,     5,     5,     5,
     5,     6,     5,     5,     6,     5,     6,     7,     6,     6,
     7,     6,     6,     5,     7,     6,     1,     1,     1,     1,
     1,     1,     1,     2,     2,     1,     1,     3,     2,     3,
     4,     5,     4,     3,     4,     5,     4,     2,     3,     4,
     2,     3,     4,     4,     5,     7,     4,     3,     5,     8,
     0,     2,     0,     2,     1,     1,     0,     2,     3,     0,
     2,     3,     2,     3,     2,     1,     3,     1,     1,     1,
     1,     3,     0,     2,     0,     3,     0,     2,     3,     3,
     3,     3,     5,     9,     1,     1,     0,     1,     0,     1,
     0,     7,     7,     5,     2,     1,     0,     5,     2,     0,
     4,     5,     0,     3,     4,     5,     4,     5,     4,     0,
     3,     3,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     6,     3,     3,     4,     3,     0,
     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,    93,    47,     0,
     0,     0,     0,     0,    51,    52,     0,     0,    45,    88,
    91,    90,    92,    89,   297,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   286,     0,     1,
    62,    61,     0,    34,    77,     0,    33,     0,   116,   112,
   113,   110,    37,    38,    39,    35,    36,    50,    49,   111,
     0,     0,    29,    13,    22,     0,   181,   182,   183,     0,
     0,     0,     0,     0,   288,   289,   291,   290,   174,   172,
   178,   173,    17,   156,   165,   175,   176,   171,   170,   167,
   168,   169,   177,    21,    10,     9,    20,    12,    11,     2,
     0,     0,     0,     0,     0,    26,     0,     0,     0,    73,
     0,    74,     0,     0,     0,   286,   273,     0,   307,     0,
     0,     0,     0,     0,     0,   297,     0,   297,     0,     0,
   112,   113,     0,   110,     0,   111,     0,     0,     0,     0,
     0,     0,    76,    75,     0,   286,   151,   150,   149,     0,
     0,   115,   112,     0,     0,     0,     0,     0,   277,     0,
     0,   286,    79,   104,     0,     0,     0,     0,     0,    78,
   130,   131,     0,     0,   277,     0,     0,     0,     0,     0,
     0,    27,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   172,   178,   173,     0,   175,   171,
   177,     0,   210,     0,   212,   209,   211,   179,   180,   160,
   193,   194,   192,     0,   240,   243,   238,   239,   241,   242,
   190,   191,   185,   186,   187,   188,   189,     0,     0,     0,
     8,     5,     4,     6,     7,     0,     0,     0,    80,    82,
    81,    83,   271,     0,   271,     0,   293,     0,    88,    90,
    92,    89,     0,     0,   306,   305,   172,   173,   171,     0,
   177,     0,   285,     0,     0,     0,   302,     0,     0,     0,
     0,     0,     0,   136,   132,   133,   196,   197,    88,    90,
    89,     0,     0,     0,     0,   286,   149,   297,   298,    64,
   114,   139,   155,     0,   287,     0,   297,   297,   349,     0,
     0,     0,   271,   277,     0,     0,     0,     0,   247,     0,
   246,     0,   297,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   276,   280,   275,     0,   148,   101,
     0,     0,     0,     0,    94,    32,    31,    54,    30,     0,
    65,   109,     0,   350,   350,     0,   350,   350,   350,   350,
   350,   350,   346,   350,   350,   347,   350,   350,    25,    29,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
   184,   213,     0,     0,     0,     0,   158,   159,   166,   157,
     0,   320,    43,     0,   273,   273,   273,     0,   272,     0,
     0,     0,     0,     0,     0,     0,   309,     0,   284,   283,
     0,     0,     0,     0,     0,     0,   170,     0,   207,   207,
   207,   207,   170,     0,     0,   321,     0,     0,     0,     0,
     0,    90,   301,   149,     0,     0,     0,     0,     0,     0,
   300,   299,   295,     0,     0,     0,     0,     0,   286,     0,
   244,   245,   154,     0,    40,     0,     0,    48,     0,   327,
     0,   325,     0,   329,    53,    41,    42,   278,     0,   274,
    69,     0,     0,     0,   148,   103,   102,   104,    72,     0,
     0,     0,     0,   337,   334,    71,   344,   340,   338,   335,
   348,   342,   336,   333,   343,   339,    28,     0,   164,     0,
   214,   162,     0,     0,   216,     0,     0,     0,     0,   215,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   318,     0,   273,
   261,   273,   273,   258,   273,   273,   249,   273,     0,     0,
   294,   293,     0,     0,     0,     0,     0,     0,     0,   308,
     0,   303,   282,     0,   135,   198,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   323,   322,     0,
   195,     0,     0,     0,     0,     0,   148,   271,   301,   148,
   350,   350,     0,   296,    58,     0,     0,    70,     0,     0,
     0,     0,     0,     0,     0,   330,   330,   328,   326,   281,
   280,   147,   148,   138,   104,   104,     0,    96,    66,   355,
   350,   350,   356,   350,   350,     0,     0,   161,     0,     0,
   237,   221,     0,   224,     0,   226,     0,   223,     0,     0,
     0,     0,     0,     0,   219,     0,     0,   220,     0,     0,
   217,   218,   234,     0,     0,     0,     0,   319,     0,   273,
   262,   273,   273,   254,   273,   259,   273,   273,   250,     0,
   268,   273,   273,   248,     0,     0,   292,     0,     0,     0,
     0,     0,     0,   311,     0,     0,   208,   207,   207,   170,
   202,   203,   199,   201,   200,     0,   137,   324,     0,     0,
     0,     0,     0,     0,   271,     0,     0,     0,   345,   341,
     0,    57,     0,   148,   153,     0,   332,   331,   279,   146,
    97,    98,   104,   352,   351,   354,   353,     0,   163,   233,
     0,   227,   230,   232,   229,   171,   171,   171,     0,     0,
   222,     0,   225,     0,   236,     0,     0,   312,     0,   263,
   273,   255,   257,   260,   273,   251,   253,   273,   273,   267,
     0,   264,    68,    63,     0,     0,     0,     0,     0,   310,
     0,     0,     0,   204,   206,   205,     0,     0,     0,     0,
     0,     0,     0,     0,   138,    84,   152,    55,     0,     0,
     0,    95,    23,   235,     0,     0,     0,   171,   171,   228,
   231,     0,     0,   271,   256,   252,   269,   265,     0,    67,
     0,     0,     0,   289,     0,   289,   289,     0,     0,    44,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    85,     0,    59,     0,   104,   104,     0,     0,
     0,     0,     0,     0,     0,     0,   273,    60,    56,     0,
     0,     0,   289,   304,   271,     0,     0,     0,   148,     0,
     0,     0,   148,   148,     0,     0,     0,     0,   271,    99,
   100,   148,   148,   148,     0,     0,     0,   314,   273,   266,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   148,     0,     0,     0,     0,   148,   148,   317,   270,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   119,     0,     0,     0,   117,   120,     0,     0,
     0,     0,    86,   140,   143,   142,     0,     0,     0,   316,
   313,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   134,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   118,     0,   141,   144,   315,   289,   289,
     0,   289,   289,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    87,   289,   289,
   289,   289,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   289,   148,   148,     0,   148,   148,     0,     0,
     0,     0,     0,     0,   148,     0,     0,   148,   148,   148,
     0,   129,   127,     0,   123,   121,     0,     0,     0,   148,
   128,   122,   126,   124,     0,   125,     0,     0,     0
};

static const short yydefgoto[] = {  1047,
     2,    21,   204,   149,   360,   821,    99,    62,    63,    64,
    65,    66,   350,   355,    67,    68,    69,   193,   346,   294,
   100,   101,   493,   102,   218,   641,   638,   104,   105,   249,
   296,   297,   298,   581,   106,   107,   642,   250,   331,   417,
   418,   266,   348,   490,   287,   143,   108,   109,   110,   111,
   112,   422,   322,   155,    73,    74,    75,   280,   571,   781,
    76,   667,   951,    77,   548,    78,   447,    79,   481,   113,
   504
};

static const short yypact[] = {     5,
   441,  2420,-32768,-32768,   -70,-32768,-32768,-32768,   441,   441,
   441,   441,  1834,   441,   441,   441,   441,   441,   441,-32768,
    18,    45,  1834,-32768,    65,    21,   152,-32768,-32768,    15,
   -27,   140,  2266,    94,-32768,-32768,   164,   201,-32768,-32768,
-32768,-32768,-32768,-32768,  2106,  2420,   145,   212,   455,   455,
   256,   160,   287,   343,   356,   394,   398,   288,   261,   983,
-32768,-32768,   429,-32768,-32768,   261,-32768,   362,-32768,   180,
    -1,   156,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   475,   735,   655,   397,   397,  1834,-32768,-32768,-32768,  2968,
   255,   846,   846,  1834,-32768,-32768,-32768,-32768,-32768,   180,
-32768,    -1,-32768,  2316,-32768,-32768,-32768,   156,-32768,-32768,
-32768,-32768,-32768,   397,   397,   397,   397,   397,   397,-32768,
   441,   441,   441,   441,   441,-32768,   846,   491,  1834,   261,
   261,   261,   261,   515,   -27,-32768,   542,   -27,  2459,   527,
   596,  1834,    58,  2420,  3491,  2218,   269,    48,   916,   689,
   474,   353,   616,   434,   444,   657,   838,   556,   667,   570,
   661,   498,-32768,-32768,  3396,   678,-32768,-32768,-32768,  2319,
   213,-32768,   217,  1834,   299,  2420,  2420,  2420,  2539,  1834,
   261,   -10,-32768,    68,  2420,  2420,  2420,  2420,   564,-32768,
-32768,-32768,  3491,    -2,  2539,    -2,    -2,    -2,    70,    70,
  1834,-32768,   441,   710,   681,   622,    54,    56,   711,   149,
  3007,   403,   469,   712,   474,   770,   353,   787,   793,   434,
   657,   255,   217,    -1,-32768,   156,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1834,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1834,   846,  1834,
   825,   334,   772,   714,   714,   797,    58,   807,-32768,-32768,
-32768,-32768,   676,   808,   676,   792,   828,   669,    54,    56,
   711,   149,  2890,   310,-32768,-32768,   102,   380,   432,   834,
   816,   847,-32768,   831,   832,  2420,-32768,   861,  2617,  3541,
  3541,   358,    81,-32768,-32768,   821,-32768,-32768,   809,   815,
   843,   668,   793,   592,   256,   884,   895,    48,-32768,-32768,
-32768,-32768,   888,   871,-32768,   875,    48,    48,-32768,  2420,
   940,   906,   676,  2539,   261,   261,   376,   520,-32768,   914,
-32768,   873,  2218,   944,    24,   918,   255,   410,   478,   921,
   959,   965,  1033,   195,-32768,   932,-32768,   924,   939,-32768,
   904,  1834,   117,  3491,-32768,   853,   922,   922,-32768,   951,
   930,-32768,    -2,   236,   236,   958,   236,   236,   236,   236,
   236,   236,-32768,   485,   236,-32768,   485,   236,-32768,   655,
   999,  1834,   926,   846,   182,   846,   190,   220,   846,   227,
   290,   370,   378,   555,   391,   413,   974,   976,   462,-32768,
-32768,   871,   500,   353,   434,   657,-32768,-32768,-32768,-32768,
   969,  1015,-32768,   941,   -33,    34,    46,   995,-32768,   990,
    26,   997,   377,  2929,  1000,   218,  1834,    58,-32768,-32768,
   991,  1017,  2695,  1009,   787,   205,  1018,  2773,  1029,   224,
  1029,   224,  1029,  3435,  3491,-32768,  1020,   892,  1021,  1026,
  1031,   981,   875,  1032,  1834,  1036,   717,  1834,    -2,  1037,
  1011,-32768,   857,    58,  1080,  1043,  1053,   -27,  1055,   895,
-32768,-32768,-32768,  1060,-32768,   525,   500,-32768,    -2,-32768,
  1061,-32768,  1062,-32768,-32768,-32768,-32768,-32768,   682,-32768,
-32768,  1025,  1066,    13,   939,-32768,-32768,  1083,-32768,   564,
  1079,    70,    70,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1099,  1119,   481,
-32768,   891,   846,  1082,-32768,   846,  1085,   846,  1104,-32768,
   846,  1109,   482,   486,   538,   543,   549,   846,   553,   846,
   568,   846,   846,   846,  1113,   819,    58,-32768,   -27,    47,
-32768,   554,   136,-32768,   612,   209,-32768,   666,  1088,  2420,
-32768,   828,  1094,   308,   577,   580,   590,   628,   333,-32768,
  1130,-32768,-32768,  1122,-32768,-32768,  1125,  2851,   205,  1911,
  1124,  1126,  1128,  1132,  1134,  3046,  1140,  1138,-32768,   892,
-32768,   -26,   -22,  1090,  1142,  1131,   939,   676,-32768,   939,
   236,   236,  2420,-32768,-32768,    58,  1141,-32768,  1032,  1834,
  1834,   809,   815,   843,  1160,  1166,  1166,-32768,-32768,-32768,
   932,-32768,   939,-32768,   313,  1083,  1153,-32768,-32768,-32768,
   485,   236,-32768,   485,   236,   441,  1834,-32768,   846,  1159,
-32768,-32768,   846,-32768,   846,-32768,   846,-32768,   846,   846,
   846,   846,   595,   598,-32768,   846,  1161,-32768,   846,  1162,
-32768,-32768,-32768,   846,   846,  1169,  1163,-32768,  1164,    -4,
-32768,   542,   542,-32768,    -4,-32768,   542,   542,-32768,   -27,
-32768,   733,   194,-32768,  1165,  1093,-32768,  1170,   365,   600,
   632,   647,   648,   213,  1834,  1115,-32768,  1029,   224,  1029,
-32768,-32768,-32768,-32768,-32768,  3085,-32768,-32768,  1171,  1168,
  1174,  1175,  1177,   -16,   676,  1158,  1180,  1176,-32768,-32768,
  1127,-32768,  2420,   939,-32768,   981,-32768,-32768,-32768,-32768,
-32768,-32768,   366,-32768,-32768,-32768,-32768,   763,-32768,-32768,
   846,-32768,-32768,-32768,-32768,   508,   533,   548,   846,   846,
-32768,   846,-32768,   846,-32768,  1183,  1184,-32768,  1185,-32768,
   542,-32768,-32768,-32768,   542,-32768,-32768,   542,   542,-32768,
  1834,-32768,  2420,-32768,  2420,  1222,  1450,  1980,   651,-32768,
  1182,  1186,  1188,-32768,-32768,-32768,    60,  1187,   309,  1189,
  1190,  1193,  1195,  1204,  1205,-32768,-32768,-32768,  1123,  1196,
    13,-32768,-32768,-32768,  1202,  1207,  1208,   591,   599,-32768,
-32768,  1214,  2420,   676,-32768,-32768,-32768,-32768,  1211,   983,
  1219,  1042,  3124,  1168,  3163,  1175,  1177,  3357,    58,-32768,
  1224,  1121,  1191,  1229,  1834,  1192,  1198,  1231,  1834,  1834,
   783,  1223,-32768,  1232,-32768,  1205,   313,  1083,  1834,  1834,
  1834,  1228,  1230,  2420,  1070,  1233,   542,-32768,-32768,  3202,
  3241,  3280,  1195,-32768,   676,  1237,  1244,  1203,   939,  1248,
  1249,  1206,   939,   939,  1209,  1212,  1257,  1834,   676,-32768,
-32768,   939,   939,   939,  1834,  1834,  1075,-32768,   542,-32768,
   654,   674,   841,   683,   690,   860,  3319,  1255,  1197,  1199,
  1259,  1263,  1210,  1213,  1260,  1265,  1266,  1262,  1275,  1234,
   939,  1279,  1276,  1277,  1284,   939,   939,   992,-32768,   694,
   697,   705,   707,   708,   720,   721,   745,   874,   158,  1280,
  1291,  1235,-32768,  1292,  1293,  1236,-32768,-32768,  1240,  1242,
  1295,  1302,  1271,-32768,-32768,-32768,  1303,  1304,   819,-32768,
-32768,  3507,  3547,   750,  3619,  3646,   754,   762,   769,   771,
    64,   288,-32768,  1299,  1310,  1312,  1313,  1314,  1315,  1316,
  1317,  1319,  1256,-32768,   892,-32768,-32768,-32768,  1280,  1291,
  3653,  1292,  1293,  3659,  3754,  3760,   773,   678,  1318,  1322,
  1323,  1325,  1326,  1327,  1332,  1333,  1334,   821,  1313,  1316,
  1317,  1319,  3766,  1834,  1834,  1331,  1834,  1834,  1335,  1339,
  1340,  1336,  1334,   939,   939,  1834,   939,   939,  1834,  1834,
  1834,  1341,  1342,  1343,   939,  1344,  1345,   939,   939,   939,
  1834,-32768,-32768,  1348,-32768,-32768,  1352,  1354,  1355,   939,
-32768,-32768,-32768,-32768,  1356,-32768,  1274,  1384,-32768
};

static const short yypgoto[] = {-32768,
-32768,    35,  1012,   105,   908,-32768,    32,-32768,-32768,  -188,
   -28,  -140,    83,  -462,  -137,    23,   966,-32768,   -85,-32768,
   898,    -5,   402,  1078,   -13,  -351,-32768,  1238,   -79,-32768,
  -283,-32768,-32768,  -376,  1201,-32768,  1056,-32768,-32768,  -123,
  -261,   971,  -186,   788,  -242,-32768,   196,  -265,-32768,-32768,
-32768,   852,   955,  -118,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -806,-32768,-32768,-32768,-32768,   833,-32768,  -328,  1258,
   282
};


#define	YYLAST		3878


static const short yytable[] = {   103,
   361,   276,   265,   419,   351,   436,   440,   442,   366,   128,
   483,   135,   228,   229,   412,   197,     1,   135,   709,   140,
   163,   164,   711,   437,   329,   443,   561,   304,   792,   309,
   120,   265,   521,    61,   525,   628,    81,   530,   329,   352,
   135,   332,   363,    82,    83,    84,    85,   256,   114,   115,
   116,   117,   118,   119,   329,   347,   550,   590,   285,   293,
   290,   466,   291,   582,   583,   584,   585,   150,   476,   265,
   135,   347,   205,   136,   172,   198,    61,    61,   135,   136,
   230,   265,   265,   710,   216,   121,   122,   712,   123,   127,
   135,   135,   308,   793,   141,   124,   125,   832,    91,   384,
   833,   386,   136,   353,   166,   286,    60,   362,   961,   129,
   275,   950,   126,    51,   363,   258,   445,   496,   194,   171,
    95,   134,   329,   553,   329,   834,   446,   130,   284,   131,
   166,   295,   136,   216,    48,   556,   670,   467,   142,   354,
   136,   183,   978,   385,   148,   387,   195,   312,   190,   436,
   157,   330,   136,   136,   579,   251,   252,   253,   254,   255,
   336,   135,   731,   732,   591,   295,   349,   437,   150,   409,
   988,   265,   199,  -112,  -112,    61,    58,    61,   196,   295,
   135,   295,   329,   329,   138,   572,   655,   379,   658,   457,
   661,   662,   150,   172,   389,   488,   194,    72,   461,   462,
   347,    61,   961,   434,   170,   216,   181,    61,    61,    61,
   625,   144,   259,   260,   261,   262,    61,    61,    61,    61,
   407,   605,    48,   182,   195,   675,   137,   523,   626,   265,
   373,   376,   200,   194,   408,   526,   410,   380,   390,   222,
   154,    72,   136,   771,   265,   145,   169,    72,   288,    51,
   576,   158,   502,   135,   184,   171,   196,   335,   132,   580,
   133,   184,   135,   544,   962,   528,   166,   216,   498,    91,
   802,   524,   531,   163,   334,   435,   439,   441,   448,   527,
   341,   342,   343,   216,    51,   220,   226,   727,   728,   356,
   357,   358,   359,   196,   579,   425,   699,   448,   680,   222,
   165,   166,    51,   329,   668,   135,   579,   569,   171,   529,
   295,   361,   503,   165,   700,   136,   532,    61,   159,   166,
   332,   784,   785,   786,   182,   184,   184,   184,   184,    91,
   264,   174,   179,   267,   279,   384,   717,   180,   495,    72,
   295,   154,   307,   337,    51,    51,   836,   434,   353,   837,
   181,    61,   135,   639,   135,   150,   183,   425,   305,   588,
   220,   166,   166,   722,    61,   154,    72,   182,   519,   197,
   339,    72,    72,    72,   838,   306,   184,   135,   664,   533,
    72,    72,    72,    72,   880,   881,   448,   175,    51,   365,
   431,   368,   370,   372,   375,   378,   197,   689,   313,   426,
   176,   353,   444,   621,   123,   166,   220,   259,   261,   135,
   741,   124,   125,   570,   182,   386,   182,   405,   216,   435,
   135,   135,   181,   389,   463,   313,   194,   216,   126,   198,
   330,   295,   216,   191,   192,   497,   538,   801,   177,   182,
   395,   597,   178,   396,   600,   479,   425,    51,   199,     3,
   199,  -113,  -113,   794,   181,   480,   198,   329,   540,   534,
     4,     5,     6,     7,   166,   468,   564,   535,   279,   184,
   160,   182,   161,    28,     8,   295,   189,   315,   623,   315,
   539,    72,   469,   182,   220,     9,   196,   169,    10,   316,
   194,-32768,    40,    41,   199,    42,    43,    44,   425,   162,
   454,   502,   541,  -110,  -110,   260,   397,   544,   200,   398,
   200,   201,   317,   479,   318,    72,   194,   847,   195,   312,
   184,   184,   470,   482,   199,   257,   639,   650,   154,   195,
   154,   651,   405,   630,   633,   848,    11,    12,    13,   226,
    14,    15,    16,    17,    18,   312,    19,    20,   184,   199,
   196,   545,   856,   805,   200,   783,   780,   471,   264,   263,
   472,   503,   612,    59,   199,   613,   698,   614,   673,   476,
   640,   524,   216,   282,   329,   527,   196,   265,   806,   160,
   216,   161,    28,   652,   200,   756,   864,   327,   538,   265,
   615,    61,   536,   807,   540,   537,   724,   725,   656,    91,
   323,    40,    41,   898,    42,    43,    44,   199,   162,   200,
   552,   555,   558,   659,    51,   199,   562,   912,   184,   279,
   171,   184,   384,   739,   200,   386,   678,   532,   220,    49,
    50,   166,   653,   220,    61,   389,   852,   453,   654,   220,
   749,   283,   657,   750,   853,   776,   505,   265,   507,   508,
   509,   510,   511,   512,   602,   513,   514,   660,   515,   516,
   317,   314,   318,   609,   686,   536,   690,   200,   693,   691,
   738,   154,    59,   329,   617,   200,   325,   777,   131,   692,
   683,   782,   620,   160,   657,   161,    28,   660,    86,   524,
   203,   998,   778,   540,    28,    87,   828,   632,   635,   384,
   216,   265,   319,    88,    89,    40,    41,   721,   452,    43,
    44,   324,   162,    40,    41,   382,    42,    43,    44,   386,
   414,   527,   121,   122,   329,   123,   289,   180,   384,   290,
   383,   291,   124,   125,   311,   386,   532,   779,   329,   952,
   660,   328,   953,   920,   669,   672,    48,   769,   677,   126,
   540,   682,   955,   956,    61,    72,    91,   819,   381,   184,
   191,   192,   599,   921,   184,   540,   384,   326,   265,   133,
    92,   292,   923,   220,    93,   325,    59,   423,    94,   924,
   202,   220,   415,   524,   416,   317,   527,   318,    58,    95,
   386,    96,    97,    98,   954,   981,   524,   527,    72,   984,
   388,   399,   121,   122,    61,   123,    61,   985,   126,   957,
   958,   803,   124,   125,   986,   400,   540,   216,  1003,   216,
   875,   869,   665,   876,   666,   873,   874,   799,   420,   126,
   121,   122,   401,   123,   959,   882,   883,   884,   402,   660,
   124,   125,   411,   660,    61,   746,   747,   748,   877,   124,
   125,   524,   413,   315,   216,   216,   216,   126,   527,    87,
   987,   319,   660,   421,   911,   761,   126,    88,    89,   427,
   765,   916,   917,   320,   428,   768,   429,   820,   536,   822,
   430,   922,   719,   720,   184,    61,   321,  -111,  -111,    72,
    90,   216,   320,   122,   448,   123,   627,   536,   449,    70,
   925,   220,   124,   125,   450,   185,   186,   187,   188,   432,
    48,   536,   734,   735,   960,   736,   737,   855,    72,   126,
    91,   186,   187,   188,   185,   186,   187,   188,   185,   186,
   187,   188,   451,   455,    92,    51,   590,   458,    93,   290,
   456,   291,   151,    70,   808,   809,   231,   459,   167,   173,
   464,   460,    58,    95,   465,    96,    97,    98,   887,   473,
   963,   310,   474,   478,   232,   233,   484,   489,    72,   491,
    72,   746,   747,   748,   492,   494,   241,   242,   243,   244,
   245,   246,   247,   185,   186,   187,   188,   215,   223,   475,
  1014,  1015,   188,  1017,  1018,   665,   949,   666,   716,   499,
   500,   718,  1025,   506,   485,  1028,  1029,  1030,    72,   518,
   486,   185,   186,   187,   188,   520,   546,  1040,   220,   542,
   220,   543,   547,   809,   730,   622,   185,   186,   187,   188,
   549,    86,   185,   186,   187,   188,   277,   560,    87,   573,
   559,    70,   563,   151,   167,   311,    88,    89,   574,    72,
   185,   186,   187,   188,   575,   220,   220,   220,   185,   186,
   187,   188,   215,   577,   580,   589,   592,   151,   173,    90,
   595,   593,   338,    70,    70,    70,   594,   596,   487,    71,
   598,   318,    70,    70,    70,    70,   603,   859,   607,    48,
   606,   364,   220,   367,   369,   371,   374,   377,   608,    91,
   185,   186,   187,   188,   610,   611,   618,   619,   215,   185,
   186,   187,   188,    92,    51,   888,   624,    93,   353,   403,
   918,    94,   152,    71,   312,   800,   637,   643,   168,    71,
   645,    58,    95,    28,    96,    97,    98,   185,   186,   187,
   188,   774,   185,   186,   187,   188,   636,   746,   747,   647,
   746,   747,    40,    41,   649,    42,    43,    44,   664,   685,
   185,   186,   187,   188,   688,   694,   695,   217,   224,   696,
   277,   845,   701,   445,   702,   715,   809,   798,   703,   809,
   746,   747,   704,    70,   705,   707,   215,   714,   723,   167,
   185,   186,   187,   188,   185,   186,   187,   188,   809,   713,
   726,   479,   167,   733,   741,   757,   752,   754,   795,   759,
   866,   758,   773,   788,   775,   787,   278,    70,   789,   812,
   790,    71,   791,   152,   168,   796,   797,   829,   813,   814,
   151,   830,   477,   831,   403,    87,   835,   841,   839,   840,
   842,   223,   217,    88,    89,   153,   846,   152,    71,   843,
   844,   849,   224,    71,    71,    71,   850,   851,   854,    80,
   501,   857,    71,    71,    71,    71,   823,   858,   865,   868,
   902,   872,   878,  1048,   906,   907,   879,   885,   889,   886,
   867,   870,   899,   913,   914,   915,    48,   871,   217,   900,
   219,   225,   901,   903,   904,   905,    91,   910,   908,   404,
   929,   909,   156,    80,   932,   936,   930,   939,   931,    80,
    92,    51,   942,   933,    93,   937,   938,   947,   948,   934,
   940,   277,   935,   941,   943,   965,   944,   945,    58,    95,
   215,   824,    97,    98,   946,   215,   966,   968,   969,   219,
   973,   215,   975,   195,   967,   970,   303,   221,   227,   971,
   278,   972,   974,   976,   977,   989,   601,   990,   991,   992,
   993,   994,   995,    71,   996,   997,   217,  1004,  1006,   168,
   153,  1005,  1009,   477,  1007,  1008,   616,  1010,  1011,  1012,
  1016,  1022,   168,  1049,  1019,   551,   554,   557,  1020,  1021,
  1031,   517,  1032,  1033,  1035,  1036,   281,    71,  1041,   631,
   634,    80,  1042,   156,  1043,  1044,  1046,   629,   729,   587,
   152,   219,   152,   687,   404,  1023,  1024,   604,  1026,  1027,
   708,   224,   303,     0,     0,     0,  1034,   156,    80,  1037,
  1038,  1039,   340,    80,    80,    80,     0,     0,     0,     0,
     0,  1045,    80,    80,    80,    80,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    70,     0,     0,
     0,     0,     0,    87,     0,     0,     0,     0,   221,     0,
     0,    88,    89,   219,     0,   215,     0,     0,     0,   406,
     0,     0,     0,   215,     0,     0,     0,     0,     0,   219,
     0,     0,     0,     0,   825,     0,     0,     0,     0,     0,
    70,   278,     0,     0,     0,     0,     0,     0,     0,     0,
   217,     0,     0,     0,    48,   217,     0,     0,     0,     0,
   671,   217,   674,   676,    91,   679,   681,     0,   684,     0,
   281,     0,     0,   303,     0,   153,     0,   153,    92,    51,
     0,     0,    93,    80,   225,     0,   221,     0,     0,     0,
     0,     0,     0,   152,     0,     0,    58,    95,     0,   826,
    97,    98,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    80,     0,     0,
     0,   644,     0,   646,     0,     0,   648,     0,     0,     0,
   156,   173,   156,     0,   406,     0,     0,     0,     0,   663,
     0,   227,     0,   215,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    70,   522,     0,   522,   219,     0,   522,     0,     0,     0,
     0,     0,     0,   219,     0,     0,     0,    71,   219,     0,
   760,     0,   762,   763,     0,   764,     0,   766,   767,     0,
     0,     0,   770,   772,     0,   217,     0,     0,     0,     0,
     0,     0,     0,   217,     0,     0,     0,     0,     0,     0,
    70,     0,    70,     0,     0,     0,   303,     0,     0,     0,
    71,   281,     0,     0,     0,     0,     0,     0,     0,     0,
   221,     0,     0,     0,   740,   221,     0,     0,   742,     0,
   743,     0,   744,     0,   745,     0,   644,   648,     0,     0,
    70,   751,     0,     0,   753,     0,     0,     0,     0,   755,
   215,     0,   215,     0,     0,     0,     0,     0,     0,     0,
     0,   815,     0,   156,     0,   816,     0,     0,   817,   818,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    70,     0,     0,     0,     0,     0,   215,   215,   215,
   522,     0,     0,   522,     0,   522,     0,     0,   522,     0,
     0,    71,     0,     0,     0,   522,     0,   522,   219,   522,
   522,   522,     0,   217,     0,     0,   219,     0,     0,     0,
     0,     0,     0,     0,   215,     0,   804,     0,     0,     0,
    71,     0,     0,     0,   751,   753,     0,   810,     0,   811,
     0,     0,     0,     0,     0,     0,     0,    80,     0,     0,
     0,     0,     0,     0,     0,     0,   964,   890,     0,     0,
     0,     0,   644,   648,     0,   221,     0,     0,     0,     0,
    86,     0,     0,   221,     0,     0,     0,    87,     0,     0,
    71,     0,    71,     0,     0,    88,    89,     0,   501,   919,
    80,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   522,     0,    90,     0,
   522,     0,   522,   753,   522,     0,   522,   522,   522,   522,
    71,     0,     0,   522,     0,     0,   522,     0,    48,     0,
   217,   522,   217,     0,     0,     0,   219,     0,    91,     0,
     0,   697,     0,     0,     0,     0,     0,    86,     0,     0,
     0,     0,    92,    51,    87,     0,    93,     0,     0,     0,
    94,    71,    88,    89,     0,     0,     0,   217,   217,   217,
    58,    95,     0,    96,    97,    98,     0,     0,     0,     0,
     0,    80,     0,     0,     0,   438,     0,     0,   290,     0,
   291,     0,     0,   221,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   217,    48,     0,     0,   522,     0,
    80,     0,     0,     0,     0,    91,   522,   522,     0,   522,
     0,   522,     0,    87,     0,     0,     0,     0,     0,    92,
    51,    88,    89,    93,     0,     0,     0,    94,   644,     0,
     0,   644,     0,   522,   522,   522,     0,    58,    95,     0,
    96,    97,    98,   219,    90,   219,     0,     0,     0,     0,
    80,     0,    80,     0,     0,     0,   753,     0,     0,   753,
     0,   644,     0,     0,    48,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    91,     0,     0,     0,   753,     0,
   219,   219,   219,     0,     0,   522,     0,     0,    92,    51,
    80,     0,    93,     0,     0,     0,     0,     0,     0,     0,
   221,     0,   221,     0,     0,     0,    58,    95,     0,   827,
    97,    98,     0,     0,     0,     0,     0,   219,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    22,     0,
     0,    80,    23,     0,    24,    25,     0,   221,   221,   221,
     0,    26,     0,    27,    28,    29,    30,     0,     0,    31,
    32,    33,    34,     0,    35,    36,    37,     0,    38,    39,
     0,     0,     0,    40,    41,     0,    42,    43,    44,     0,
   146,     0,     0,    46,   221,     0,     0,    47,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    48,    49,    50,     0,     0,     0,     0,     0,     0,     0,
    91,     0,     0,     0,     0,     0,     0,     0,     0,   522,
   522,     0,   522,   522,     0,   147,     0,     0,     0,     0,
     0,    52,   148,    53,    54,    55,    56,    57,     0,     0,
     0,     0,    58,     0,    59,     0,     0,     0,   522,     0,
    22,   522,   522,   522,    23,     0,    24,    25,     0,     0,
     0,     0,     0,    26,     0,    27,    28,    29,    30,     0,
   522,    31,    32,    33,    34,     0,    35,    36,    37,     0,
    38,    39,     0,     0,     0,   299,    41,     0,   300,    43,
   301,     0,   146,     0,     0,    46,     0,     0,     0,    47,
     0,     0,    86,     0,     0,     0,     0,     0,     0,    87,
     0,     0,    48,   302,    50,     0,     0,    88,    89,     0,
     0,     0,    91,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   147,     0,     0,
   139,     0,     0,    52,   148,    53,    54,    55,    56,    57,
     0,    22,     0,     0,    58,    23,    59,    24,    25,     0,
    48,     0,     0,     0,    26,     0,    27,    28,    29,    30,
    91,     0,    31,    32,    33,    34,     0,    35,    36,    37,
     0,    38,    39,     0,    92,    51,    40,    41,    93,    42,
    43,    44,    94,   333,     0,     0,    46,     0,     0,     0,
    47,   231,    58,    95,     0,    96,    97,    98,     0,     0,
     0,     0,     0,    48,    49,    50,     0,     0,     0,   232,
   233,   234,     0,    91,     0,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,    51,   248,
     0,     0,     0,     0,    52,     0,    53,    54,    55,    56,
    57,     0,    22,     0,     0,    58,    23,    59,    24,    25,
     0,     0,     0,     0,     0,    26,     0,    27,    28,    29,
    30,     0,     0,    31,    32,    33,    34,     0,    35,    36,
    37,     0,    38,    39,     0,     0,     0,    40,    41,     0,
    42,    43,    44,     0,    45,    86,     0,    46,     0,     0,
     0,    47,    87,     0,   268,     0,   161,    28,     0,     0,
    88,    89,     0,     0,    48,    49,    50,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   269,    41,     0,   270,
   271,   272,     0,   273,     0,     0,     0,     0,     0,    51,
     0,     0,     0,     0,     0,    52,     0,    53,    54,    55,
    56,    57,     0,    48,   212,   213,    58,     0,    59,     0,
     0,     0,     0,    91,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    86,     0,    92,    51,     0,
     0,    93,    87,     0,   171,    94,     0,    28,     0,     0,
    88,    89,     0,     0,     0,    58,    95,   274,    96,    97,
    98,     0,     0,     0,     0,     0,    40,    41,     0,    42,
    43,    44,     0,   289,     0,     0,   290,     0,   291,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    48,   328,     0,     0,     0,     0,     0,
     0,     0,     0,   344,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,    92,   292,     0,
    87,    93,   206,     0,     0,    94,     0,     0,    88,    89,
     0,     0,     0,     0,     0,    58,    95,   345,    96,    97,
    98,     0,     0,     0,   207,     0,     0,   208,   209,   210,
     0,   433,     0,     0,   290,     0,   291,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   212,   213,     0,     0,     0,     0,     0,     0,
     0,    91,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    86,     0,     0,     0,    92,   292,     0,    87,    93,
   206,     0,     0,    94,     0,     0,    88,    89,     0,     0,
     0,     0,     0,    58,    95,   214,    96,    97,    98,     0,
     0,     0,   391,     0,     0,   392,   209,   393,     0,   433,
     0,     0,   290,     0,   291,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    48,
   394,   213,     0,     0,     0,     0,     0,     0,     0,    91,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
     0,     0,     0,    92,   292,     0,    87,    93,   206,     0,
     0,    94,     0,     0,    88,    89,     0,     0,     0,     0,
     0,    58,    95,   214,    96,    97,    98,     0,     0,     0,
   207,     0,     0,   208,   209,   210,     0,   578,     0,     0,
   290,     0,   291,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    48,   212,   213,
     0,     0,     0,     0,     0,     0,     0,    91,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    86,     0,     0,
     0,    92,    51,     0,    87,    93,   206,     0,     0,    94,
     0,     0,    88,    89,     0,     0,     0,     0,     0,    58,
    95,   214,    96,    97,    98,     0,     0,     0,   391,     0,
     0,   392,   209,   393,     0,   578,    86,     0,   290,     0,
   291,     0,     0,    87,     0,   206,     0,     0,     0,     0,
     0,    88,    89,     0,     0,    48,   394,   213,     0,     0,
     0,     0,     0,     0,     0,    91,     0,   391,     0,     0,
   392,   209,   393,     0,   424,    86,     0,     0,     0,    92,
    51,     0,    87,    93,   206,     0,     0,    94,     0,     0,
    88,    89,     0,     0,    48,   394,   213,    58,    95,   214,
    96,    97,    98,     0,    91,     0,   565,     0,     0,   566,
   209,   567,     0,   424,    86,     0,     0,     0,    92,   147,
     0,    87,    93,   206,     0,   171,    94,     0,     0,    88,
    89,     0,     0,    48,   568,   213,    58,    95,   214,    96,
    97,    98,     0,    91,     0,   207,     0,     0,   208,   209,
   210,     0,   211,    86,     0,     0,     0,    92,    51,     0,
    87,    93,   206,     0,   171,    94,     0,     0,    88,    89,
     0,     0,    48,   212,   213,    58,    95,   214,    96,    97,
    98,     0,    91,     0,   391,     0,     0,   392,   209,   393,
     0,   211,    86,     0,     0,     0,    92,    51,     0,    87,
    93,   206,     0,     0,    94,     0,     0,    88,    89,     0,
     0,    48,   394,   213,    58,    95,   214,    96,    97,    98,
     0,    91,     0,   207,     0,     0,   208,   209,   210,     0,
   706,    86,     0,     0,     0,    92,    51,     0,    87,    93,
   206,     0,     0,    94,     0,     0,    88,    89,     0,     0,
    48,   212,   213,    58,    95,   214,    96,    97,    98,     0,
    91,     0,   565,     0,     0,   566,   209,   567,     0,   211,
    86,     0,     0,     0,    92,    51,     0,    87,    93,   206,
     0,     0,    94,     0,     0,    88,    89,     0,     0,    48,
   568,   213,    58,    95,   214,    96,    97,    98,     0,    91,
     0,   207,     0,     0,   208,   209,   210,     0,   860,    86,
     0,     0,     0,    92,    51,     0,    87,    93,   206,     0,
     0,    94,     0,     0,    88,    89,     0,     0,    48,   212,
   213,    58,    95,   214,    96,    97,    98,     0,    91,     0,
   207,     0,     0,   208,   209,   210,     0,   861,    86,     0,
     0,     0,    92,    51,     0,    87,    93,   206,     0,     0,
    94,     0,     0,    88,    89,     0,     0,    48,   212,   213,
    58,    95,   214,    96,    97,    98,     0,    91,     0,   891,
     0,     0,   892,   209,   393,     0,   211,    86,     0,     0,
     0,    92,    51,     0,    87,    93,   206,     0,     0,    94,
     0,     0,    88,    89,     0,     0,    48,   893,   213,    58,
    95,   214,    96,    97,    98,     0,    91,     0,   894,     0,
     0,   895,   209,   393,     0,   211,    86,     0,     0,     0,
    92,    51,     0,    87,    93,   206,     0,     0,    94,     0,
     0,    88,    89,     0,     0,    48,   896,   213,    58,    95,
   214,    96,    97,    98,     0,    91,     0,   207,     0,     0,
   208,   209,   210,     0,   897,    86,     0,     0,     0,    92,
    51,     0,    87,    93,   206,     0,     0,    94,     0,     0,
    88,    89,     0,     0,    48,   212,   213,    58,    95,   214,
    96,    97,    98,     0,    91,     0,   926,     0,     0,   927,
   209,   393,     0,   211,     0,     0,     0,     0,    92,    51,
    87,     0,    93,     0,     0,     0,    94,     0,    88,    89,
     0,     0,     0,    48,   928,   213,    58,    95,   214,    96,
    97,    98,     0,    91,     0,     0,     0,     0,     0,     0,
     0,   862,    86,     0,     0,     0,     0,    92,    51,    87,
     0,    93,     0,     0,    28,    94,     0,    88,    89,     0,
     0,    48,     0,     0,     0,    58,    95,   214,    96,    97,
    98,    91,     0,    40,    41,     0,    42,    43,    44,     0,
    90,    86,     0,     0,     0,    92,    51,     0,    87,    93,
     0,     0,     0,    28,     0,     0,    88,    89,     0,     0,
    48,   328,     0,    58,    95,     0,   863,    97,    98,     0,
    91,     0,    40,    41,     0,    42,    43,    44,     0,   586,
     0,     0,     0,     0,    92,    51,     0,     0,    93,     0,
     0,     0,    94,     0,     0,     0,     0,    86,     0,    48,
   328,     0,    58,    95,    87,    96,    97,    98,     0,    91,
     0,     0,    88,    89,     0,     0,     0,     0,     0,     0,
    87,     0,     0,    92,    51,     0,     0,    93,    88,    89,
     0,    94,     0,     0,     0,   289,     0,     0,   290,     0,
   291,    58,    95,     0,    96,    97,    98,    86,     0,     0,
     0,    90,     0,     0,    87,    48,     0,     0,     0,     0,
    87,     0,    88,    89,     0,    91,     0,     0,    88,    89,
     0,    48,     0,     0,     0,     0,     0,     0,     0,    92,
   292,    91,     0,    93,     0,   438,     0,    94,   290,     0,
   291,    90,     0,     0,     0,    92,    51,    58,    95,    93,
    96,    97,    98,     0,     0,    48,     0,     0,     0,     0,
     0,    48,     0,    58,    95,    91,   979,    97,    98,     0,
     0,    91,     0,     0,     0,     0,     0,     0,     0,    92,
    51,     0,    87,    93,     0,    92,    51,    94,     0,    93,
    88,    89,     0,     0,     0,     0,     0,    58,    95,     0,
    96,    97,    98,    58,    95,     0,   980,    97,    98,    87,
     0,     0,     0,    90,     0,     0,    87,    88,    89,     0,
     0,     0,    87,     0,    88,    89,     0,     0,     0,     0,
    88,    89,     0,    48,     0,     0,     0,     0,     0,     0,
    90,     0,     0,    91,     0,     0,     0,    90,     0,     0,
     0,     0,     0,    90,     0,     0,     0,    92,    51,     0,
    48,    93,     0,     0,     0,     0,     0,    48,     0,     0,
    91,     0,     0,    48,     0,    58,    95,    91,   982,    97,
    98,     0,     0,    91,    92,    51,     0,     0,    93,     0,
     0,    92,    51,     0,     0,    93,     0,    92,    51,     0,
     0,    93,    58,    95,     0,   983,    97,    98,     0,    58,
    95,     0,   999,    97,    98,    58,    95,    87,  1000,    97,
    98,     0,     0,    87,     0,    88,    89,     0,     0,    87,
     0,    88,    89,     0,     0,     0,     0,    88,    89,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    90,     0,
     0,     0,     0,     0,    90,     0,     0,     0,     0,     0,
    90,     0,     0,     0,     0,     0,     0,     0,    48,     0,
     0,     0,     0,     0,    48,     0,     0,     0,    91,     0,
    48,     0,     0,     0,    91,     0,     0,     0,     0,     0,
    91,     0,    92,    51,     0,     0,    93,     0,    92,    51,
     0,     0,    93,     0,    92,    51,     0,     0,    93,     0,
    58,    95,     0,  1001,    97,    98,    58,    95,     0,  1002,
    97,    98,    58,    95,     0,  1013,    97,    98
};

static const short yycheck[] = {    13,
   189,   139,    36,   265,    15,   289,   290,   291,   195,    23,
   339,    45,    92,    93,   257,    17,    12,    45,    45,    33,
    49,    50,    45,   289,   165,   291,     1,   146,    45,   148,
    13,    36,   384,     2,   386,   498,   107,   389,   179,    50,
    45,   165,    45,     9,    10,    11,    12,   127,    14,    15,
    16,    17,    18,    19,   195,   179,    90,    45,     1,   145,
    48,   323,    50,   440,   441,   442,   443,    45,    45,    36,
    45,   195,    86,   107,    52,    77,    45,    46,    45,   107,
    94,    36,    36,   110,    90,    68,    69,   110,    71,    45,
    45,    45,    45,   110,     1,    78,    79,    38,    75,    46,
    41,    46,   107,    36,   107,    48,     2,   193,    45,    45,
   139,   918,    95,    90,    45,   129,    36,     1,    17,    96,
   108,   107,   263,    90,   265,    66,    46,   107,   142,   109,
   107,   145,   107,   139,    65,    90,    90,   324,    45,    72,
   107,    59,   949,    90,    97,    90,    45,    46,    66,   433,
    46,   165,   107,   107,   438,   121,   122,   123,   124,   125,
   174,    45,   625,   626,   448,   179,   180,   433,   146,   249,
   107,    36,    17,    72,    73,   144,   107,   146,    77,   193,
    45,   195,   323,   324,    45,   428,   538,   201,   540,   308,
   542,   543,   170,   171,    46,     1,    17,     2,   317,   318,
   324,   170,    45,   289,    45,   211,    90,   176,   177,   178,
   494,    48,   130,   131,   132,   133,   185,   186,   187,   188,
   234,   464,    65,   107,    45,    90,    31,    46,   494,    36,
   199,   200,    77,    17,   248,    46,   250,   203,    90,    45,
    45,    46,   107,    50,    36,    45,    51,    52,   144,    90,
    46,   107,    17,    45,    59,    96,    77,    45,   107,    36,
   109,    66,    45,    46,   107,    46,   107,   273,   354,    75,
   733,    90,    46,   302,   170,   289,   290,   291,    74,    90,
   176,   177,   178,   289,    90,    90,    91,   616,   617,   185,
   186,   187,   188,    77,   578,   273,   580,    74,    90,    45,
    45,   107,    90,   444,   547,    45,   590,    90,    96,    90,
   324,   500,    77,    45,   580,   107,    90,   286,   107,   107,
   444,   698,   699,   700,   107,   130,   131,   132,   133,    75,
   135,    45,    45,   138,   139,    46,   598,    50,   352,   144,
   354,   146,   147,    45,    90,    90,    38,   433,    36,    41,
    90,   320,    45,    46,    45,   333,   274,   335,    90,   445,
   165,   107,   107,   606,   333,   170,   171,   107,   382,    17,
   175,   176,   177,   178,    66,   107,   181,    45,    46,    90,
   185,   186,   187,   188,   847,   848,    74,    45,    90,   194,
   286,   196,   197,   198,   199,   200,    17,    90,    46,    90,
    45,    36,    45,   489,    71,   107,   211,   325,   326,    45,
    46,    78,    79,   427,   107,    46,   107,   222,   424,   433,
    45,    45,    90,    46,   320,    46,    17,   433,    95,    77,
   444,   445,   438,    72,    73,   353,    46,    72,    45,   107,
    38,   455,    45,    41,   458,    36,   424,    90,    17,     9,
    17,    72,    73,   715,    90,    46,    77,   598,    46,    90,
    20,    21,    22,    23,   107,    90,    90,    90,   273,   274,
    16,   107,    18,    19,    34,   489,    48,    46,   492,    46,
    90,   286,   107,   107,   289,    45,    77,   292,    48,    46,
    17,    95,    38,    39,    17,    41,    42,    43,   476,    45,
   305,    17,    90,    72,    73,   423,    38,    46,    77,    41,
    77,    37,    69,    36,    71,   320,    17,   801,    45,    46,
   325,   326,   327,    46,    17,    35,    46,    46,   333,    45,
   335,    46,   337,   502,   503,   801,    96,    97,    98,   344,
   100,   101,   102,   103,   104,    46,   106,   107,   353,    17,
    77,    90,   814,    46,    77,   696,   694,    38,   363,    45,
    41,    77,    38,   109,    17,    41,   580,    43,    15,    45,
    90,    90,   578,    47,   715,    90,    77,    36,    46,    16,
   586,    18,    19,    46,    77,   665,   829,    90,    46,    36,
    66,   560,    38,    46,    46,    41,   610,   611,    46,    75,
    45,    38,    39,   865,    41,    42,    43,    17,    45,    77,
   415,   416,   417,    46,    90,    17,   421,   879,   423,   424,
    96,   426,    46,   637,    77,    46,    15,    90,   433,    66,
    67,   107,    90,   438,   603,    46,    46,    46,    90,   444,
    46,    46,    90,    46,    46,    46,   365,    36,   367,   368,
   369,   370,   371,   372,   459,   374,   375,    90,   377,   378,
    69,    46,    71,   468,   560,    38,    90,    77,    41,    90,
   636,   476,   109,   814,   479,    77,   107,    46,   109,    90,
    15,   695,     1,    16,    90,    18,    19,    90,     7,    90,
    36,   975,    46,    46,    19,    14,    46,   502,   503,    46,
   706,    36,    46,    22,    23,    38,    39,   603,    41,    42,
    43,    45,    45,    38,    39,    35,    41,    42,    43,    46,
    45,    90,    68,    69,   865,    71,    45,    50,    46,    48,
   109,    50,    78,    79,    46,    46,    90,    90,   879,    46,
    90,    66,    46,    90,   549,   550,    65,    15,   553,    95,
    46,   556,    46,    46,   723,   560,    75,   771,    49,   564,
    72,    73,    46,    90,   569,    46,    46,   107,    36,   109,
    89,    90,    90,   578,    93,   107,   109,   109,    97,    90,
    46,   586,   107,    90,   109,    69,    90,    71,   107,   108,
    46,   110,   111,   112,    90,    46,    90,    90,   603,    46,
    90,    90,    68,    69,   773,    71,   775,    46,    95,    90,
    90,    49,    78,    79,    46,    46,    46,   823,    46,   825,
    38,   835,     4,    41,     6,   839,   840,   723,    37,    95,
    68,    69,    46,    71,    90,   849,   850,   851,    46,    90,
    78,    79,    46,    90,   813,   650,   651,   652,    66,    78,
    79,    90,    46,    46,   860,   861,   862,    95,    90,    14,
    90,    46,    90,    36,   878,   670,    95,    22,    23,    36,
   675,   885,   886,    36,    28,   680,    46,   773,    38,   775,
    49,    41,   601,   602,   689,   854,    49,    72,    73,   694,
    45,   897,    36,    69,    74,    71,   495,    38,    90,     2,
    41,   706,    78,    79,    90,    68,    69,    70,    71,    49,
    65,    38,   631,   632,    41,   634,   635,   813,   723,    95,
    75,    69,    70,    71,    68,    69,    70,    71,    68,    69,
    70,    71,    90,    50,    89,    90,    45,    50,    93,    48,
    46,    50,    45,    46,   749,   750,    56,    77,    51,    52,
    11,    77,   107,   108,    49,   110,   111,   112,   854,    46,
   929,    46,    90,    46,    74,    75,    46,    36,   773,    46,
   775,   776,   777,   778,    36,    72,    86,    87,    88,    89,
    90,    91,    92,    68,    69,    70,    71,    90,    91,    46,
  1004,  1005,    71,  1007,  1008,     4,     5,     6,   597,    49,
    71,   600,  1016,    46,    46,  1019,  1020,  1021,   813,    11,
    46,    68,    69,    70,    71,    90,    48,  1031,   823,    46,
   825,    46,     8,   828,   623,     1,    68,    69,    70,    71,
    90,     7,    68,    69,    70,    71,   139,    48,    14,    49,
    46,   144,    46,   146,   147,    46,    22,    23,    32,   854,
    68,    69,    70,    71,    46,   860,   861,   862,    68,    69,
    70,    71,   165,    46,    36,    46,    46,   170,   171,    45,
    90,    46,   175,   176,   177,   178,    46,    46,    46,     2,
    45,    71,   185,   186,   187,   188,    50,    46,    46,    65,
    11,   194,   897,   196,   197,   198,   199,   200,    46,    75,
    68,    69,    70,    71,    50,    46,    46,    46,   211,    68,
    69,    70,    71,    89,    90,    46,    51,    93,    36,   222,
    46,    97,    45,    46,    46,   724,     8,    46,    51,    52,
    46,   107,   108,    19,   110,   111,   112,    68,    69,    70,
    71,    49,    68,    69,    70,    71,    48,   952,   953,    46,
   955,   956,    38,    39,    46,    41,    42,    43,    46,    72,
    68,    69,    70,    71,    71,    36,    45,    90,    91,    45,
   273,    49,    49,    36,    49,    45,   981,    51,    51,   984,
   985,   986,    51,   286,    51,    46,   289,    46,    48,   292,
    68,    69,    70,    71,    68,    69,    70,    71,  1003,   110,
    41,    36,   305,    51,    46,    37,    46,    46,    51,    46,
    90,    49,    48,    46,    45,    45,   139,   320,    45,    37,
    46,   144,    46,   146,   147,    46,    51,    46,    45,    45,
   333,    46,   335,    46,   337,    14,    50,    45,    50,    50,
    46,   344,   165,    22,    23,    45,    51,   170,   171,    46,
    46,    50,   175,   176,   177,   178,    50,    50,    45,     2,
   363,    51,   185,   186,   187,   188,    45,    49,    45,    41,
   869,    41,    50,     0,   873,   874,    45,    50,    46,    50,
    90,    90,    46,   882,   883,   884,    65,    90,   211,    46,
    90,    91,    90,    46,    46,    90,    75,    41,    90,   222,
    46,    90,    45,    46,    46,    46,   110,    46,   110,    52,
    89,    90,   911,    51,    93,    51,    51,   916,   917,   110,
    46,   424,   110,    90,    46,    46,    51,    51,   107,   108,
   433,   110,   111,   112,    51,   438,    46,    46,    46,   139,
    46,   444,    72,    45,   110,   110,   146,    90,    91,   110,
   273,   110,    51,    51,    51,    46,   459,    46,    46,    46,
    46,    46,    46,   286,    46,   110,   289,    50,    46,   292,
   170,    50,    46,   476,    50,    50,   479,    46,    46,    46,
    50,    46,   305,     0,    50,   415,   416,   417,    50,    50,
    50,   380,    51,    51,    51,    51,   139,   320,    51,   502,
   503,   144,    51,   146,    51,    51,    51,   500,   621,   444,
   333,   211,   335,   562,   337,  1014,  1015,   463,  1017,  1018,
   588,   344,   222,    -1,    -1,    -1,  1025,   170,   171,  1028,
  1029,  1030,   175,   176,   177,   178,    -1,    -1,    -1,    -1,
    -1,  1040,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,
    -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,   211,    -1,
    -1,    22,    23,   273,    -1,   578,    -1,    -1,    -1,   222,
    -1,    -1,    -1,   586,    -1,    -1,    -1,    -1,    -1,   289,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
   603,   424,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   433,    -1,    -1,    -1,    65,   438,    -1,    -1,    -1,    -1,
   550,   444,   552,   553,    75,   555,   556,    -1,   558,    -1,
   273,    -1,    -1,   333,    -1,   335,    -1,   337,    89,    90,
    -1,    -1,    93,   286,   344,    -1,   289,    -1,    -1,    -1,
    -1,    -1,    -1,   476,    -1,    -1,   107,   108,    -1,   110,
   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   320,    -1,    -1,
    -1,   526,    -1,   528,    -1,    -1,   531,    -1,    -1,    -1,
   333,   694,   335,    -1,   337,    -1,    -1,    -1,    -1,   544,
    -1,   344,    -1,   706,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   723,   384,    -1,   386,   424,    -1,   389,    -1,    -1,    -1,
    -1,    -1,    -1,   433,    -1,    -1,    -1,   560,   438,    -1,
   670,    -1,   672,   673,    -1,   675,    -1,   677,   678,    -1,
    -1,    -1,   682,   683,    -1,   578,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   586,    -1,    -1,    -1,    -1,    -1,    -1,
   773,    -1,   775,    -1,    -1,    -1,   476,    -1,    -1,    -1,
   603,   424,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   433,    -1,    -1,    -1,   639,   438,    -1,    -1,   643,    -1,
   645,    -1,   647,    -1,   649,    -1,   651,   652,    -1,    -1,
   813,   656,    -1,    -1,   659,    -1,    -1,    -1,    -1,   664,
   823,    -1,   825,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   761,    -1,   476,    -1,   765,    -1,    -1,   768,   769,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   854,    -1,    -1,    -1,    -1,    -1,   860,   861,   862,
   523,    -1,    -1,   526,    -1,   528,    -1,    -1,   531,    -1,
    -1,   694,    -1,    -1,    -1,   538,    -1,   540,   578,   542,
   543,   544,    -1,   706,    -1,    -1,   586,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   897,    -1,   741,    -1,    -1,    -1,
   723,    -1,    -1,    -1,   749,   750,    -1,   752,    -1,   754,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   560,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   929,   857,    -1,    -1,
    -1,    -1,   777,   778,    -1,   578,    -1,    -1,    -1,    -1,
     7,    -1,    -1,   586,    -1,    -1,    -1,    14,    -1,    -1,
   773,    -1,   775,    -1,    -1,    22,    23,    -1,   961,   889,
   603,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   639,    -1,    45,    -1,
   643,    -1,   645,   828,   647,    -1,   649,   650,   651,   652,
   813,    -1,    -1,   656,    -1,    -1,   659,    -1,    65,    -1,
   823,   664,   825,    -1,    -1,    -1,   706,    -1,    75,    -1,
    -1,     1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,
    -1,    -1,    89,    90,    14,    -1,    93,    -1,    -1,    -1,
    97,   854,    22,    23,    -1,    -1,    -1,   860,   861,   862,
   107,   108,    -1,   110,   111,   112,    -1,    -1,    -1,    -1,
    -1,   694,    -1,    -1,    -1,    45,    -1,    -1,    48,    -1,
    50,    -1,    -1,   706,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   897,    65,    -1,    -1,   741,    -1,
   723,    -1,    -1,    -1,    -1,    75,   749,   750,    -1,   752,
    -1,   754,    -1,    14,    -1,    -1,    -1,    -1,    -1,    89,
    90,    22,    23,    93,    -1,    -1,    -1,    97,   953,    -1,
    -1,   956,    -1,   776,   777,   778,    -1,   107,   108,    -1,
   110,   111,   112,   823,    45,   825,    -1,    -1,    -1,    -1,
   773,    -1,   775,    -1,    -1,    -1,   981,    -1,    -1,   984,
    -1,   986,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,  1003,    -1,
   860,   861,   862,    -1,    -1,   828,    -1,    -1,    89,    90,
   813,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   823,    -1,   825,    -1,    -1,    -1,   107,   108,    -1,   110,
   111,   112,    -1,    -1,    -1,    -1,    -1,   897,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    -1,   854,     7,    -1,     9,    10,    -1,   860,   861,   862,
    -1,    16,    -1,    18,    19,    20,    21,    -1,    -1,    24,
    25,    26,    27,    -1,    29,    30,    31,    -1,    33,    34,
    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
    45,    -1,    -1,    48,   897,    -1,    -1,    52,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   952,
   953,    -1,   955,   956,    -1,    90,    -1,    -1,    -1,    -1,
    -1,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
    -1,    -1,   107,    -1,   109,    -1,    -1,    -1,   981,    -1,
     3,   984,   985,   986,     7,    -1,     9,    10,    -1,    -1,
    -1,    -1,    -1,    16,    -1,    18,    19,    20,    21,    -1,
  1003,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
    33,    34,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
    43,    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,    52,
    -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,
    -1,    -1,    65,    66,    67,    -1,    -1,    22,    23,    -1,
    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    -1,    -1,
    45,    -1,    -1,    96,    97,    98,    99,   100,   101,   102,
    -1,     3,    -1,    -1,   107,     7,   109,     9,    10,    -1,
    65,    -1,    -1,    -1,    16,    -1,    18,    19,    20,    21,
    75,    -1,    24,    25,    26,    27,    -1,    29,    30,    31,
    -1,    33,    34,    -1,    89,    90,    38,    39,    93,    41,
    42,    43,    97,    45,    -1,    -1,    48,    -1,    -1,    -1,
    52,    56,   107,   108,    -1,   110,   111,   112,    -1,    -1,
    -1,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    74,
    75,    76,    -1,    75,    -1,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    90,    94,
    -1,    -1,    -1,    -1,    96,    -1,    98,    99,   100,   101,
   102,    -1,     3,    -1,    -1,   107,     7,   109,     9,    10,
    -1,    -1,    -1,    -1,    -1,    16,    -1,    18,    19,    20,
    21,    -1,    -1,    24,    25,    26,    27,    -1,    29,    30,
    31,    -1,    33,    34,    -1,    -1,    -1,    38,    39,    -1,
    41,    42,    43,    -1,    45,     7,    -1,    48,    -1,    -1,
    -1,    52,    14,    -1,    16,    -1,    18,    19,    -1,    -1,
    22,    23,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    90,
    -1,    -1,    -1,    -1,    -1,    96,    -1,    98,    99,   100,
   101,   102,    -1,    65,    66,    67,   107,    -1,   109,    -1,
    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     7,    -1,    89,    90,    -1,
    -1,    93,    14,    -1,    96,    97,    -1,    19,    -1,    -1,
    22,    23,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    48,    -1,    50,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     7,    -1,    -1,    -1,    89,    90,    -1,
    14,    93,    16,    -1,    -1,    97,    -1,    -1,    22,    23,
    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,    -1,    -1,    48,    -1,    50,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    -1,    -1,    89,    90,    -1,    14,    93,
    16,    -1,    -1,    97,    -1,    -1,    22,    23,    -1,    -1,
    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,    -1,
    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
    -1,    -1,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,
    -1,    -1,    -1,    89,    90,    -1,    14,    93,    16,    -1,
    -1,    97,    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,
    -1,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,
    -1,    89,    90,    -1,    14,    93,    16,    -1,    -1,    97,
    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,   107,
   108,   109,   110,   111,   112,    -1,    -1,    -1,    38,    -1,
    -1,    41,    42,    43,    -1,    45,     7,    -1,    48,    -1,
    50,    -1,    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,
    -1,    22,    23,    -1,    -1,    65,    66,    67,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    75,    -1,    38,    -1,    -1,
    41,    42,    43,    -1,    45,     7,    -1,    -1,    -1,    89,
    90,    -1,    14,    93,    16,    -1,    -1,    97,    -1,    -1,
    22,    23,    -1,    -1,    65,    66,    67,   107,   108,   109,
   110,   111,   112,    -1,    75,    -1,    38,    -1,    -1,    41,
    42,    43,    -1,    45,     7,    -1,    -1,    -1,    89,    90,
    -1,    14,    93,    16,    -1,    96,    97,    -1,    -1,    22,
    23,    -1,    -1,    65,    66,    67,   107,   108,   109,   110,
   111,   112,    -1,    75,    -1,    38,    -1,    -1,    41,    42,
    43,    -1,    45,     7,    -1,    -1,    -1,    89,    90,    -1,
    14,    93,    16,    -1,    96,    97,    -1,    -1,    22,    23,
    -1,    -1,    65,    66,    67,   107,   108,   109,   110,   111,
   112,    -1,    75,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,     7,    -1,    -1,    -1,    89,    90,    -1,    14,
    93,    16,    -1,    -1,    97,    -1,    -1,    22,    23,    -1,
    -1,    65,    66,    67,   107,   108,   109,   110,   111,   112,
    -1,    75,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
    45,     7,    -1,    -1,    -1,    89,    90,    -1,    14,    93,
    16,    -1,    -1,    97,    -1,    -1,    22,    23,    -1,    -1,
    65,    66,    67,   107,   108,   109,   110,   111,   112,    -1,
    75,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
     7,    -1,    -1,    -1,    89,    90,    -1,    14,    93,    16,
    -1,    -1,    97,    -1,    -1,    22,    23,    -1,    -1,    65,
    66,    67,   107,   108,   109,   110,   111,   112,    -1,    75,
    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,     7,
    -1,    -1,    -1,    89,    90,    -1,    14,    93,    16,    -1,
    -1,    97,    -1,    -1,    22,    23,    -1,    -1,    65,    66,
    67,   107,   108,   109,   110,   111,   112,    -1,    75,    -1,
    38,    -1,    -1,    41,    42,    43,    -1,    45,     7,    -1,
    -1,    -1,    89,    90,    -1,    14,    93,    16,    -1,    -1,
    97,    -1,    -1,    22,    23,    -1,    -1,    65,    66,    67,
   107,   108,   109,   110,   111,   112,    -1,    75,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,     7,    -1,    -1,
    -1,    89,    90,    -1,    14,    93,    16,    -1,    -1,    97,
    -1,    -1,    22,    23,    -1,    -1,    65,    66,    67,   107,
   108,   109,   110,   111,   112,    -1,    75,    -1,    38,    -1,
    -1,    41,    42,    43,    -1,    45,     7,    -1,    -1,    -1,
    89,    90,    -1,    14,    93,    16,    -1,    -1,    97,    -1,
    -1,    22,    23,    -1,    -1,    65,    66,    67,   107,   108,
   109,   110,   111,   112,    -1,    75,    -1,    38,    -1,    -1,
    41,    42,    43,    -1,    45,     7,    -1,    -1,    -1,    89,
    90,    -1,    14,    93,    16,    -1,    -1,    97,    -1,    -1,
    22,    23,    -1,    -1,    65,    66,    67,   107,   108,   109,
   110,   111,   112,    -1,    75,    -1,    38,    -1,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    89,    90,
    14,    -1,    93,    -1,    -1,    -1,    97,    -1,    22,    23,
    -1,    -1,    -1,    65,    66,    67,   107,   108,   109,   110,
   111,   112,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    45,     7,    -1,    -1,    -1,    -1,    89,    90,    14,
    -1,    93,    -1,    -1,    19,    97,    -1,    22,    23,    -1,
    -1,    65,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,    75,    -1,    38,    39,    -1,    41,    42,    43,    -1,
    45,     7,    -1,    -1,    -1,    89,    90,    -1,    14,    93,
    -1,    -1,    -1,    19,    -1,    -1,    22,    23,    -1,    -1,
    65,    66,    -1,   107,   108,    -1,   110,   111,   112,    -1,
    75,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
    -1,    -1,    -1,    -1,    89,    90,    -1,    -1,    93,    -1,
    -1,    -1,    97,    -1,    -1,    -1,    -1,     7,    -1,    65,
    66,    -1,   107,   108,    14,   110,   111,   112,    -1,    75,
    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
    14,    -1,    -1,    89,    90,    -1,    -1,    93,    22,    23,
    -1,    97,    -1,    -1,    -1,    45,    -1,    -1,    48,    -1,
    50,   107,   108,    -1,   110,   111,   112,     7,    -1,    -1,
    -1,    45,    -1,    -1,    14,    65,    -1,    -1,    -1,    -1,
    14,    -1,    22,    23,    -1,    75,    -1,    -1,    22,    23,
    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    75,    -1,    93,    -1,    45,    -1,    97,    48,    -1,
    50,    45,    -1,    -1,    -1,    89,    90,   107,   108,    93,
   110,   111,   112,    -1,    -1,    65,    -1,    -1,    -1,    -1,
    -1,    65,    -1,   107,   108,    75,   110,   111,   112,    -1,
    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    -1,    14,    93,    -1,    89,    90,    97,    -1,    93,
    22,    23,    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,
   110,   111,   112,   107,   108,    -1,   110,   111,   112,    14,
    -1,    -1,    -1,    45,    -1,    -1,    14,    22,    23,    -1,
    -1,    -1,    14,    -1,    22,    23,    -1,    -1,    -1,    -1,
    22,    23,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    75,    -1,    -1,    -1,    45,    -1,    -1,
    -1,    -1,    -1,    45,    -1,    -1,    -1,    89,    90,    -1,
    65,    93,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
    75,    -1,    -1,    65,    -1,   107,   108,    75,   110,   111,
   112,    -1,    -1,    75,    89,    90,    -1,    -1,    93,    -1,
    -1,    89,    90,    -1,    -1,    93,    -1,    89,    90,    -1,
    -1,    93,   107,   108,    -1,   110,   111,   112,    -1,   107,
   108,    -1,   110,   111,   112,   107,   108,    14,   110,   111,
   112,    -1,    -1,    14,    -1,    22,    23,    -1,    -1,    14,
    -1,    22,    23,    -1,    -1,    -1,    -1,    22,    23,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    75,    -1,
    65,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
    75,    -1,    89,    90,    -1,    -1,    93,    -1,    89,    90,
    -1,    -1,    93,    -1,    89,    90,    -1,    -1,    93,    -1,
   107,   108,    -1,   110,   111,   112,   107,   108,    -1,   110,
   111,   112,   107,   108,    -1,   110,   111,   112
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 149 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 179 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 180 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 186 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 187 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 189 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 200 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 201 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 209 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 210 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 212 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 215 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 217 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 221 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 222 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 227 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 230 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 237 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 245 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								yyvsp[0].tnode->SetChild1(struct_tree);
								struct_tree=yyvsp[0].tnode;
																
								/*CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1($3);
								$$=$1;*/
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 357 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 358 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 359 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 360 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 361 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 368 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 369 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 370 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 371 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 377 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 378 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 379 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 380 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 382 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 385 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 388 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 394 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 398 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 404 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 412 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 423 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 426 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 64:
#line 439 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 65:
#line 444 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 66:
#line 448 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 67:
#line 454 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 68:
#line 455 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 69:
#line 461 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 70:
#line 466 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 71:
#line 471 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 72:
#line 480 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 73:
#line 488 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 74:
#line 499 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 75:
#line 512 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 76:
#line 513 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 77:
#line 514 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 519 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 79:
#line 523 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 80:
#line 527 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 81:
#line 531 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 82:
#line 535 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 539 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 545 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 85:
#line 547 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 86:
#line 550 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 87:
#line 555 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 88:
#line 566 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 89:
#line 567 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 90:
#line 568 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 91:
#line 571 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 92:
#line 572 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 93:
#line 573 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 94:
#line 581 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 95:
#line 585 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 96:
#line 589 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 594 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 600 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 605 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 100:
#line 612 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 101:
#line 618 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 102:
#line 629 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 103:
#line 630 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 104:
#line 631 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 105:
#line 636 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 106:
#line 643 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 107:
#line 646 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 108:
#line 647 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 656 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 110:
#line 659 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 111:
#line 660 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 112:
#line 661 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 662 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 663 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 115:
#line 664 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 116:
#line 665 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 117:
#line 669 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 118:
#line 671 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 119:
#line 673 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 120:
#line 675 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 121:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 122:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 125:
#line 685 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 687 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 689 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 128:
#line 691 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 129:
#line 693 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 697 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 131:
#line 698 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 132:
#line 701 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 133:
#line 702 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 134:
#line 703 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 135:
#line 704 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 136:
#line 705 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 137:
#line 708 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 138:
#line 712 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 139:
#line 713 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 140:
#line 718 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, INTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 141:
#line 723 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, UINTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 142:
#line 728 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,FLOATPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 143:
#line 733 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,CHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 144:
#line 738 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, UCHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 145:
#line 743 "msv.y"
{ 
	      yyval.tnode=yyvsp[-1].tnode
	   ;
    break;}
case 146:
#line 749 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 147:
#line 750 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 148:
#line 751 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 149:
#line 757 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 150:
#line 758 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 151:
#line 760 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 152:
#line 762 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 153:
#line 764 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 154:
#line 766 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 155:
#line 767 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 156:
#line 773 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 157:
#line 774 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 158:
#line 775 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 159:
#line 776 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 160:
#line 777 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 161:
#line 778 "msv.y"
{ yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 162:
#line 782 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 163:
#line 786 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 164:
#line 787 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 165:
#line 791 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 166:
#line 792 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 167:
#line 796 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 168:
#line 797 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 169:
#line 798 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 170:
#line 799 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 171:
#line 800 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 801 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 802 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 803 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 804 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 805 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 806 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 807 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 808 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 180:
#line 809 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 181:
#line 810 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 182:
#line 811 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 183:
#line 812 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 184:
#line 813 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 185:
#line 816 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 186:
#line 817 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 187:
#line 818 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 188:
#line 819 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 189:
#line 820 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 190:
#line 821 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 191:
#line 822 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 192:
#line 823 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 193:
#line 824 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 194:
#line 825 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 195:
#line 830 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 196:
#line 831 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 197:
#line 832 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 198:
#line 833 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 199:
#line 840 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 200:
#line 844 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 201:
#line 852 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 202:
#line 864 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 203:
#line 877 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 889 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 205:
#line 893 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 206:
#line 901 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 207:
#line 904 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 208:
#line 905 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 209:
#line 910 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 210:
#line 914 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 211:
#line 918 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 212:
#line 923 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 213:
#line 926 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 214:
#line 935 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 215:
#line 936 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 216:
#line 937 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 217:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 218:
#line 941 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 219:
#line 944 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 220:
#line 945 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 221:
#line 948 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 222:
#line 949 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 223:
#line 950 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 224:
#line 951 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 225:
#line 952 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 226:
#line 953 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 227:
#line 956 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 228:
#line 957 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 229:
#line 958 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 230:
#line 959 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 231:
#line 960 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 232:
#line 961 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 233:
#line 963 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 234:
#line 964 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 235:
#line 966 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 236:
#line 967 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 237:
#line 969 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 238:
#line 980 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 239:
#line 981 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 240:
#line 982 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 241:
#line 983 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 242:
#line 984 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 243:
#line 985 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 244:
#line 993 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 245:
#line 994 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 246:
#line 998 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 247:
#line 999 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 248:
#line 1006 "msv.y"
{
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 249:
#line 1010 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 250:
#line 1015 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 251:
#line 1021 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 252:
#line 1027 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 253:
#line 1033 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 254:
#line 1043 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 255:
#line 1049 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 256:
#line 1055 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 257:
#line 1061 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 258:
#line 1069 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 259:
#line 1073 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 260:
#line 1077 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 261:
#line 1083 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 262:
#line 1087 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 263:
#line 1091 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 264:
#line 1097 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 265:
#line 1103 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 266:
#line 1110 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 267:
#line 1116 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 268:
#line 1122 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 269:
#line 1126 "msv.y"
{
		  CSyntaxNode* pChild00=new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
		  CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, pChild00, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 270:
#line 1134 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 271:
#line 1139 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 272:
#line 1142 "msv.y"
{ yyval.tnode = yyvsp[0].tnode;;
    break;}
case 273:
#line 1143 "msv.y"
{yyval.tnode=NULL;
    break;}
case 274:
#line 1149 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 275:
#line 1160 "msv.y"
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
case 276:
#line 1164 "msv.y"
{
	      yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].cString, NULL, STRUCTTYPE);
	   ;
    break;}
case 277:
#line 1167 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 278:
#line 1168 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 279:
#line 1173 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 280:
#line 1186 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 281:
#line 1187 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 282:
#line 1195 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 283:
#line 1197 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 284:
#line 1204 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 285:
#line 1206 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 286:
#line 1212 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 287:
#line 1213 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 288:
#line 1217 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 289:
#line 1222 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 290:
#line 1227 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 291:
#line 1232 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 292:
#line 1239 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 293:
#line 1242 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 294:
#line 1243 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 295:
#line 1249 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 296:
#line 1251 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 298:
#line 1271 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 299:
#line 1273 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 300:
#line 1275 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 301:
#line 1276 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 302:
#line 1282 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 303:
#line 1289 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 304:
#line 1297 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 305:
#line 1305 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 306:
#line 1309 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 307:
#line 1313 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 308:
#line 1319 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 309:
#line 1323 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 310:
#line 1329 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 311:
#line 1333 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 312:
#line 1340 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 313:
#line 1344 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 314:
#line 1348 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 315:
#line 1355 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 316:
#line 1359 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 317:
#line 1362 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 318:
#line 1367 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 319:
#line 1376 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 320:
#line 1377 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 321:
#line 1383 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 322:
#line 1384 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 323:
#line 1388 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 324:
#line 1389 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 325:
#line 1394 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 326:
#line 1395 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 327:
#line 1396 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 328:
#line 1397 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 329:
#line 1398 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 330:
#line 1401 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 331:
#line 1402 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 332:
#line 1403 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 333:
#line 1409 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 334:
#line 1410 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 335:
#line 1411 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 336:
#line 1413 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 337:
#line 1414 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 338:
#line 1415 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 339:
#line 1417 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 340:
#line 1418 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 341:
#line 1419 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 342:
#line 1420 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 343:
#line 1422 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 344:
#line 1423 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 345:
#line 1424 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 346:
#line 1425 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 347:
#line 1426 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 348:
#line 1427 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 349:
#line 1428 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 350:
#line 1432 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 351:
#line 1433 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 352:
#line 1434 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 353:
#line 1435 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 354:
#line 1436 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 355:
#line 1437 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 356:
#line 1438 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1440 "msv.y"
