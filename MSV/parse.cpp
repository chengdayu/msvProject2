
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	IF	262
#define	ELSE	263
#define	EMPTY	264
#define	AWAIT	265
#define	PROJECTION	266
#define	PBEGIN	267
#define	PEND	268
#define	POINTERNULL	269
#define	ARRAY	270
#define	STRUCT	271
#define	DOT	272
#define	UNION	273
#define	FOPEN	274
#define	FCLOSE	275
#define	FILEDECLARATION	276
#define	FGETS	277
#define	FPUTS	278
#define	FGETC	279
#define	FPUTC	280
#define	MORE	281
#define	DEFINE	282
#define	MY_TRUE	283
#define	MY_FALSE	284
#define	EXIST	285
#define	FRAME	286
#define	FOR	287
#define	WHILE	288
#define	DO	289
#define	TRUE	290
#define	FALSE	291
#define	REPEAT	292
#define	UNTIL	293
#define	DISPLAY	294
#define	SKIP	295
#define	THEN	296
#define	COMMA	297
#define	COLON	298
#define	INTDECLARATION	299
#define	STRDECLARATION	300
#define	POINTERDECLARATION	301
#define	CHARDECLARATION	302
#define	VOIDDECLARATION	303
#define	FLOATDECLARATION	304
#define	LISTDECLARATION	305
#define	OPEN_PAR	306
#define	CLOSE_PAR	307
#define	TIMES	308
#define	OPEN_BPAR	309
#define	CLOSE_BPAR	310
#define	OPEN_MPAR	311
#define	CLOSE_MPAR	312
#define	FUNCTION	313
#define	OVER	314
#define	CYLINDER	315
#define	OVEREP	316
#define	INTER_OR	317
#define	NON_DETERMINED	318
#define	SEND	319
#define	RECEIVE	320
#define	PROCESS	321
#define	CHANNEL	322
#define	PUT	323
#define	GET	324
#define	ERROR_TOKEN	325
#define	STRFUNCHEAD	326
#define	STRFUNCTAIL	327
#define	STRFUNCCAT	328
#define	STRFUNCCMP	329
#define	STRFUNCCPY	330
#define	STRFUNCLEN	331
#define	SIZEOF	332
#define	SYSTEM	333
#define	EXTERN	334
#define	CEIL	335
#define	FLOOR	336
#define	ROUND	337
#define	SIN	338
#define	COS	339
#define	TAN	340
#define	ASIN	341
#define	ACOS	342
#define	ATAN	343
#define	SINH	344
#define	COSH	345
#define	TANH	346
#define	EXP	347
#define	LOG	348
#define	LOG10	349
#define	SQRT	350
#define	ATAN2	351
#define	POW	352
#define	ABS	353
#define	FABS	354
#define	LABS	355
#define	FMOD	356
#define	MODF	357
#define	LDEXP	358
#define	FREXP	359
#define	UNSIGNED	360
#define	SIGNED	361
#define	MALLOC	362
#define	FREE	363
#define	CHOP	364
#define	IMPLY	365
#define	IFF	366
#define	PROPIMPLY	367
#define	OR	368
#define	PARALLEL	369
#define	AND	370
#define	ASS_P	371
#define	ASS_N	372
#define	CON	373
#define	ADDRESS	374
#define	NE	375
#define	EQ	376
#define	GE	377
#define	LE	378
#define	GT	379
#define	LT	380
#define	LST	381
#define	RST	382
#define	ADD	383
#define	SUB	384
#define	MUL	385
#define	DIV	386
#define	MOD	387
#define	BNE	388
#define	CHOPSTAR	389
#define	NEXT	390
#define	NEGATION	391
#define	LENGTH	392
#define	REQUEST	393
#define	FINAL	394
#define	KEEP	395
#define	ALWAYS	396
#define	HALT	397
#define	W_NEXT	398
#define	PREFIX	399
#define	SOMETIMES	400
#define	ID	401
#define	STRLITERAL	402
#define	STRUCT_TYPE	403
#define	INTLITERAL	404
#define	FLOATLITERAL	405
#define	CHARLITERAL	406

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1382
#define	YYFLAG		-32768
#define	YYNTBASE	152

#define YYTRANSLATE(x) ((unsigned)(x) <= 406 ? yytranslate[x] : 238)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   217,
   226,   236,   238,   243,   248,   250,   258,   262,   264,   268,
   270,   271,   276,   282,   287,   289,   291,   296,   299,   302,
   305,   308,   310,   313,   316,   320,   324,   328,   332,   340,
   349,   361,   375,   377,   379,   381,   383,   385,   387,   390,
   397,   402,   408,   414,   423,   432,   435,   438,   441,   442,
   449,   457,   458,   461,   468,   477,   482,   489,   496,   503,
   508,   512,   514,   516,   518,   520,   524,   527,   529,   541,
   554,   566,   578,   596,   615,   633,   652,   672,   691,   709,
   728,   746,   748,   750,   752,   754,   756,   767,   771,   773,
   778,   784,   796,   809,   821,   833,   846,   850,   854,   857,
   858,   861,   864,   867,   875,   882,   887,   891,   893,   897,
   901,   907,   909,   913,   916,   917,   919,   923,   925,   928,
   931,   933,   935,   937,   939,   941,   943,   947,   949,   951,
   953,   955,   957,   959,   961,   963,   965,   967,   969,   971,
   973,   975,   977,   979,   983,   985,   987,   991,   996,  1001,
  1006,  1011,  1016,  1021,  1025,  1029,  1033,  1034,  1037,  1040,
  1043,  1046,  1049,  1053,  1058,  1063,  1068,  1074,  1080,  1086,
  1092,  1098,  1105,  1111,  1117,  1124,  1130,  1137,  1145,  1152,
  1159,  1167,  1174,  1181,  1187,  1195,  1202,  1204,  1209,  1211,
  1214,  1217,  1220,  1224,  1228,  1232,  1235,  1240,  1245,  1250,
  1255,  1257,  1259,  1261,  1263,  1265,  1267,  1272,  1277,  1284,
  1291,  1298,  1303,  1305,  1307,  1309,  1311,  1313,  1315,  1318,
  1321,  1324,  1327,  1330,  1333,  1336,  1339,  1342,  1345,  1348,
  1351,  1354,  1357,  1360,  1363,  1370,  1377,  1384,  1391,  1398,
  1401,  1404,  1407,  1409,  1412,  1416,  1420,  1424,  1428,  1430,
  1432,  1434,  1438,  1442,  1446,  1450,  1454,  1458,  1462,  1466,
  1470,  1474,  1476,  1478,  1480,  1482,  1484,  1486,  1489,  1492,
  1494,  1496,  1500,  1503,  1507,  1512,  1518,  1523,  1527,  1532,
  1538,  1543,  1546,  1550,  1555,  1558,  1562,  1567,  1572,  1578,
  1585,  1594,  1602,  1607,  1611,  1617,  1626,  1627,  1632,  1636,
  1641,  1646,  1652,  1658,  1664,  1670,  1677,  1687,  1688,  1696,
  1706,  1715,  1721,  1726,  1729,  1732,  1738,  1739,  1742,  1746,
  1753,  1754,  1757,  1761,  1764,  1768,  1771,  1773,  1777,  1779,
  1781,  1783,  1785,  1789,  1790,  1793,  1794,  1798,  1800,  1803,
  1807,  1811,  1815,  1819,  1825,  1835,  1837,  1839,  1840,  1842,
  1843,  1845,  1846,  1854,  1862,  1868,  1871,  1873,  1874,  1880,
  1883,  1884,  1889,  1895,  1896,  1900,  1905,  1911,  1916,  1922,
  1927,  1928,  1932,  1936,  1941,  1946,  1951,  1956,  1961,  1966,
  1971,  1976,  1983,  1988,  1993,  1998,  2005,  2009,  2013,  2018,
  2022,  2023,  2027,  2031,  2035,  2039,  2042
};

static const short yyrhs[] = {   153,
   156,     0,    12,   154,    13,     0,     0,   154,   115,   154,
     0,   154,   113,   154,     0,   154,   111,   154,     0,   154,
   112,   154,     0,   154,   109,   154,     0,   141,   154,     0,
   140,   154,     0,   145,   154,     0,   143,   154,     0,   135,
   154,     0,    40,     0,    28,     0,    29,     0,   137,   177,
     0,     9,     0,    26,     0,   142,   154,     0,   139,   154,
     0,   136,   154,     0,    54,   154,   155,    55,    11,    54,
   154,    55,     0,   146,     0,    27,   146,    43,   203,     0,
   154,   134,     0,    51,   154,    52,     0,    42,   154,   155,
     0,     0,   156,   115,   156,     0,   156,   113,   156,     0,
   156,   109,   156,     0,   168,     0,   162,     0,   227,     0,
   230,     0,   221,     0,   222,     0,   223,     0,   135,    51,
   156,    52,     0,   140,    51,   156,    52,     0,   141,    51,
   156,    52,     0,    10,    51,   202,    52,     0,    37,    54,
   156,    55,    38,    51,   202,    52,     0,    40,     0,     9,
     0,    26,     0,   137,    51,   177,    52,     0,   234,     0,
   232,     0,    35,     0,    36,     0,   139,    51,   156,    52,
     0,   156,   114,   156,     0,    51,   220,    52,   110,    56,
   156,    57,     0,    31,    51,   213,   218,    52,   115,    51,
   156,    52,     0,    54,   156,   219,    55,    11,   211,     0,
    54,   156,    55,    11,   211,     0,    27,   146,    51,   207,
    52,   116,    54,   158,    55,     0,    58,   146,    51,   207,
    52,    54,   156,    55,     0,    66,   146,    51,   207,    52,
   116,    54,   158,    55,     0,   160,     0,   108,    51,   213,
    52,     0,    78,    51,   200,    52,     0,   159,     0,    30,
   213,   208,    43,    54,   156,    55,     0,    51,   156,    52,
     0,   162,     0,   162,   115,   157,     0,   156,     0,     0,
   146,    51,   209,    52,     0,    79,   146,    51,   209,    52,
     0,   174,    51,   209,    52,     0,   167,     0,   193,     0,
   161,    54,   157,    55,     0,    16,   146,     0,    18,   146,
     0,   106,   163,     0,   105,   163,     0,   163,     0,   164,
   165,     0,   148,   165,     0,    16,   146,   165,     0,    18,
   146,   165,     0,    16,   148,   165,     0,    18,   148,   165,
     0,    51,   130,   213,    52,    51,   207,    52,     0,    51,
   130,   130,   213,    52,    51,   207,    52,     0,    51,   130,
   146,    56,   177,   175,    57,    52,    51,   207,    52,     0,
    51,   130,   146,    56,   177,   175,    57,    52,    51,   207,
    52,   116,   184,     0,    44,     0,    49,     0,    47,     0,
    45,     0,    48,     0,    21,     0,   213,   166,     0,   146,
    56,   177,   175,    57,   166,     0,   213,   116,   172,   166,
     0,   146,    15,   116,   184,   166,     0,   146,    15,   116,
   214,   166,     0,   146,    56,   177,   175,    57,   116,   184,
   166,     0,   146,    56,   177,   175,    57,   116,   214,   166,
     0,   130,   165,     0,    42,   165,     0,    42,     1,     0,
     0,   146,    56,   177,   175,    57,     0,     0,    42,   146,
    56,   177,   175,    57,     0,     0,     0,    42,     1,     0,
    19,    51,   169,    42,   214,    52,     0,    22,    51,   213,
    42,   215,    42,   213,    52,     0,    24,    51,   213,    52,
     0,    23,    51,   213,    42,   213,    52,     0,    25,    51,
   213,    42,   213,    52,     0,    25,    51,   174,    42,   213,
    52,     0,    20,    51,   213,    52,     0,   169,   171,   172,
     0,   213,     0,   236,     0,   174,     0,   176,     0,    51,
   169,    52,     0,   135,   169,     0,   170,     0,    51,    51,
    47,   130,    52,   149,    52,    56,   177,   175,    57,     0,
    51,    51,   105,    47,   130,    52,   149,    52,    56,   177,
   175,    57,     0,    51,    51,    44,   130,    52,   149,    52,
    56,   177,   175,    57,     0,    51,    51,    49,   130,    52,
   149,    52,    56,   177,   175,    57,     0,    51,    51,    47,
   130,    52,    51,    51,    47,   130,    52,   149,    52,    52,
    56,   177,   175,    57,     0,    51,    51,    47,   130,    52,
    51,    51,   105,    47,   130,    52,   149,    52,    52,    56,
   177,   175,    57,     0,    51,    51,    47,   130,    52,    51,
    51,    44,   130,    52,   149,    52,    52,    56,   177,   175,
    57,     0,    51,    51,   105,    47,   130,    52,    51,    51,
    47,   130,    52,   149,    52,    52,    56,   177,   175,    57,
     0,    51,    51,   105,    47,   130,    52,    51,    51,   105,
    47,   130,    52,   149,    52,    52,    56,   177,   175,    57,
     0,    51,    51,   105,    47,   130,    52,    51,    51,    44,
   130,    52,   149,    52,    52,    56,   177,   175,    57,     0,
    51,    51,    44,   130,    52,    51,    51,    47,   130,    52,
   149,    52,    52,    56,   177,   175,    57,     0,    51,    51,
    44,   130,    52,    51,    51,   105,    47,   130,    52,   149,
    52,    52,    56,   177,   175,    57,     0,    51,    51,    44,
   130,    52,    51,    51,    44,   130,    52,   149,    52,    52,
    56,   177,   175,    57,     0,   116,     0,   117,     0,   177,
     0,   184,     0,   214,     0,    51,   214,    52,    51,   164,
    52,    51,   207,    52,   159,     0,    51,   172,    52,     0,
   173,     0,   130,    51,   170,    52,     0,   146,    56,   177,
   175,    57,     0,    51,    51,    44,   130,    52,   146,    52,
    56,   177,   175,    57,     0,    51,    51,   105,    44,   130,
    52,   146,    52,    56,   177,   175,    57,     0,    51,    51,
    49,   130,    52,   146,    52,    56,   177,   175,    57,     0,
    51,    51,    47,   130,    52,   146,    52,    56,   177,   175,
    57,     0,    51,    51,   105,    47,   130,    52,   146,    52,
    56,   177,   175,    57,     0,    51,   174,    52,     0,    42,
   177,   175,     0,    42,     1,     0,     0,   130,   213,     0,
   130,   176,     0,   130,   174,     0,    51,   176,    52,    56,
   177,   175,    57,     0,   130,    51,   206,   130,    52,   177,
     0,   130,    51,   177,    52,     0,    51,   176,    52,     0,
   180,     0,   180,   204,   177,     0,   177,   183,   180,     0,
     7,   202,    41,   177,   179,     0,   180,     0,   180,   183,
   180,     0,     8,   177,     0,     0,   181,     0,   180,   182,
   181,     0,   215,     0,   129,   181,     0,   133,   181,     0,
    14,     0,   217,     0,   213,     0,   174,     0,   176,     0,
   159,     0,    51,   177,    52,     0,   201,     0,   216,     0,
   188,     0,   189,     0,   236,     0,   192,     0,   130,     0,
   131,     0,   132,     0,   126,     0,   127,     0,   119,     0,
    62,     0,   118,     0,   128,     0,   129,     0,   184,   118,
   184,     0,   185,     0,   186,     0,    51,   184,    52,     0,
    56,   177,   187,    57,     0,    56,   214,   187,    57,     0,
    56,   184,   187,    57,     0,    54,   177,   187,    55,     0,
    54,   214,   187,    55,     0,    54,   184,   187,    55,     0,
    42,   177,   187,     0,    42,   214,   187,     0,    42,   184,
   187,     0,     0,    42,     1,     0,   119,   213,     0,   119,
   174,     0,   119,   236,     0,   119,   188,     0,    51,   188,
    52,     0,    51,    44,    52,   178,     0,    51,    49,    52,
   178,     0,    51,    47,    52,   178,     0,    51,   106,    44,
    52,   178,     0,    51,   106,    47,    52,   178,     0,    51,
   105,    44,    52,   178,     0,    51,   105,    47,    52,   178,
     0,    51,    44,   130,    52,   190,     0,    51,   105,    44,
   130,    52,   190,     0,    51,    49,   130,    52,   190,     0,
    51,    47,   130,    52,   190,     0,    51,   105,    47,   130,
    52,   190,     0,    51,    48,   130,    52,   190,     0,    51,
    44,   130,   130,    52,   190,     0,    51,   105,    44,   130,
   130,    52,   190,     0,    51,    49,   130,   130,    52,   190,
     0,    51,    47,   130,   130,    52,   190,     0,    51,   105,
    47,   130,   130,    52,   190,     0,    51,    48,   130,   130,
    52,   190,     0,    51,    16,   148,   130,    52,   190,     0,
    51,   148,   130,    52,   190,     0,    51,    16,   148,   130,
   130,    52,   190,     0,    51,   148,   130,   130,    52,   190,
     0,   178,     0,   107,    51,   177,    52,     0,   206,     0,
    44,   130,     0,    49,   130,     0,    47,   130,     0,   105,
    44,   130,     0,   105,    47,   130,     0,    16,   148,   130,
     0,   148,   130,     0,    77,    51,   177,    52,     0,    77,
    51,   191,    52,     0,    77,    51,   148,    52,     0,    77,
    51,   214,    52,     0,   194,     0,   195,     0,   196,     0,
   198,     0,   197,     0,   199,     0,    71,    51,   200,    52,
     0,    72,    51,   200,    52,     0,    73,    51,   200,    42,
   200,    52,     0,    74,    51,   200,    42,   200,    52,     0,
    75,    51,   200,    42,   200,    52,     0,    76,    51,   200,
    52,     0,   213,     0,   174,     0,   176,     0,   214,     0,
   193,     0,   236,     0,    82,   177,     0,    80,   177,     0,
    81,   177,     0,    83,   177,     0,    84,   177,     0,    85,
   177,     0,    86,   177,     0,    87,   177,     0,    88,   177,
     0,    89,   177,     0,    90,   177,     0,    91,   177,     0,
    92,   177,     0,    93,   177,     0,    94,   177,     0,    95,
   177,     0,    96,    51,   177,    42,   177,    52,     0,    97,
    51,   177,    42,   177,    52,     0,   101,    51,   177,    42,
   177,    52,     0,   102,    51,   177,    42,   177,    52,     0,
   103,    51,   177,    42,   177,    52,     0,    98,   177,     0,
    99,   177,     0,   100,   177,     0,   203,     0,   136,   202,
     0,   202,   115,   202,     0,   202,   113,   202,     0,    51,
   202,    52,     0,   177,   204,   177,     0,    28,     0,    29,
     0,   177,     0,   177,   121,   214,     0,   177,   120,   214,
     0,   214,   121,   177,     0,   214,   120,   177,     0,   177,
   121,    14,     0,   177,   120,    14,     0,    14,   121,   177,
     0,    14,   120,   177,     0,   177,   121,   216,     0,   177,
   120,   216,     0,   122,     0,   123,     0,   120,     0,   124,
     0,   125,     0,   121,     0,   105,    44,     0,   105,    47,
     0,   205,     0,   164,     0,   206,   213,   208,     0,   206,
   208,     0,   148,   213,   208,     0,   148,   130,   213,   208,
     0,   148,   130,   130,   213,   208,     0,   148,   213,    15,
   208,     0,   146,   213,   208,     0,   146,   130,   213,   208,
     0,   146,   130,   130,   213,   208,     0,   146,   213,    15,
   208,     0,   148,   208,     0,   148,   130,   208,     0,   148,
   130,   130,   208,     0,   146,   208,     0,   146,   130,   208,
     0,   146,   130,   130,   208,     0,   206,   213,    15,   208,
     0,   206,   130,   213,    15,   208,     0,   206,   213,    56,
   177,    57,   208,     0,   206,   213,    56,   177,    42,   177,
    57,   208,     0,   206,   213,    15,    56,   177,    57,   208,
     0,   206,   130,   213,   208,     0,   206,   130,   208,     0,
   206,   130,   130,   213,   208,     0,    51,   130,   213,    52,
    51,   207,    52,   208,     0,     0,    42,   206,   213,   208,
     0,    42,   206,   208,     0,    42,   146,   213,   208,     0,
    42,   148,   213,   208,     0,    42,   148,   130,   213,   208,
     0,    42,   146,   213,    15,   208,     0,    42,   148,   213,
    15,   208,     0,    42,   206,   213,    15,   208,     0,    42,
   206,   130,   213,    15,   208,     0,    42,    51,   130,   213,
    52,    51,   207,    52,   208,     0,     0,    42,   206,   213,
    56,   177,    57,   208,     0,    42,   206,   213,    56,   177,
    42,   177,    57,   208,     0,    42,   206,   213,    15,    56,
   177,    57,   208,     0,    42,   206,   130,   213,   208,     0,
    42,   206,   130,   208,     0,    42,     1,     0,   172,   210,
     0,   146,    51,   209,    52,   210,     0,     0,   119,     1,
     0,    42,   172,   210,     0,    42,   146,    51,   209,    52,
   210,     0,     0,    42,     1,     0,    54,   156,    55,     0,
     1,    55,     0,    51,   202,    52,     0,     1,    52,     0,
   146,     0,    51,   213,    52,     0,   147,     0,   149,     0,
   151,     0,   150,     0,    42,   213,   218,     0,     0,    42,
     1,     0,     0,    42,   156,   219,     0,   203,     0,   136,
   220,     0,   220,   115,   220,     0,   220,   113,   220,     0,
    51,   220,    52,     0,    33,   212,   211,     0,    32,   177,
    53,    34,   211,     0,    32,    51,   224,    42,   225,    42,
   226,    52,   211,     0,   168,     0,   163,     0,     0,   202,
     0,     0,   168,     0,     0,     3,    51,   181,    52,    54,
   228,    55,     0,     4,   181,    43,    51,   156,    52,   229,
     0,     6,    43,    51,   156,    52,     0,     5,   228,     0,
   228,     0,     0,     7,   202,    41,   211,   231,     0,     8,
   211,     0,     0,    39,    51,   172,    52,     0,    39,    51,
   172,   233,    52,     0,     0,    42,   172,   233,     0,   138,
    51,   213,    52,     0,   138,    51,   213,   235,    52,     0,
   138,    51,   174,    52,     0,   138,    51,   174,   235,    52,
     0,   138,    51,   236,    52,     0,     0,    42,   213,   235,
     0,    42,   174,   235,     0,   213,    17,   213,   237,     0,
   174,    17,   213,   237,     0,   176,    17,   213,   237,     0,
   213,    17,   174,   237,     0,   174,    17,   174,   237,     0,
   176,    17,   174,   237,     0,   213,   110,   213,   237,     0,
   174,   110,   213,   237,     0,    51,   188,    52,   110,   213,
   237,     0,   176,   110,   213,   237,     0,   213,   110,   174,
   237,     0,   174,   110,   174,   237,     0,    51,   188,    52,
   110,   174,   237,     0,   213,    17,   159,     0,   213,   110,
   159,     0,   176,   110,   174,   237,     0,    51,   236,    52,
     0,     0,    17,   213,   237,     0,    17,   174,   237,     0,
   110,   213,   237,     0,   110,   174,   237,     0,    17,   159,
     0,   110,   159,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   159,   190,   191,   195,   196,   197,   198,   199,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   217,   218,   219,
   220,   221,   222,   226,   227,   232,   233,   237,   241,   246,
   248,   255,   361,   363,   365,   366,   367,   368,   369,   370,
   372,   373,   375,   376,   377,   378,   379,   380,   386,   387,
   388,   389,   390,   391,   393,   396,   402,   406,   415,   424,
   428,   432,   433,   437,   442,   444,   458,   462,   466,   473,
   474,   479,   484,   489,   494,   495,   500,   508,   519,   533,
   534,   535,   539,   543,   547,   551,   555,   559,   566,   568,
   570,   575,   587,   588,   589,   592,   593,   594,   601,   605,
   609,   614,   620,   625,   632,   638,   649,   651,   652,   656,
   663,   667,   668,   675,   677,   679,   681,   683,   685,   687,
   699,   703,   704,   705,   706,   707,   708,   709,   712,   714,
   716,   718,   720,   722,   724,   726,   728,   730,   732,   734,
   736,   741,   742,   745,   746,   747,   751,   752,   753,   756,
   760,   765,   767,   769,   771,   773,   775,   779,   781,   782,
   788,   789,   790,   792,   794,   796,   798,   804,   805,   807,
   808,   814,   815,   819,   820,   824,   825,   830,   831,   832,
   833,   834,   836,   837,   838,   839,   840,   841,   842,   843,
   844,   845,   846,   852,   853,   854,   855,   856,   857,   858,
   859,   861,   863,   867,   868,   869,   870,   876,   880,   888,
   900,   904,   913,   925,   929,   937,   941,   942,   945,   950,
   954,   959,   963,   970,   973,   974,   977,   978,   981,   982,
   985,   986,   987,   988,   989,   990,   993,   994,   995,   996,
   997,   998,  1000,  1001,  1003,  1004,  1006,  1007,  1011,  1013,
  1014,  1015,  1016,  1017,  1018,  1019,  1023,  1025,  1026,  1027,
  1032,  1034,  1035,  1036,  1037,  1038,  1041,  1048,  1055,  1062,
  1069,  1076,  1084,  1085,  1086,  1087,  1088,  1089,  1095,  1099,
  1102,  1105,  1106,  1107,  1108,  1109,  1110,  1113,  1114,  1115,
  1118,  1119,  1120,  1121,  1124,  1125,  1128,  1129,  1132,  1134,
  1135,  1136,  1142,  1143,  1144,  1145,  1146,  1152,  1154,  1155,
  1158,  1161,  1162,  1165,  1166,  1169,  1170,  1173,  1174,  1177,
  1178,  1183,  1184,  1185,  1186,  1187,  1188,  1195,  1197,  1200,
  1202,  1208,  1212,  1217,  1223,  1229,  1235,  1245,  1251,  1257,
  1263,  1272,  1276,  1280,  1286,  1290,  1294,  1300,  1306,  1313,
  1321,  1329,  1335,  1341,  1345,  1352,  1358,  1361,  1365,  1369,
  1375,  1381,  1387,  1394,  1402,  1408,  1423,  1429,  1432,  1440,
  1448,  1454,  1460,  1464,  1473,  1477,  1487,  1488,  1492,  1496,
  1506,  1507,  1515,  1517,  1524,  1526,  1532,  1533,  1537,  1542,
  1547,  1552,  1558,  1562,  1563,  1569,  1570,  1581,  1592,  1593,
  1595,  1597,  1603,  1609,  1617,  1625,  1629,  1633,  1639,  1643,
  1649,  1653,  1660,  1664,  1668,  1675,  1679,  1683,  1687,  1697,
  1698,  1704,  1705,  1709,  1710,  1715,  1716,  1717,  1718,  1719,
  1722,  1723,  1724,  1730,  1731,  1732,  1734,  1735,  1736,  1738,
  1739,  1740,  1741,  1743,  1744,  1745,  1746,  1747,  1748,  1749,
  1753,  1754,  1755,  1756,  1757,  1758,  1759
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND",
"POINTERNULL","ARRAY","STRUCT","DOT","UNION","FOPEN","FCLOSE","FILEDECLARATION",
"FGETS","FPUTS","FGETC","FPUTC","MORE","DEFINE","MY_TRUE","MY_FALSE","EXIST",
"FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT","UNTIL","DISPLAY","SKIP",
"THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION","POINTERDECLARATION",
"CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION","LISTDECLARATION","OPEN_PAR",
"CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR","CLOSE_MPAR","FUNCTION",
"OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED","SEND","RECEIVE","PROCESS",
"CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD","STRFUNCTAIL","STRFUNCCAT",
"STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","SIZEOF","SYSTEM","EXTERN","CEIL","FLOOR",
"ROUND","SIN","COS","TAN","ASIN","ACOS","ATAN","SINH","COSH","TANH","EXP","LOG",
"LOG10","SQRT","ATAN2","POW","ABS","FABS","LABS","FMOD","MODF","LDEXP","FREXP",
"UNSIGNED","SIGNED","MALLOC","FREE","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL",
"AND","ASS_P","ASS_N","CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST",
"ADD","SUB","MUL","DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST",
"FINAL","KEEP","ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL",
"STRUCT_TYPE","INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition",
"complexProposition","poptional_projection","statement","option_struct_declaration",
"empty_statement","function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"file_statement","ass_statement","ass_left","leftaddrshift","assign_operator",
"ass_right","rightaddrshift","array","option_ari_exp","point_exp","ari_exp",
"type_cast_alg_exp","option_exp_else_statement","simple_ari_exp","member_in_exp",
"bi_operator","ari_operator","array_exp","option_list_value","option_struct_list_value",
"inner_option_list_value","address_exp","type_cast","casted_element","all_sizeof_type",
"size_of","String_Function","String_Function_head","String_Function_tail","String_Function_cat",
"String_Function_cmp","String_Function_cpy","String_Function_len","str_func_parameter",
"math_function","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   152,   153,   153,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   155,   155,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   157,   157,   158,
   158,   159,   159,   159,   159,   159,   160,   161,   161,   162,
   162,   162,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   164,   164,   164,   164,   164,   164,   165,   165,
   165,   165,   165,   165,   165,   165,   166,   166,   166,    -1,
    -1,    -1,    -1,   167,   167,   167,   167,   167,   167,   167,
   168,   169,   169,   169,   169,   169,   169,   169,   170,   170,
   170,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   170,   171,   171,   172,   172,   172,   172,   172,   172,   173,
   174,   174,   174,   174,   174,   174,   174,   175,   175,   175,
   176,   176,   176,   176,   176,   176,   176,   177,   177,   177,
   177,   178,   178,   179,   179,   180,   180,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   182,   182,   182,   182,   182,   182,   182,
   182,   183,   183,   184,   184,   184,   184,   185,   185,   185,
   186,   186,   186,   187,   187,   187,   187,   187,   188,   188,
   188,   188,   188,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   189,   190,   190,   191,   191,
   191,   191,   191,   191,   191,   191,   192,   192,   192,   192,
   193,   193,   193,   193,   193,   193,   194,   195,   196,   197,
   198,   199,   200,   200,   200,   200,   200,   200,   201,   201,
   201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   201,   202,   202,   202,   202,   202,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   204,   204,   204,   204,   204,   204,   205,   205,   206,
   206,   207,   207,   207,   207,   207,   207,   207,   207,   207,
   207,   207,   207,   207,   207,   207,   207,   207,   207,   207,
   207,   207,   207,   207,   207,   207,   207,   208,   208,   208,
   208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   208,   209,   209,   209,   209,   210,   210,
   210,   210,   211,   211,   212,   212,   213,   213,   214,   215,
   216,   217,   218,   218,   218,   219,   219,   220,   220,   220,
   220,   220,   221,   222,   223,   224,   224,   224,   225,   225,
   226,   226,   227,   228,   228,   229,   229,   229,   230,   231,
   231,   232,   232,   233,   233,   234,   234,   234,   234,   234,
   235,   235,   235,   236,   236,   236,   236,   236,   236,   236,
   236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
   237,   237,   237,   237,   237,   237,   237
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     9,     8,
     9,     1,     4,     4,     1,     7,     3,     1,     3,     1,
     0,     4,     5,     4,     1,     1,     4,     2,     2,     2,
     2,     1,     2,     2,     3,     3,     3,     3,     7,     8,
    11,    13,     1,     1,     1,     1,     1,     1,     2,     6,
     4,     5,     5,     8,     8,     2,     2,     2,     0,     6,
     7,     0,     2,     6,     8,     4,     6,     6,     6,     4,
     3,     1,     1,     1,     1,     3,     2,     1,    11,    12,
    11,    11,    17,    18,    17,    18,    19,    18,    17,    18,
    17,     1,     1,     1,     1,     1,    10,     3,     1,     4,
     5,    11,    12,    11,    11,    12,     3,     3,     2,     0,
     2,     2,     2,     7,     6,     4,     3,     1,     3,     3,
     5,     1,     3,     2,     0,     1,     3,     1,     2,     2,
     1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     1,     1,     3,     4,     4,     4,
     4,     4,     4,     3,     3,     3,     0,     2,     2,     2,
     2,     2,     3,     4,     4,     4,     5,     5,     5,     5,
     5,     6,     5,     5,     6,     5,     6,     7,     6,     6,
     7,     6,     6,     5,     7,     6,     1,     4,     1,     2,
     2,     2,     3,     3,     3,     2,     4,     4,     4,     4,
     1,     1,     1,     1,     1,     1,     4,     4,     6,     6,
     6,     4,     1,     1,     1,     1,     1,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     6,     6,     6,     6,     6,     2,
     2,     2,     1,     2,     3,     3,     3,     3,     1,     1,
     1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     1,     1,     1,     1,     1,     1,     2,     2,     1,
     1,     3,     2,     3,     4,     5,     4,     3,     4,     5,
     4,     2,     3,     4,     2,     3,     4,     4,     5,     6,
     8,     7,     4,     3,     5,     8,     0,     4,     3,     4,
     4,     5,     5,     5,     5,     6,     9,     0,     7,     9,
     8,     5,     4,     2,     2,     5,     0,     2,     3,     6,
     0,     2,     3,     2,     3,     2,     1,     3,     1,     1,
     1,     1,     3,     0,     2,     0,     3,     1,     2,     3,
     3,     3,     3,     5,     9,     1,     1,     0,     1,     0,
     1,     0,     7,     7,     5,     2,     1,     0,     5,     2,
     0,     4,     5,     0,     3,     4,     5,     4,     5,     4,
     0,     3,     3,     4,     4,     4,     4,     4,     4,     4,
     4,     6,     4,     4,     4,     6,     3,     3,     4,     3,
     0,     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,     0,     0,    98,
     0,     0,     0,     0,    47,     0,     0,     0,     0,     0,
    51,    52,     0,     0,    45,    93,    96,    95,    97,    94,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   387,     0,     1,    65,    62,     0,    34,    82,
     0,    75,    33,     0,   128,   124,   125,    76,   261,   262,
   263,   265,   264,   266,   122,    37,    38,    39,    35,    36,
    50,    49,   123,     0,     0,    29,    13,    22,     0,   181,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   390,
   392,   391,   186,   184,   185,    17,   168,   176,   190,   191,
   193,   188,   183,   178,   189,   182,   192,    21,    10,     9,
    20,    12,    11,     2,     0,     0,     0,     0,     0,    26,
     0,   181,   309,   310,     0,     0,   389,   311,     0,   303,
     0,     0,    78,     0,    79,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   387,   368,     0,   408,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   186,
     0,   184,   185,   190,   398,   183,     0,   192,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    81,    80,     0,     0,   387,   163,   162,   161,
     0,     0,   127,   124,     0,     0,     0,     0,     0,   377,
     0,     0,   387,    84,   109,     0,     0,     0,     0,     0,
    83,   142,   143,     0,     0,   377,     0,     0,     0,     0,
     0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   184,   185,     0,   190,   183,
   192,     0,   280,   281,   279,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,     0,     0,
   300,   301,   302,     0,     0,     0,     0,   220,     0,   222,
   219,   221,   179,   180,   202,   203,     0,   200,   201,   199,
   324,   327,   322,   323,   325,   326,   197,   198,   194,   195,
   196,     0,     0,     8,     6,     7,     5,     4,     0,     0,
     0,     0,   311,     0,   304,   324,   327,     0,     0,     0,
     0,     0,     0,     0,    85,    87,    86,    88,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   357,     0,     0,
     0,   394,     0,    93,    95,    97,    94,     0,     0,   407,
   406,     0,     0,   386,     0,     0,     0,   403,     0,     0,
     0,     0,     0,     0,   149,   144,   145,   205,   206,   146,
     0,     0,    93,    95,    94,     0,     0,     0,     0,   387,
   161,     0,   399,    67,   126,   157,   167,     0,   388,     0,
     0,     0,   450,     0,     0,     0,   357,   357,     0,   274,
   275,   277,     0,   273,   276,   278,     0,     0,     0,     0,
     0,     0,   377,     0,     0,     0,     0,     0,   331,     0,
   330,     0,     0,     0,   124,   125,     0,   122,   123,     0,
     0,     0,     0,     0,     0,     0,     0,   387,   381,     0,
   160,   106,     0,     0,     0,     0,    99,    32,    31,    54,
    30,     0,    68,   121,   451,   451,     0,   451,   451,   451,
   451,   451,   451,   447,   451,   451,   448,   451,   451,    25,
    29,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   187,   223,     0,    93,    95,    94,     0,     0,     0,     0,
   249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   170,   177,   169,     0,   319,   318,   307,
   317,   313,   321,   316,   312,   320,   308,   421,   306,   305,
   315,   314,    43,     0,     0,     0,     0,   120,     0,     0,
   116,     0,     0,     0,     0,     0,   368,   368,   368,     0,
   374,     0,     0,     0,   368,     0,     0,     0,     0,     0,
     0,   410,     0,   385,   384,     0,     0,     0,     0,     0,
     0,     0,     0,   217,   217,   217,   217,   217,   217,     0,
     0,   422,     0,     0,     0,     0,     0,     0,    93,    95,
    93,    95,   402,   161,     0,     0,     0,     0,     0,     0,
     0,   401,   400,   396,     0,     0,     0,     0,   267,   268,
     0,     0,     0,   272,    64,     0,     0,   387,     0,    63,
   328,   329,   166,     0,    93,    95,    94,     0,    40,    48,
     0,   428,     0,   426,     0,   430,    53,    41,    42,   378,
   377,     0,   375,    72,     0,     0,     0,   160,   108,   107,
   109,    77,     0,     0,     0,   438,   435,    74,   445,   441,
   439,   436,   449,   443,   437,   434,   444,   440,    28,     0,
   175,     0,   224,   172,     0,     0,   226,     0,     0,     0,
     0,   225,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   250,   252,
   251,   328,   329,   259,   256,   257,   258,   260,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   419,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   368,   345,   368,   368,   342,   368,   368,   333,   368,     0,
     0,   368,     0,   368,   368,   359,   368,     0,   395,   394,
     0,     0,     0,     0,     0,     0,     0,   409,     0,   404,
   383,     0,   148,   207,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   424,   423,     0,   204,
     0,     0,     0,     0,     0,     0,   160,   357,   402,   160,
   451,   451,     0,   397,    58,     0,     0,     0,     0,     0,
     0,    73,     0,     0,     0,     0,     0,     0,    93,    95,
   431,   431,   429,   427,     0,   382,   387,   381,   159,   160,
   151,   109,   109,     0,   101,    69,   456,   451,   451,   457,
   451,   451,     0,     0,   171,     0,     0,     0,     0,   247,
   231,     0,   234,     0,   236,     0,   233,     0,     0,     0,
     0,     0,   229,     0,     0,   230,     0,     0,   227,   228,
   244,     0,   255,   253,   254,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   420,     0,
   114,     0,   117,   119,   118,     0,   368,   346,   368,   368,
   338,   368,   343,   368,   368,   334,     0,   354,   368,   368,
     0,   332,     0,     0,   368,   360,   368,   368,   361,   373,
   368,   368,     0,   358,     0,   393,     0,     0,     0,   412,
     0,     0,   218,   217,   217,   217,   211,   213,   212,   208,
   210,   209,     0,   150,   425,     0,   387,   390,     0,   387,
   390,   387,   390,     0,     0,   357,     0,     0,     0,   446,
   442,     0,    57,     0,     0,   269,   270,   271,   160,   165,
     0,     0,     0,     0,     0,   433,   432,    72,   377,   379,
   158,   102,   103,   109,   453,   452,   455,   454,     0,   174,
   243,     0,   173,     0,   237,   240,   242,   239,     0,   232,
     0,   235,     0,   246,   295,   296,   297,   298,   299,     0,
     0,     0,     0,     0,     0,   413,     0,     0,   347,   368,
   339,   341,   344,   368,   335,   337,   368,   368,   353,     0,
   348,     0,    71,     0,   363,   362,   364,   368,   372,     0,
   365,     0,    66,     0,   411,     0,     0,     0,   214,   216,
   215,     0,     0,     0,     0,     0,     0,     0,     0,   387,
     0,   387,   390,     0,   151,    89,   164,    55,     0,    71,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   376,     0,     0,   100,    23,   245,     0,   238,   241,
     0,     0,     0,   115,   357,   340,   336,   355,   349,     0,
     0,   368,    70,     0,   357,   366,     0,     0,   368,     0,
     0,    44,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    90,
     0,    60,     0,     0,     0,     0,     0,     0,     0,     0,
    72,   109,   109,   248,     0,     0,     0,   368,     0,   350,
    59,     0,   368,     0,   369,    56,   405,   357,     0,     0,
     0,   160,   160,     0,     0,     0,   160,   160,   160,   160,
     0,     0,     0,     0,     0,     0,   357,    61,     0,     0,
     0,     0,     0,     0,     0,   380,   104,   105,     0,   415,
   368,   352,   368,   368,   371,   368,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   160,
     0,     0,     0,   160,   160,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   418,   356,   351,   367,   370,
     0,   390,   390,     0,   152,   131,   390,   390,     0,   155,
   129,   154,   132,     0,     0,     0,     0,     0,     0,    91,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   417,   414,     0,     0,   147,     0,     0,     0,   390,     0,
     0,   390,   153,   390,   390,     0,   156,   130,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   416,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   390,
    92,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   160,   160,     0,   160,
   160,     0,     0,     0,     0,     0,     0,   160,     0,     0,
   160,   160,   160,     0,   141,   139,     0,   135,   133,     0,
     0,     0,   160,   140,   134,   138,   136,     0,   137,     0,
     0,     0
};

static const short yydefgoto[] = {  1380,
     2,    21,   275,   209,   492,  1134,   143,    77,    78,    79,
    80,    81,   482,   487,    82,    83,    84,    85,   264,   479,
   405,   144,   686,   145,   178,   880,   875,   147,   148,   342,
   327,   407,   408,   409,   809,   149,   150,   881,   540,   151,
    88,    89,    90,    91,    92,    93,    94,   443,   152,   354,
   180,   358,   461,   589,   590,   381,   480,   683,   568,   202,
   153,   181,   154,   155,   156,   598,   436,   217,    96,    97,
    98,   392,   799,  1076,    99,   918,  1292,   100,   760,   101,
   623,   102,   673,   157,   696
};

static const short yypact[] = {    80,
   811,  3911,-32768,-32768,  -102,-32768,-32768,-32768,   811,   811,
   811,   811,  7519,   811,   811,   811,   811,   811,   811,-32768,
   201,     2,  6909,-32768,    96,   728,   742,   113,   136,-32768,
   145,   151,   164,   269,-32768,   183,    48,   293,  7620,    84,
-32768,-32768,   305,   353,-32768,-32768,-32768,-32768,-32768,-32768,
  3324,  3911,   300,   304,   421,   440,   475,   535,   576,   592,
   614,   369,   759,   759,   631,   335,   302,   640,   655,   668,
   674,   678,   722,   438,  1076,-32768,-32768,   703,-32768,-32768,
   438,-32768,-32768,   127,-32768,    43,    60,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   109,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   718,   859,   734,   667,   667,  6909,-32768,
  5510,   714,  7519,  7519,  7519,  7519,  7519,  7519,  7519,  7519,
  7519,  7519,  7519,  7519,  7519,  7519,  7519,  7519,   763,   767,
  7519,  7519,  7519,   857,   867,   876,   350,  9420,  9420,-32768,
-32768,-32768,-32768,    43,    60,   643,  1125,-32768,-32768,-32768,
-32768,-32768,   109,-32768,-32768,-32768,-32768,   667,   667,   667,
   667,   667,   667,-32768,   811,   811,   811,   811,   811,-32768,
  9420,   901,-32768,-32768,  4014,  6909,-32768,  1389,   540,-32768,
  1075,  6909,   438,   438,   438,   438,   355,    48,    48,    48,
    48,    70,   883,    48,-32768,   840,    48,  4152,  1054,   805,
  6909,   577,  3911,  7113,  6909,  3473,   488,  7012,  1124,  1160,
  1085,   326,   256,   903,-32768,   432,   312,  1155,  1091,   931,
  1004,   612,   612,   612,   612,   612,   612,   612,  1017,  1130,
  1156,   887,-32768,-32768,    48,  6689,   988,-32768,-32768,-32768,
  3771,   355,-32768,   124,  7519,   511,  3911,  3911,  3911,  7214,
  7519,   438,    22,-32768,   218,  3911,  3911,  3911,  3911,   496,
-32768,-32768,-32768,  7113,    70,  7214,    70,    70,    70,  1009,
  1009,  7317,-32768,   811,  1040,  1030,   971,   235,   263,  1020,
   367,  5628,    49,   552,  1026,   281,   481,   117,  1080,   507,
  1086,  4920,   643,   643,   643,   643,   643,   643,   643,   643,
   643,   643,   643,   643,   643,   643,   643,   643,  7519,  7519,
   643,   643,   643,  7519,  7519,  7519,   486,  1193,    60,-32768,
  1207,-32768,-32768,-32768,-32768,-32768,  9420,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  9420,  7519,  1330,   891,   891,   -18,  1096,  1108,  7519,
  7519,  4290,  1049,   315,-32768,    41,    50,  7519,   577,  6909,
  6909,  7519,  7519,   765,-32768,-32768,-32768,-32768,   217,  1194,
  1190,  1218,  1252,  1254,   132,  1291,  1300,   525,  1264,   487,
  1295,  1305,  1258,   235,   263,  1020,   367,  5274,   524,-32768,
-32768,  1312,  1337,-32768,   927,  1325,  3911,-32768,  1263,  4684,
  7418,  7418,   568,   514,-32768,   643,  1289,-32768,-32768,-32768,
  1038,  1266,   372,   392,   455,   875,   888,   933,   335,  1359,
  1329,  4428,-32768,-32768,-32768,-32768,  1372,  1336,-32768,  1352,
  7012,  7012,-32768,  3911,  1455,  1412,   525,   525,   486,   124,
    60,-32768,  1419,   109,-32768,-32768,  1420,  1434,  1435,  1436,
  1421,  1432,  7214,   438,   438,   616,  1441,   956,-32768,   401,
-32768,  1353,  3622,  1168,   281,   481,   903,   507,  1086,   638,
   306,   393,  1442,  1206,  1243,  1246,    35,  1008,  1444,  1443,
    15,-32768,  1371,  7519,    31,  7113,-32768,  1250,  1373,  1373,
-32768,  1450,  1381,-32768,   140,   140,  1447,   140,   140,   140,
   140,   140,   140,-32768,    72,   140,-32768,    72,   140,-32768,
   734,  1486,  7519,  1376,  9420,   464,  9420,   528,   563,  9420,
   587,   598,   644,   661,   994,   664,   689,  1467,  1469,   712,
-32768,  1336,  1374,  1377,  1393,  1394,  1050,   729,   963,  1473,
-32768,  1474,   126,   285,   354,   399,   605,   506,   554,   481,
  1080,   507,  1086,  1161,-32768,   643,  1475,   643,   643,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   643,  1520,  1415,-32768,
   643,   643,-32768,   474,  1480,   554,  1386,-32768,  1385,    48,
-32768,   275,  1485,    48,    48,  1411,    21,    82,   175,  1490,
-32768,  1413,    48,   623,   179,  1491,    32,  1494,   654,  5392,
   211,  6909,   577,-32768,-32768,  1277,  1509,  4802,  1496,   117,
    27,  1497,  5038,   619,   104,  1510,   619,   104,  1510,  6806,
  7113,-32768,  1499,  1178,  3083,   747,   764,   771,   808,   812,
  1467,  1469,  1352,  1502,  7519,  1511,  4566,   974,  7519,    70,
  1507,  1449,-32768,  1112,   577,  1554,  1514,  1515,-32768,-32768,
   612,   612,   612,-32768,-32768,  1516,    48,  1517,  1329,-32768,
-32768,-32768,-32768,  1518,  1448,  1453,  1454,   965,-32768,-32768,
    70,-32768,  1519,-32768,  1525,-32768,-32768,-32768,-32768,-32768,
  7214,  2681,-32768,-32768,  3186,  1529,    71,    15,-32768,-32768,
  1530,-32768,   496,  1009,  1009,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1533,
    51,   814,-32768,  1135,  7710,  1536,-32768,  7710,  1541,  7710,
  1542,-32768,  7710,  1543,   815,   819,   829,   808,   831,  9420,
   832,  9420,   834,  9420,  9420,  7710,  1544,  1468,-32768,-32768,
-32768,  1470,  1471,-32768,-32768,-32768,-32768,-32768,  7519,  7519,
  7519,  7519,  7519,  1476,  1477,  1479,  1105,  1431,   577,-32768,
  1448,  1453,  1454,  1117,  1545,  1557,  1551,  1552,  1553,    48,
   210,-32768,   191,   224,-32768,   289,   225,-32768,  1275,  1495,
    48,   806,    48,   810,   -12,-32768,  1281,  3911,-32768,  1305,
  1498,   562,   372,   392,   455,  1137,   597,  1350,  1570,-32768,
-32768,  1563,-32768,-32768,  1565,  5156,    27,  2966,  1562,  1564,
  1568,  1561,  1567,  1569,  5746,  1573,  1578,-32768,  1178,-32768,
  7800,  7890,  7980,   837,   845,  1580,    15,   525,-32768,    15,
   140,   140,  3911,-32768,-32768,   577,  1581,  1521,  1582,  1586,
  1587,-32768,  1502,  7519,  7519,  1588,  1589,  1590,  1513,  1523,
  1602,  1602,-32768,-32768,  1594,-32768,  1061,  1444,-32768,    15,
-32768,   153,  1530,  1591,-32768,-32768,-32768,    72,   140,-32768,
    72,   140,   811,  7519,-32768,  7710,  1595,  9420,  1598,-32768,
-32768,  7710,-32768,  7710,-32768,  7710,-32768,  7710,  8070,  8160,
  8250,   846,-32768,  7710,  1599,-32768,  7710,  1604,-32768,-32768,
-32768,  7710,-32768,-32768,-32768,   987,   993,   998,  1000,  1002,
  1605,  1606,  1607,  1513,  1524,  9420,  1617,  1608,-32768,  1523,
-32768,    48,-32768,-32768,-32768,  1609,   -12,-32768,   840,   840,
-32768,   -12,-32768,   840,   840,-32768,    48,-32768,   821,   320,
  7519,-32768,  1610,  1613,   840,-32768,   840,   840,-32768,-32768,
   843,   343,  7519,-32768,  1288,-32768,  1611,   652,   812,   355,
  6909,  1301,-32768,   619,   104,  1510,-32768,-32768,-32768,-32768,
-32768,-32768,  5864,-32768,-32768,  5982,  1147,  1614,  6100,  1157,
  1616,  1257,  1618,  8340,  8430,   525,  1612,  1619,  1620,-32768,
-32768,  1296,-32768,  3911,  1621,-32768,-32768,-32768,    15,   643,
     3,    10,  1082,  1622,  1624,-32768,-32768,  1444,  7214,-32768,
-32768,-32768,-32768,   286,-32768,-32768,-32768,-32768,   700,   643,
-32768,  7710,  1161,  7519,-32768,-32768,-32768,-32768,  8520,-32768,
  7710,-32768,  7710,-32768,-32768,-32768,-32768,-32768,-32768,  1527,
  1532,  1534,  1627,  1638,  1631,-32768,  1632,  1635,-32768,   840,
-32768,-32768,-32768,   840,-32768,-32768,   840,   840,-32768,  7519,
-32768,   232,  3911,  1639,-32768,-32768,-32768,   840,-32768,  7519,
-32768,   726,-32768,  3911,-32768,  1640,  1188,  1641,-32768,-32768,
-32768,  6218,  1642,  1643,  6336,  1644,  1645,  1647,  1648,  1278,
  6454,  1382,  1653,  1654,  1655,-32768,-32768,-32768,  1339,  3911,
  1626,  1646,  1656,  1614,  1658,  1659,  1616,  1660,  1618,  1548,
    40,-32768,  1661,    71,-32768,-32768,-32768,  1051,-32768,-32768,
  1549,  1664,  3911,-32768,   525,-32768,-32768,-32768,-32768,   454,
  7519,   840,  1076,  1636,   525,-32768,   658,  7519,   840,  1253,
   577,-32768,  1665,   860,   865,  1335,  7519,  7519,   877,   889,
  1349,  7519,  7519,  7519,  7519,  1663,  6572,  1666,  1667,-32768,
  1669,-32768,  1662,  1655,    37,   826,  1672,  1674,  1675,  1653,
  1444,   153,  1530,-32768,  3911,  1260,  1676,   840,   980,-32768,
-32768,  1677,   840,  1029,-32768,-32768,-32768,   525,   913,   921,
   926,    15,    15,   928,   932,   935,    15,    15,    15,    15,
  7519,   937,   940,  1351,  7519,  7519,   525,-32768,  1596,  1615,
  1687,  1623,  1628,  1688,   944,-32768,-32768,-32768,  1274,-32768,
   840,-32768,   840,   840,-32768,   840,  1685,  8610,  8700,   945,
  1681,  1682,  8790,  8880,   946,  1683,  1684,  1686,  1690,    15,
   947,   966,   968,    15,    15,  1692,  1696,  1697,  1629,  1698,
  1699,  1630,  1633,  1634,  1695,  1445,-32768,-32768,-32768,-32768,
  1143,  1702,  1704,  8970,-32768,-32768,  1705,  1709,  9060,-32768,
-32768,-32768,-32768,  1708,  9150,  9240,   972,  1711,  1712,  1650,
  1625,  1637,  1710,  1649,  1670,  1718,  1719,  1723,  1657,  1431,
-32768,-32768,   154,   722,-32768,  1725,  1726,  1727,  1728,  1730,
  1731,  1732,-32768,  1736,  1737,  9330,-32768,-32768,  1178,  1702,
  1704,  1680,  1705,  1709,  1689,  1691,  1693,  1738,-32768,   516,
   988,  1721,  1745,  1740,  1746,  1748,  1742,  1753,  1756,  1757,
  1289,  1728,  1732,  1736,  1737,  1694,  7519,  7519,  1758,  7519,
  7519,  1760,  1767,  1768,  1773,  1757,    15,    15,  7519,    15,
    15,  7519,  7519,  7519,  1775,  1755,  1778,    15,  1779,  1780,
    15,    15,    15,  7519,-32768,-32768,  1782,-32768,-32768,  1787,
  1788,  1790,    15,-32768,-32768,-32768,-32768,  1791,-32768,  1849,
  1850,-32768
};

static const short yypgoto[] = {-32768,
-32768,     6,  1340,     0,  1159,   754,    36,-32768,-32768,  -231,
   -22,  -230,   -47,  -663,-32768,  -197,    23,  1235,-32768,  -169,
-32768,   453,  -448,  1333,   -13,  -444,-32768,  1652,  -131,-32768,
  1142,  -388,-32768,-32768,  -487,    29,-32768,   909,-32768,-32768,
  -177,-32768,-32768,-32768,-32768,-32768,-32768,  -158,-32768,     8,
   -48,  1713,-32768,  -217,  -428,  1673,  -255,  -853,  -198,-32768,
  1233,  2009,  1279,   954,-32768,  1067,  1215,  -150,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -702,-32768,-32768,-32768,-32768,
  1044,-32768,  -429,  1869,   -42
};


#define	YYLAST		9571


static const short yytable[] = {   146,
   391,    75,   215,   398,  1010,   459,   323,   324,   647,   648,
   497,   611,   615,   618,   105,   106,   107,   108,   462,   158,
   159,   160,   161,   162,   163,   199,   254,   865,   493,   380,
   179,   689,   789,   261,   404,   680,   483,    76,   194,   349,
   233,   234,   675,   104,   442,   442,   442,   442,   442,   442,
   442,   219,   171,  1102,   561,   418,   685,   423,   874,   265,
  1105,   459,   380,   564,   447,   448,   449,   450,   451,   452,
   713,   194,   717,   211,   541,   722,   268,   484,   804,   214,
  1209,   194,   194,  1210,   200,   317,   210,    76,   694,   243,
  1168,     1,   526,   266,   494,   527,   169,   288,   194,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,   308,   170,   276,   311,   312,   313,
   375,   819,   266,   380,   401,   270,   402,   810,   811,   812,
   813,   814,   194,   195,   201,   365,   366,   367,   368,   289,
   265,  1211,   325,   326,   624,   808,   182,   459,  1103,   459,
   771,  1104,   267,   137,  1112,  1106,   694,   215,  1107,   215,
   252,   353,   595,   187,    66,   320,   195,   749,   531,   269,
   344,   345,   346,   347,   348,   390,   253,   195,   325,   326,
   237,   695,   582,   355,   288,  1169,   188,   177,  1170,   364,
   406,   142,   353,   195,   485,   189,   177,   656,  1012,  1013,
   142,   190,   399,   289,  1320,   930,   459,   459,   395,   370,
   555,   774,   411,   164,   191,   237,   380,   177,   271,   611,
   380,   624,   460,   510,   807,   194,   289,   195,   211,   194,
   609,   470,   380,   267,   289,   820,   406,   481,    76,   864,
   464,   210,   262,   263,   325,   326,   474,   475,   476,   695,
   406,   380,   406,   325,   326,   488,   489,   490,   491,   485,
   194,   194,   736,   211,   243,   380,   380,   574,   288,   467,
   624,   638,   268,  1131,   194,   194,    76,   237,   539,   511,
   642,   643,    76,    76,    76,   893,   515,   896,  1132,   899,
   900,    76,    76,    76,    76,   543,   544,   265,   862,  1321,
   545,   546,   547,   935,   777,   504,   507,   427,   785,   165,
   289,   166,   167,   168,   517,   169,   691,  1216,   754,   192,
   195,   755,   265,   756,   195,   582,   750,   485,   193,   556,
   380,   266,   426,   486,   170,   137,   558,   559,   353,   927,
   797,   254,   265,   197,   567,   551,    66,   671,   571,   572,
  1115,   242,   241,   932,   937,   195,   253,   672,   203,   325,
   326,   380,   237,   430,   516,   269,   560,   569,   570,   195,
   195,  -125,  -125,   215,   288,  1060,   266,   426,   987,   757,
   289,   989,   215,   215,   380,   236,   610,   614,   617,   459,
   267,   575,   518,   233,   234,   751,   606,   467,  1070,   988,
   317,  1114,   462,   204,   800,   369,   365,   367,   353,   270,
   575,  1011,   325,   326,   215,   267,   289,   807,   520,   965,
   237,  1006,  1007,   515,   431,   855,   432,   360,   289,   361,
   807,    66,    76,   644,   671,   267,   242,   690,   609,   406,
   752,  -124,  -124,   517,   674,   220,   835,   237,   270,   221,
   289,   817,   663,   697,    86,   699,   700,   701,   702,   703,
   704,   493,   705,   706,    66,   707,   708,   467,   137,    76,
   688,   222,   406,   442,   442,   442,  1079,  1080,  1081,    66,
   237,   325,   326,   429,    66,   211,   638,   591,   194,   242,
   223,   289,   839,   840,   841,   237,   521,   268,   210,   711,
   237,   626,   271,   212,    86,   320,   520,    30,  1217,  1218,
  1178,   230,   858,   231,   229,   715,    30,   761,   238,   244,
   762,   627,   763,   270,   574,   224,   325,   326,   325,   326,
    46,    47,   427,    48,    49,    50,   548,   592,   236,    46,
    47,   271,    48,    49,    50,    30,   232,  -122,  -122,   754,
  1101,   366,   755,  1291,   756,   621,   548,  1094,   429,   754,
   919,   439,   755,   286,   756,   622,  1320,   252,    46,    47,
   265,    48,    49,    50,   194,   586,   551,   396,   764,   718,
   359,   325,   326,   253,   628,   225,   288,  1319,   215,   318,
   269,   458,   137,   716,   610,   528,   575,   459,   529,   288,
    63,    64,   551,    66,   137,   426,   460,   406,   242,   798,
   757,   711,   194,   876,   720,    66,   271,   419,   620,   237,
   757,   827,   575,   353,   137,   830,   226,   286,   289,   458,
   397,   237,   593,   420,   594,    66,   289,   993,   723,   244,
    66,   289,   227,    74,   376,   233,   753,   194,   902,   515,
   212,   237,   360,   601,   361,    86,   237,   719,   212,   238,
   808,  1321,   439,   267,   228,   289,   194,   406,   406,   253,
   587,   860,   588,   194,   440,   440,   440,   440,   440,   440,
   440,   235,    55,    56,    57,    58,    59,    60,   286,   670,
   245,   958,   721,   465,   244,   517,  1177,    66,   471,    86,
    86,    86,   194,  1022,   194,   246,  1182,   253,    86,    86,
    86,    86,   520,   237,  1183,   730,   724,   495,   247,   498,
   500,   502,   505,   508,   248,  1172,   252,   725,   249,   867,
   870,  1078,   325,   326,   286,   906,   907,   908,   909,   910,
   732,    66,   253,  1231,  1232,   657,   325,   326,  1236,  1237,
  1238,  1239,   783,  1113,  1116,   459,   260,   237,   177,  1227,
   272,   658,  1075,   736,   292,   325,   326,  1138,   195,   549,
   325,   326,   250,   726,   230,   274,   231,   251,  1246,    30,
   744,   252,  1139,   792,  1044,   325,   326,   955,   990,   991,
   727,  1274,   288,   731,   964,  1278,  1279,   253,   821,   253,
-32768,   288,    46,    47,   286,    48,    49,    50,   165,   232,
   166,   167,   168,   309,   169,   822,   573,   310,   733,     3,
   945,   576,   823,    76,   948,  1015,  1016,   583,  1017,  1018,
   999,  1000,   992,   170,   289,  1058,     4,     5,     6,     7,
   212,   737,   165,   289,   166,   167,   168,   380,   169,    86,
     8,   380,   286,   325,   326,   238,   394,  1068,   745,   730,
  1020,     9,   380,   732,    10,   876,   889,   170,    76,  1212,
   890,   238,  1213,   183,   286,   184,   716,   360,  1019,   361,
   891,   380,   732,   894,   380,   897,    86,   185,   984,   186,
   230,   549,   231,   719,   459,    30,   985,  1029,  1356,  1357,
   724,  1359,  1360,   230,   459,   231,    74,   314,    30,  1367,
   273,   515,  1370,  1371,  1372,   212,   517,   315,   629,    47,
  1331,   630,    49,    50,  1378,   232,   316,  1062,   515,   318,
  1214,   631,    47,   378,   632,    49,    50,   824,   232,  1072,
   517,   825,  1187,   877,   716,    11,    12,    13,   719,    14,
    15,    16,    17,    18,   428,    19,    20,   459,   724,   288,
   892,   895,   288,   898,  1228,   288,   895,   165,  1077,   166,
   167,   168,  1229,   169,   898,   898,   459,   732,   604,  1233,
   230,   437,   231,  1234,   633,    30,   732,  1253,   515,  1189,
  1254,   517,   170,  1099,  1190,   406,  1264,  1269,  1275,   661,
   549,   289,   662,   168,   289,   169,  1194,   289,   849,    47,
  1118,   850,    49,    50,   746,   232,   456,  1276,  1195,   732,
   350,   351,    74,  1306,   170,   829,   576,    28,    29,    76,
    31,    32,    33,    34,   583,    74,  1223,   728,  1035,   360,
   729,   361,   716,   251,  1036,   431,  1130,   432,  1255,  1037,
   719,  1038,   212,  1039,   438,  1230,  1137,   716,   681,   375,
   286,   719,  1133,   251,  1235,   286,  1241,   453,   288,  1242,
   513,   288,   286,  1140,   898,   898,   716,   288,   625,    55,
    56,    57,    58,    59,    60,  1226,   431,    62,   432,   286,
   325,   326,   831,   742,   512,   719,   743,  1277,    76,  1133,
   531,   898,  1174,   440,   440,   440,   393,   325,   326,    76,
   289,  1009,    74,   289,   325,   326,   251,  1179,   514,   289,
   325,   326,  1176,   851,  1184,   325,   326,   325,   326,   325,
   326,   532,   434,  1192,  1193,    76,   425,   433,  1197,  1198,
  1199,  1200,   360,   288,   361,   435,   868,   871,   914,   519,
   360,   915,   361,   434,    73,   530,   325,   326,    76,   557,
   914,    28,    29,   920,    31,    32,    33,    34,   356,   357,
   333,   334,   335,   336,  1219,   424,   325,   326,   325,   326,
   728,   325,   326,   959,   256,   289,   328,  1240,   257,   258,
   259,  1244,  1245,  1293,   362,   363,   328,   250,  1083,   256,
   262,   263,   251,   257,   258,   259,   433,   250,  1086,   265,
    76,   -65,   251,    55,    56,    57,    58,    59,    60,   669,
   256,    62,   328,   270,   257,   258,   259,  1108,   819,   170,
  1109,   401,   256,   402,    95,   577,   257,   258,   259,  1142,
    86,   578,   329,   330,   331,   332,   333,   334,   335,   336,
   337,   338,   329,   330,   339,   340,   341,   677,   286,   579,
   337,   338,   325,   326,   339,   340,   341,   286,   -65,   196,
  -123,  -123,   -65,   -65,   -65,   454,   256,   184,   329,   330,
   257,   258,   259,   216,    95,    86,   337,   338,  1294,   940,
   339,   340,   341,   580,   678,   952,  1295,   679,   240,    95,
   360,   455,   361,   186,  1186,   581,   255,   250,  1088,   563,
   566,  1220,   251,   255,   256,   429,   380,   607,   257,   258,
   259,    30,   380,  1347,  1348,  1256,  1350,  1351,   250,  1156,
   941,   801,   584,   251,    87,  1358,   953,   596,  1361,  1362,
  1363,   585,  1073,   290,    46,    47,   597,    48,    49,    50,
  1373,   256,  1098,   602,   256,   257,   258,   259,   257,   258,
   259,   256,   257,   258,   259,   257,   258,   259,   256,   321,
   603,   256,   257,   258,   259,   257,   258,   259,   728,   605,
   636,  1191,   256,   213,    87,   256,   257,   258,   259,   257,
   258,   259,   728,  1162,   728,  1196,   256,  1243,   239,    87,
   257,   258,   259,   454,   256,   599,   624,   290,   257,   258,
   259,   183,   244,   599,   635,   255,   255,   255,   255,    95,
   371,   372,   373,   374,   377,   286,   379,   639,   286,   382,
   216,   286,   250,  1158,   916,    95,   917,   251,   216,   421,
   166,   167,   168,   287,   169,   640,    86,   256,   916,  1290,
   917,   257,   258,   259,   444,   444,   444,   444,   444,   444,
   444,   641,   360,   170,   361,   645,   646,   457,   290,   319,
   649,   650,   654,   468,    95,   651,   652,   653,   472,    95,
    95,    95,   664,   655,   255,   682,   687,   259,    95,    95,
    95,    95,   660,   676,   684,   693,   710,   496,   698,   499,
   501,   503,   506,   509,   692,   712,   739,   287,   356,   357,
   333,   334,   335,   336,   290,    86,   325,   326,   734,    87,
   735,   738,   740,   741,   747,   748,    86,   759,   758,   361,
   213,   425,   177,   140,   286,    87,   426,   286,   213,   239,
   770,   780,   781,   286,   788,   791,   802,   803,   805,   552,
   818,   808,    86,   826,   441,   441,   441,   441,   441,   441,
   441,   828,   833,   432,   836,   837,   838,   842,   287,   845,
   853,   485,   844,   466,    87,    86,   854,   846,   319,    87,
    87,    87,   847,   848,   290,   861,   873,   882,    87,    87,
    87,    87,   884,   886,   888,   902,   921,   903,   922,   904,
   905,   468,   923,   924,   925,   911,   912,   379,   913,   286,
   943,   960,   957,   961,   287,   962,   967,   970,   968,   621,
   216,   255,   969,   971,   974,   972,   883,    86,   885,    95,
   986,   887,   290,   996,   994,   240,   995,   997,   998,  1001,
  1002,  1003,  1004,   671,   901,  1008,  1022,  1014,  1024,   550,
  1031,   634,  1005,  1043,   290,  1033,  1040,  1041,  1042,  1045,
  1048,  1074,  1046,  1063,  1064,  1084,    95,  1087,  1095,  1089,
  1096,   552,  1103,  1110,  1100,  1111,  1097,  1106,  1121,  1108,
  1122,  1123,  1164,  1124,   287,  1125,   255,   255,   659,  1135,
  1181,  1141,  1143,  1167,  1169,   216,  1165,  1147,  1148,  1152,
  1153,   466,  1154,  1155,  1159,  1160,  1161,  1083,  1166,   321,
  1086,  1088,  1171,  1296,  1175,  1188,  1208,   255,  1201,  1207,
   213,  1205,  1206,  1156,  1215,  1247,  1158,  1221,  1224,    87,
   883,   887,   287,  1249,  1252,   239,  1261,  1265,  1266,  1270,
  1271,  1289,  1272,  1280,  1248,   583,  1273,  1281,  1282,  1284,
  1285,   239,  1250,  1297,   287,  1298,  1300,  1251,  1283,  1286,
  1301,  1312,  1287,  1288,  1303,  1309,    87,  1307,  1308,  1315,
  1316,   550,   583,  1310,  1317,   266,  1337,  1322,  1323,  1324,
   552,  1325,  1326,  1327,  1021,  1311,  1318,  1328,  1329,  1336,
  1025,  1339,  1026,  1342,  1027,   213,  1028,  1313,   883,   887,
  1338,  1340,  1030,  1341,  1343,  1032,   468,  1344,  1345,   319,
  1034,  1365,   767,  1349,   379,  1352,   768,   769,  1314,   773,
   776,   779,  1353,  1354,  1355,   782,   784,   787,  1332,   790,
  1364,   255,   216,   255,  1366,  1368,  1369,  1333,  1374,  1334,
   290,  1335,  1346,  1375,  1376,   290,  1377,  1379,  1381,  1382,
   709,   866,   290,  1163,   816,   878,   956,   766,   834,   343,
   975,     0,     0,     0,     0,     0,     0,     0,     0,   290,
   103,     0,   832,     0,     0,     0,     0,     0,     0,     0,
   550,     0,     0,   444,   444,   444,     0,     0,     0,   843,
     0,     0,  1030,  1032,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   852,     0,     0,   466,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   218,
   103,     0,     0,     0,     0,     0,   869,   872,     0,     0,
  1117,     0,   213,     0,     0,   103,     0,  1032,     0,  1119,
   287,  1120,     0,     0,     0,   287,     0,     0,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   287,
     0,     0,     0,     0,     0,     0,     0,     0,   554,   291,
     0,     0,     0,   441,   441,   441,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   926,   929,     0,   322,   934,     0,     0,   939,
     0,     0,     0,   944,     0,   947,     0,   951,     0,     0,
    95,     0,     0,     0,   255,     0,     0,     0,     0,   255,
     0,     0,     0,     0,     0,     0,     0,     0,   290,     0,
     0,     0,     0,   291,     0,     0,     0,   290,     0,     0,
     0,     0,     0,     0,     0,   103,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    95,   218,     0,     0,     0,
     0,   103,     0,     0,   218,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   446,   446,   446,   446,   446,   446,   446,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   469,
   103,     0,     0,     0,   473,   103,   103,   103,     0,     0,
    87,     0,     0,     0,   103,   103,   103,   103,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   883,   287,     0,
     0,     0,   883,     0,     0,     0,     0,   287,     0,     0,
   291,     0,     0,     0,  1047,     0,     0,     0,     0,  1050,
     0,     0,     0,     0,  1054,    87,   714,     0,   714,  1057,
     0,   714,  1032,     0,     0,     0,     0,  1032,     0,     0,
     0,     0,     0,     0,   883,   553,     0,     0,     0,     0,
   255,     0,    95,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   290,     0,     0,   290,     0,
     0,   290,   410,     0,  1032,     0,     0,     0,     0,     0,
   291,     0,     0,     0,     0,     0,    95,     0,     0,     0,
   445,   445,   445,   445,   445,   445,   445,   469,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   218,     0,   410,   772,
   775,   778,     0,     0,     0,   103,     0,   786,   291,     0,
     0,     0,   410,     0,   410,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   291,     0,    87,     0,     0,    95,     0,     0,     0,     0,
   542,     0,   103,     0,     0,   287,    95,   553,   287,     0,
     0,   287,     0,     0,   290,     0,     0,   290,     0,     0,
     0,     0,     0,   290,     0,     0,    87,     0,     0,     0,
     0,   218,    95,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   322,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    95,     0,     0,     0,     0,
     0,     0,     0,     0,   562,   565,   714,     0,     0,   714,
     0,   714,     0,     0,   714,     0,     0,     0,     0,     0,
     0,   714,     0,   714,     0,   714,   714,   714,     0,   290,
     0,     0,     0,     0,     0,    87,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    87,    95,   612,   616,
   619,     0,     0,     0,   287,     0,   553,   287,     0,     0,
     0,     0,     0,   287,     0,     0,     0,     0,     0,     0,
     0,     0,    87,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   469,   928,     0,   931,   933,     0,   936,   938,
     0,   942,     0,     0,   946,    87,   949,   950,     0,   954,
     0,   410,     0,     0,     0,     0,     0,     0,   218,     0,
     0,     0,   714,   714,   714,     0,   291,     0,     0,     0,
     0,   291,     0,     0,     0,     0,     0,     0,     0,   287,
     0,     0,     0,     0,   410,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   291,     0,    87,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   446,
   446,   446,     0,     0,     0,     0,     0,   714,     0,  1023,
     0,     0,     0,   714,     0,   714,     0,   714,     0,   714,
   714,   714,   714,     0,     0,   714,     0,     0,   714,     0,
     0,     0,     0,   714,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   765,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  1049,
     0,  1051,  1052,     0,  1053,     0,  1055,  1056,     0,     0,
     0,  1059,  1061,     0,     0,     0,   612,  1065,     0,  1066,
  1067,     0,     0,  1069,  1071,     0,     0,     0,     0,   410,
     0,     0,     0,     0,     0,   714,   714,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   103,     0,     0,   445,
   445,   445,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   714,   291,     0,     0,     0,     0,     0,
   714,   856,   714,   291,   714,     0,     0,   109,     0,   410,
   410,     0,     0,     0,   110,   863,     0,     0,     0,    28,
    29,   103,    31,    32,    33,    34,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1126,     0,     0,     0,  1127,     0,     0,  1128,
  1129,   400,     0,     0,   401,     0,   402,     0,     0,     0,
  1136,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,  1180,     0,     0,     0,     0,   138,
   403,  1185,     0,   139,     0,     0,   966,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   857,   177,   103,   140,
   141,   142,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   291,     0,     0,   291,     0,     0,   291,     0,     0,
  1222,     0,     0,     0,     0,  1225,     0,     0,     0,     0,
     0,     0,   103,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   714,
   714,     0,     0,     0,   714,   714,     0,     0,     0,     0,
     0,     0,     0,  1257,     0,  1258,  1259,     0,  1260,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   714,     0,     0,     0,     0,
   714,     0,     0,     0,     0,     0,   714,   714,     0,     0,
     0,   103,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   103,     0,     0,     0,     0,     0,     0,     0,
   291,     0,     0,   291,     0,     0,     0,   714,     0,   291,
     0,     0,     0,     0,     0,     0,   963,     0,   103,     0,
     0,     0,   109,     0,     0,     0,     0,     0,     0,   110,
     0,     0,     0,     0,    28,    29,     0,    31,    32,    33,
    34,   103,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   613,   410,     0,   401,
     0,   402,     0,     0,     0,   291,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   112,   103,    62,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   396,   137,     0,     0,     0,     0,   109,
     0,     0,     0,     0,   138,    66,   110,     0,   139,     0,
     0,    28,    29,     0,    31,    32,    33,    34,     0,     0,
     0,    73,   177,     0,   140,   141,   142,     0,     0,     0,
     0,     0,  1173,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   111,     0,     0,   397,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   859,     0,     0,     0,
     0,     0,   109,     0,     0,     0,     0,     0,     0,   110,
     0,   137,     0,     0,    28,    29,     0,    31,    32,    33,
    34,   138,    66,     0,     0,   139,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    73,     0,
     0,   140,   141,   142,     0,     0,   111,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   112,     0,    62,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   138,    66,     0,     0,   139,     0,
     0,     0,     0,     0,     0,     0,    22,     0,     0,     0,
   205,    73,    24,    25,   140,   141,   142,   172,     0,    26,
     0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,   173,   174,    37,    38,    39,    40,     0,    41,    42,
    43,     0,    44,    45,     0,     0,     0,    46,    47,     0,
    48,    49,    50,     0,   206,     0,     0,    52,     0,     0,
     0,    53,     0,     0,     0,     0,     0,     0,     0,    54,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   112,    61,    62,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,     0,    63,    64,
     0,    65,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   138,   207,     0,     0,   139,     0,    67,   208,
    68,    69,    70,    71,    72,     0,     0,     0,     0,    73,
   177,    74,   140,   141,   142,    22,     0,     0,     0,   205,
     0,    24,    25,     0,     0,     0,   172,     0,   412,     0,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
   173,   174,    37,    38,    39,    40,     0,    41,    42,    43,
     0,    44,    45,     0,     0,     0,   413,    47,     0,   414,
   386,   415,     0,   206,     0,     0,    52,     0,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,    54,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
    61,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,   416,   417,     0,
    65,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   138,   207,     0,     0,   139,     0,    67,   208,    68,
    69,    70,    71,    72,     0,     0,     0,     0,    73,   177,
   389,   140,   141,   142,    22,     0,     0,     0,   205,     0,
    24,    25,     0,     0,     0,   172,     0,    26,     0,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,   173,
   174,    37,    38,    39,    40,     0,    41,    42,    43,     0,
    44,    45,     0,     0,     0,   665,    47,     0,   666,    49,
   667,     0,   206,     0,     0,    52,     0,     0,     0,    53,
     0,     0,     0,     0,     0,     0,     0,    54,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   112,    61,
    62,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,     0,   668,    64,     0,    65,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   137,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   138,   207,     0,     0,   139,     0,    67,   208,    68,    69,
    70,    71,    72,     0,     0,     0,     0,    73,   177,    74,
   140,   141,   142,    22,     0,     0,     0,    23,     0,    24,
    25,     0,     0,     0,     0,     0,    26,     0,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,     0,     0,
    37,    38,    39,    40,     0,    41,    42,    43,     0,    44,
    45,     0,     0,     0,    46,    47,     0,    48,    49,    50,
     0,   463,     0,     0,    52,     0,     0,     0,    53,     0,
     0,     0,     0,     0,     0,     0,    54,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,     0,    61,    62,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    63,    64,     0,    65,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    66,     0,     0,     0,     0,    67,     0,    68,    69,    70,
    71,    72,     0,    22,     0,     0,    73,    23,    74,    24,
    25,     0,     0,     0,     0,     0,    26,     0,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,     0,     0,
    37,    38,    39,    40,     0,    41,    42,    43,     0,    44,
    45,     0,     0,     0,    46,    47,     0,    48,    49,    50,
     0,    51,     0,     0,    52,     0,     0,     0,    53,     0,
     0,     0,     0,     0,     0,     0,    54,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,     0,    61,    62,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    63,    64,     0,    65,     0,
   109,     0,     0,     0,     0,     0,     0,   172,     0,   277,
     0,     0,    28,    29,     0,    31,    32,    33,    34,     0,
    66,   173,   174,     0,     0,    67,     0,    68,    69,    70,
    71,    72,     0,     0,     0,     0,    73,   278,    74,     0,
   279,   280,   281,     0,   352,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   112,     0,    62,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,     0,   283,   284,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   138,    66,     0,     0,   139,     0,     0,   176,
     0,     0,     0,     0,     0,     0,     0,     0,   109,    73,
   177,   285,   140,   141,   142,   110,     0,   383,     0,   231,
    28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   384,    47,     0,   385,   386,
   387,     0,   388,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   112,     0,
    62,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,     0,   283,   284,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   137,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   138,    66,     0,     0,   139,     0,   242,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   109,    73,     0,   389,
   140,   141,   142,   172,     0,   277,     0,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,   173,   174,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   522,     0,     0,   523,   280,   524,     0,
   352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,     0,   525,   284,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,   176,     0,     0,     0,     0,
     0,     0,     0,     0,   109,    73,   177,   285,   140,   141,
   142,   172,     0,   277,     0,     0,    28,    29,     0,    31,
    32,    33,    34,     0,     0,   173,   174,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   278,     0,     0,   279,   280,   281,     0,   637,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   112,     0,    62,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,     0,   283,   284,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   137,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   138,    66,     0,     0,
   139,     0,     0,   208,     0,     0,     0,     0,     0,     0,
     0,     0,   109,    73,   177,   285,   140,   141,   142,   172,
     0,   277,     0,     0,    28,    29,     0,    31,    32,    33,
    34,     0,     0,   173,   174,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   522,
     0,     0,   523,   280,   524,     0,   637,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   112,     0,    62,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
   525,   284,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,     0,     0,     0,     0,     0,
   109,     0,     0,     0,   138,    66,     0,   110,   139,   277,
     0,   208,    28,    29,     0,    31,    32,    33,    34,     0,
     0,    73,   177,   285,   140,   141,   142,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   278,     0,     0,
   279,   280,   281,     0,   608,     0,     0,   401,     0,   402,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   112,     0,    62,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,     0,   283,   284,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     0,     0,     0,     0,     0,   109,     0,
     0,     0,   138,   403,     0,   110,   139,   277,     0,     0,
    28,    29,     0,    31,    32,    33,    34,     0,     0,    73,
   177,   285,   140,   141,   142,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   522,     0,     0,   523,   280,
   524,     0,   608,     0,     0,   401,     0,   402,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   112,     0,
    62,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,     0,   525,   284,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   137,     0,     0,     0,     0,     0,   109,     0,     0,     0,
   138,   403,     0,   110,   139,   533,     0,     0,    28,    29,
    30,    31,    32,    33,    34,     0,     0,    73,   177,   285,
   140,   141,   142,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   534,    47,     0,   535,    49,   536,     0,
   111,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,     0,   537,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,     0,
     0,     0,     0,     0,   109,     0,     0,     0,   138,    66,
     0,   110,   139,   277,     0,     0,    28,    29,     0,    31,
    32,    33,    34,     0,     0,    73,   177,   538,   140,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   278,     0,     0,   279,   280,   281,     0,   806,     0,
     0,   401,     0,   402,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   112,     0,    62,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,     0,   283,   284,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   137,     0,     0,     0,
     0,     0,   109,     0,     0,     0,   138,    66,     0,   110,
   139,   277,     0,     0,    28,    29,     0,    31,    32,    33,
    34,     0,     0,    73,     0,   285,   140,   141,   142,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   522,
     0,     0,   523,   280,   524,     0,   806,     0,     0,   401,
     0,   402,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   112,     0,    62,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
   525,   284,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,     0,     0,     0,     0,     0,
   109,     0,     0,     0,   138,    66,     0,   110,   139,   277,
     0,     0,    28,    29,     0,    31,    32,    33,    34,     0,
     0,    73,     0,   285,   140,   141,   142,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   522,     0,     0,
   523,   280,   524,     0,   600,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   112,     0,    62,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,     0,   525,   284,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     0,     0,     0,     0,     0,   109,     0,
     0,     0,   138,   207,     0,   110,   139,   277,   242,     0,
    28,    29,     0,    31,    32,    33,    34,     0,     0,    73,
     0,   285,   140,   141,   142,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   793,     0,     0,   794,   280,
   795,     0,   600,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   112,     0,
    62,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,     0,   796,   284,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   137,     0,     0,     0,     0,     0,   109,     0,     0,     0,
   138,    66,     0,   110,   139,   277,   242,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,    73,     0,   285,
   140,   141,   142,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   278,     0,     0,   279,   280,   281,     0,
   282,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,     0,   283,   284,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,     0,
     0,     0,     0,     0,   109,     0,     0,     0,   138,    66,
     0,   110,   139,   277,     0,     0,    28,    29,     0,    31,
    32,    33,    34,     0,     0,    73,     0,   285,   140,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   522,     0,     0,   523,   280,   524,     0,   282,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   112,     0,    62,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,     0,   525,   284,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   137,     0,     0,     0,
     0,     0,   109,     0,     0,     0,   138,    66,     0,   110,
   139,   277,     0,     0,    28,    29,     0,    31,    32,    33,
    34,     0,     0,    73,     0,   285,   140,   141,   142,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   522,
     0,     0,   523,   280,   524,     0,   973,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   112,     0,    62,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
   525,   284,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,     0,     0,     0,     0,     0,
   109,     0,     0,     0,   138,    66,     0,   110,   139,   277,
     0,     0,    28,    29,     0,    31,    32,    33,    34,     0,
     0,    73,     0,   285,   140,   141,   142,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   793,     0,     0,
   794,   280,   795,     0,   282,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   112,     0,    62,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,     0,   796,   284,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     0,     0,     0,     0,     0,   109,     0,
     0,     0,   138,    66,     0,   110,   139,   277,     0,     0,
    28,    29,     0,    31,    32,    33,    34,     0,     0,    73,
     0,   285,   140,   141,   142,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   278,     0,     0,   279,   280,
   281,     0,  1082,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   112,     0,
    62,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,     0,   283,   284,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   137,     0,     0,     0,     0,     0,   109,     0,     0,     0,
   138,    66,     0,   110,   139,   277,     0,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,    73,     0,   285,
   140,   141,   142,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   278,     0,     0,   279,   280,   281,     0,
  1085,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,     0,   283,   284,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,     0,
     0,     0,     0,     0,   109,     0,     0,     0,   138,    66,
     0,   110,   139,   277,     0,     0,    28,    29,     0,    31,
    32,    33,    34,     0,     0,    73,     0,   285,   140,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1144,     0,     0,  1145,   280,   524,     0,   282,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   112,     0,    62,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,     0,  1146,   284,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   137,     0,     0,     0,
     0,     0,   109,     0,     0,     0,   138,    66,     0,   110,
   139,   277,     0,     0,    28,    29,     0,    31,    32,    33,
    34,     0,     0,    73,     0,   285,   140,   141,   142,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  1149,
     0,     0,  1150,   280,   524,     0,   282,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   112,     0,    62,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
  1151,   284,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,     0,     0,     0,     0,     0,
   109,     0,     0,     0,   138,    66,     0,   110,   139,   277,
     0,     0,    28,    29,     0,    31,    32,    33,    34,     0,
     0,    73,     0,   285,   140,   141,   142,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   278,     0,     0,
   279,   280,   281,     0,  1157,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   112,     0,    62,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,     0,   283,   284,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,     0,     0,     0,     0,     0,   109,     0,
     0,     0,   138,    66,     0,   110,   139,   277,     0,     0,
    28,    29,     0,    31,    32,    33,    34,     0,     0,    73,
     0,   285,   140,   141,   142,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1202,     0,     0,  1203,   280,
   524,     0,   282,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   112,     0,
    62,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,     0,  1204,   284,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   137,     0,     0,     0,     0,   109,     0,     0,     0,     0,
   138,    66,   110,     0,   139,     0,     0,    28,    29,    30,
    31,    32,    33,    34,     0,     0,     0,    73,     0,   285,
   140,   141,   142,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    46,    47,     0,    48,    49,    50,     0,   282,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,   458,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,   109,     0,     0,     0,     0,   138,    66,   110,
     0,   139,     0,     0,    28,    29,    30,    31,    32,    33,
    34,     0,     0,     0,    73,     0,     0,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
    47,     0,    48,    49,    50,     0,   815,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   112,     0,    62,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
   458,     0,     0,     0,     0,   109,     0,     0,     0,     0,
     0,     0,   172,     0,   137,     0,     0,    28,    29,     0,
    31,    32,    33,    34,   138,    66,   173,   174,   139,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    73,     0,     0,   140,   141,   142,     0,     0,   175,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,     0,     0,     0,     0,     0,   109,     0,
     0,     0,     0,     0,     0,   172,     0,   137,     0,     0,
    28,    29,     0,    31,    32,    33,    34,   138,    66,   173,
   174,   139,     0,     0,   176,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    73,   177,     0,   140,   141,   142,
     0,     0,   422,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   112,     0,
    62,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,     0,     0,     0,     0,   109,
     0,     0,     0,     0,     0,     0,   110,     0,     0,     0,
   137,    28,    29,     0,    31,    32,    33,    34,     0,     0,
   138,    66,     0,     0,   139,     0,     0,   208,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    73,   177,     0,
   140,   141,   142,   400,     0,     0,   401,     0,   402,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,     0,     0,     0,
   109,     0,     0,     0,     0,     0,     0,   110,     0,     0,
     0,   137,    28,    29,     0,    31,    32,    33,    34,     0,
     0,   138,   403,     0,     0,   139,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    73,   177,
     0,   140,   141,   142,   400,     0,     0,   401,     0,   402,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   112,     0,    62,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,     0,     0,     0,
     0,     0,     0,   109,     0,     0,     0,     0,     0,     0,
   172,     0,   477,     0,     0,    28,    29,     0,    31,    32,
    33,    34,   138,   403,   173,   174,   139,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   478,
   177,     0,   140,   141,   142,     0,     0,   111,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,     0,     0,     0,   109,     0,     0,     0,     0,     0,
     0,   110,     0,     0,     0,   137,    28,    29,     0,    31,
    32,    33,    34,     0,     0,   138,    66,     0,     0,   139,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    73,   177,     0,   140,   141,   142,   613,     0,
     0,   401,     0,   402,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   112,     0,    62,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,     0,     0,     0,     0,   109,     0,     0,     0,     0,
     0,     0,   110,     0,     0,     0,   137,    28,    29,     0,
    31,    32,    33,    34,     0,     0,   138,    66,     0,     0,
   139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    73,   177,     0,   140,   141,   142,   111,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,     0,     0,     0,   109,     0,     0,     0,
     0,     0,     0,   110,     0,     0,     0,   137,    28,    29,
     0,    31,    32,    33,    34,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    73,     0,     0,   140,   141,   142,
   198,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,     0,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,    73,     0,     0,   140,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   976,     0,     0,     0,     0,    73,     0,     0,   140,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   979,     0,     0,     0,     0,   977,     0,     0,   978,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   980,     0,     0,   981,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   982,     0,     0,   983,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   977,     0,     0,   140,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   980,     0,     0,   140,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   982,     0,     0,   140,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
  1091,     0,     0,     0,     0,  1090,     0,     0,   140,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,  1092,     0,     0,  1093,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,  1092,     0,     0,   140,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   977,     0,     0,  1262,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   980,     0,     0,  1263,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   977,     0,     0,  1267,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   980,     0,     0,  1268,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,  1092,     0,     0,  1299,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,  1092,     0,     0,  1302,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   977,     0,     0,  1304,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,   980,     0,     0,  1305,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   110,     0,     0,   879,     0,    28,    29,
     0,    31,    32,    33,    34,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,     0,  1092,     0,     0,  1330,   141,
   142,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,   112,     0,    62,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,    66,
     0,     0,   139,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    73,     0,     0,   140,   141,
   142
};

static const short yycheck[] = {    13,
   198,     2,    51,   202,   858,   236,   138,   139,   437,   438,
   266,   400,   401,   402,     9,    10,    11,    12,   236,    14,
    15,    16,    17,    18,    19,    39,    74,   691,   260,    42,
    23,     1,     1,    81,   204,     1,    15,     2,    51,   171,
    63,    64,   472,   146,   222,   223,   224,   225,   226,   227,
   228,    52,    51,    51,    14,   206,    42,   208,     8,    17,
    51,   292,    42,    14,   223,   224,   225,   226,   227,   228,
   515,    51,   517,    51,   292,   520,    17,    56,    52,    51,
    44,    51,    51,    47,     1,    51,    51,    52,    17,    67,
    51,    12,    44,    51,   264,    47,   115,   111,    51,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   134,   109,   131,   132,   133,
    51,    51,    51,    42,    54,    17,    56,   615,   616,   617,
   618,   619,    51,   146,    51,   183,   184,   185,   186,   111,
    17,   105,   128,   129,   118,    42,    51,   378,   146,   380,
   130,   149,   110,   119,  1008,   146,    17,   206,   149,   208,
   130,   175,   380,    51,   130,   137,   146,    42,    52,   110,
   165,   166,   167,   168,   169,   198,   146,   146,   128,   129,
   146,   110,    51,   176,   198,   146,    51,   147,   149,   182,
   204,   151,   206,   146,    42,    51,   147,   453,   862,   863,
   151,    51,   203,   175,    51,    15,   437,   438,   201,   187,
   342,   130,   205,    13,    51,   146,    42,   147,   110,   608,
    42,   118,   236,   272,   613,    51,   198,   146,   206,    51,
   400,   245,    42,   110,   206,   624,   250,   251,   203,   688,
   241,   206,   116,   117,   128,   129,   247,   248,   249,   110,
   264,    42,   266,   128,   129,   256,   257,   258,   259,    42,
    51,    51,    52,   241,   242,    42,    42,    51,   282,   241,
   118,   422,    17,    42,    51,    51,   241,   146,   292,   274,
   431,   432,   247,   248,   249,   730,    52,   732,    57,   734,
   735,   256,   257,   258,   259,   309,   310,    17,   687,   146,
   314,   315,   316,    15,   130,   270,   271,    52,   130,   109,
   282,   111,   112,   113,    52,   115,   486,  1171,    44,    51,
   146,    47,    17,    49,   146,    51,    42,    42,   146,   343,
    42,    51,    52,   116,   134,   119,   350,   351,   352,   130,
   130,   389,    17,    51,   358,   317,   130,    42,   362,   363,
  1014,   135,    51,   130,   130,   146,   146,    52,    54,   128,
   129,    42,   146,    52,   130,   110,    52,   360,   361,   146,
   146,   116,   117,   422,   388,    56,    51,    52,   827,   105,
   352,   830,   431,   432,    42,    51,   400,   401,   402,   620,
   110,   369,   130,   416,   417,    42,   397,   369,    56,   828,
    51,   116,   620,    51,   603,    51,   454,   455,   422,    17,
   388,   860,   128,   129,   463,   110,   388,   806,    52,   808,
   146,   851,   852,    52,   113,   681,   115,   113,   400,   115,
   819,   130,   397,   434,    42,   110,   135,   485,   608,   453,
    42,   116,   117,    52,    52,   146,   645,   146,    17,   146,
   422,   621,    52,   496,     2,   498,   499,   500,   501,   502,
   503,   693,   505,   506,   130,   508,   509,   439,   119,   434,
   484,    51,   486,   651,   652,   653,   964,   965,   966,   130,
   146,   128,   129,    52,   130,   463,   637,     1,    51,   135,
    51,   463,   651,   652,   653,   146,   130,    17,   463,   513,
   146,   130,   110,    51,    52,   477,    52,    21,  1172,  1173,
    57,    16,   682,    18,   146,    52,    21,    44,    66,    67,
    47,   130,    49,    17,    51,    51,   128,   129,   128,   129,
    44,    45,    52,    47,    48,    49,    51,    51,    51,    44,
    45,   110,    47,    48,    49,    21,    51,   116,   117,    44,
   999,   599,    47,  1256,    49,    42,    51,   986,    52,    44,
   759,    51,    47,   111,    49,    52,    51,   130,    44,    45,
    17,    47,    48,    49,    51,    51,   548,     1,   105,    52,
    41,   128,   129,   146,   130,    51,   600,  1290,   637,   137,
   110,   105,   119,   130,   608,    44,   574,   828,    47,   613,
   105,   106,   574,   130,   119,    52,   620,   621,   135,   602,
   105,   625,    51,    52,    52,   130,   110,   130,    51,   146,
   105,   635,   600,   637,   119,   639,    51,   175,   600,   105,
    54,   146,   146,   146,   148,   130,   608,   836,    52,   187,
   130,   613,    51,   148,   192,   668,    42,    51,    52,    52,
   198,   146,   113,   130,   115,   203,   146,   130,   206,   207,
    42,   146,    51,   110,    51,   637,    51,   681,   682,   146,
   146,   685,   148,    51,   222,   223,   224,   225,   226,   227,
   228,    51,    71,    72,    73,    74,    75,    76,   236,    52,
    51,   130,   130,   241,   242,    52,  1125,   130,   246,   247,
   248,   249,    51,    52,    51,    51,  1135,   146,   256,   257,
   258,   259,    52,   146,    57,    52,   130,   265,    51,   267,
   268,   269,   270,   271,    51,  1114,   130,   130,    51,   694,
   695,   962,   128,   129,   282,   749,   750,   751,   752,   753,
    52,   130,   146,  1192,  1193,   130,   128,   129,  1197,  1198,
  1199,  1200,   130,  1009,    55,   986,    54,   146,   147,  1188,
    43,   146,   960,    52,    51,   128,   129,    42,   146,   317,
   128,   129,    51,   130,    16,    42,    18,    56,  1207,    21,
    52,   130,    57,   130,   916,   128,   129,   788,   831,   832,
   130,  1240,   806,   130,   808,  1244,  1245,   146,    52,   146,
   134,   815,    44,    45,   352,    47,    48,    49,   109,    51,
   111,   112,   113,    51,   115,    52,    52,    51,   130,     9,
    15,   369,    52,   788,    15,   868,   869,   375,   871,   872,
   844,   845,   833,   134,   806,    15,    26,    27,    28,    29,
   388,   130,   109,   815,   111,   112,   113,    42,   115,   397,
    40,    42,   400,   128,   129,   403,    52,    15,   130,    52,
   874,    51,    42,    52,    54,    52,    52,   134,   833,    44,
    52,   419,    47,   146,   422,   148,   130,   113,   873,   115,
    52,    42,    52,    52,    42,    52,   434,   146,    52,   148,
    16,   439,    18,   130,  1125,    21,    52,    52,  1347,  1348,
   130,  1350,  1351,    16,  1135,    18,   148,    51,    21,  1358,
    52,    52,  1361,  1362,  1363,   463,    52,    51,    44,    45,
  1309,    47,    48,    49,  1373,    51,    51,   941,    52,   477,
   105,    44,    45,    51,    47,    48,    49,   130,    51,   953,
    52,   130,  1141,   130,   130,   135,   136,   137,   130,   139,
   140,   141,   142,   143,    52,   145,   146,  1188,   130,   973,
   130,   130,   976,   130,    52,   979,   130,   109,   961,   111,
   112,   113,    52,   115,   130,   130,  1207,    52,    52,    52,
    16,    51,    18,    52,    52,    21,    52,    44,    52,   130,
    47,    52,   134,   994,   130,  1009,    52,    52,    52,    44,
   548,   973,    47,   113,   976,   115,   130,   979,    44,    45,
  1024,    47,    48,    49,    52,    51,   130,    52,   130,    52,
   120,   121,   148,    52,   134,    52,   574,    19,    20,   994,
    22,    23,    24,    25,   582,   148,    57,    44,    52,   113,
    47,   115,   130,    56,    52,   113,  1060,   115,   105,    52,
   130,    52,   600,    52,    51,   130,  1070,   130,    51,    51,
   608,   130,  1063,    56,   130,   613,   130,    51,  1082,   130,
    41,  1085,   620,  1074,   130,   130,   130,  1091,    41,    71,
    72,    73,    74,    75,    76,    57,   113,    79,   115,   637,
   128,   129,   640,    44,    55,   130,    47,   130,  1063,  1100,
    52,   130,    52,   651,   652,   653,    53,   128,   129,  1074,
  1082,    51,   148,  1085,   128,   129,    56,  1131,   148,  1091,
   128,   129,  1123,   671,  1138,   128,   129,   128,   129,   128,
   129,    52,    42,  1147,  1148,  1100,    52,    52,  1152,  1153,
  1154,  1155,   113,  1157,   115,    55,   694,   695,    44,   130,
   113,    47,   115,    42,   146,   130,   128,   129,  1123,    52,
    44,    19,    20,    47,    22,    23,    24,    25,   120,   121,
   122,   123,   124,   125,  1175,    52,   128,   129,   128,   129,
    44,   128,   129,    47,   109,  1157,    62,  1201,   113,   114,
   115,  1205,  1206,    51,   120,   121,    62,    51,    52,   109,
   116,   117,    56,   113,   114,   115,    52,    51,    52,    17,
  1175,    52,    56,    71,    72,    73,    74,    75,    76,    52,
   109,    79,    62,    17,   113,   114,   115,   146,    51,   134,
   149,    54,   109,    56,     2,    42,   113,   114,   115,    52,
   788,    52,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   118,   119,   130,   131,   132,    52,   806,    42,
   126,   127,   128,   129,   130,   131,   132,   815,   109,    37,
   116,   117,   113,   114,   115,   146,   109,   148,   118,   119,
   113,   114,   115,    51,    52,   833,   126,   127,   146,    15,
   130,   131,   132,    42,    52,    15,  1261,    52,    66,    67,
   113,   146,   115,   148,    52,    52,    74,    51,    52,   356,
   357,    52,    56,    81,   109,    52,    42,    55,   113,   114,
   115,    21,    42,  1337,  1338,    52,  1340,  1341,    51,    52,
    56,    55,    42,    56,     2,  1349,    56,    43,  1352,  1353,
  1354,    42,    55,   111,    44,    45,    42,    47,    48,    49,
  1364,   109,    57,    42,   109,   113,   114,   115,   113,   114,
   115,   109,   113,   114,   115,   113,   114,   115,   109,   137,
    34,   109,   113,   114,   115,   113,   114,   115,    44,    55,
    52,    47,   109,    51,    52,   109,   113,   114,   115,   113,
   114,   115,    44,    55,    44,    47,   109,    47,    66,    67,
   113,   114,   115,   146,   109,   148,   118,   175,   113,   114,
   115,   146,   960,   148,    56,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   192,   973,   194,    56,   976,   197,
   198,   979,    51,    52,     4,   203,     6,    56,   206,   207,
   111,   112,   113,   111,   115,   110,   994,   109,     4,     5,
     6,   113,   114,   115,   222,   223,   224,   225,   226,   227,
   228,   110,   113,   134,   115,    11,    55,   235,   236,   137,
    52,    52,    52,   241,   242,    42,    42,    42,   246,   247,
   248,   249,   130,    52,   252,    42,   116,   115,   256,   257,
   258,   259,    52,    52,    52,   115,    11,   265,    52,   267,
   268,   269,   270,   271,    55,   130,   130,   175,   120,   121,
   122,   123,   124,   125,   282,  1063,   128,   129,    52,   187,
    52,   148,   130,   130,    52,    52,  1074,     8,    54,   115,
   198,    52,   147,   149,  1082,   203,    52,  1085,   206,   207,
   130,    52,   130,  1091,    54,    52,    38,    52,    52,   317,
    52,    42,  1100,    52,   222,   223,   224,   225,   226,   227,
   228,    51,    56,   115,    11,    52,    52,    52,   236,    52,
    52,    42,    56,   241,   242,  1123,    52,   130,   246,   247,
   248,   249,   130,   130,   352,    57,    54,    52,   256,   257,
   258,   259,    52,    52,    52,    52,    52,   130,    42,   130,
   130,   369,    52,    52,    52,   130,   130,   375,   130,  1157,
   116,    42,   115,    51,   282,    51,    55,    57,    55,    42,
   388,   389,    55,    57,    52,    57,   718,  1175,   720,   397,
    51,   723,   400,    52,    54,   403,   116,    52,    52,    52,
    52,    52,   130,    42,   736,    52,    52,    57,    51,   317,
    52,   419,   130,   130,   422,    52,    52,    52,    52,    43,
    52,    51,    55,    54,    52,    52,   434,    52,    57,    52,
    52,   439,   146,    52,    54,    52,    57,   146,    52,   146,
    43,    51,    57,    52,   352,    51,   454,   455,   456,    51,
    55,    52,    52,   146,   146,   463,    51,    56,    56,    56,
    56,   369,    56,    56,    52,    52,    52,    52,    51,   477,
    52,    52,    52,  1261,    51,    51,    55,   485,    56,    51,
   388,    56,    56,    52,    51,   130,    52,    52,    52,   397,
   822,   823,   400,    47,    47,   403,    52,    57,    57,    57,
    57,    47,    57,    52,   130,  1293,    57,    52,    52,    52,
    52,   419,   130,    52,   422,    52,    52,   130,   130,   130,
    52,    52,   130,   130,    57,   116,   434,    57,    57,    52,
    52,   439,  1320,   149,    52,    51,    56,    52,    52,    52,
   548,    52,    52,    52,   876,   149,   130,    52,    52,    52,
   882,    52,   884,    52,   886,   463,   888,   149,   890,   891,
    56,    56,   894,    56,    52,   897,   574,    52,    52,   477,
   902,    57,   580,    56,   582,    56,   584,   585,   149,   587,
   588,   589,    56,    56,    52,   593,   594,   595,   149,   597,
    56,   599,   600,   601,    57,    57,    57,   149,    57,   149,
   608,   149,   149,    57,    57,   613,    57,    57,     0,     0,
   511,   693,   620,  1100,   620,   714,   790,   579,   644,   147,
   817,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   637,
     2,    -1,   640,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   548,    -1,    -1,   651,   652,   653,    -1,    -1,    -1,   657,
    -1,    -1,   984,   985,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   671,    -1,    -1,   574,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    52,    -1,    -1,    -1,    -1,    -1,   694,   695,    -1,    -1,
  1022,    -1,   600,    -1,    -1,    67,    -1,  1029,    -1,  1031,
   608,  1033,    -1,    -1,    -1,   613,    -1,    -1,    -1,    -1,
    -1,    -1,   620,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   637,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   327,   111,
    -1,    -1,    -1,   651,   652,   653,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   770,   771,    -1,   137,   774,    -1,    -1,   777,
    -1,    -1,    -1,   781,    -1,   783,    -1,   785,    -1,    -1,
   788,    -1,    -1,    -1,   792,    -1,    -1,    -1,    -1,   797,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   806,    -1,
    -1,    -1,    -1,   175,    -1,    -1,    -1,   815,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   187,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   833,   198,    -1,    -1,    -1,
    -1,   203,    -1,    -1,   206,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   222,   223,   224,   225,   226,   227,   228,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   241,
   242,    -1,    -1,    -1,   246,   247,   248,   249,    -1,    -1,
   788,    -1,    -1,    -1,   256,   257,   258,   259,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1229,   806,    -1,
    -1,    -1,  1234,    -1,    -1,    -1,    -1,   815,    -1,    -1,
   282,    -1,    -1,    -1,   922,    -1,    -1,    -1,    -1,   927,
    -1,    -1,    -1,    -1,   932,   833,   515,    -1,   517,   937,
    -1,   520,  1264,    -1,    -1,    -1,    -1,  1269,    -1,    -1,
    -1,    -1,    -1,    -1,  1276,   317,    -1,    -1,    -1,    -1,
   958,    -1,   960,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   973,    -1,    -1,   976,    -1,
    -1,   979,   204,    -1,  1306,    -1,    -1,    -1,    -1,    -1,
   352,    -1,    -1,    -1,    -1,    -1,   994,    -1,    -1,    -1,
   222,   223,   224,   225,   226,   227,   228,   369,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   388,    -1,   250,   587,
   588,   589,    -1,    -1,    -1,   397,    -1,   595,   400,    -1,
    -1,    -1,   264,    -1,   266,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   422,    -1,   960,    -1,    -1,  1063,    -1,    -1,    -1,    -1,
   292,    -1,   434,    -1,    -1,   973,  1074,   439,   976,    -1,
    -1,   979,    -1,    -1,  1082,    -1,    -1,  1085,    -1,    -1,
    -1,    -1,    -1,  1091,    -1,    -1,   994,    -1,    -1,    -1,
    -1,   463,  1100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1123,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   356,   357,   715,    -1,    -1,   718,
    -1,   720,    -1,    -1,   723,    -1,    -1,    -1,    -1,    -1,
    -1,   730,    -1,   732,    -1,   734,   735,   736,    -1,  1157,
    -1,    -1,    -1,    -1,    -1,  1063,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1074,  1175,   400,   401,
   402,    -1,    -1,    -1,  1082,    -1,   548,  1085,    -1,    -1,
    -1,    -1,    -1,  1091,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   574,   771,    -1,   773,   774,    -1,   776,   777,
    -1,   779,    -1,    -1,   782,  1123,   784,   785,    -1,   787,
    -1,   453,    -1,    -1,    -1,    -1,    -1,    -1,   600,    -1,
    -1,    -1,   821,   822,   823,    -1,   608,    -1,    -1,    -1,
    -1,   613,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1157,
    -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   637,    -1,  1175,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   651,
   652,   653,    -1,    -1,    -1,    -1,    -1,   876,    -1,   878,
    -1,    -1,    -1,   882,    -1,   884,    -1,   886,    -1,   888,
   889,   890,   891,    -1,    -1,   894,    -1,    -1,   897,    -1,
    -1,    -1,    -1,   902,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   577,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   927,
    -1,   929,   930,    -1,   932,    -1,   934,   935,    -1,    -1,
    -1,   939,   940,    -1,    -1,    -1,   608,   945,    -1,   947,
   948,    -1,    -1,   951,   952,    -1,    -1,    -1,    -1,   621,
    -1,    -1,    -1,    -1,    -1,   984,   985,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   788,    -1,    -1,   651,
   652,   653,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1022,   806,    -1,    -1,    -1,    -1,    -1,
  1029,     1,  1031,   815,  1033,    -1,    -1,     7,    -1,   681,
   682,    -1,    -1,    -1,    14,   687,    -1,    -1,    -1,    19,
    20,   833,    22,    23,    24,    25,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1050,    -1,    -1,    -1,  1054,    -1,    -1,  1057,
  1058,    51,    -1,    -1,    54,    -1,    56,    -1,    -1,    -1,
  1068,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    72,    73,    74,    75,    76,    77,    -1,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
    -1,    -1,    -1,    -1,  1132,    -1,    -1,    -1,    -1,   129,
   130,  1139,    -1,   133,    -1,    -1,   808,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   146,   147,   960,   149,
   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   973,    -1,    -1,   976,    -1,    -1,   979,    -1,    -1,
  1178,    -1,    -1,    -1,    -1,  1183,    -1,    -1,    -1,    -1,
    -1,    -1,   994,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1228,
  1229,    -1,    -1,    -1,  1233,  1234,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1221,    -1,  1223,  1224,    -1,  1226,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1264,    -1,    -1,    -1,    -1,
  1269,    -1,    -1,    -1,    -1,    -1,  1275,  1276,    -1,    -1,
    -1,  1063,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1074,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1082,    -1,    -1,  1085,    -1,    -1,    -1,  1306,    -1,  1091,
    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,  1100,    -1,
    -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,
    -1,    -1,    -1,    -1,    19,    20,    -1,    22,    23,    24,
    25,  1123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    51,  1009,    -1,    54,
    -1,    56,    -1,    -1,    -1,  1157,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
    75,    76,    77,  1175,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     1,   119,    -1,    -1,    -1,    -1,     7,
    -1,    -1,    -1,    -1,   129,   130,    14,    -1,   133,    -1,
    -1,    19,    20,    -1,    22,    23,    24,    25,    -1,    -1,
    -1,   146,   147,    -1,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,  1114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    51,    -1,    -1,    54,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,    77,
    -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,     1,    -1,    -1,    -1,
    -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,
    -1,   119,    -1,    -1,    19,    20,    -1,    22,    23,    24,
    25,   129,   130,    -1,    -1,   133,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,    -1,
    -1,   149,   150,   151,    -1,    -1,    51,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
    75,    76,    77,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   129,   130,    -1,    -1,   133,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
     7,   146,     9,    10,   149,   150,   151,    14,    -1,    16,
    -1,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    -1,    35,    36,
    37,    -1,    39,    40,    -1,    -1,    -1,    44,    45,    -1,
    47,    48,    49,    -1,    51,    -1,    -1,    54,    -1,    -1,
    -1,    58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,    -1,   105,   106,
    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   129,   130,    -1,    -1,   133,    -1,   135,   136,
   137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,   146,
   147,   148,   149,   150,   151,     3,    -1,    -1,    -1,     7,
    -1,     9,    10,    -1,    -1,    -1,    14,    -1,    16,    -1,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    -1,    35,    36,    37,
    -1,    39,    40,    -1,    -1,    -1,    44,    45,    -1,    47,
    48,    49,    -1,    51,    -1,    -1,    54,    -1,    -1,    -1,
    58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,    -1,   105,   106,    -1,
   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   129,   130,    -1,    -1,   133,    -1,   135,   136,   137,
   138,   139,   140,   141,    -1,    -1,    -1,    -1,   146,   147,
   148,   149,   150,   151,     3,    -1,    -1,    -1,     7,    -1,
     9,    10,    -1,    -1,    -1,    14,    -1,    16,    -1,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    -1,    35,    36,    37,    -1,
    39,    40,    -1,    -1,    -1,    44,    45,    -1,    47,    48,
    49,    -1,    51,    -1,    -1,    54,    -1,    -1,    -1,    58,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
    -1,    -1,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,    -1,   105,   106,    -1,   108,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   129,   130,    -1,    -1,   133,    -1,   135,   136,   137,   138,
   139,   140,   141,    -1,    -1,    -1,    -1,   146,   147,   148,
   149,   150,   151,     3,    -1,    -1,    -1,     7,    -1,     9,
    10,    -1,    -1,    -1,    -1,    -1,    16,    -1,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    -1,    -1,
    30,    31,    32,    33,    -1,    35,    36,    37,    -1,    39,
    40,    -1,    -1,    -1,    44,    45,    -1,    47,    48,    49,
    -1,    51,    -1,    -1,    54,    -1,    -1,    -1,    58,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
    -1,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   105,   106,    -1,   108,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   130,    -1,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
   140,   141,    -1,     3,    -1,    -1,   146,     7,   148,     9,
    10,    -1,    -1,    -1,    -1,    -1,    16,    -1,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    -1,    -1,
    30,    31,    32,    33,    -1,    35,    36,    37,    -1,    39,
    40,    -1,    -1,    -1,    44,    45,    -1,    47,    48,    49,
    -1,    51,    -1,    -1,    54,    -1,    -1,    -1,    58,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
    -1,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   105,   106,    -1,   108,    -1,
     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    16,
    -1,    -1,    19,    20,    -1,    22,    23,    24,    25,    -1,
   130,    28,    29,    -1,    -1,   135,    -1,   137,   138,   139,
   140,   141,    -1,    -1,    -1,    -1,   146,    44,   148,    -1,
    47,    48,    49,    -1,    51,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,
    77,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,    -1,   105,   106,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   129,   130,    -1,    -1,   133,    -1,    -1,   136,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,   146,
   147,   148,   149,   150,   151,    14,    -1,    16,    -1,    18,
    19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    47,    48,
    49,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,    -1,   105,   106,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   129,   130,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     7,   146,    -1,   148,
   149,   150,   151,    14,    -1,    16,    -1,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    28,    29,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    47,    48,    49,    -1,
    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    -1,   105,   106,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     7,   146,   147,   148,   149,   150,
   151,    14,    -1,    16,    -1,    -1,    19,    20,    -1,    22,
    23,    24,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    47,    48,    49,    -1,    51,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,    -1,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,    -1,    -1,
   133,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     7,   146,   147,   148,   149,   150,   151,    14,
    -1,    16,    -1,    -1,    19,    20,    -1,    22,    23,    24,
    25,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    47,    48,    49,    -1,    51,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
    75,    76,    77,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,
     7,    -1,    -1,    -1,   129,   130,    -1,    14,   133,    16,
    -1,   136,    19,    20,    -1,    22,    23,    24,    25,    -1,
    -1,   146,   147,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    47,    48,    49,    -1,    51,    -1,    -1,    54,    -1,    56,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,
    77,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,    -1,   105,   106,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,     7,    -1,
    -1,    -1,   129,   130,    -1,    14,   133,    16,    -1,    -1,
    19,    20,    -1,    22,    23,    24,    25,    -1,    -1,   146,
   147,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    47,    48,
    49,    -1,    51,    -1,    -1,    54,    -1,    56,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,    -1,   105,   106,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   119,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,
   129,   130,    -1,    14,   133,    16,    -1,    -1,    19,    20,
    21,    22,    23,    24,    25,    -1,    -1,   146,   147,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    45,    -1,    47,    48,    49,    -1,
    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    -1,   105,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,   129,   130,
    -1,    14,   133,    16,    -1,    -1,    19,    20,    -1,    22,
    23,    24,    25,    -1,    -1,   146,   147,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    47,    48,    49,    -1,    51,    -1,
    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,    -1,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
    -1,    -1,     7,    -1,    -1,    -1,   129,   130,    -1,    14,
   133,    16,    -1,    -1,    19,    20,    -1,    22,    23,    24,
    25,    -1,    -1,   146,    -1,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    47,    48,    49,    -1,    51,    -1,    -1,    54,
    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
    75,    76,    77,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,
     7,    -1,    -1,    -1,   129,   130,    -1,    14,   133,    16,
    -1,    -1,    19,    20,    -1,    22,    23,    24,    25,    -1,
    -1,   146,    -1,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    47,    48,    49,    -1,    51,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,
    77,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,    -1,   105,   106,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,     7,    -1,
    -1,    -1,   129,   130,    -1,    14,   133,    16,   135,    -1,
    19,    20,    -1,    22,    23,    24,    25,    -1,    -1,   146,
    -1,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    47,    48,
    49,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,    -1,   105,   106,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   119,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,
   129,   130,    -1,    14,   133,    16,   135,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,   146,    -1,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    47,    48,    49,    -1,
    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    -1,   105,   106,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,   129,   130,
    -1,    14,   133,    16,    -1,    -1,    19,    20,    -1,    22,
    23,    24,    25,    -1,    -1,   146,    -1,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    47,    48,    49,    -1,    51,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,    -1,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
    -1,    -1,     7,    -1,    -1,    -1,   129,   130,    -1,    14,
   133,    16,    -1,    -1,    19,    20,    -1,    22,    23,    24,
    25,    -1,    -1,   146,    -1,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    47,    48,    49,    -1,    51,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
    75,    76,    77,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,
     7,    -1,    -1,    -1,   129,   130,    -1,    14,   133,    16,
    -1,    -1,    19,    20,    -1,    22,    23,    24,    25,    -1,
    -1,   146,    -1,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    47,    48,    49,    -1,    51,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,
    77,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,    -1,   105,   106,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,     7,    -1,
    -1,    -1,   129,   130,    -1,    14,   133,    16,    -1,    -1,
    19,    20,    -1,    22,    23,    24,    25,    -1,    -1,   146,
    -1,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    47,    48,
    49,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,    -1,   105,   106,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   119,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,
   129,   130,    -1,    14,   133,    16,    -1,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,   146,    -1,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    47,    48,    49,    -1,
    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    -1,   105,   106,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,   129,   130,
    -1,    14,   133,    16,    -1,    -1,    19,    20,    -1,    22,
    23,    24,    25,    -1,    -1,   146,    -1,   148,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    47,    48,    49,    -1,    51,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,    -1,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,
    -1,    -1,     7,    -1,    -1,    -1,   129,   130,    -1,    14,
   133,    16,    -1,    -1,    19,    20,    -1,    22,    23,    24,
    25,    -1,    -1,   146,    -1,   148,   149,   150,   151,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    47,    48,    49,    -1,    51,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
    75,    76,    77,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,
     7,    -1,    -1,    -1,   129,   130,    -1,    14,   133,    16,
    -1,    -1,    19,    20,    -1,    22,    23,    24,    25,    -1,
    -1,   146,    -1,   148,   149,   150,   151,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    47,    48,    49,    -1,    51,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,
    77,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,    -1,   105,   106,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   119,    -1,    -1,    -1,    -1,    -1,     7,    -1,
    -1,    -1,   129,   130,    -1,    14,   133,    16,    -1,    -1,
    19,    20,    -1,    22,    23,    24,    25,    -1,    -1,   146,
    -1,   148,   149,   150,   151,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    47,    48,
    49,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,    -1,   105,   106,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   119,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    -1,
   129,   130,    14,    -1,   133,    -1,    -1,    19,    20,    21,
    22,    23,    24,    25,    -1,    -1,    -1,   146,    -1,   148,
   149,   150,   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,    45,    -1,    47,    48,    49,    -1,    51,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    72,    73,    74,    75,    76,    77,    -1,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,    -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,
    -1,    -1,     7,    -1,    -1,    -1,    -1,   129,   130,    14,
    -1,   133,    -1,    -1,    19,    20,    21,    22,    23,    24,
    25,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,   151,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    45,    -1,    47,    48,    49,    -1,    51,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
    75,    76,    77,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
   105,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    -1,
    -1,    -1,    14,    -1,   119,    -1,    -1,    19,    20,    -1,
    22,    23,    24,    25,   129,   130,    28,    29,   133,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   146,    -1,    -1,   149,   150,   151,    -1,    -1,    51,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    72,    73,    74,    75,    76,    77,    -1,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,
    -1,    -1,    -1,    -1,    -1,    14,    -1,   119,    -1,    -1,
    19,    20,    -1,    22,    23,    24,    25,   129,   130,    28,
    29,   133,    -1,    -1,   136,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   146,   147,    -1,   149,   150,   151,
    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,    74,    75,    76,    77,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,     7,
    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,
   119,    19,    20,    -1,    22,    23,    24,    25,    -1,    -1,
   129,   130,    -1,    -1,   133,    -1,    -1,   136,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   147,    -1,
   149,   150,   151,    51,    -1,    -1,    54,    -1,    56,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,    77,
    -1,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,
     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,
    -1,   119,    19,    20,    -1,    22,    23,    24,    25,    -1,
    -1,   129,   130,    -1,    -1,   133,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,   147,
    -1,   149,   150,   151,    51,    -1,    -1,    54,    -1,    56,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    76,
    77,    -1,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,    -1,    -1,    -1,
    -1,    -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,    -1,
    14,    -1,   119,    -1,    -1,    19,    20,    -1,    22,    23,
    24,    25,   129,   130,    28,    29,   133,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   146,
   147,    -1,   149,   150,   151,    -1,    -1,    51,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
    74,    75,    76,    77,    -1,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    -1,    -1,
    -1,    14,    -1,    -1,    -1,   119,    19,    20,    -1,    22,
    23,    24,    25,    -1,    -1,   129,   130,    -1,    -1,   133,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   146,   147,    -1,   149,   150,   151,    51,    -1,
    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    -1,
    -1,    -1,    14,    -1,    -1,    -1,   119,    19,    20,    -1,
    22,    23,    24,    25,    -1,    -1,   129,   130,    -1,    -1,
   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   146,   147,    -1,   149,   150,   151,    51,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    72,    73,    74,    75,    76,    77,    -1,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,
    -1,    -1,    -1,    14,    -1,    -1,    -1,   119,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,   129,   130,    -1,
    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,   151,
    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,    -1,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    14,    -1,    -1,   107,    -1,    19,    20,
    -1,    22,    23,    24,    25,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,   150,
   151
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 160 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 190 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 191 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 200 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 209 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 210 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 211 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 212 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 217 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 218 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 220 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 221 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 223 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 226 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 228 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 232 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 233 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 238 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 241 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 246 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 248 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 256 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 361 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 363 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 365 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 366 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 367 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 368 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 369 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 370 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 372 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 373 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 379 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 380 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 386 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 387 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 388 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 389 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 390 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 391 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 394 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 397 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 403 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 407 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 416 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 425 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 61:
#line 429 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 63:
#line 434 "msv.y"
{
            yyval.tnode=new CSyntaxNode(FREE_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 64:
#line 438 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(SYSTEM_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 65:
#line 442 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 66:
#line 445 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 67:
#line 458 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 68:
#line 463 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 69:
#line 467 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 70:
#line 473 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 71:
#line 474 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 72:
#line 480 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 73:
#line 485 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 74:
#line 490 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 75:
#line 494 "msv.y"
{ yyval.tnode=yyvsp[0].tnode; ;
    break;}
case 76:
#line 495 "msv.y"
{ yyval.tnode=yyvsp[0].tnode; ;
    break;}
case 77:
#line 501 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 78:
#line 509 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 79:
#line 520 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 80:
#line 533 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 81:
#line 534 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 82:
#line 535 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 83:
#line 540 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 84:
#line 544 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 85:
#line 548 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 86:
#line 552 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 87:
#line 556 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 88:
#line 560 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 89:
#line 566 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 90:
#line 568 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 91:
#line 571 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 92:
#line 576 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 93:
#line 587 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 94:
#line 588 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 95:
#line 589 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 96:
#line 592 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 97:
#line 593 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 98:
#line 594 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 99:
#line 602 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 100:
#line 606 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 101:
#line 610 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 102:
#line 615 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 103:
#line 621 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 104:
#line 626 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 105:
#line 633 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 106:
#line 639 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 107:
#line 650 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 108:
#line 651 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 652 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 110:
#line 657 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 111:
#line 664 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 112:
#line 667 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 113:
#line 668 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 114:
#line 676 "msv.y"
{yyval.tnode=new CSyntaxNode(FOPEN_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 115:
#line 678 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETS_EXP,yyvsp[-5].tnode,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 116:
#line 680 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETC_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 117:
#line 682 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTS_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 118:
#line 684 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 119:
#line 686 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 120:
#line 688 "msv.y"
{yyval.tnode=new CSyntaxNode(FCLOSE_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 121:
#line 700 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 122:
#line 703 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 123:
#line 704 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 124:
#line 705 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 125:
#line 706 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 126:
#line 707 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 127:
#line 708 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 128:
#line 709 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 129:
#line 713 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 130:
#line 715 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 131:
#line 717 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 132:
#line 719 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 133:
#line 721 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 134:
#line 723 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 135:
#line 725 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 136:
#line 727 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 137:
#line 729 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 138:
#line 731 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 139:
#line 733 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 140:
#line 735 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 141:
#line 737 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 142:
#line 741 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 143:
#line 742 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 144:
#line 745 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 145:
#line 746 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 146:
#line 747 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 147:
#line 751 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 148:
#line 752 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 149:
#line 753 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 150:
#line 756 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 151:
#line 760 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 152:
#line 766 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 153:
#line 768 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 154:
#line 770 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 155:
#line 772 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 156:
#line 774 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 157:
#line 775 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 158:
#line 780 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 159:
#line 781 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 160:
#line 782 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 161:
#line 788 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 162:
#line 789 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 163:
#line 791 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 164:
#line 793 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 165:
#line 795 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 166:
#line 797 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 167:
#line 798 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 168:
#line 804 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 169:
#line 805 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 170:
#line 807 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 171:
#line 809 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 172:
#line 814 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 815 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 174:
#line 819 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 820 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 176:
#line 824 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 825 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 178:
#line 830 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 831 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 180:
#line 832 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 181:
#line 833 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 182:
#line 834 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 183:
#line 836 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 184:
#line 837 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 185:
#line 838 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 186:
#line 839 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 187:
#line 840 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 188:
#line 841 "msv.y"
{yyval.tnode=yyvsp[0].tnode;
    break;}
case 189:
#line 842 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 190:
#line 843 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 191:
#line 844 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 192:
#line 845 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 193:
#line 846 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 194:
#line 852 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 195:
#line 853 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 196:
#line 854 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 197:
#line 855 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 198:
#line 856 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 199:
#line 857 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 200:
#line 858 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 201:
#line 859 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 202:
#line 862 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 203:
#line 863 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 204:
#line 867 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 205:
#line 868 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 206:
#line 869 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 207:
#line 870 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 208:
#line 877 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 209:
#line 881 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 210:
#line 889 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 211:
#line 901 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 212:
#line 905 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 213:
#line 914 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 214:
#line 926 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 215:
#line 930 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 216:
#line 938 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 217:
#line 941 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 218:
#line 942 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 219:
#line 947 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 220:
#line 951 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 221:
#line 955 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 222:
#line 960 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 223:
#line 963 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 224:
#line 972 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 225:
#line 973 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 226:
#line 974 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 227:
#line 977 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 228:
#line 978 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 229:
#line 981 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 230:
#line 982 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 231:
#line 985 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 232:
#line 986 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 233:
#line 987 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 234:
#line 988 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 235:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 236:
#line 990 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 237:
#line 993 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 238:
#line 994 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 239:
#line 995 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 240:
#line 996 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 241:
#line 997 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 242:
#line 998 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 243:
#line 1000 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 244:
#line 1001 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 245:
#line 1003 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 246:
#line 1004 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 247:
#line 1006 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 248:
#line 1007 "msv.y"
{yyval.tnode=new CSyntaxNode(MALLOC_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 249:
#line 1012 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 250:
#line 1013 "msv.y"
{yyval.returntype=INTPTYPE;;
    break;}
case 251:
#line 1014 "msv.y"
{yyval.returntype=FLOATPTYPE;;
    break;}
case 252:
#line 1015 "msv.y"
{yyval.returntype=CHARPTYPE;;
    break;}
case 253:
#line 1016 "msv.y"
{yyval.returntype=UINTPTYPE;;
    break;}
case 254:
#line 1017 "msv.y"
{yyval.returntype=UCHARPTYPE;;
    break;}
case 255:
#line 1018 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 256:
#line 1019 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 257:
#line 1024 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 258:
#line 1025 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].returntype);;
    break;}
case 259:
#line 1026 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].cString, STRUCTTYPE);;
    break;}
case 260:
#line 1027 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, STRTYPE);;
    break;}
case 261:
#line 1033 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 262:
#line 1034 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 263:
#line 1035 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 264:
#line 1036 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 265:
#line 1037 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 266:
#line 1038 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 267:
#line 1043 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCHEAD_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 268:
#line 1050 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCTAIL_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 269:
#line 1057 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCAT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 270:
#line 1064 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCMP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 271:
#line 1071 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCPY_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 272:
#line 1078 "msv.y"
{
						yyval.tnode=new CSyntaxNode(STRFUNCLEN_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 273:
#line 1084 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 274:
#line 1085 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 275:
#line 1086 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 276:
#line 1087 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 277:
#line 1088 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 278:
#line 1089 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 279:
#line 1096 "msv.y"
{yyval.tnode=new CSyntaxNode(ROUND_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 280:
#line 1099 "msv.y"
{yyval.tnode=new CSyntaxNode(CEIL_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 281:
#line 1102 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOOR_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 282:
#line 1105 "msv.y"
{yyval.tnode=new CSyntaxNode(SIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 283:
#line 1106 "msv.y"
{yyval.tnode=new CSyntaxNode(COS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 284:
#line 1107 "msv.y"
{yyval.tnode=new CSyntaxNode(TAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 285:
#line 1108 "msv.y"
{yyval.tnode=new CSyntaxNode(ASIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 286:
#line 1109 "msv.y"
{yyval.tnode=new CSyntaxNode(ACOS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 287:
#line 1110 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 288:
#line 1113 "msv.y"
{yyval.tnode=new CSyntaxNode(SINH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 289:
#line 1114 "msv.y"
{yyval.tnode=new CSyntaxNode(COSH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 290:
#line 1115 "msv.y"
{yyval.tnode=new CSyntaxNode(TANH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 291:
#line 1118 "msv.y"
{yyval.tnode=new CSyntaxNode(EXP_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 292:
#line 1119 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 293:
#line 1120 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG10_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 294:
#line 1121 "msv.y"
{yyval.tnode=new CSyntaxNode(SQRT_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 295:
#line 1124 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN2_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 296:
#line 1125 "msv.y"
{yyval.tnode=new CSyntaxNode(POW_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 297:
#line 1128 "msv.y"
{yyval.tnode=new CSyntaxNode(FMOD_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 298:
#line 1129 "msv.y"
{yyval.tnode=new CSyntaxNode(MODF_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 299:
#line 1132 "msv.y"
{yyval.tnode=new CSyntaxNode(LDEXP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 300:
#line 1134 "msv.y"
{yyval.tnode=new CSyntaxNode(ABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 301:
#line 1135 "msv.y"
{yyval.tnode=new CSyntaxNode(FABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 302:
#line 1136 "msv.y"
{yyval.tnode=new CSyntaxNode(LABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 303:
#line 1142 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 304:
#line 1143 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 305:
#line 1144 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 306:
#line 1145 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 307:
#line 1146 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 308:
#line 1152 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 309:
#line 1154 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 310:
#line 1155 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 311:
#line 1158 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 312:
#line 1161 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 313:
#line 1162 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 314:
#line 1165 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 315:
#line 1166 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 316:
#line 1169 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 317:
#line 1170 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 318:
#line 1173 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 319:
#line 1174 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 320:
#line 1177 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 321:
#line 1178 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 322:
#line 1183 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 323:
#line 1184 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 324:
#line 1185 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 325:
#line 1186 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 326:
#line 1187 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 327:
#line 1188 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 328:
#line 1196 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 329:
#line 1197 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 330:
#line 1201 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 331:
#line 1202 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 332:
#line 1209 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 333:
#line 1213 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 334:
#line 1218 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 335:
#line 1224 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 336:
#line 1230 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 337:
#line 1236 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 338:
#line 1246 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 339:
#line 1252 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 340:
#line 1258 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 341:
#line 1264 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 342:
#line 1273 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 343:
#line 1277 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 344:
#line 1281 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 345:
#line 1287 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 346:
#line 1291 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 347:
#line 1295 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 348:
#line 1301 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 349:
#line 1307 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 350:
#line 1315 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 351:
#line 1323 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 352:
#line 1330 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 353:
#line 1336 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 354:
#line 1342 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 355:
#line 1346 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 356:
#line 1353 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 357:
#line 1358 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 358:
#line 1362 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 359:
#line 1366 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 360:
#line 1370 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 361:
#line 1376 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 362:
#line 1382 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 363:
#line 1388 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 364:
#line 1395 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 365:
#line 1403 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 366:
#line 1409 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 367:
#line 1424 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 368:
#line 1429 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 369:
#line 1434 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 370:
#line 1442 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 371:
#line 1449 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 372:
#line 1455 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 373:
#line 1461 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 374:
#line 1464 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 375:
#line 1474 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 376:
#line 1478 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 377:
#line 1487 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 378:
#line 1488 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 379:
#line 1493 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 380:
#line 1497 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 381:
#line 1506 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 382:
#line 1507 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 383:
#line 1515 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 384:
#line 1517 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 385:
#line 1524 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 386:
#line 1526 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 387:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 388:
#line 1533 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 389:
#line 1537 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 390:
#line 1542 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 391:
#line 1547 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 392:
#line 1552 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 393:
#line 1559 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 394:
#line 1562 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 395:
#line 1563 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 396:
#line 1569 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 397:
#line 1571 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 398:
#line 1591 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 399:
#line 1592 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 400:
#line 1594 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 401:
#line 1596 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 402:
#line 1597 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 403:
#line 1603 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 404:
#line 1610 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 405:
#line 1618 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 406:
#line 1626 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 407:
#line 1630 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 408:
#line 1634 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 409:
#line 1640 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 410:
#line 1644 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 411:
#line 1650 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 412:
#line 1654 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 413:
#line 1661 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 414:
#line 1665 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 415:
#line 1669 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 416:
#line 1676 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 417:
#line 1680 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 418:
#line 1683 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 419:
#line 1688 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 420:
#line 1697 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 421:
#line 1698 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 422:
#line 1704 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 423:
#line 1705 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 424:
#line 1709 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 425:
#line 1710 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 426:
#line 1715 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 427:
#line 1716 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 428:
#line 1717 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 429:
#line 1718 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 430:
#line 1719 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 431:
#line 1722 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 432:
#line 1723 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 433:
#line 1724 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 434:
#line 1730 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 435:
#line 1731 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 436:
#line 1732 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 437:
#line 1734 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 438:
#line 1735 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 439:
#line 1736 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 440:
#line 1738 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 441:
#line 1739 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 442:
#line 1740 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 443:
#line 1741 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 444:
#line 1743 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 445:
#line 1744 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 446:
#line 1745 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 447:
#line 1746 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 448:
#line 1747 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 449:
#line 1748 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 450:
#line 1749 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 451:
#line 1753 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 452:
#line 1754 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 453:
#line 1755 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 454:
#line 1756 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 455:
#line 1757 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 456:
#line 1758 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 457:
#line 1759 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1761 "msv.y"
