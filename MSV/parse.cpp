
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	IF	262
#define	ELSE	263
#define	EMPTY	264
#define	AWAIT	265
#define	PROJECTION	266
#define	PBEGIN	267
#define	PEND	268
#define	POINTERNULL	269
#define	ARRAY	270
#define	STRUCT	271
#define	DOT	272
#define	UNION	273
#define	FILEDECLARATION	274
#define	MORE	275
#define	DEFINE	276
#define	MY_TRUE	277
#define	MY_FALSE	278
#define	EXIST	279
#define	FRAME	280
#define	FOR	281
#define	WHILE	282
#define	DO	283
#define	TRUE	284
#define	FALSE	285
#define	REPEAT	286
#define	UNTIL	287
#define	DISPLAY	288
#define	SKIP	289
#define	THEN	290
#define	COMMA	291
#define	COLON	292
#define	INTDECLARATION	293
#define	STRDECLARATION	294
#define	POINTERDECLARATION	295
#define	CHARDECLARATION	296
#define	VOIDDECLARATION	297
#define	FLOATDECLARATION	298
#define	LISTDECLARATION	299
#define	OPEN_PAR	300
#define	CLOSE_PAR	301
#define	TIMES	302
#define	OPEN_BPAR	303
#define	CLOSE_BPAR	304
#define	OPEN_MPAR	305
#define	CLOSE_MPAR	306
#define	FUNCTION	307
#define	OVER	308
#define	CYLINDER	309
#define	OVEREP	310
#define	INTER_OR	311
#define	NON_DETERMINED	312
#define	SEND	313
#define	RECEIVE	314
#define	PROCESS	315
#define	CHANNEL	316
#define	PUT	317
#define	GET	318
#define	ERROR_TOKEN	319
#define	STRFUNCHEAD	320
#define	STRFUNCTAIL	321
#define	STRFUNCCAT	322
#define	STRFUNCCMP	323
#define	STRFUNCCPY	324
#define	STRFUNCLEN	325
#define	EXTERN	326
#define	UNSIGNED	327
#define	SIGNED	328
#define	CHOP	329
#define	OR	330
#define	PARALLEL	331
#define	AND	332
#define	ASS_P	333
#define	ASS_N	334
#define	CON	335
#define	ADDRESS	336
#define	IMPLY	337
#define	IFF	338
#define	PROPIMPLY	339
#define	NE	340
#define	EQ	341
#define	GE	342
#define	LE	343
#define	GT	344
#define	LT	345
#define	LST	346
#define	RST	347
#define	ADD	348
#define	SUB	349
#define	MUL	350
#define	DIV	351
#define	MOD	352
#define	BNE	353
#define	CHOPSTAR	354
#define	NEXT	355
#define	NEGATION	356
#define	LENGTH	357
#define	REQUEST	358
#define	FINAL	359
#define	KEEP	360
#define	ALWAYS	361
#define	HALT	362
#define	W_NEXT	363
#define	PREFIX	364
#define	SOMETIMES	365
#define	ID	366
#define	STRLITERAL	367
#define	STRUCT_TYPE	368
#define	INTLITERAL	369
#define	FLOATLITERAL	370
#define	CHARLITERAL	371

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1160
#define	YYFLAG		-32768
#define	YYNTBASE	117

#define YYTRANSLATE(x) ((unsigned)(x) <= 371 ? yytranslate[x] : 192)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   216,
   226,   228,   230,   238,   242,   244,   248,   250,   251,   256,
   262,   267,   272,   275,   278,   281,   284,   286,   289,   292,
   296,   300,   304,   308,   316,   325,   337,   351,   353,   355,
   357,   359,   361,   363,   366,   373,   378,   384,   390,   399,
   408,   411,   414,   417,   418,   425,   433,   434,   437,   441,
   443,   445,   447,   449,   453,   456,   458,   470,   483,   495,
   507,   525,   544,   562,   581,   601,   620,   638,   657,   675,
   677,   679,   681,   683,   685,   696,   700,   702,   707,   713,
   717,   729,   742,   754,   766,   779,   783,   787,   790,   791,
   794,   797,   800,   808,   815,   820,   824,   826,   830,   834,
   840,   842,   846,   849,   850,   852,   856,   858,   861,   864,
   866,   868,   870,   872,   874,   876,   880,   882,   884,   886,
   888,   890,   892,   894,   896,   898,   900,   902,   904,   906,
   908,   910,   914,   916,   918,   922,   927,   932,   937,   942,
   947,   952,   956,   960,   964,   965,   968,   971,   974,   977,
   980,   984,   989,   994,   999,  1005,  1011,  1017,  1023,  1029,
  1036,  1042,  1048,  1055,  1061,  1068,  1076,  1083,  1090,  1098,
  1105,  1112,  1118,  1126,  1133,  1135,  1137,  1140,  1144,  1148,
  1152,  1156,  1158,  1160,  1162,  1166,  1170,  1174,  1178,  1182,
  1186,  1190,  1194,  1198,  1202,  1204,  1206,  1208,  1210,  1212,
  1214,  1217,  1220,  1222,  1224,  1228,  1231,  1235,  1240,  1246,
  1251,  1255,  1260,  1266,  1271,  1274,  1278,  1283,  1286,  1290,
  1295,  1300,  1306,  1314,  1319,  1323,  1329,  1338,  1339,  1344,
  1348,  1353,  1358,  1364,  1370,  1376,  1382,  1389,  1399,  1400,
  1408,  1418,  1427,  1433,  1438,  1441,  1444,  1446,  1448,  1449,
  1452,  1456,  1457,  1460,  1464,  1467,  1471,  1474,  1476,  1480,
  1482,  1484,  1486,  1488,  1492,  1493,  1496,  1497,  1501,  1503,
  1506,  1510,  1514,  1518,  1522,  1528,  1538,  1540,  1542,  1543,
  1545,  1546,  1548,  1549,  1557,  1565,  1571,  1574,  1576,  1577,
  1583,  1586,  1587,  1592,  1598,  1599,  1603,  1608,  1614,  1619,
  1625,  1630,  1631,  1635,  1639,  1644,  1649,  1654,  1659,  1664,
  1669,  1674,  1679,  1686,  1691,  1696,  1701,  1708,  1712,  1716,
  1721,  1725,  1726,  1730,  1734,  1738,  1742,  1745
};

static const short yyrhs[] = {   118,
   121,     0,    12,   119,    13,     0,     0,   119,    77,   119,
     0,   119,    75,   119,     0,   119,    83,   119,     0,   119,
    84,   119,     0,   119,    74,   119,     0,   106,   119,     0,
   105,   119,     0,   110,   119,     0,   108,   119,     0,   100,
   119,     0,    34,     0,    22,     0,    23,     0,   102,   142,
     0,     9,     0,    20,     0,   107,   119,     0,   104,   119,
     0,   101,   119,     0,    48,   119,   120,    49,    11,    48,
   119,    49,     0,   111,     0,    21,   111,    37,   157,     0,
   119,    99,     0,    45,   119,    46,     0,    36,   119,   120,
     0,     0,   121,    77,   121,     0,   121,    75,   121,     0,
   121,    74,   121,     0,   132,     0,   127,     0,   181,     0,
   184,     0,   175,     0,   176,     0,   177,     0,   100,    45,
   121,    46,     0,   105,    45,   121,    46,     0,   106,    45,
   121,    46,     0,    10,    45,   156,    46,     0,    31,    48,
   121,    49,    32,    45,   156,    46,     0,    34,     0,     9,
     0,    20,     0,   102,    45,   142,    46,     0,   188,     0,
   186,     0,    29,     0,    30,     0,   104,    45,   121,    46,
     0,   121,    76,   121,     0,    45,   174,    46,    82,    50,
   121,    51,     0,    25,    45,   167,   172,    46,    77,    45,
   121,    46,     0,    48,   121,   173,    49,    11,   165,     0,
    48,   121,    49,    11,   165,     0,    52,   111,    45,   161,
    46,    48,   121,    49,     0,    21,   111,    45,   161,    46,
    78,    48,   123,    49,     0,   125,     0,   124,     0,    24,
   167,   162,    37,    48,   121,    49,     0,    45,   121,    46,
     0,   127,     0,   127,    77,   122,     0,   121,     0,     0,
   111,    45,   163,    46,     0,    71,   111,    45,   163,    46,
     0,   138,    45,   163,    46,     0,   126,    48,   122,    49,
     0,    16,   111,     0,    18,   111,     0,    73,   128,     0,
    72,   128,     0,   128,     0,   129,   130,     0,   113,   130,
     0,    16,   111,   130,     0,    18,   111,   130,     0,    16,
   113,   130,     0,    18,   113,   130,     0,    45,    95,   167,
    46,    45,   161,    46,     0,    45,    95,    95,   167,    46,
    45,   161,    46,     0,    45,    95,   111,    50,   142,   140,
    51,    46,    45,   161,    46,     0,    45,    95,   111,    50,
   142,   140,    51,    46,    45,   161,    46,    78,   149,     0,
    38,     0,    43,     0,    41,     0,    39,     0,    42,     0,
    19,     0,   167,   131,     0,   111,    50,   142,   140,    51,
   131,     0,   167,    78,   136,   131,     0,   111,    15,    78,
   149,   131,     0,   111,    15,    78,   168,   131,     0,   111,
    50,   142,   140,    51,    78,   149,   131,     0,   111,    50,
   142,   140,    51,    78,   168,   131,     0,    95,   130,     0,
    36,   130,     0,    36,     1,     0,     0,   111,    50,   142,
   140,    51,     0,     0,    36,   111,    50,   142,   140,    51,
     0,     0,     0,    36,     1,     0,   133,   135,   136,     0,
   167,     0,   190,     0,   138,     0,   141,     0,    45,   133,
    46,     0,   100,   133,     0,   134,     0,    45,    45,    41,
    95,    46,   114,    46,    50,   142,   140,    51,     0,    45,
    45,    72,    41,    95,    46,   114,    46,    50,   142,   140,
    51,     0,    45,    45,    38,    95,    46,   114,    46,    50,
   142,   140,    51,     0,    45,    45,    43,    95,    46,   114,
    46,    50,   142,   140,    51,     0,    45,    45,    41,    95,
    46,    45,    45,    41,    95,    46,   114,    46,    46,    50,
   142,   140,    51,     0,    45,    45,    41,    95,    46,    45,
    45,    72,    41,    95,    46,   114,    46,    46,    50,   142,
   140,    51,     0,    45,    45,    41,    95,    46,    45,    45,
    38,    95,    46,   114,    46,    46,    50,   142,   140,    51,
     0,    45,    45,    72,    41,    95,    46,    45,    45,    41,
    95,    46,   114,    46,    46,    50,   142,   140,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    72,    41,
    95,    46,   114,    46,    46,    50,   142,   140,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    38,    95,
    46,   114,    46,    46,    50,   142,   140,    51,     0,    45,
    45,    38,    95,    46,    45,    45,    41,    95,    46,   114,
    46,    46,    50,   142,   140,    51,     0,    45,    45,    38,
    95,    46,    45,    45,    72,    41,    95,    46,   114,    46,
    46,    50,   142,   140,    51,     0,    45,    45,    38,    95,
    46,    45,    45,    38,    95,    46,   114,    46,    46,    50,
   142,   140,    51,     0,    78,     0,    79,     0,   142,     0,
   149,     0,   168,     0,    45,   168,    46,    45,   129,    46,
    45,   161,    46,   124,     0,    45,   136,    46,     0,   137,
     0,    95,    45,   134,    46,     0,   111,    50,   142,   140,
    51,     0,    45,   138,    46,     0,    45,    45,    38,    95,
    46,   167,    46,    50,   142,   140,    51,     0,    45,    45,
    72,    38,    95,    46,   167,    46,    50,   142,   140,    51,
     0,    45,    45,    43,    95,    46,   167,    46,    50,   142,
   140,    51,     0,    45,    45,    41,    95,    46,   167,    46,
    50,   142,   140,    51,     0,    45,    45,    72,    41,    95,
    46,   167,    46,    50,   142,   140,    51,     0,    45,   139,
    46,     0,    36,   142,   140,     0,    36,     1,     0,     0,
    95,   167,     0,    95,   141,     0,    95,   138,     0,    45,
   141,    46,    50,   142,   140,    51,     0,    95,    45,   160,
    95,    46,   142,     0,    95,    45,   142,    46,     0,    45,
   141,    46,     0,   145,     0,   145,   158,   142,     0,   142,
   148,   145,     0,     7,   156,    35,   142,   144,     0,   145,
     0,   145,   148,   145,     0,     8,   142,     0,     0,   146,
     0,   145,   147,   146,     0,   169,     0,    94,   146,     0,
    98,   146,     0,    14,     0,   171,     0,   167,     0,   138,
     0,   141,     0,   124,     0,    45,   142,    46,     0,   170,
     0,   153,     0,   154,     0,   190,     0,   139,     0,    95,
     0,    96,     0,    97,     0,    91,     0,    92,     0,    81,
     0,    56,     0,    80,     0,    93,     0,    94,     0,   149,
    80,   149,     0,   150,     0,   151,     0,    45,   149,    46,
     0,    50,   142,   152,    51,     0,    50,   168,   152,    51,
     0,    50,   149,   152,    51,     0,    48,   142,   152,    49,
     0,    48,   168,   152,    49,     0,    48,   149,   152,    49,
     0,    36,   142,   152,     0,    36,   168,   152,     0,    36,
   149,   152,     0,     0,    36,     1,     0,    81,   190,     0,
    81,   167,     0,    81,   138,     0,    81,   153,     0,    45,
   153,    46,     0,    45,    38,    46,   143,     0,    45,    43,
    46,   143,     0,    45,    41,    46,   143,     0,    45,    73,
    38,    46,   143,     0,    45,    73,    41,    46,   143,     0,
    45,    72,    38,    46,   143,     0,    45,    72,    41,    46,
   143,     0,    45,    38,    95,    46,   155,     0,    45,    72,
    38,    95,    46,   155,     0,    45,    43,    95,    46,   155,
     0,    45,    41,    95,    46,   155,     0,    45,    72,    41,
    95,    46,   155,     0,    45,    42,    95,    46,   155,     0,
    45,    38,    95,    95,    46,   155,     0,    45,    72,    38,
    95,    95,    46,   155,     0,    45,    43,    95,    95,    46,
   155,     0,    45,    41,    95,    95,    46,   155,     0,    45,
    72,    41,    95,    95,    46,   155,     0,    45,    42,    95,
    95,    46,   155,     0,    45,    16,   113,    95,    46,   155,
     0,    45,   113,    95,    46,   155,     0,    45,    16,   113,
    95,    95,    46,   155,     0,    45,   113,    95,    95,    46,
   155,     0,   143,     0,   157,     0,   101,   156,     0,   156,
    77,   156,     0,   156,    75,   156,     0,    45,   156,    46,
     0,   142,   158,   142,     0,    22,     0,    23,     0,   142,
     0,   142,    86,   168,     0,   142,    85,   168,     0,   168,
    86,   142,     0,   168,    85,   142,     0,   142,    86,    14,
     0,   142,    85,    14,     0,    14,    86,   142,     0,    14,
    85,   142,     0,   142,    86,   170,     0,   142,    85,   170,
     0,    87,     0,    88,     0,    85,     0,    89,     0,    90,
     0,    86,     0,    72,    38,     0,    72,    41,     0,   159,
     0,   129,     0,   160,   167,   162,     0,   160,   162,     0,
   113,   167,   162,     0,   113,    95,   167,   162,     0,   113,
    95,    95,   167,   162,     0,   113,   167,    15,   162,     0,
   111,   167,   162,     0,   111,    95,   167,   162,     0,   111,
    95,    95,   167,   162,     0,   111,   167,    15,   162,     0,
   113,   162,     0,   113,    95,   162,     0,   113,    95,    95,
   162,     0,   111,   162,     0,   111,    95,   162,     0,   111,
    95,    95,   162,     0,   160,   167,    15,   162,     0,   160,
    95,   167,    15,   162,     0,   160,   167,    15,    50,   142,
    51,   162,     0,   160,    95,   167,   162,     0,   160,    95,
   162,     0,   160,    95,    95,   167,   162,     0,    45,    95,
   167,    46,    45,   161,    46,   162,     0,     0,    36,   160,
   167,   162,     0,    36,   160,   162,     0,    36,   111,   167,
   162,     0,    36,   113,   167,   162,     0,    36,   113,    95,
   167,   162,     0,    36,   111,   167,    15,   162,     0,    36,
   113,   167,    15,   162,     0,    36,   160,   167,    15,   162,
     0,    36,   160,    95,   167,    15,   162,     0,    36,    45,
    95,   167,    46,    45,   161,    46,   162,     0,     0,    36,
   160,   167,    50,   142,    51,   162,     0,    36,   160,   167,
    50,   142,    36,   142,    51,   162,     0,    36,   160,   167,
    15,    50,   142,    51,   162,     0,    36,   160,    95,   167,
   162,     0,    36,   160,    95,   162,     0,    36,     1,     0,
   136,   164,     0,   160,     0,   113,     0,     0,    81,     1,
     0,    36,   136,   164,     0,     0,    36,     1,     0,    48,
   121,    49,     0,     1,    49,     0,    45,   156,    46,     0,
     1,    46,     0,   111,     0,    45,   167,    46,     0,   112,
     0,   114,     0,   116,     0,   115,     0,    36,   167,   172,
     0,     0,    36,     1,     0,     0,    36,   121,   173,     0,
   157,     0,   101,   174,     0,   174,    77,   174,     0,   174,
    75,   174,     0,    45,   174,    46,     0,    27,   166,   165,
     0,    26,   142,    47,    28,   165,     0,    26,    45,   178,
    36,   179,    36,   180,    46,   165,     0,   132,     0,   128,
     0,     0,   156,     0,     0,   132,     0,     0,     3,    45,
   146,    46,    48,   182,    49,     0,     4,   146,    37,    45,
   121,    46,   183,     0,     6,    37,    45,   121,    46,     0,
     5,   182,     0,   182,     0,     0,     7,   156,    35,   165,
   185,     0,     8,   165,     0,     0,    33,    45,   136,    46,
     0,    33,    45,   136,   187,    46,     0,     0,    36,   136,
   187,     0,   103,    45,   167,    46,     0,   103,    45,   167,
   189,    46,     0,   103,    45,   138,    46,     0,   103,    45,
   138,   189,    46,     0,   103,    45,   190,    46,     0,     0,
    36,   167,   189,     0,    36,   138,   189,     0,   167,    17,
   167,   191,     0,   138,    17,   167,   191,     0,   141,    17,
   167,   191,     0,   167,    17,   138,   191,     0,   138,    17,
   138,   191,     0,   141,    17,   138,   191,     0,   167,    82,
   167,   191,     0,   138,    82,   167,   191,     0,    45,   153,
    46,    82,   167,   191,     0,   141,    82,   167,   191,     0,
   167,    82,   138,   191,     0,   138,    82,   138,   191,     0,
    45,   153,    46,    82,   138,   191,     0,   167,    17,   124,
     0,   167,    82,   124,     0,   141,    82,   138,   191,     0,
    45,   190,    46,     0,     0,    17,   167,   191,     0,    17,
   138,   191,     0,    82,   167,   191,     0,    82,   138,   191,
     0,    17,   124,     0,    82,   124,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   148,   179,   180,   184,   185,   186,   187,   188,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   206,   207,   208,
   209,   210,   211,   215,   216,   221,   222,   226,   230,   235,
   237,   244,   350,   351,   353,   354,   355,   356,   357,   358,
   360,   361,   363,   364,   365,   366,   367,   368,   374,   375,
   376,   377,   378,   379,   381,   384,   390,   394,   400,   408,
   418,   420,   422,   436,   440,   444,   451,   452,   457,   462,
   467,   476,   484,   495,   509,   510,   511,   515,   519,   523,
   527,   531,   535,   542,   544,   546,   551,   563,   564,   565,
   568,   569,   570,   577,   581,   585,   590,   596,   601,   608,
   614,   625,   627,   628,   632,   639,   643,   644,   652,   659,
   660,   661,   662,   663,   664,   665,   668,   670,   672,   674,
   676,   678,   680,   682,   684,   686,   688,   690,   692,   697,
   698,   701,   702,   703,   706,   707,   708,   711,   715,   716,
   720,   725,   730,   735,   740,   745,   751,   753,   754,   760,
   761,   762,   764,   766,   768,   770,   776,   777,   779,   780,
   786,   787,   791,   792,   796,   797,   801,   802,   803,   804,
   805,   807,   808,   809,   810,   811,   812,   813,   814,   815,
   816,   819,   820,   821,   822,   823,   824,   825,   826,   828,
   830,   834,   835,   836,   837,   843,   847,   855,   867,   871,
   880,   892,   896,   904,   908,   909,   912,   919,   923,   928,
   932,   939,   942,   943,   946,   947,   950,   951,   954,   955,
   956,   957,   958,   959,   962,   963,   964,   965,   966,   967,
   969,   970,   972,   973,   975,   983,   984,   985,   986,   987,
   993,   995,   996,   999,  1000,  1001,  1004,  1005,  1008,  1009,
  1012,  1013,  1016,  1017,  1022,  1023,  1024,  1025,  1026,  1027,
  1034,  1036,  1039,  1041,  1047,  1051,  1056,  1062,  1068,  1074,
  1084,  1090,  1096,  1102,  1110,  1114,  1118,  1124,  1128,  1132,
  1138,  1144,  1151,  1157,  1163,  1167,  1175,  1181,  1184,  1188,
  1192,  1198,  1204,  1210,  1217,  1225,  1231,  1246,  1252,  1255,
  1263,  1271,  1277,  1283,  1287,  1296,  1307,  1311,  1315,  1316,
  1320,  1334,  1335,  1343,  1345,  1352,  1354,  1360,  1361,  1365,
  1370,  1375,  1380,  1386,  1390,  1391,  1397,  1398,  1409,  1420,
  1421,  1423,  1425,  1431,  1437,  1445,  1453,  1457,  1461,  1467,
  1471,  1477,  1481,  1488,  1492,  1496,  1503,  1507,  1511,  1515,
  1525,  1526,  1532,  1533,  1537,  1538,  1543,  1544,  1545,  1546,
  1547,  1550,  1551,  1552,  1558,  1559,  1560,  1562,  1563,  1564,
  1566,  1567,  1568,  1569,  1571,  1572,  1573,  1574,  1575,  1576,
  1577,  1581,  1582,  1583,  1584,  1585,  1586,  1587
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND",
"POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE","DEFINE",
"MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT",
"UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","OR","PARALLEL","AND","ASS_P","ASS_N","CON","ADDRESS","IMPLY",
"IFF","PROPIMPLY","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","array_cast_exp","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp",
"option_exp_else_statement","simple_ari_exp","member_in_exp","bi_operator","ari_operator",
"array_exp","option_list_value","option_struct_list_value","inner_option_list_value",
"address_exp","type_cast","casted_element","bool_exp","prime_bool_exp","relation_operator",
"sign_type_define","all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   117,   118,   118,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   120,   120,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   122,   122,   123,   123,   124,   124,
   124,   125,   126,   126,   127,   127,   127,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   129,   129,   129,
   129,   129,   129,   130,   130,   130,   130,   130,   130,   130,
   130,   131,   131,   131,    -1,    -1,    -1,    -1,   132,   133,
   133,   133,   133,   133,   133,   133,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,   135,
   135,   136,   136,   136,   136,   136,   136,   137,   138,   138,
   139,   139,   139,   139,   139,   139,   140,   140,   140,   141,
   141,   141,   141,   141,   141,   141,   142,   142,   142,   142,
   143,   143,   144,   144,   145,   145,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   147,   147,   147,   147,   147,   147,   147,   147,   148,
   148,   149,   149,   149,   149,   150,   150,   150,   151,   151,
   151,   152,   152,   152,   152,   152,   153,   153,   153,   153,
   153,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   155,   156,   156,   156,   156,   156,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   158,   158,   158,   158,   158,   158,
   159,   159,   160,   160,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   163,   163,   163,   163,   163,
   164,   164,   164,   165,   165,   166,   166,   167,   167,   168,
   169,   170,   171,   172,   172,   172,   173,   173,   174,   174,
   174,   174,   174,   175,   176,   177,   178,   178,   178,   179,
   179,   180,   180,   181,   182,   182,   183,   183,   183,   184,
   185,   185,   186,   186,   187,   187,   188,   188,   188,   188,
   188,   189,   189,   189,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   191,   191,   191,   191,   191,   191,   191
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     8,     9,
     1,     1,     7,     3,     1,     3,     1,     0,     4,     5,
     4,     4,     2,     2,     2,     2,     1,     2,     2,     3,
     3,     3,     3,     7,     8,    11,    13,     1,     1,     1,
     1,     1,     1,     2,     6,     4,     5,     5,     8,     8,
     2,     2,     2,     0,     6,     7,     0,     2,     3,     1,
     1,     1,     1,     3,     2,     1,    11,    12,    11,    11,
    17,    18,    17,    18,    19,    18,    17,    18,    17,     1,
     1,     1,     1,     1,    10,     3,     1,     4,     5,     3,
    11,    12,    11,    11,    12,     3,     3,     2,     0,     2,
     2,     2,     7,     6,     4,     3,     1,     3,     3,     5,
     1,     3,     2,     0,     1,     3,     1,     2,     2,     1,
     1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     1,     3,     4,     4,     4,     4,     4,
     4,     3,     3,     3,     0,     2,     2,     2,     2,     2,
     3,     4,     4,     4,     5,     5,     5,     5,     5,     6,
     5,     5,     6,     5,     6,     7,     6,     6,     7,     6,
     6,     5,     7,     6,     1,     1,     2,     3,     3,     3,
     3,     1,     1,     1,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
     2,     2,     1,     1,     3,     2,     3,     4,     5,     4,
     3,     4,     5,     4,     2,     3,     4,     2,     3,     4,
     4,     5,     7,     4,     3,     5,     8,     0,     4,     3,
     4,     4,     5,     5,     5,     5,     6,     9,     0,     7,
     9,     8,     5,     4,     2,     2,     1,     1,     0,     2,
     3,     0,     2,     3,     2,     3,     2,     1,     3,     1,
     1,     1,     1,     3,     0,     2,     0,     3,     1,     2,
     3,     3,     3,     3,     5,     9,     1,     1,     0,     1,
     0,     1,     0,     7,     7,     5,     2,     1,     0,     5,
     2,     0,     4,     5,     0,     3,     4,     5,     4,     5,
     4,     0,     3,     3,     4,     4,     4,     4,     4,     4,
     4,     4,     6,     4,     4,     4,     6,     3,     3,     4,
     3,     0,     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,    93,    47,     0,
     0,     0,     0,     0,    51,    52,     0,     0,    45,    88,
    91,    90,    92,    89,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   318,     0,     1,
    62,    61,     0,    34,    77,     0,    33,     0,   116,   112,
   113,   110,    37,    38,    39,    35,    36,    50,    49,   111,
     0,     0,    29,    13,    22,     0,   170,     0,     0,     0,
     0,   321,   323,   322,   175,   173,   181,   174,    17,   157,
   165,   178,   179,   172,   167,   177,   171,   180,    21,    10,
     9,    20,    12,    11,     2,     0,     0,     0,     0,     0,
    26,     0,   170,   242,   243,     0,     0,   320,   244,     0,
   236,     0,     0,    73,     0,    74,     0,     0,     0,   318,
   299,     0,   339,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   175,     0,   173,   174,   178,   329,
   172,     0,   180,     0,     0,     0,     0,     0,     0,    76,
    75,     0,   318,   152,   151,   150,     0,     0,   115,   112,
     0,     0,     0,     0,     0,   309,     0,     0,   318,    79,
   104,     0,     0,     0,     0,     0,    78,   130,   131,     0,
     0,   309,     0,     0,     0,     0,     0,     0,    27,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   173,   181,   174,     0,   178,   172,   180,     0,   209,
     0,   210,   208,   207,   168,   169,   190,   191,     0,   188,
   189,   187,   257,   260,   255,   256,   258,   259,   185,   186,
   182,   183,   184,     0,     0,     8,     5,     4,     6,     7,
     0,     0,     0,     0,   244,     0,   237,   257,   260,     0,
     0,     0,     0,     0,     0,     0,    80,    82,    81,    83,
   288,     0,     0,     0,   325,     0,    88,    90,    92,    89,
     0,     0,   338,   337,     0,     0,   317,     0,     0,     0,
   334,     0,     0,     0,     0,     0,     0,   137,   132,   133,
   193,   194,   134,     0,     0,    88,    90,    89,     0,     0,
     0,     0,     0,   318,   150,     0,   330,    64,   114,   140,
   156,     0,   319,     0,     0,     0,   381,     0,     0,     0,
   288,   309,     0,     0,     0,     0,   264,     0,   263,     0,
     0,     0,   112,   113,     0,   110,   111,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   308,   312,   307,
     0,   149,   101,     0,     0,     0,     0,    94,    32,    31,
    54,    30,     0,    65,   109,     0,   382,   382,     0,   382,
   382,   382,   382,   382,   382,   378,   382,   382,   379,   382,
   382,    25,    29,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   146,   176,   211,     0,     0,     0,     0,     0,
   159,   166,   158,     0,   252,   251,   240,   250,   246,   254,
   249,   245,   253,   241,   352,   239,   238,   248,   247,    43,
     0,   299,   299,   299,     0,   305,     0,     0,     0,   299,
     0,     0,     0,     0,     0,     0,     0,   341,     0,   316,
   315,     0,     0,     0,     0,     0,     0,     0,     0,   205,
   205,   205,   205,   205,   205,     0,     0,   353,     0,     0,
     0,     0,     0,     0,    88,    90,    89,     0,    88,    90,
    88,    90,   333,   150,     0,     0,     0,     0,     0,     0,
     0,   332,   331,   327,     0,     0,     0,     0,     0,   318,
     0,   261,   262,   155,     0,    88,    90,    89,     0,    40,
     0,     0,    48,     0,   359,     0,   357,     0,   361,    53,
    41,    42,   310,     0,   306,    69,     0,     0,     0,   149,
   103,   102,   104,    72,     0,     0,     0,     0,   369,   366,
    71,   376,   372,   370,   367,   380,   374,   368,   365,   375,
   371,    28,     0,   164,     0,   212,   161,     0,     0,   214,
     0,     0,     0,     0,   213,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   350,     0,   299,   278,   299,   299,   275,   299,
   299,   266,   299,     0,     0,   299,     0,   299,   299,   290,
   299,     0,   326,   325,     0,     0,     0,     0,     0,     0,
     0,   340,     0,   335,   314,     0,   136,   195,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   355,   354,     0,   192,     0,     0,     0,     0,     0,     0,
    88,    90,     0,     0,   149,   288,   333,   149,   382,   382,
     0,   328,    58,     0,     0,    70,     0,     0,     0,     0,
     0,     0,    90,     0,     0,     0,     0,   362,   362,   360,
   358,   313,   312,   148,   149,   139,   104,   104,     0,    96,
    66,   387,   382,   382,   388,   382,   382,     0,     0,   160,
     0,     0,     0,   235,   219,     0,   222,     0,   224,     0,
   221,     0,     0,     0,     0,     0,     0,   217,     0,     0,
   218,     0,     0,   215,   216,   232,     0,     0,     0,     0,
   351,     0,   299,   279,   299,   299,   271,   299,   276,   299,
   299,   267,     0,   285,   299,   299,   265,     0,     0,   299,
   291,   299,   299,   292,   304,   299,   299,     0,   289,     0,
   324,     0,     0,     0,   343,     0,     0,   206,   205,   205,
   205,   199,   201,   200,   196,   198,   197,     0,   138,   356,
     0,   321,     0,   321,   321,     0,     0,     0,     0,     0,
   288,     0,     0,     0,   377,   373,     0,    57,     0,   149,
   154,     0,     0,     0,     0,     0,   364,   363,   311,   147,
    97,    98,   104,   384,   383,   386,   385,     0,   163,   231,
     0,   162,   225,   228,   230,   227,   172,   172,   172,     0,
     0,   220,     0,   223,     0,   234,     0,     0,   344,     0,
   280,   299,   272,   274,   277,   299,   268,   270,   299,   299,
   284,     0,   281,    68,     0,   294,   293,   295,   299,   303,
     0,   296,     0,    63,     0,   342,     0,     0,     0,   202,
   204,   203,     0,     0,     0,     0,     0,     0,     0,   321,
     0,   139,    84,   153,    55,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    95,    23,   233,     0,     0,     0,
   172,   172,   226,   229,     0,     0,   288,   273,   269,   286,
   282,     0,    67,     0,   288,   297,     0,     0,   299,     0,
     0,    44,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    85,     0,    59,     0,     0,     0,
     0,     0,   104,   104,     0,     0,     0,     0,     0,     0,
     0,     0,   299,    60,     0,   299,     0,   300,    56,   336,
   288,     0,     0,     0,   149,     0,     0,     0,   149,   149,
     0,     0,     0,     0,   288,     0,     0,     0,     0,     0,
     0,     0,    99,   100,   149,   149,   149,     0,     0,     0,
   346,   299,   283,   299,   302,   299,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   149,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   149,   149,   349,   287,   298,   301,     0,
   321,   321,     0,   119,   321,   321,     0,   117,   120,     0,
     0,     0,     0,    86,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   141,   144,   143,     0,     0,     0,   348,
   345,     0,     0,   135,     0,     0,     0,   321,     0,     0,
   321,   321,   321,     0,   118,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   142,   145,   347,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   321,    87,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   149,   149,     0,   149,   149,     0,
     0,     0,     0,     0,     0,   149,     0,     0,   149,   149,
   149,     0,   129,   127,     0,   123,   121,     0,     0,     0,
   149,   128,   122,   126,   124,     0,   125,     0,     0,     0
};

static const short yydefgoto[] = {  1158,
     2,    21,   211,   154,   383,   924,    95,    62,    63,    64,
    65,    66,   373,   378,    67,    68,    69,   200,   369,   308,
    96,    97,   548,    98,   129,   714,   710,   100,   101,   254,
   239,   310,   311,   312,   643,   102,   103,   715,   266,   131,
   270,   349,   454,   455,   284,   371,   545,   445,   147,   104,
   132,   105,   106,   107,   463,   340,   162,    73,    74,    75,
   295,   633,   877,    76,   740,  1071,    77,   603,    78,   489,
    79,   536,   108,   559
};

static const short yypact[] = {    30,
  2414,  3018,-32768,-32768,  -100,-32768,-32768,-32768,  2414,  2414,
  2414,  2414,   528,  2414,  2414,  2414,  2414,  2414,  2414,-32768,
    23,     4,  1156,-32768,    90,   -23,   174,-32768,-32768,    37,
     7,   127,  2178,   111,-32768,-32768,    71,   270,-32768,-32768,
-32768,-32768,-32768,-32768,  2457,  3018,   211,   231,   682,   682,
   191,    -6,   345,   351,   377,   383,   448,   352,   282,  1258,
-32768,-32768,   457,-32768,-32768,   282,-32768,   327,-32768,   150,
    27,    41,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   581,   714,   673,   425,   425,  1156,-32768,  1744,   -30,   737,
   737,-32768,-32768,-32768,-32768,   150,-32768,    27,   885,  2082,
-32768,-32768,-32768,    41,-32768,-32768,-32768,-32768,   425,   425,
   425,   425,   425,   425,-32768,  2414,  2414,  2414,  2414,  2414,
-32768,   737,   948,-32768,-32768,  2331,  1156,-32768,  1571,  1002,
-32768,  1039,  1156,   282,   282,   282,   282,   491,     7,-32768,
   604,     7,  3055,   753,   616,  1156,   674,  3018,  1970,  1156,
  2571,   328,  1349,  1036,  1267,   963,   615,   397,   626,-32768,
   686,  1024,  1080,  1513,   612,   650,   410,   602,   645,-32768,
-32768,  1266,   771,-32768,-32768,-32768,  2913,   320,-32768,   176,
   528,   406,  3018,  3018,  3018,  3258,   528,   282,   196,-32768,
   163,  3018,  3018,  3018,  3018,  1104,-32768,-32768,-32768,  1970,
    46,  3258,    46,    46,    46,   -18,   -18,  1512,-32768,  2414,
   817,  1003,   749,   112,   145,   732,   189,  3592,   508,   573,
   799,   646,   852,   293,   537,   861,   326,   868,   -30,   176,
    27,-32768,    41,-32768,-32768,-32768,-32768,-32768,   737,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   737,   528,  1453,  1439,  1140,   819,   819,
   881,   528,   528,  3092,  1396,  1119,-32768,    -1,     5,   528,
   674,  1156,  1156,   528,   528,  1123,-32768,-32768,-32768,-32768,
  1531,   899,   461,   912,   930,   824,   112,   145,   732,   189,
  3509,   445,-32768,-32768,   946,   929,-32768,  1151,   954,  3018,
-32768,  1327,  3295,  3461,  3461,   452,    74,-32768,   885,   890,
-32768,-32768,-32768,  1020,   913,   199,   221,   224,  2685,   922,
  1112,  1159,   191,   962,   993,  3138,-32768,-32768,-32768,-32768,
  1004,   978,-32768,   994,  1349,  1349,-32768,  3018,   997,  1047,
  1531,  3258,   282,   282,   466,   611,-32768,   561,-32768,  1026,
  2799,  1276,   646,   293,   626,   326,   868,   152,   974,   -30,
   589,   653,  1062,  1322,  1333,  1420,    21,-32768,  1079,-32768,
  1086,   323,-32768,  1056,   528,   107,  1970,-32768,  1013,  1071,
  1071,-32768,  1090,  1075,-32768,    46,   243,   243,  1110,   243,
   243,   243,   243,   243,   243,-32768,   263,   243,-32768,   263,
   243,-32768,   673,  1149,   528,  1067,   737,   225,   737,   266,
   312,   737,   314,   353,   462,   467,   647,   492,   499,  1126,
  1127,   520,-32768,-32768,   978,   404,   293,   861,   326,   868,
  1538,-32768,   885,  1133,   885,   885,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   885,  1174,  1107,-32768,   885,   885,-32768,
  1097,   -10,    95,   101,  1147,-32768,  1115,     7,   481,   164,
  1137,    39,  1165,   505,  3555,  1183,   396,  1156,   674,-32768,
-32768,  1601,  1170,  3378,  1184,   537,   253,  1186,  3389,   486,
    97,  1199,   486,    97,  1199,  3900,  1970,-32768,  1206,  1338,
   553,   595,   672,   684,   690,   697,   706,  1203,   492,   728,
  1126,  1127,   994,  1212,   528,  1175,  3175,  1242,   528,    46,
  1213,  1172,-32768,  1139,   674,  1263,  1216,  1223,     7,  1225,
   993,-32768,-32768,-32768,  1232,  1158,  1194,  1201,  1282,-32768,
   338,   404,-32768,    46,-32768,  1233,-32768,  1237,-32768,-32768,
-32768,-32768,-32768,   470,-32768,-32768,  1093,  1243,   153,   323,
-32768,-32768,  1274,-32768,  1104,  1269,   -18,   -18,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1264,    87,   730,-32768,  1641,   737,  1272,-32768,
   737,  1294,   737,  1300,-32768,   737,  1302,   735,   738,   759,
   760,   766,   737,   770,   737,   778,   737,   737,   737,  1303,
  1040,   674,-32768,     7,   198,-32768,    -5,   260,-32768,   483,
   290,-32768,   718,  1277,     7,   734,     7,   807,    -8,-32768,
   853,  3018,-32768,   930,  1280,   419,   690,   697,   706,   701,
   437,   727,  1326,-32768,-32768,  1313,-32768,-32768,  1324,  3472,
   253,   903,  1329,  1336,  1342,  1361,  1364,  1365,  3603,  1375,
  1339,-32768,  1338,-32768,  1360,  1856,  1893,   780,   782,   793,
   760,   795,   798,  1377,   323,  1531,-32768,   323,   243,   243,
  3018,-32768,-32768,   674,  1384,-32768,  1212,   528,   528,  1393,
  1394,  1399,  1351,  1158,  1194,  1201,  1407,  1413,  1413,-32768,
-32768,-32768,  1079,-32768,   323,-32768,   124,  1274,  1400,-32768,
-32768,-32768,   263,   243,-32768,   263,   243,  2414,   528,-32768,
   737,  1411,   737,-32768,-32768,   737,-32768,   737,-32768,   737,
-32768,   737,   737,   737,   737,   804,   813,-32768,   737,  1416,
-32768,   737,  1421,-32768,-32768,-32768,   737,   737,  1431,  1404,
-32768,  1426,    -8,-32768,   604,   604,-32768,    -8,-32768,   604,
   604,-32768,     7,-32768,   866,   757,-32768,  1425,  1432,   604,
-32768,   604,   604,-32768,-32768,   876,   784,   528,-32768,  1654,
-32768,  1424,   442,   795,   320,  1156,  1752,-32768,   486,    97,
  1199,-32768,-32768,-32768,-32768,-32768,-32768,  3640,-32768,-32768,
  3686,  1441,  3723,  1442,  1446,  1360,  1856,  1893,   818,  2882,
  1531,  1447,  1455,  1452,-32768,-32768,  1727,-32768,  3018,   323,
   885,   -28,   -22,  1363,  1458,  1351,-32768,-32768,-32768,-32768,
-32768,-32768,   709,-32768,-32768,-32768,-32768,  1207,   885,-32768,
   737,  1538,-32768,-32768,-32768,-32768,   574,   600,   691,   737,
   737,-32768,   737,-32768,   737,-32768,  1456,  1467,-32768,  1468,
-32768,   604,-32768,-32768,-32768,   604,-32768,-32768,   604,   604,
-32768,   528,-32768,  3018,  1472,-32768,-32768,-32768,   604,-32768,
   528,-32768,   476,-32768,  3018,-32768,  1478,  1251,  1479,-32768,
-32768,-32768,  3734,  1477,  3771,  1481,  1483,  2882,  3817,  1499,
  1507,  1508,-32768,-32768,-32768,  1700,  1505,  1473,  1441,  1514,
  1442,  1446,     0,   153,-32768,-32768,-32768,  1511,  1515,  1516,
   712,   717,-32768,-32768,  1518,  3018,  1531,-32768,-32768,-32768,
-32768,   188,  1258,  1509,  1531,-32768,   319,   528,   604,  1434,
   674,-32768,  1523,   838,   841,   773,   528,   851,   859,   878,
   528,   528,  3854,  1521,-32768,  1530,-32768,  1508,   487,   975,
  1532,  1499,   124,  1274,   528,   528,   528,  1528,  1534,  3018,
  1539,  1535,   604,-32768,  1536,   604,   786,-32768,-32768,-32768,
  1531,   863,   888,   893,   323,   904,   916,   926,   323,   323,
   927,   934,  1028,   528,  1531,  1491,  1496,  1554,  1501,  1503,
  1559,  1095,-32768,-32768,   323,   323,   323,   528,   528,  1617,
-32768,   604,-32768,   604,-32768,   604,  1558,  3863,  3892,   935,
  1560,  3939,  3946,   941,  1561,  1566,   956,   958,   961,   323,
  1563,  1574,  1575,  1527,  1579,  1594,  1546,  1548,  1550,  1610,
  1603,  1615,  1618,   323,   323,  1423,-32768,-32768,-32768,   177,
  1606,  1624,  3978,-32768,  1628,  1633,  3985,-32768,-32768,  4024,
  4032,   964,  1630,  1604,  1572,  1573,  1642,  1576,  1582,  1652,
  1653,  1658,  1612,-32768,-32768,-32768,  1660,  1661,  1040,-32768,
-32768,    81,   352,-32768,  1664,  1659,  1668,  1670,  1671,  1677,
  1678,  1680,  1695,  4061,-32768,  1338,  1606,  1624,  1629,  1628,
  1633,  1632,  1636,  1638,  1696,-32768,-32768,-32768,   771,  1697,
  1703,  1710,  1709,  1711,  1716,  1718,  1720,  1721,   890,  1670,
  1678,  1680,  1695,  1656,   528,   528,  1729,   528,   528,  1731,
  1733,  1734,  1722,  1721,   323,   323,   528,   323,   323,   528,
   528,   528,  1738,  1746,  1747,   323,  1748,  1749,   323,   323,
   323,   528,-32768,-32768,  1755,-32768,-32768,  1756,  1757,  1758,
   323,-32768,-32768,-32768,-32768,  1759,-32768,  1811,  1813,-32768
};

static const short yypgoto[] = {-32768,
-32768,    45,  1415,    36,  1265,-32768,    31,-32768,-32768,  -192,
   -44,  -156,     8,  -528,  -142,    -2,  1340,-32768,   -76,-32768,
   880,   -47,   705,  1241,   -13,  -329,-32768,  1301,   -88,-32768,
  1245,  -296,-32768,-32768,  -413,  1188,-32768,  1480,     1,     2,
  1719,-32768,  -154,  -312,  1540,  -188,  1131,  -135,-32768,   252,
   617,-32768,   921,-32768,  1205,  1318,   -12,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -432,-32768,-32768,-32768,-32768,  1176,
-32768,  -341,  1454,   286
};


#define	YYLAST		4177


static const short yytable[] = {    99,
   294,   235,   236,   384,   170,   171,   477,   481,   484,   746,
    81,   301,   438,   389,   229,   347,   898,   350,   441,   144,
   538,   543,   900,   130,   700,   283,   386,   283,   517,   347,
   283,   370,    61,   261,   139,   115,   139,    60,   177,   623,
   223,     1,   156,   204,   951,   347,   160,   370,   122,   179,
    89,   139,    48,    82,    83,    84,    85,   206,   109,   110,
   111,   112,   113,   114,    51,   229,   190,   644,   645,   646,
   647,   648,   307,   197,   225,   155,    61,   576,   223,   580,
   173,   164,   585,   139,   605,   899,   212,   134,    51,   135,
   386,   901,    58,   178,   709,   223,   116,   117,   293,   118,
   140,    89,   140,   223,   173,   119,   120,   551,   205,   487,
   128,   145,   265,   952,    94,    51,   128,   140,   148,   488,
    94,   121,   207,   385,   347,  1072,   347,   267,   460,   225,
   283,   173,   642,   276,   133,   309,   283,   265,   322,   139,
   327,   277,   278,   279,   280,   139,   298,   138,   156,   140,
   314,   139,   160,   518,   160,   146,   173,   407,   348,   376,
   256,   257,   258,   259,   260,   432,   201,   359,   821,   822,
   223,   142,   309,   372,   156,   179,   490,   477,    61,   237,
   238,   155,   641,   302,   347,   347,   309,   370,   309,   608,
   409,  1099,   201,   654,   202,   611,   531,   653,   376,   283,
   304,   188,   305,   490,   225,   140,   408,    61,   139,   402,
   374,   140,   352,    61,    61,    61,   223,   189,   364,   365,
   366,  1072,    61,    61,    61,    61,   475,   379,   380,   381,
   382,   203,    89,   283,   412,   172,   396,   399,   963,   410,
   377,   433,   139,   223,   407,   375,    51,    48,   435,   436,
   265,   178,   697,    72,   403,   223,   444,   203,   619,   557,
   448,   449,   173,   728,   128,   731,   409,   734,   735,   412,
   578,   223,   446,   447,   140,   170,   171,   225,   223,   557,
   237,   238,   141,   413,   136,    51,   137,  1073,   466,   476,
   480,   483,   743,   492,   905,   283,   161,    72,   638,   190,
   553,   173,   176,    72,   139,   265,   322,   202,   140,   204,
   191,   581,   265,   508,   149,   493,   156,   191,   494,   579,
   160,   165,   512,   513,   558,   283,   139,   160,   309,   347,
    61,   350,   490,   634,   139,   472,   160,   160,   331,   227,
   233,   166,   206,   641,   558,   780,   817,   818,   156,   155,
   277,   279,   160,   803,   748,   466,   641,   583,   547,   586,
   582,   550,   384,   309,   358,   880,   881,   882,    61,   966,
   140,   333,   172,   514,   205,   684,   188,   227,   685,   673,
   686,   155,   531,   552,   753,   191,   191,   191,   191,   181,
   282,   574,   189,   285,   161,   182,   186,   475,   407,    72,
   140,   187,   161,   325,   198,   199,   584,   207,   587,   687,
   651,   237,   238,   204,    51,   237,   238,   223,    89,   178,
   201,   183,   323,   227,   993,   994,   223,   184,   356,    72,
   173,   223,    51,   362,    72,    72,    72,   178,   324,   191,
   139,   599,   331,    72,    72,    72,    72,   588,   173,   330,
   360,   225,   388,   170,   391,   393,   395,   398,   401,   223,
   476,   456,   466,   139,   711,   225,   741,   693,   632,   227,
   692,   278,   348,   309,  -113,  -113,    86,   574,   205,    28,
   429,   139,   737,    87,   170,   203,   139,   831,   891,   139,
   631,   665,   185,   265,   508,   668,   486,   751,    40,    41,
    51,    42,    43,    44,   196,   457,   189,   409,   160,   347,
   139,   928,   412,   773,   303,   227,   173,   304,   283,   305,
   343,   642,   135,-32768,   986,   139,   929,   987,   466,   189,
   309,   188,   346,   695,    86,   281,   188,   593,   808,   467,
    48,    87,   161,   191,   595,   418,    51,   189,   419,   139,
    89,    72,   189,   299,   227,   189,   589,   176,   988,    86,
   519,   590,   173,    90,   306,   599,    87,    91,   237,   238,
   161,   458,    88,   459,   504,   617,   520,   227,   237,   238,
    58,   128,   424,    92,    93,    94,   594,   702,   705,    72,
   206,   140,   223,   596,   191,   191,   521,    88,    48,   626,
   300,   223,   161,  1070,   962,   201,   524,   953,    89,   356,
   420,   429,   965,   421,   600,   189,   206,   208,   233,   908,
   879,    90,    51,    48,   534,    91,   225,   191,   779,   237,
   238,   201,   876,    89,   535,   225,  1098,   282,    58,   283,
   655,    92,    93,    94,   347,   909,    90,    51,   522,   847,
    91,   523,    61,   237,   238,   207,   341,   770,  1007,   202,
   330,   297,   201,    58,   810,   811,    92,    93,    94,   206,
   203,   332,  1021,   560,   299,   562,   563,   564,   565,   566,
   567,   207,   568,   569,   591,   570,   571,   592,   534,   579,
   202,   330,  -112,  -112,   342,   829,   203,   167,   537,   168,
    28,    61,   206,   607,   610,   613,   807,   206,   210,   616,
   618,   621,   344,   624,   137,   191,   161,   656,   191,    40,
    41,   300,    42,    43,    44,   227,   169,   203,   206,   657,
   227,   333,   756,   206,   207,   407,   910,   227,   591,   345,
   223,   774,   409,   223,   376,   223,   116,   117,   760,   118,
    87,   412,   828,   283,   873,   119,   120,   958,   227,   209,
   347,   670,   959,  -110,  -110,   313,   582,   207,   347,   283,
   677,   121,   207,   595,   225,   711,   878,   225,   587,   225,
   723,    88,   356,   724,   658,   689,   904,   116,   117,  1109,
   118,   659,   283,   207,    59,   970,   119,   120,   207,   296,
   660,   272,   313,   273,   725,   593,   862,    48,   704,   707,
   591,   595,   121,   974,   347,   729,   313,    89,   313,   283,
   187,   763,   663,   732,   712,   796,   411,   797,   347,   579,
    90,    51,   582,   871,    91,   223,  1006,   223,   798,    61,
   595,   223,   283,   800,   896,   237,   238,    58,   922,   840,
    92,    93,    94,   587,   726,   742,   745,   927,   841,   750,
   727,   406,   755,   888,   730,   404,   759,   767,   762,   225,
   766,   225,   733,    72,   579,   225,   582,   191,   237,   238,
   860,    70,   191,   407,   439,   442,   409,   587,   283,   799,
   869,   227,   733,   422,    61,   223,   407,   423,   730,   923,
   227,   283,   768,   778,   409,    61,   425,   733,  1008,    86,
   930,   283,   733,   337,   967,   591,    87,   121,   978,   478,
   482,   485,    72,   975,   157,    70,   434,   979,   980,   225,
   174,   180,   972,  1009,   343,   973,   464,   167,   595,   168,
    28,   995,   996,   997,   333,   976,    61,   479,   461,  1012,
   304,   961,   305,   977,   805,   806,   469,   579,   313,   499,
    41,  1013,   500,    43,    44,   462,   169,   222,   230,   490,
  1020,   595,   407,    48,   837,   838,   839,   237,   238,   409,
  1043,   468,   582,    89,  1034,  1035,  1047,  1010,   824,   825,
    61,   826,   827,   313,   852,  1000,    90,    51,   579,   856,
    91,  1050,   471,  1051,   859,   222,   595,   515,   329,  1084,
   582,   505,   989,    58,   128,   990,    92,    93,    94,   533,
  1014,  1017,   157,   134,   191,   464,    72,    70,  1018,   733,
   157,   174,   262,   263,    59,   733,   271,   405,   506,   227,
   198,   199,   227,   738,   227,   739,   991,   837,   838,   839,
   579,   222,   582,   509,   491,  1052,   353,   180,   733,   510,
    72,   361,    70,    70,    70,   591,   237,   238,  1019,   334,
  1074,    70,    70,    70,    70,   511,   272,   272,   273,   273,
   387,   328,   390,   392,   394,   397,   400,   193,   194,   195,
   478,   911,   912,   694,   272,   516,   273,   222,   335,    86,
   336,  1125,  1126,   313,  1128,  1129,    87,   539,   426,   192,
   193,   194,   195,  1136,   544,    72,  1139,  1140,  1141,   167,
   525,   168,    28,   274,   275,   337,    72,   167,  1151,   168,
    28,   546,  1028,   549,   227,  1029,   227,    88,   554,   912,
   227,    40,    41,   222,    42,    43,    44,   195,   169,   501,
    41,   555,   502,    43,    44,   561,   169,  -111,  -111,   573,
   313,   575,    86,    48,   437,   698,  1030,    72,   450,   123,
   157,   597,   598,    89,   338,    49,    50,   124,   125,    70,
   601,   602,   222,   273,   622,   174,    90,    51,   440,   443,
    91,   604,   614,   272,   227,   273,   470,   272,   157,   273,
   126,   636,   174,    58,   503,   222,    92,    93,    94,   615,
   625,    72,   192,   193,   194,   195,    59,    70,   167,   666,
   168,    28,   119,   120,    59,   272,    48,   273,   329,   637,
   157,   639,   159,   335,   642,   336,    89,   532,   121,   426,
   661,    41,    71,   662,    43,    44,   230,   169,   336,    90,
    51,   652,   680,    91,   699,   906,   127,   664,   781,   837,
   838,   675,   671,   837,   838,   556,    58,   128,   676,    92,
    93,    94,    86,   674,   678,   226,   232,   679,   690,    87,
   116,   117,   691,   118,    28,   158,    71,   667,   681,   119,
   120,   175,    71,   696,   912,   682,   932,   167,   912,   168,
    28,   837,   838,    40,    41,   121,    42,    43,    44,   376,
    88,   708,   -62,   226,   330,    59,   335,   716,   336,    40,
    41,   530,   683,    43,    44,   272,   169,   273,   224,   231,
   226,   192,   193,   194,   195,   912,    48,   346,   226,   718,
   -62,   -62,   -62,   -62,   157,   720,    89,   722,   737,   192,
   193,   194,   195,   222,   758,    86,   772,   776,   222,    90,
    51,   775,   123,    91,   355,   222,   224,   540,   777,   802,
   124,   125,   804,    87,   487,   473,    58,   782,   541,    92,
    93,    94,   653,   158,   783,   304,   222,   305,    71,   669,
   784,   158,   175,   326,    59,   192,   193,   194,   195,   820,
   192,   193,   194,   195,   791,   226,   192,   193,   194,   195,
   532,   785,   224,   688,   786,   787,   428,   354,    71,    48,
   789,   801,   231,    71,    71,    71,   738,  1069,   739,    89,
    48,   809,    71,    71,    71,    71,   703,   706,   812,   813,
    89,   424,    90,    51,   814,   815,    91,   816,   534,   153,
   823,   226,   849,    90,    51,    80,   831,    91,   224,    58,
   128,   843,    92,    93,    94,   542,   845,   848,   875,   427,
    58,   850,   864,   792,    93,    94,   902,   865,   226,   969,
   268,   269,   245,   246,   247,   248,   884,   886,   237,   238,
   226,   887,   915,   192,   193,   194,   195,   892,   163,    80,
   893,    70,   894,   903,   224,    80,   226,   192,   193,   194,
   195,   916,   917,   226,   897,   118,   925,   949,    86,   222,
   954,   119,   120,   931,   933,   123,   937,   117,   222,   118,
   941,   158,   942,   124,   125,   119,   120,   121,   226,   431,
    71,   228,   234,   224,   944,   355,   175,   355,   338,    28,
    70,   121,   945,   946,   232,   948,    88,   964,   950,   158,
   955,   339,   960,   175,   956,   957,   224,   971,    40,    41,
   984,    42,    43,    44,   985,   451,   992,   998,    71,   228,
  1002,  1004,    48,   999,  1001,  1022,   192,   193,   194,   195,
  1023,   158,    89,   240,  1024,  1025,   163,  1026,   354,  1027,
   427,    80,   346,  1040,   163,    90,    51,   231,  1054,    91,
  1044,  1048,   192,   193,   194,   195,  1049,   241,   242,  1055,
  1056,  1057,    58,   128,  1058,    92,    93,    94,   249,   250,
   357,    80,   251,   252,   253,   363,    80,    80,    80,  1059,
  1060,   452,  1061,   453,  1062,    80,    80,    80,    80,   635,
  1063,  1076,   226,  1064,   180,   268,   269,   245,   246,   247,
   248,   226,  1036,   237,   238,  1065,   226,   222,  1066,  1077,
   222,   228,   222,  1079,   192,   193,   194,   195,  1080,  1011,
  1085,  1086,   430,  1015,  1016,  1087,  1088,  1089,    70,  1090,
   192,   193,   194,   195,   226,  1091,   240,  1092,  1093,  1031,
  1032,  1033,   874,  1094,  1100,   158,  1095,   577,   202,   577,
  1096,  1097,   577,  1101,   224,  1102,  1103,   228,   428,   224,
   241,   242,  1104,  1105,  1053,  1106,   224,   192,   193,   194,
   195,   249,   250,   237,   238,   251,   252,   253,  1067,  1068,
  1107,  1114,  1110,    70,   163,  1111,  1115,   224,   947,  1112,
    86,  1113,  1116,    80,    70,  1117,   228,    87,  1118,   213,
  1119,  1120,   222,  1121,   222,  1122,  1123,  1133,   222,  1124,
    28,   354,   163,   192,   193,   194,   195,   895,  1127,   228,
  1130,   214,  1131,  1132,   215,   216,   217,  1142,   218,    40,
    41,    80,    42,    43,    44,    70,  1143,  1144,  1146,  1147,
   192,   193,   194,   195,   163,  1152,  1153,  1154,  1155,  1157,
  1159,   357,  1160,   430,    48,   219,   220,   572,   255,   701,
   234,   713,   222,   819,    89,   650,   790,   226,   771,  1134,
  1135,   672,  1137,  1138,     0,     0,   226,    90,    51,    70,
  1145,    91,     0,  1148,  1149,  1150,     0,     0,     0,     0,
     0,     0,     0,     0,    58,  1156,   221,    92,    93,    94,
     0,     0,    71,     0,     0,     0,     0,     0,     0,    87,
     0,     0,     0,     0,     0,     0,     0,     0,   577,     0,
   224,   577,     0,   577,     0,     0,   577,     0,     0,   224,
     0,     0,     0,   577,     0,   577,     0,   577,   577,   577,
   793,     0,     0,     0,     0,     0,    87,     0,     0,     0,
     0,    71,     0,     0,     0,     0,     0,     0,   163,  1075,
     0,     0,     0,     0,     0,     0,    48,   228,     0,     0,
     0,     0,   228,     0,     0,     0,    89,    88,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    90,
    51,   556,     0,    91,     0,   577,   577,   577,     0,     0,
   228,     0,     0,    48,     0,     0,    58,     0,     0,   794,
    93,    94,     0,    89,     0,   226,    86,     0,   226,     0,
   226,     0,     0,    87,   357,     0,    90,    51,     0,     0,
    91,   606,   609,   612,     0,     0,     0,     0,     0,   620,
     0,     0,     0,    58,     0,     0,   795,    93,    94,     0,
     0,   577,     0,   832,   303,    71,   577,   304,   577,   305,
   577,     0,   577,   577,   577,   577,     0,     0,   224,   577,
     0,   224,   577,   224,     0,     0,     0,   577,     0,     0,
    48,     0,     0,     0,     0,     0,     0,     0,     0,    71,
    89,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   717,     0,   719,    90,   306,   721,     0,    91,     0,     0,
   226,     0,   226,     0,     0,    80,   226,     0,   736,     0,
    58,   128,     0,    92,    93,    94,     0,     0,     0,     0,
     0,     0,     0,   228,     0,     0,   577,   577,   577,     0,
   577,     0,   228,     0,    71,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    71,     0,     0,     0,     0,
     0,     0,     0,   224,    80,   224,     0,     0,     0,   224,
   226,   577,     0,     0,     0,   717,   721,   240,     0,     0,
   577,   577,     0,   577,   744,   577,   747,   749,     0,   752,
   754,     0,   757,     0,     0,   761,    71,   764,   765,     0,
   769,   241,   242,     0,     0,     0,   243,   244,   245,   246,
   247,   248,   249,   250,     0,     0,   251,   252,   253,     0,
     0,     0,     0,   224,    86,     0,     0,     0,   577,     0,
   830,    87,     0,     0,     0,   833,     0,   834,     0,   835,
    71,   836,     0,   717,   721,     0,     0,     0,   842,     0,
     0,   844,     0,     0,     0,     0,   846,     0,     0,     0,
     0,     0,   143,     0,     0,     0,     0,     0,    80,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   228,     0,     0,   228,     0,   228,     0,    48,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    89,     0,
     0,     0,    80,     0,     0,     0,     0,     0,     0,     0,
     0,    90,    51,     0,     0,    91,   717,   721,     0,   844,
     0,     0,   851,     0,   853,   854,     0,   855,    58,   857,
   858,    92,    93,    94,   861,   863,     0,     0,     0,   866,
     0,   867,   868,     0,     0,   870,   872,     0,   577,   577,
   907,     0,   577,   577,     0,     0,     0,    80,     0,   842,
   844,     0,   913,     0,   914,     0,     0,     0,    80,     0,
     0,     0,     0,     0,     0,     0,   228,    86,   228,     0,
     0,     0,   228,   577,   123,     0,   213,   577,     0,     0,
   577,   577,   124,   125,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   844,   214,    80,
     0,   215,   216,   217,     0,   264,     0,     0,     0,     0,
     0,     0,     0,     0,   577,     0,     0,     0,     0,     0,
     0,   918,     0,     0,     0,   919,   228,     0,   920,   921,
     0,    48,   219,   220,     0,     0,     0,     0,   926,     0,
     0,    89,     0,    80,     0,     0,     0,     0,     0,     0,
     0,     0,     3,     0,    90,    51,     0,     0,    91,     0,
     0,   127,     0,     4,     5,     6,     7,     0,     0,     0,
     0,    58,   128,   221,    92,    93,    94,     8,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     9,    22,
     0,    10,     0,   150,     0,    24,    25,     0,   968,     0,
   123,     0,    26,     0,    27,    28,    29,    30,   124,   125,
    31,    32,    33,    34,     0,    35,    36,    37,   717,    38,
    39,     0,   717,     0,    40,    41,     0,    42,    43,    44,
     0,   151,  1003,     0,    46,  1005,     0,     0,    47,     0,
     0,     0,     0,    11,    12,    13,     0,    14,    15,    16,
    17,    18,   844,    19,    20,     0,   844,    48,    49,    50,
   717,     0,     0,     0,     0,     0,     0,    89,     0,     0,
     0,  1037,     0,  1038,     0,  1039,     0,     0,     0,     0,
    90,   152,     0,     0,    91,     0,    52,   153,    53,    54,
    55,    56,    57,   844,     0,     0,     0,    58,   128,    59,
    92,    93,    94,    22,     0,     0,     0,   150,     0,    24,
    25,     0,     0,     0,   123,     0,   315,     0,    27,    28,
    29,    30,   124,   125,    31,    32,    33,    34,     0,    35,
    36,    37,     0,    38,    39,     0,     0,     0,   316,    41,
     0,   317,   289,   318,     0,   319,     0,     0,    46,     0,
     0,     0,    47,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   320,   321,     0,     0,     0,     0,     0,     0,
     0,    89,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    90,   152,     0,     0,    91,     0,
    52,   153,    53,    54,    55,    56,    57,     0,     0,     0,
     0,    58,   128,   292,    92,    93,    94,    22,     0,     0,
     0,   150,     0,    24,    25,     0,     0,     0,   123,     0,
   315,     0,    27,    28,    29,    30,   124,   125,    31,    32,
    33,    34,     0,    35,    36,    37,     0,    38,    39,     0,
     0,     0,   495,    41,     0,   496,   289,   497,     0,   319,
     0,     0,    46,     0,     0,     0,    47,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,   498,   321,     0,     0,
     0,     0,     0,     0,     0,    89,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    90,   152,
     0,     0,    91,     0,    52,   153,    53,    54,    55,    56,
    57,     0,     0,     0,     0,    58,   128,   292,    92,    93,
    94,    22,     0,     0,     0,   150,     0,    24,    25,     0,
     0,     0,   123,     0,    26,     0,    27,    28,    29,    30,
   124,   125,    31,    32,    33,    34,     0,    35,    36,    37,
     0,    38,    39,     0,     0,     0,   526,    41,     0,   527,
    43,   528,     0,   151,     0,     0,    46,     0,     0,     0,
    47,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    48,
   529,    50,     0,     0,     0,     0,     0,     0,     0,    89,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    90,   152,     0,    87,    91,     0,    52,   153,
    53,    54,    55,    56,    57,     0,     0,     0,     0,    58,
   128,    59,    92,    93,    94,    22,     0,     0,     0,    23,
     0,    24,    25,     0,     0,     0,   889,     0,    26,     0,
    27,    28,    29,    30,     0,     0,    31,    32,    33,    34,
     0,    35,    36,    37,     0,    38,    39,     0,     0,     0,
    40,    41,    48,    42,    43,    44,     0,   351,     0,     0,
    46,     0,    89,     0,    47,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    90,    51,     0,     0,    91,
     0,     0,     0,    48,    49,    50,     0,     0,     0,     0,
     0,     0,    58,    89,     0,   890,    93,    94,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    51,     0,     0,
     0,     0,    52,     0,    53,    54,    55,    56,    57,     0,
    22,     0,     0,    58,    23,    59,    24,    25,     0,     0,
     0,     0,     0,    26,     0,    27,    28,    29,    30,     0,
     0,    31,    32,    33,    34,     0,    35,    36,    37,     0,
    38,    39,     0,     0,     0,    40,    41,     0,    42,    43,
    44,    86,    45,     0,     0,    46,     0,     0,    87,    47,
   286,     0,   168,    28,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    48,    49,
    50,     0,   287,    41,     0,   288,   289,   290,    86,   291,
     0,     0,     0,     0,     0,   123,     0,   213,     0,     0,
     0,     0,    51,   124,   125,     0,     0,    52,     0,    53,
    54,    55,    56,    57,     0,    48,   219,   220,    58,   414,
    59,     0,   415,   216,   416,    89,   264,     0,     0,     0,
     0,     0,     0,     0,    86,     0,     0,     0,    90,    51,
     0,   123,    91,   213,   178,     0,     0,     0,     0,   124,
   125,     0,    48,   417,   220,    58,     0,   292,    92,    93,
    94,     0,    89,     0,     0,   214,     0,     0,   215,   216,
   217,    86,   507,     0,     0,    90,    51,     0,   123,    91,
   213,     0,   127,     0,     0,     0,   124,   125,     0,     0,
     0,     0,    58,   128,   221,    92,    93,    94,    48,   219,
   220,     0,   414,     0,     0,   415,   216,   416,    89,   507,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    90,    51,     0,     0,    91,     0,     0,   153,     0,
     0,     0,     0,     0,     0,    48,   417,   220,    58,   128,
   221,    92,    93,    94,     0,    89,     0,     0,     0,     0,
     0,     0,     0,     0,    86,     0,     0,     0,    90,    51,
     0,    87,    91,     0,     0,   153,    28,     0,     0,     0,
     0,     0,     0,     0,     0,    58,   128,   221,    92,    93,
    94,     0,     0,     0,     0,    40,    41,     0,    42,    43,
    44,    86,   303,     0,     0,   304,     0,   305,    87,     0,
   213,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    48,   346,
     0,     0,   214,     0,     0,   215,   216,   217,   367,   474,
     0,     0,   304,     0,   305,     0,     0,     0,     0,     0,
     0,    90,   306,     0,     0,    91,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,   219,   220,    58,   128,
   368,    92,    93,    94,     0,    89,     0,     0,     0,     0,
     0,     0,     0,     0,    86,     0,     0,     0,    90,   306,
     0,    87,    91,   213,     0,    86,     0,     0,     0,     0,
     0,     0,    87,     0,   213,    58,   128,   221,    92,    93,
    94,     0,     0,     0,     0,   414,     0,     0,   415,   216,
   416,     0,   474,     0,     0,   304,   214,   305,     0,   215,
   216,   217,     0,   640,     0,     0,   304,     0,   305,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    48,   417,
   220,     0,     0,     0,     0,     0,     0,     0,    89,    48,
   219,   220,     0,     0,     0,     0,     0,    86,     0,    89,
     0,    90,   306,     0,    87,    91,     0,     0,    86,     0,
     0,     0,    90,    51,     0,    87,    91,   213,    58,   128,
   221,    92,    93,    94,     0,     0,     0,     0,     0,    58,
     0,   221,    92,    93,    94,   479,     0,     0,   304,   414,
   305,     0,   415,   216,   416,    86,   640,     0,     0,   304,
     0,   305,    87,     0,   213,     0,     0,     0,     0,     0,
     0,    48,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    89,    48,   417,   220,     0,   414,     0,     0,   415,
   216,   416,    89,   465,    90,    51,     0,     0,    91,     0,
     0,    86,     0,     0,     0,    90,    51,     0,    87,    91,
   213,    58,   128,     0,    92,    93,    94,     0,     0,    48,
   417,   220,    58,     0,   221,    92,    93,    94,     0,    89,
     0,     0,   627,     0,     0,   628,   216,   629,    86,   465,
     0,     0,    90,   152,     0,    87,    91,   213,   178,    86,
     0,     0,     0,     0,     0,     0,    87,     0,   213,    58,
     0,   221,    92,    93,    94,    48,   630,   220,     0,   414,
     0,     0,   415,   216,   416,    89,   218,     0,     0,     0,
   214,     0,     0,   215,   216,   217,    86,   788,    90,    51,
     0,     0,    91,    87,   178,   213,     0,     0,     0,     0,
     0,     0,    48,   417,   220,    58,     0,   221,    92,    93,
    94,     0,    89,    48,   219,   220,     0,   627,     0,     0,
   628,   216,   629,    89,   218,    90,    51,     0,     0,    91,
     0,     0,    86,     0,     0,     0,    90,    51,     0,    87,
    91,   213,    58,     0,   221,    92,    93,    94,     0,     0,
    48,   630,   220,    58,     0,   221,    92,    93,    94,     0,
    89,     0,     0,   214,     0,     0,   215,   216,   217,    86,
   883,     0,     0,    90,    51,     0,    87,    91,   213,     0,
    86,     0,     0,     0,     0,     0,     0,    87,     0,   213,
    58,     0,   221,    92,    93,    94,    48,   219,   220,     0,
   214,     0,     0,   215,   216,   217,    89,   885,     0,     0,
     0,   934,     0,     0,   935,   216,   416,    86,   218,    90,
    51,     0,     0,    91,    87,     0,   213,     0,     0,     0,
     0,     0,     0,    48,   219,   220,    58,     0,   221,    92,
    93,    94,     0,    89,    48,   936,   220,     0,   938,     0,
     0,   939,   216,   416,    89,   218,    90,    51,     0,     0,
    91,     0,     0,    86,     0,     0,     0,    90,    51,     0,
    87,    91,   213,    58,     0,   221,    92,    93,    94,     0,
     0,    48,   940,   220,    58,     0,   221,    92,    93,    94,
     0,    89,     0,     0,   214,     0,     0,   215,   216,   217,
    86,   943,     0,     0,    90,    51,     0,    87,    91,   213,
     0,     0,     0,     0,     0,     0,    87,     0,     0,     0,
     0,    58,     0,   221,    92,    93,    94,    48,   219,   220,
     0,   981,     0,     0,   982,   216,   416,    89,   218,     0,
     0,     0,     0,     0,     0,    87,    86,    88,     0,     0,
    90,    51,     0,    87,    91,     0,     0,     0,    28,     0,
     0,     0,     0,     0,    48,   983,   220,    58,     0,   221,
    92,    93,    94,    48,    89,     0,    88,    40,    41,     0,
    42,    43,    44,    89,   649,     0,     0,    90,    51,     0,
     0,    91,    87,     0,     0,     0,    90,    51,     0,    87,
    91,     0,    48,     0,    58,     0,   221,    92,    93,    94,
    48,   346,    89,    58,     0,     0,  1041,    93,    94,     0,
    89,     0,     0,    88,     0,    90,    51,     0,     0,    91,
    88,    87,     0,    90,    51,     0,     0,    91,    87,     0,
     0,     0,    58,     0,     0,  1042,    93,    94,     0,    48,
    58,     0,     0,    92,    93,    94,    48,     0,     0,    89,
     0,     0,    88,     0,     0,     0,    89,     0,     0,    88,
     0,     0,    90,    51,     0,     0,    91,    87,     0,    90,
    51,     0,     0,    91,     0,    87,     0,     0,    48,    58,
     0,     0,  1045,    93,    94,    48,    58,     0,    89,  1046,
    93,    94,     0,     0,     0,    89,     0,     0,    88,     0,
     0,    90,    51,     0,    87,    91,    88,     0,    90,    51,
     0,     0,    91,     0,     0,     0,     0,     0,    58,     0,
     0,  1078,    93,    94,    48,    58,     0,     0,  1081,    93,
    94,     0,    48,     0,    89,    88,     0,     0,     0,     0,
     0,     0,    89,     0,     0,     0,     0,    90,    51,     0,
     0,    91,     0,     0,     0,    90,    51,     0,     0,    91,
     0,    48,     0,     0,    58,     0,     0,  1082,    93,    94,
     0,    89,    58,     0,     0,  1083,    93,    94,     0,     0,
     0,     0,     0,     0,    90,    51,     0,     0,    91,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    58,     0,     0,  1108,    93,    94
};

static const short yycheck[] = {    13,
   143,    90,    91,   196,    49,    50,   303,   304,   305,    15,
   111,   147,    14,   202,    45,   172,    45,   172,    14,    33,
   362,     1,    45,    23,   553,    36,    45,    36,   341,   186,
    36,   186,     2,   122,    45,    13,    45,     2,    45,     1,
    88,    12,    45,    17,    45,   202,    45,   202,    45,    52,
    81,    45,    71,     9,    10,    11,    12,    17,    14,    15,
    16,    17,    18,    19,    95,    45,    59,   481,   482,   483,
   484,   485,   149,    66,    88,    45,    46,   407,   126,   409,
   111,    46,   412,    45,    95,   114,    86,   111,    95,   113,
    45,   114,   111,   100,     8,   143,    74,    75,   143,    77,
   111,    81,   111,   151,   111,    83,    84,     1,    82,    36,
   112,     1,   126,   114,   116,    95,   112,   111,    48,    46,
   116,    99,    82,   200,   281,    45,   283,   127,   283,   143,
    36,   111,    36,   133,    45,   149,    36,   151,   151,    45,
   153,   134,   135,   136,   137,    45,   146,   111,   151,   111,
   150,    45,   151,   342,   153,    45,   111,    46,   172,    36,
   116,   117,   118,   119,   120,   254,    17,   181,   697,   698,
   218,    45,   186,   187,   177,   178,    80,   474,   148,    93,
    94,   151,   479,   148,   341,   342,   200,   342,   202,    95,
    46,   111,    17,   490,    45,    95,    45,    45,    36,    36,
    48,    95,    50,    80,   218,   111,    95,   177,    45,   208,
    15,   111,   177,   183,   184,   185,   264,   111,   183,   184,
   185,    45,   192,   193,   194,   195,   303,   192,   193,   194,
   195,    82,    81,    36,    46,    45,   206,   207,    51,    95,
    78,   255,    45,   291,    46,    50,    95,    71,   262,   263,
   264,   100,   549,     2,   210,   303,   270,    82,    95,    17,
   274,   275,   111,   593,   112,   595,    46,   597,   598,    46,
    46,   319,   272,   273,   111,   320,   321,   291,   326,    17,
    93,    94,    31,    95,   111,    95,   113,   111,   291,   303,
   304,   305,    95,    95,   823,    36,    45,    46,    46,   292,
   377,   111,    51,    52,    45,   319,   319,    45,   111,    17,
    59,    46,   326,   326,    45,    95,   319,    66,    95,    95,
   319,   111,   335,   336,    82,    36,    45,   326,   342,   486,
   300,   486,    80,   469,    45,   300,   335,   336,    46,    88,
    89,   111,    17,   640,    82,   642,   688,   689,   351,   319,
   343,   344,   351,   666,    95,   358,   653,    46,    36,    46,
    95,   375,   555,   377,    45,   779,   780,   781,   338,    51,
   111,    46,    45,   338,    82,    38,    95,   126,    41,   515,
    43,   351,    45,   376,    95,   134,   135,   136,   137,    45,
   139,   405,   111,   142,   143,    45,    45,   474,    46,   148,
   111,    50,   151,   152,    78,    79,    95,    82,    95,    72,
   487,    93,    94,    17,    95,    93,    94,   465,    81,   100,
    17,    45,    95,   172,   953,   954,   474,    45,   177,   178,
   111,   479,    95,   182,   183,   184,   185,   100,   111,   188,
    45,    46,    46,   192,   193,   194,   195,    95,   111,    46,
    45,   465,   201,   498,   203,   204,   205,   206,   207,   507,
   474,     1,   465,    45,    46,   479,   602,   544,   468,   218,
     1,   464,   486,   487,    78,    79,     7,   491,    82,    19,
   229,    45,    46,    14,   529,    82,    45,    46,   801,    45,
    95,   505,    45,   507,   507,   509,    45,    15,    38,    39,
    95,    41,    42,    43,    48,    45,   111,    46,   507,   666,
    45,    36,    46,    95,    45,   264,   111,    48,    36,    50,
   111,    36,   113,    99,    38,    45,    51,    41,   531,   111,
   544,    95,    72,   547,     7,    45,    95,    46,   674,    95,
    71,    14,   291,   292,    46,    38,    95,   111,    41,    45,
    81,   300,   111,     1,   303,   111,    95,   306,    72,     7,
    95,    95,   111,    94,    95,    46,    14,    98,    93,    94,
   319,   111,    45,   113,   323,    95,   111,   326,    93,    94,
   111,   112,    46,   114,   115,   116,    95,   557,   558,   338,
    17,   111,   640,    95,   343,   344,   345,    45,    71,    95,
    48,   649,   351,  1036,   917,    17,    46,   904,    81,   358,
    38,   360,   925,    41,    95,   111,    17,    37,   367,    46,
   777,    94,    95,    71,    36,    98,   640,   376,   642,    93,
    94,    17,   775,    81,    46,   649,  1069,   386,   111,    36,
    46,   114,   115,   116,   801,    46,    94,    95,    38,   738,
    98,    41,   622,    93,    94,    82,    45,   622,   971,    45,
    46,    46,    17,   111,   678,   679,   114,   115,   116,    17,
    82,    46,   985,   388,     1,   390,   391,   392,   393,   394,
   395,    82,   397,   398,    38,   400,   401,    41,    36,    95,
    45,    46,    78,    79,    45,   709,    82,    16,    46,    18,
    19,   671,    17,   452,   453,   454,   671,    17,    36,   458,
   459,   460,   111,   462,   113,   464,   465,    46,   467,    38,
    39,    48,    41,    42,    43,   474,    45,    82,    17,    46,
   479,    46,    15,    17,    82,    46,    46,   486,    38,    95,
   788,    41,    46,   791,    36,   793,    74,    75,    15,    77,
    14,    46,   708,    36,   768,    83,    84,    46,   507,    46,
   917,   510,    46,    78,    79,   149,    95,    82,   925,    36,
   519,    99,    82,    46,   788,    46,   776,   791,    95,   793,
    46,    45,   531,    46,    95,   534,    78,    74,    75,  1086,
    77,    95,    36,    82,   113,   931,    83,    84,    82,    47,
    95,    75,   186,    77,    46,    46,    50,    71,   557,   558,
    38,    46,    99,    41,   971,    46,   200,    81,   202,    36,
    50,    15,    95,    46,    95,    46,    95,    46,   985,    95,
    94,    95,    95,    50,    98,   883,    51,   885,    46,   809,
    46,   889,    36,    46,   809,    93,    94,   111,   862,    46,
   114,   115,   116,    95,    95,   604,   605,   871,    46,   608,
    95,   113,   611,    46,    95,    49,   615,    15,   617,   883,
   619,   885,    95,   622,    95,   889,    95,   626,    93,    94,
    15,     2,   631,    46,   268,   269,    46,    95,    36,    95,
    15,   640,    95,    95,   864,   943,    46,    46,    95,   864,
   649,    36,    50,     1,    46,   875,    46,    95,    46,     7,
   875,    36,    95,    46,   928,    38,    14,    99,    41,   303,
   304,   305,   671,   937,    45,    46,    46,   941,   942,   943,
    51,    52,    95,    46,   111,    95,   113,    16,    46,    18,
    19,   955,   956,   957,    46,    95,   916,    45,    37,    46,
    48,   916,    50,    95,   669,   670,    28,    95,   342,    38,
    39,    46,    41,    42,    43,    36,    45,    88,    89,    80,
   984,    46,    46,    71,   723,   724,   725,    93,    94,    46,
    46,    36,    95,    81,   998,   999,    46,    95,   703,   704,
   960,   706,   707,   377,   743,   960,    94,    95,    95,   748,
    98,    46,    49,    46,   753,   126,    46,    11,    46,    46,
    95,    50,    38,   111,   112,    41,   114,   115,   116,    46,
    95,    95,   143,   111,   773,   113,   775,   148,    95,    95,
   151,   152,    85,    86,   113,    95,    35,    35,    46,   788,
    78,    79,   791,     4,   793,     6,    72,   796,   797,   798,
    95,   172,    95,    50,    35,    95,   177,   178,    95,    82,
   809,   182,   183,   184,   185,    38,    93,    94,    41,    46,
  1040,   192,   193,   194,   195,    82,    75,    75,    77,    77,
   201,    46,   203,   204,   205,   206,   207,    75,    76,    77,
   474,   840,   841,     1,    75,    49,    77,   218,    75,     7,
    77,  1115,  1116,   487,  1118,  1119,    14,    46,   229,    74,
    75,    76,    77,  1127,    36,   864,  1130,  1131,  1132,    16,
    95,    18,    19,    85,    86,    46,   875,    16,  1142,    18,
    19,    46,    38,    78,   883,    41,   885,    45,    49,   888,
   889,    38,    39,   264,    41,    42,    43,    77,    45,    38,
    39,    77,    41,    42,    43,    46,    45,    78,    79,    11,
   544,    95,     7,    71,    46,   549,    72,   916,    46,    14,
   291,    46,    46,    81,    36,    72,    73,    22,    23,   300,
    48,     8,   303,    77,    48,   306,    94,    95,   268,   269,
    98,    95,    46,    75,   943,    77,    46,    75,   319,    77,
    45,    32,   323,   111,    46,   326,   114,   115,   116,    95,
    46,   960,    74,    75,    76,    77,   113,   338,    16,    45,
    18,    19,    83,    84,   113,    75,    71,    77,    46,    46,
   351,    46,    45,    75,    36,    77,    81,   358,    99,   360,
    38,    39,     2,    41,    42,    43,   367,    45,    77,    94,
    95,    46,    95,    98,   550,    49,   101,    46,   642,  1008,
  1009,    46,    50,  1012,  1013,   386,   111,   112,    46,   114,
   115,   116,     7,    11,    50,    88,    89,    46,    46,    14,
    74,    75,    46,    77,    19,    45,    46,    46,    95,    83,
    84,    51,    52,    51,  1043,    95,    46,    16,  1047,    18,
    19,  1050,  1051,    38,    39,    99,    41,    42,    43,    36,
    45,    48,    46,   126,    46,   113,    75,    46,    77,    38,
    39,    46,    41,    42,    43,    75,    45,    77,    88,    89,
   143,    74,    75,    76,    77,  1084,    71,    72,   151,    46,
    74,    75,    76,    77,   465,    46,    81,    46,    46,    74,
    75,    76,    77,   474,    78,     7,    77,    45,   479,    94,
    95,    36,    14,    98,   177,   486,   126,    46,    45,   665,
    22,    23,   668,    14,    36,    49,   111,    49,    46,   114,
   115,   116,    45,   143,    49,    48,   507,    50,   148,   510,
    49,   151,   152,    45,   113,    74,    75,    76,    77,   695,
    74,    75,    76,    77,    45,   218,    74,    75,    76,    77,
   531,    51,   172,   534,    51,    51,   229,   177,   178,    71,
    46,    45,   182,   183,   184,   185,     4,     5,     6,    81,
    71,    48,   192,   193,   194,   195,   557,   558,    46,    46,
    81,    46,    94,    95,    46,    95,    98,    41,    36,   101,
    51,   264,    49,    94,    95,     2,    46,    98,   218,   111,
   112,    46,   114,   115,   116,    46,    46,    37,    45,   229,
   111,    46,    48,   114,   115,   116,   114,    46,   291,    46,
    85,    86,    87,    88,    89,    90,    46,    46,    93,    94,
   303,    46,    37,    74,    75,    76,    77,    51,    45,    46,
    46,   622,    51,    46,   264,    52,   319,    74,    75,    76,
    77,    45,    45,   326,   810,    77,    45,    45,     7,   640,
   904,    83,    84,    46,    46,    14,    50,    75,   649,    77,
    50,   291,    50,    22,    23,    83,    84,    99,   351,   239,
   300,    88,    89,   303,    46,   358,   306,   360,    36,    19,
   671,    99,    46,    46,   367,    51,    45,    49,    45,   319,
    50,    49,    45,   323,    50,    50,   326,    45,    38,    39,
    50,    41,    42,    43,    45,    45,    45,    50,   338,   126,
    46,    46,    71,    50,    46,    95,    74,    75,    76,    77,
    95,   351,    81,    56,    41,    95,   143,    95,   358,    41,
   360,   148,    72,    46,   151,    94,    95,   367,    46,    98,
    51,    51,    74,    75,    76,    77,    51,    80,    81,    46,
    46,    95,   111,   112,    46,   114,   115,   116,    91,    92,
   177,   178,    95,    96,    97,   182,   183,   184,   185,    46,
    95,   111,    95,   113,    95,   192,   193,   194,   195,    49,
    41,    46,   465,    51,   775,    85,    86,    87,    88,    89,
    90,   474,    46,    93,    94,    51,   479,   788,    51,    46,
   791,   218,   793,    46,    74,    75,    76,    77,    46,   975,
    51,    78,   229,   979,   980,   114,   114,    46,   809,   114,
    74,    75,    76,    77,   507,   114,    56,    46,    46,   995,
   996,   997,    49,    46,    46,   465,    95,   407,    45,   409,
    51,    51,   412,    46,   474,    46,    46,   264,   531,   479,
    80,    81,    46,    46,  1020,    46,   486,    74,    75,    76,
    77,    91,    92,    93,    94,    95,    96,    97,  1034,  1035,
    46,    46,   114,   864,   291,   114,    50,   507,    49,   114,
     7,   114,    50,   300,   875,    46,   303,    14,    50,    16,
    50,    46,   883,    46,   885,    46,    46,    46,   889,   114,
    19,   531,   319,    74,    75,    76,    77,    51,    50,   326,
    50,    38,    50,    50,    41,    42,    43,    50,    45,    38,
    39,   338,    41,    42,    43,   916,    51,    51,    51,    51,
    74,    75,    76,    77,   351,    51,    51,    51,    51,    51,
     0,   358,     0,   360,    71,    72,    73,   403,   100,   555,
   367,   577,   943,   693,    81,   486,   651,   640,   624,  1125,
  1126,   514,  1128,  1129,    -1,    -1,   649,    94,    95,   960,
  1136,    98,    -1,  1139,  1140,  1141,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   111,  1151,   113,   114,   115,   116,
    -1,    -1,   622,    -1,    -1,    -1,    -1,    -1,    -1,    14,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,
   640,   581,    -1,   583,    -1,    -1,   586,    -1,    -1,   649,
    -1,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
    45,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,
    -1,   671,    -1,    -1,    -1,    -1,    -1,    -1,   465,  1040,
    -1,    -1,    -1,    -1,    -1,    -1,    71,   474,    -1,    -1,
    -1,    -1,   479,    -1,    -1,    -1,    81,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,
    95,  1072,    -1,    98,    -1,   655,   656,   657,    -1,    -1,
   507,    -1,    -1,    71,    -1,    -1,   111,    -1,    -1,   114,
   115,   116,    -1,    81,    -1,   788,     7,    -1,   791,    -1,
   793,    -1,    -1,    14,   531,    -1,    94,    95,    -1,    -1,
    98,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,   460,
    -1,    -1,    -1,   111,    -1,    -1,   114,   115,   116,    -1,
    -1,   711,    -1,   713,    45,   775,   716,    48,   718,    50,
   720,    -1,   722,   723,   724,   725,    -1,    -1,   788,   729,
    -1,   791,   732,   793,    -1,    -1,    -1,   737,    -1,    -1,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   809,
    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   581,    -1,   583,    94,    95,   586,    -1,    98,    -1,    -1,
   883,    -1,   885,    -1,    -1,   622,   889,    -1,   599,    -1,
   111,   112,    -1,   114,   115,   116,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   640,    -1,    -1,   796,   797,   798,    -1,
   800,    -1,   649,    -1,   864,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   875,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   883,   671,   885,    -1,    -1,    -1,   889,
   943,   831,    -1,    -1,    -1,   656,   657,    56,    -1,    -1,
   840,   841,    -1,   843,   605,   845,   607,   608,    -1,   610,
   611,    -1,   613,    -1,    -1,   616,   916,   618,   619,    -1,
   621,    80,    81,    -1,    -1,    -1,    85,    86,    87,    88,
    89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
    -1,    -1,    -1,   943,     7,    -1,    -1,    -1,   888,    -1,
   711,    14,    -1,    -1,    -1,   716,    -1,   718,    -1,   720,
   960,   722,    -1,   724,   725,    -1,    -1,    -1,   729,    -1,
    -1,   732,    -1,    -1,    -1,    -1,   737,    -1,    -1,    -1,
    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,   775,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   788,    -1,    -1,   791,    -1,   793,    -1,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
    -1,    -1,   809,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    94,    95,    -1,    -1,    98,   797,   798,    -1,   800,
    -1,    -1,   743,    -1,   745,   746,    -1,   748,   111,   750,
   751,   114,   115,   116,   755,   756,    -1,    -1,    -1,   760,
    -1,   762,   763,    -1,    -1,   766,   767,    -1,  1008,  1009,
   831,    -1,  1012,  1013,    -1,    -1,    -1,   864,    -1,   840,
   841,    -1,   843,    -1,   845,    -1,    -1,    -1,   875,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   883,     7,   885,    -1,
    -1,    -1,   889,  1043,    14,    -1,    16,  1047,    -1,    -1,
  1050,  1051,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   888,    38,   916,
    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1084,    -1,    -1,    -1,    -1,    -1,
    -1,   852,    -1,    -1,    -1,   856,   943,    -1,   859,   860,
    -1,    71,    72,    73,    -1,    -1,    -1,    -1,   869,    -1,
    -1,    81,    -1,   960,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     9,    -1,    94,    95,    -1,    -1,    98,    -1,
    -1,   101,    -1,    20,    21,    22,    23,    -1,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   116,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,     3,
    -1,    48,    -1,     7,    -1,     9,    10,    -1,   929,    -1,
    14,    -1,    16,    -1,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    -1,    29,    30,    31,  1009,    33,
    34,    -1,  1013,    -1,    38,    39,    -1,    41,    42,    43,
    -1,    45,   963,    -1,    48,   966,    -1,    -1,    52,    -1,
    -1,    -1,    -1,   100,   101,   102,    -1,   104,   105,   106,
   107,   108,  1043,   110,   111,    -1,  1047,    71,    72,    73,
  1051,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,
    -1,  1002,    -1,  1004,    -1,  1006,    -1,    -1,    -1,    -1,
    94,    95,    -1,    -1,    98,    -1,   100,   101,   102,   103,
   104,   105,   106,  1084,    -1,    -1,    -1,   111,   112,   113,
   114,   115,   116,     3,    -1,    -1,    -1,     7,    -1,     9,
    10,    -1,    -1,    -1,    14,    -1,    16,    -1,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
    30,    31,    -1,    33,    34,    -1,    -1,    -1,    38,    39,
    -1,    41,    42,    43,    -1,    45,    -1,    -1,    48,    -1,
    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
   100,   101,   102,   103,   104,   105,   106,    -1,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   116,     3,    -1,    -1,
    -1,     7,    -1,     9,    10,    -1,    -1,    -1,    14,    -1,
    16,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    -1,    29,    30,    31,    -1,    33,    34,    -1,
    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    -1,    -1,    98,    -1,   100,   101,   102,   103,   104,   105,
   106,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
   116,     3,    -1,    -1,    -1,     7,    -1,     9,    10,    -1,
    -1,    -1,    14,    -1,    16,    -1,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
    -1,    33,    34,    -1,    -1,    -1,    38,    39,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,
    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    -1,    14,    98,    -1,   100,   101,
   102,   103,   104,   105,   106,    -1,    -1,    -1,    -1,   111,
   112,   113,   114,   115,   116,     3,    -1,    -1,    -1,     7,
    -1,     9,    10,    -1,    -1,    -1,    45,    -1,    16,    -1,
    18,    19,    20,    21,    -1,    -1,    24,    25,    26,    27,
    -1,    29,    30,    31,    -1,    33,    34,    -1,    -1,    -1,
    38,    39,    71,    41,    42,    43,    -1,    45,    -1,    -1,
    48,    -1,    81,    -1,    52,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,
    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
    -1,    -1,   111,    81,    -1,   114,   115,   116,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,
    -1,    -1,   100,    -1,   102,   103,   104,   105,   106,    -1,
     3,    -1,    -1,   111,     7,   113,     9,    10,    -1,    -1,
    -1,    -1,    -1,    16,    -1,    18,    19,    20,    21,    -1,
    -1,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
    33,    34,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
    43,     7,    45,    -1,    -1,    48,    -1,    -1,    14,    52,
    16,    -1,    18,    19,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,    -1,    38,    39,    -1,    41,    42,    43,     7,    45,
    -1,    -1,    -1,    -1,    -1,    14,    -1,    16,    -1,    -1,
    -1,    -1,    95,    22,    23,    -1,    -1,   100,    -1,   102,
   103,   104,   105,   106,    -1,    71,    72,    73,   111,    38,
   113,    -1,    41,    42,    43,    81,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    94,    95,
    -1,    14,    98,    16,   100,    -1,    -1,    -1,    -1,    22,
    23,    -1,    71,    72,    73,   111,    -1,   113,   114,   115,
   116,    -1,    81,    -1,    -1,    38,    -1,    -1,    41,    42,
    43,     7,    45,    -1,    -1,    94,    95,    -1,    14,    98,
    16,    -1,   101,    -1,    -1,    -1,    22,    23,    -1,    -1,
    -1,    -1,   111,   112,   113,   114,   115,   116,    71,    72,
    73,    -1,    38,    -1,    -1,    41,    42,    43,    81,    45,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    94,    95,    -1,    -1,    98,    -1,    -1,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    72,    73,   111,   112,
   113,   114,   115,   116,    -1,    81,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    94,    95,
    -1,    14,    98,    -1,    -1,   101,    19,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
    43,     7,    45,    -1,    -1,    48,    -1,    50,    14,    -1,
    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    -1,    -1,    38,    -1,    -1,    41,    42,    43,    81,    45,
    -1,    -1,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    94,    95,    -1,    -1,    98,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    72,    73,   111,   112,
   113,   114,   115,   116,    -1,    81,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    94,    95,
    -1,    14,    98,    16,    -1,     7,    -1,    -1,    -1,    -1,
    -1,    -1,    14,    -1,    16,   111,   112,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
    43,    -1,    45,    -1,    -1,    48,    38,    50,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    48,    -1,    50,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    71,
    72,    73,    -1,    -1,    -1,    -1,    -1,     7,    -1,    81,
    -1,    94,    95,    -1,    14,    98,    -1,    -1,     7,    -1,
    -1,    -1,    94,    95,    -1,    14,    98,    16,   111,   112,
   113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,   111,
    -1,   113,   114,   115,   116,    45,    -1,    -1,    48,    38,
    50,    -1,    41,    42,    43,     7,    45,    -1,    -1,    48,
    -1,    50,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    81,    71,    72,    73,    -1,    38,    -1,    -1,    41,
    42,    43,    81,    45,    94,    95,    -1,    -1,    98,    -1,
    -1,     7,    -1,    -1,    -1,    94,    95,    -1,    14,    98,
    16,   111,   112,    -1,   114,   115,   116,    -1,    -1,    71,
    72,    73,   111,    -1,   113,   114,   115,   116,    -1,    81,
    -1,    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,
    -1,    -1,    94,    95,    -1,    14,    98,    16,   100,     7,
    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    16,   111,
    -1,   113,   114,   115,   116,    71,    72,    73,    -1,    38,
    -1,    -1,    41,    42,    43,    81,    45,    -1,    -1,    -1,
    38,    -1,    -1,    41,    42,    43,     7,    45,    94,    95,
    -1,    -1,    98,    14,   100,    16,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,   111,    -1,   113,   114,   115,
   116,    -1,    81,    71,    72,    73,    -1,    38,    -1,    -1,
    41,    42,    43,    81,    45,    94,    95,    -1,    -1,    98,
    -1,    -1,     7,    -1,    -1,    -1,    94,    95,    -1,    14,
    98,    16,   111,    -1,   113,   114,   115,   116,    -1,    -1,
    71,    72,    73,   111,    -1,   113,   114,   115,   116,    -1,
    81,    -1,    -1,    38,    -1,    -1,    41,    42,    43,     7,
    45,    -1,    -1,    94,    95,    -1,    14,    98,    16,    -1,
     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    16,
   111,    -1,   113,   114,   115,   116,    71,    72,    73,    -1,
    38,    -1,    -1,    41,    42,    43,    81,    45,    -1,    -1,
    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,    94,
    95,    -1,    -1,    98,    14,    -1,    16,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    72,    73,   111,    -1,   113,   114,
   115,   116,    -1,    81,    71,    72,    73,    -1,    38,    -1,
    -1,    41,    42,    43,    81,    45,    94,    95,    -1,    -1,
    98,    -1,    -1,     7,    -1,    -1,    -1,    94,    95,    -1,
    14,    98,    16,   111,    -1,   113,   114,   115,   116,    -1,
    -1,    71,    72,    73,   111,    -1,   113,   114,   115,   116,
    -1,    81,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
     7,    45,    -1,    -1,    94,    95,    -1,    14,    98,    16,
    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,
    -1,   111,    -1,   113,   114,   115,   116,    71,    72,    73,
    -1,    38,    -1,    -1,    41,    42,    43,    81,    45,    -1,
    -1,    -1,    -1,    -1,    -1,    14,     7,    45,    -1,    -1,
    94,    95,    -1,    14,    98,    -1,    -1,    -1,    19,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,   111,    -1,   113,
   114,   115,   116,    71,    81,    -1,    45,    38,    39,    -1,
    41,    42,    43,    81,    45,    -1,    -1,    94,    95,    -1,
    -1,    98,    14,    -1,    -1,    -1,    94,    95,    -1,    14,
    98,    -1,    71,    -1,   111,    -1,   113,   114,   115,   116,
    71,    72,    81,   111,    -1,    -1,   114,   115,   116,    -1,
    81,    -1,    -1,    45,    -1,    94,    95,    -1,    -1,    98,
    45,    14,    -1,    94,    95,    -1,    -1,    98,    14,    -1,
    -1,    -1,   111,    -1,    -1,   114,   115,   116,    -1,    71,
   111,    -1,    -1,   114,   115,   116,    71,    -1,    -1,    81,
    -1,    -1,    45,    -1,    -1,    -1,    81,    -1,    -1,    45,
    -1,    -1,    94,    95,    -1,    -1,    98,    14,    -1,    94,
    95,    -1,    -1,    98,    -1,    14,    -1,    -1,    71,   111,
    -1,    -1,   114,   115,   116,    71,   111,    -1,    81,   114,
   115,   116,    -1,    -1,    -1,    81,    -1,    -1,    45,    -1,
    -1,    94,    95,    -1,    14,    98,    45,    -1,    94,    95,
    -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,   111,    -1,
    -1,   114,   115,   116,    71,   111,    -1,    -1,   114,   115,
   116,    -1,    71,    -1,    81,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    81,    -1,    -1,    -1,    -1,    94,    95,    -1,
    -1,    98,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,
    -1,    71,    -1,    -1,   111,    -1,    -1,   114,   115,   116,
    -1,    81,   111,    -1,    -1,   114,   115,   116,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   111,    -1,    -1,   114,   115,   116
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 149 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 179 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 180 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 186 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 187 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 189 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 200 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 201 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 209 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 210 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 212 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 215 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 217 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 221 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 222 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 227 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 230 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 237 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 245 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 350 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 351 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 357 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 358 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 360 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 361 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 368 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 374 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 375 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 379 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 382 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 385 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 391 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 395 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 401 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 409 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 420 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 423 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 64:
#line 436 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 65:
#line 441 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 66:
#line 445 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 67:
#line 451 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 68:
#line 452 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 69:
#line 458 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 70:
#line 463 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 71:
#line 468 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 72:
#line 477 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 73:
#line 485 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 74:
#line 496 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 75:
#line 509 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 76:
#line 510 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 77:
#line 511 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 516 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 79:
#line 520 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 80:
#line 524 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 81:
#line 528 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 82:
#line 532 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 536 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 542 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 85:
#line 544 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 86:
#line 547 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 87:
#line 552 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 88:
#line 563 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 89:
#line 564 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 90:
#line 565 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 91:
#line 568 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 92:
#line 569 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 93:
#line 570 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 94:
#line 578 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 95:
#line 582 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 96:
#line 586 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 591 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 597 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 602 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 100:
#line 609 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 101:
#line 615 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 102:
#line 626 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 103:
#line 627 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 104:
#line 628 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 105:
#line 633 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 106:
#line 640 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 107:
#line 643 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 108:
#line 644 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 653 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
										CSyntaxNode* tmp=yyval.tnode;
										tmp=NULL;
										;
    break;}
case 110:
#line 659 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 111:
#line 660 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 112:
#line 661 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 662 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 663 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 115:
#line 664 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 116:
#line 665 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 117:
#line 669 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 118:
#line 671 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 119:
#line 673 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 120:
#line 675 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 121:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 122:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 125:
#line 685 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 687 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 689 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 128:
#line 691 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 129:
#line 693 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 697 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 131:
#line 698 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 132:
#line 701 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 133:
#line 702 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 134:
#line 703 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 135:
#line 706 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 136:
#line 707 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 137:
#line 708 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 138:
#line 711 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 139:
#line 715 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 140:
#line 716 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 141:
#line 721 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, INTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 142:
#line 726 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, UINTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 143:
#line 731 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, FLOATPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 144:
#line 736 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,CHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 145:
#line 741 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,UCHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 146:
#line 746 "msv.y"
{ 
	      yyval.tnode=yyvsp[-1].tnode
	   ;
    break;}
case 147:
#line 752 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 148:
#line 753 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 149:
#line 754 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 150:
#line 760 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 151:
#line 761 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 152:
#line 763 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 153:
#line 765 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 154:
#line 767 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 155:
#line 769 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 156:
#line 770 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 157:
#line 776 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 158:
#line 777 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 159:
#line 779 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 160:
#line 781 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 161:
#line 786 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 162:
#line 787 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 163:
#line 791 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 164:
#line 792 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 165:
#line 796 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 166:
#line 797 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 167:
#line 801 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 168:
#line 802 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 169:
#line 803 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 170:
#line 804 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 171:
#line 805 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 807 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 808 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 809 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 810 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 811 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 177:
#line 812 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 813 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 814 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 815 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 181:
#line 816 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 182:
#line 819 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 183:
#line 820 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 184:
#line 821 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 185:
#line 822 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 186:
#line 823 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 187:
#line 824 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 188:
#line 825 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 189:
#line 826 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 190:
#line 829 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 191:
#line 830 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 192:
#line 834 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 193:
#line 835 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 194:
#line 836 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 195:
#line 837 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 196:
#line 844 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 197:
#line 848 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 198:
#line 856 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 199:
#line 868 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 200:
#line 872 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 201:
#line 881 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 202:
#line 893 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 203:
#line 897 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 905 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 205:
#line 908 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 206:
#line 909 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 207:
#line 914 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			   CSyntaxNode*tmp=yyval.tnode;
			   tmp=NULL;
			;
    break;}
case 208:
#line 920 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 209:
#line 924 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 210:
#line 929 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 211:
#line 932 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 212:
#line 941 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 213:
#line 942 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 214:
#line 943 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 215:
#line 946 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 216:
#line 947 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 217:
#line 950 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 218:
#line 951 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 219:
#line 954 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 220:
#line 955 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 221:
#line 956 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 222:
#line 957 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 223:
#line 958 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 224:
#line 959 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 225:
#line 962 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 226:
#line 963 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 227:
#line 964 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 228:
#line 965 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 229:
#line 966 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 230:
#line 967 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 231:
#line 969 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 232:
#line 970 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 233:
#line 972 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 234:
#line 973 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 235:
#line 975 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 236:
#line 983 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 237:
#line 984 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 238:
#line 985 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 239:
#line 986 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 240:
#line 987 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 241:
#line 993 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 242:
#line 995 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 243:
#line 996 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 244:
#line 999 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 245:
#line 1000 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 246:
#line 1001 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 1004 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 248:
#line 1005 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 249:
#line 1008 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 250:
#line 1009 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 251:
#line 1012 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 1013 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 1016 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 254:
#line 1017 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 255:
#line 1022 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 256:
#line 1023 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 257:
#line 1024 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 258:
#line 1025 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 259:
#line 1026 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 260:
#line 1027 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 261:
#line 1035 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 262:
#line 1036 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 263:
#line 1040 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 264:
#line 1041 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 265:
#line 1048 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 266:
#line 1052 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 267:
#line 1057 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 268:
#line 1063 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 269:
#line 1069 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 270:
#line 1075 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 271:
#line 1085 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 272:
#line 1091 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 273:
#line 1097 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 274:
#line 1103 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 275:
#line 1111 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 276:
#line 1115 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 277:
#line 1119 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 278:
#line 1125 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 279:
#line 1129 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 280:
#line 1133 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 281:
#line 1139 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 282:
#line 1145 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 283:
#line 1152 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 284:
#line 1158 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 285:
#line 1164 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 286:
#line 1168 "msv.y"
{
		  CSyntaxNode* pChild00=new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
		  CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, pChild00, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 287:
#line 1176 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 288:
#line 1181 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 289:
#line 1185 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 290:
#line 1189 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 291:
#line 1193 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 292:
#line 1199 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 293:
#line 1205 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 294:
#line 1211 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 295:
#line 1218 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 296:
#line 1226 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 297:
#line 1232 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 298:
#line 1247 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 299:
#line 1252 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 300:
#line 1257 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 301:
#line 1265 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 302:
#line 1272 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 303:
#line 1278 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 304:
#line 1284 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 305:
#line 1287 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 306:
#line 1297 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 307:
#line 1308 "msv.y"
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
case 308:
#line 1312 "msv.y"
{
	      yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].cString, NULL, STRUCTTYPE);
	   ;
    break;}
case 309:
#line 1315 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 310:
#line 1316 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1321 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 312:
#line 1334 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 313:
#line 1335 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 314:
#line 1343 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 315:
#line 1345 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 316:
#line 1352 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 317:
#line 1354 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 318:
#line 1360 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 319:
#line 1361 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 320:
#line 1365 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 321:
#line 1370 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 322:
#line 1375 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 323:
#line 1380 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 324:
#line 1387 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 325:
#line 1390 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 326:
#line 1391 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 327:
#line 1397 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 328:
#line 1399 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 329:
#line 1419 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 330:
#line 1420 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 331:
#line 1422 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 332:
#line 1424 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 333:
#line 1425 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 334:
#line 1431 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 335:
#line 1438 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 336:
#line 1446 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 337:
#line 1454 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 338:
#line 1458 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 339:
#line 1462 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 340:
#line 1468 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 341:
#line 1472 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 342:
#line 1478 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 343:
#line 1482 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 344:
#line 1489 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 345:
#line 1493 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 346:
#line 1497 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 347:
#line 1504 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 348:
#line 1508 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 349:
#line 1511 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 350:
#line 1516 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 351:
#line 1525 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 352:
#line 1526 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 353:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 354:
#line 1533 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 355:
#line 1537 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 356:
#line 1538 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 357:
#line 1543 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 358:
#line 1544 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1545 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 360:
#line 1546 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 361:
#line 1547 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 362:
#line 1550 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 363:
#line 1551 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 364:
#line 1552 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 365:
#line 1558 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 366:
#line 1559 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1560 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1562 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1563 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1564 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1566 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1567 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1568 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1569 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1571 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1572 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1573 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1574 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1575 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 380:
#line 1576 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 381:
#line 1577 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 382:
#line 1581 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 383:
#line 1582 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 384:
#line 1583 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 385:
#line 1584 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 386:
#line 1585 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 387:
#line 1586 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 388:
#line 1587 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1589 "msv.y"
