
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	IF	262
#define	ELSE	263
#define	EMPTY	264
#define	AWAIT	265
#define	PROJECTION	266
#define	PBEGIN	267
#define	PEND	268
#define	POINTERNULL	269
#define	ARRAY	270
#define	STRUCT	271
#define	DOT	272
#define	UNION	273
#define	FILEDECLARATION	274
#define	MORE	275
#define	DEFINE	276
#define	MY_TRUE	277
#define	MY_FALSE	278
#define	EXIST	279
#define	FRAME	280
#define	FOR	281
#define	WHILE	282
#define	DO	283
#define	TRUE	284
#define	FALSE	285
#define	REPEAT	286
#define	UNTIL	287
#define	DISPLAY	288
#define	SKIP	289
#define	THEN	290
#define	COMMA	291
#define	COLON	292
#define	INTDECLARATION	293
#define	STRDECLARATION	294
#define	POINTERDECLARATION	295
#define	CHARDECLARATION	296
#define	VOIDDECLARATION	297
#define	FLOATDECLARATION	298
#define	LISTDECLARATION	299
#define	OPEN_PAR	300
#define	CLOSE_PAR	301
#define	TIMES	302
#define	OPEN_BPAR	303
#define	CLOSE_BPAR	304
#define	OPEN_MPAR	305
#define	CLOSE_MPAR	306
#define	FUNCTION	307
#define	OVER	308
#define	CYLINDER	309
#define	OVEREP	310
#define	INTER_OR	311
#define	NON_DETERMINED	312
#define	SEND	313
#define	RECEIVE	314
#define	PROCESS	315
#define	CHANNEL	316
#define	PUT	317
#define	GET	318
#define	ERROR_TOKEN	319
#define	EXTERN	320
#define	UNSIGNED	321
#define	SIGNED	322
#define	CHOP	323
#define	OR	324
#define	PARALLEL	325
#define	AND	326
#define	ASS_P	327
#define	ASS_N	328
#define	CON	329
#define	ADDRESS	330
#define	BOOL_AND	331
#define	IMPLY	332
#define	IFF	333
#define	PROPIMPLY	334
#define	NE	335
#define	EQ	336
#define	GE	337
#define	LE	338
#define	GT	339
#define	LT	340
#define	LST	341
#define	RST	342
#define	ADD	343
#define	SUB	344
#define	MUL	345
#define	DIV	346
#define	MOD	347
#define	BNE	348
#define	BOOL_OR	349
#define	CHOPSTAR	350
#define	NEXT	351
#define	NEGATION	352
#define	LENGTH	353
#define	REQUEST	354
#define	FINAL	355
#define	KEEP	356
#define	ALWAYS	357
#define	HALT	358
#define	W_NEXT	359
#define	PREFIX	360
#define	SOMETIMES	361
#define	ID	362
#define	STRLITERAL	363
#define	STRUCT_TYPE	364
#define	INTLITERAL	365
#define	FLOATLITERAL	366
#define	CHARLITERAL	367

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1094
#define	YYFLAG		-32768
#define	YYNTBASE	113

#define YYTRANSLATE(x) ((unsigned)(x) <= 367 ? yytranslate[x] : 185)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   216,
   226,   228,   230,   238,   242,   244,   248,   250,   251,   256,
   262,   267,   272,   275,   278,   281,   284,   286,   289,   292,
   296,   300,   304,   308,   316,   325,   337,   351,   353,   355,
   357,   359,   361,   363,   366,   373,   378,   384,   390,   399,
   408,   411,   414,   417,   418,   425,   433,   434,   437,   441,
   443,   445,   447,   449,   453,   456,   458,   470,   483,   495,
   507,   525,   544,   562,   581,   601,   620,   638,   657,   675,
   677,   679,   681,   683,   694,   698,   700,   705,   711,   715,
   727,   740,   752,   764,   777,   781,   785,   788,   789,   792,
   795,   798,   806,   813,   818,   822,   824,   828,   832,   836,
   839,   845,   847,   850,   851,   853,   857,   859,   861,   863,
   865,   867,   869,   871,   873,   875,   877,   879,   881,   884,
   887,   889,   891,   893,   897,   899,   901,   903,   905,   907,
   909,   911,   913,   915,   917,   921,   923,   925,   929,   934,
   939,   944,   949,   954,   958,   962,   966,   967,   970,   973,
   976,   979,   982,   986,   991,   996,  1001,  1007,  1013,  1019,
  1025,  1031,  1038,  1044,  1050,  1057,  1063,  1070,  1078,  1085,
  1092,  1100,  1107,  1114,  1120,  1128,  1135,  1137,  1139,  1141,
  1143,  1145,  1147,  1149,  1152,  1155,  1157,  1159,  1163,  1166,
  1170,  1175,  1181,  1186,  1190,  1195,  1201,  1206,  1209,  1213,
  1218,  1221,  1225,  1230,  1235,  1241,  1249,  1254,  1258,  1264,
  1273,  1274,  1279,  1283,  1288,  1293,  1299,  1305,  1311,  1317,
  1324,  1334,  1335,  1343,  1353,  1362,  1368,  1373,  1376,  1379,
  1381,  1383,  1384,  1387,  1391,  1392,  1395,  1399,  1402,  1406,
  1409,  1411,  1415,  1417,  1419,  1421,  1423,  1427,  1428,  1431,
  1432,  1436,  1437,  1440,  1444,  1448,  1452,  1456,  1462,  1472,
  1474,  1476,  1477,  1479,  1480,  1482,  1483,  1491,  1499,  1505,
  1508,  1510,  1511,  1517,  1520,  1521,  1526,  1532,  1533,  1537,
  1542,  1548,  1553,  1559,  1564,  1565,  1569,  1573,  1578,  1583,
  1588,  1593,  1598,  1603,  1608,  1613,  1620,  1625,  1630,  1635,
  1642,  1646,  1650,  1655,  1659,  1660,  1664,  1668,  1672,  1676,
  1679
};

static const short yyrhs[] = {   114,
   117,     0,    12,   115,    13,     0,     0,   115,    71,   115,
     0,   115,    69,   115,     0,   115,    78,   115,     0,   115,
    79,   115,     0,   115,    68,   115,     0,   102,   115,     0,
   101,   115,     0,   106,   115,     0,   104,   115,     0,    96,
   115,     0,    34,     0,    22,     0,    23,     0,    98,   138,
     0,     9,     0,    20,     0,   103,   115,     0,   100,   115,
     0,    97,   115,     0,    48,   115,   116,    49,    11,    48,
   115,    49,     0,   107,     0,    21,   107,    37,   138,     0,
   115,    95,     0,    45,   115,    46,     0,    36,   115,   116,
     0,     0,   117,    71,   117,     0,   117,    69,   117,     0,
   117,    68,   117,     0,   128,     0,   123,     0,   174,     0,
   177,     0,   168,     0,   169,     0,   170,     0,    96,    45,
   117,    46,     0,   101,    45,   117,    46,     0,   102,    45,
   117,    46,     0,    10,    45,   138,    46,     0,    31,    48,
   117,    49,    32,    45,   138,    46,     0,    34,     0,     9,
     0,    20,     0,    98,    45,   138,    46,     0,   181,     0,
   179,     0,    29,     0,    30,     0,   100,    45,   117,    46,
     0,   117,    70,   117,     0,    45,   167,    46,    77,    50,
   117,    51,     0,    25,    45,   160,   165,    46,    71,    45,
   117,    46,     0,    48,   117,   166,    49,    11,   158,     0,
    48,   117,    49,    11,   158,     0,    52,   107,    45,   154,
    46,    48,   117,    49,     0,    21,   107,    45,   154,    46,
    72,    48,   119,    49,     0,   121,     0,   120,     0,    24,
   160,   155,    37,    48,   117,    49,     0,    45,   117,    46,
     0,   123,     0,   123,    71,   118,     0,   117,     0,     0,
   107,    45,   156,    46,     0,    65,   107,    45,   156,    46,
     0,   134,    45,   156,    46,     0,   122,    48,   118,    49,
     0,    16,   107,     0,    18,   107,     0,    67,   124,     0,
    66,   124,     0,   124,     0,   125,   126,     0,   109,   126,
     0,    16,   107,   126,     0,    18,   107,   126,     0,    16,
   109,   126,     0,    18,   109,   126,     0,    45,    90,   160,
    46,    45,   154,    46,     0,    45,    90,    90,   160,    46,
    45,   154,    46,     0,    45,    90,   107,    50,   138,   136,
    51,    46,    45,   154,    46,     0,    45,    90,   107,    50,
   138,   136,    51,    46,    45,   154,    46,    72,   144,     0,
    38,     0,    43,     0,    41,     0,    39,     0,    42,     0,
    19,     0,   160,   127,     0,   107,    50,   138,   136,    51,
   127,     0,   160,    72,   132,   127,     0,   107,    15,    72,
   144,   127,     0,   107,    15,    72,   161,   127,     0,   107,
    50,   138,   136,    51,    72,   144,   127,     0,   107,    50,
   138,   136,    51,    72,   161,   127,     0,    90,   126,     0,
    36,   126,     0,    36,     1,     0,     0,   107,    50,   138,
   136,    51,     0,     0,    36,   107,    50,   138,   136,    51,
     0,     0,     0,    36,     1,     0,   129,   131,   132,     0,
   160,     0,   183,     0,   134,     0,   137,     0,    45,   129,
    46,     0,    96,   129,     0,   130,     0,    45,    45,    41,
    90,    46,   110,    46,    50,   138,   136,    51,     0,    45,
    45,    66,    41,    90,    46,   110,    46,    50,   138,   136,
    51,     0,    45,    45,    38,    90,    46,   110,    46,    50,
   138,   136,    51,     0,    45,    45,    43,    90,    46,   110,
    46,    50,   138,   136,    51,     0,    45,    45,    41,    90,
    46,    45,    45,    41,    90,    46,   110,    46,    46,    50,
   138,   136,    51,     0,    45,    45,    41,    90,    46,    45,
    45,    66,    41,    90,    46,   110,    46,    46,    50,   138,
   136,    51,     0,    45,    45,    41,    90,    46,    45,    45,
    38,    90,    46,   110,    46,    46,    50,   138,   136,    51,
     0,    45,    45,    66,    41,    90,    46,    45,    45,    41,
    90,    46,   110,    46,    46,    50,   138,   136,    51,     0,
    45,    45,    66,    41,    90,    46,    45,    45,    66,    41,
    90,    46,   110,    46,    46,    50,   138,   136,    51,     0,
    45,    45,    66,    41,    90,    46,    45,    45,    38,    90,
    46,   110,    46,    46,    50,   138,   136,    51,     0,    45,
    45,    38,    90,    46,    45,    45,    41,    90,    46,   110,
    46,    46,    50,   138,   136,    51,     0,    45,    45,    38,
    90,    46,    45,    45,    66,    41,    90,    46,   110,    46,
    46,    50,   138,   136,    51,     0,    45,    45,    38,    90,
    46,    45,    45,    38,    90,    46,   110,    46,    46,    50,
   138,   136,    51,     0,    72,     0,    73,     0,   138,     0,
   144,     0,    45,   161,    46,    45,   125,    46,    45,   154,
    46,   120,     0,    45,   132,    46,     0,   133,     0,    90,
    45,   130,    46,     0,   107,    50,   138,   136,    51,     0,
    45,   134,    46,     0,    45,    45,    38,    90,    46,   160,
    46,    50,   138,   136,    51,     0,    45,    45,    66,    38,
    90,    46,   160,    46,    50,   138,   136,    51,     0,    45,
    45,    43,    90,    46,   160,    46,    50,   138,   136,    51,
     0,    45,    45,    41,    90,    46,   160,    46,    50,   138,
   136,    51,     0,    45,    45,    66,    41,    90,    46,   160,
    46,    50,   138,   136,    51,     0,    45,   135,    46,     0,
    36,   138,   136,     0,    36,     1,     0,     0,    90,   160,
     0,    90,   137,     0,    90,   134,     0,    45,   137,    46,
    50,   138,   136,    51,     0,    90,    45,   153,    90,    46,
   138,     0,    90,    45,   138,    46,     0,    45,   137,    46,
     0,   141,     0,   141,   151,   138,     0,   141,    76,   138,
     0,   141,    94,   138,     0,    97,   138,     0,     7,   138,
    35,   138,   140,     0,   141,     0,     8,   138,     0,     0,
   142,     0,   141,   143,   142,     0,   162,     0,   163,     0,
   164,     0,   161,     0,   160,     0,   134,     0,   137,     0,
   120,     0,   148,     0,   149,     0,   183,     0,   135,     0,
    89,   142,     0,    93,   142,     0,    14,     0,    22,     0,
    23,     0,    45,   138,    46,     0,    88,     0,    89,     0,
    90,     0,    91,     0,    92,     0,    86,     0,    87,     0,
    75,     0,    56,     0,    74,     0,   144,    74,   144,     0,
   145,     0,   146,     0,    45,   144,    46,     0,    50,   138,
   147,    51,     0,    50,   161,   147,    51,     0,    50,   144,
   147,    51,     0,    48,   138,   147,    49,     0,    48,   144,
   147,    49,     0,    36,   138,   147,     0,    36,   161,   147,
     0,    36,   144,   147,     0,     0,    36,     1,     0,    75,
   160,     0,    75,   134,     0,    75,   183,     0,    75,   148,
     0,    45,   148,    46,     0,    45,    38,    46,   139,     0,
    45,    43,    46,   139,     0,    45,    41,    46,   139,     0,
    45,    67,    38,    46,   139,     0,    45,    67,    41,    46,
   139,     0,    45,    66,    38,    46,   139,     0,    45,    66,
    41,    46,   139,     0,    45,    38,    90,    46,   150,     0,
    45,    66,    38,    90,    46,   150,     0,    45,    43,    90,
    46,   150,     0,    45,    41,    90,    46,   150,     0,    45,
    66,    41,    90,    46,   150,     0,    45,    42,    90,    46,
   150,     0,    45,    38,    90,    90,    46,   150,     0,    45,
    66,    38,    90,    90,    46,   150,     0,    45,    43,    90,
    90,    46,   150,     0,    45,    41,    90,    90,    46,   150,
     0,    45,    66,    41,    90,    90,    46,   150,     0,    45,
    42,    90,    90,    46,   150,     0,    45,    16,   109,    90,
    46,   150,     0,    45,   109,    90,    46,   150,     0,    45,
    16,   109,    90,    90,    46,   150,     0,    45,   109,    90,
    90,    46,   150,     0,   139,     0,    82,     0,    83,     0,
    80,     0,    84,     0,    85,     0,    81,     0,    66,    38,
     0,    66,    41,     0,   152,     0,   125,     0,   153,   160,
   155,     0,   153,   155,     0,   109,   160,   155,     0,   109,
    90,   160,   155,     0,   109,    90,    90,   160,   155,     0,
   109,   160,    15,   155,     0,   107,   160,   155,     0,   107,
    90,   160,   155,     0,   107,    90,    90,   160,   155,     0,
   107,   160,    15,   155,     0,   109,   155,     0,   109,    90,
   155,     0,   109,    90,    90,   155,     0,   107,   155,     0,
   107,    90,   155,     0,   107,    90,    90,   155,     0,   153,
   160,    15,   155,     0,   153,    90,   160,    15,   155,     0,
   153,   160,    15,    50,   138,    51,   155,     0,   153,    90,
   160,   155,     0,   153,    90,   155,     0,   153,    90,    90,
   160,   155,     0,    45,    90,   107,    46,    45,   154,    46,
   155,     0,     0,    36,   153,   160,   155,     0,    36,   153,
   155,     0,    36,   107,   160,   155,     0,    36,   109,   160,
   155,     0,    36,   109,    90,   160,   155,     0,    36,   107,
   160,    15,   155,     0,    36,   109,   160,    15,   155,     0,
    36,   153,   160,    15,   155,     0,    36,   153,    90,   160,
    15,   155,     0,    36,    45,    90,   107,    46,    45,   154,
    46,   155,     0,     0,    36,   153,   160,    50,   138,    51,
   155,     0,    36,   153,   160,    50,   138,    36,   138,    51,
   155,     0,    36,   153,   160,    15,    50,   138,    51,   155,
     0,    36,   153,    90,   160,   155,     0,    36,   153,    90,
   155,     0,    36,     1,     0,   132,   157,     0,   153,     0,
   109,     0,     0,    75,     1,     0,    36,   132,   157,     0,
     0,    36,     1,     0,    48,   117,    49,     0,     1,    49,
     0,    45,   138,    46,     0,     1,    46,     0,   107,     0,
    45,   160,    46,     0,   108,     0,   110,     0,   112,     0,
   111,     0,    36,   160,   165,     0,     0,    36,     1,     0,
     0,    36,   117,   166,     0,     0,    97,   167,     0,   167,
    71,   167,     0,   167,    69,   167,     0,    45,   167,    46,
     0,    27,   159,   158,     0,    26,   138,    47,    28,   158,
     0,    26,    45,   171,    36,   172,    36,   173,    46,   158,
     0,   128,     0,   124,     0,     0,   138,     0,     0,   128,
     0,     0,     3,    45,   142,    46,    48,   175,    49,     0,
     4,   142,    37,    45,   117,    46,   176,     0,     6,    37,
    45,   117,    46,     0,     5,   175,     0,   175,     0,     0,
     7,   138,    35,   158,   178,     0,     8,   158,     0,     0,
    33,    45,   132,    46,     0,    33,    45,   132,   180,    46,
     0,     0,    36,   132,   180,     0,    99,    45,   160,    46,
     0,    99,    45,   160,   182,    46,     0,    99,    45,   134,
    46,     0,    99,    45,   134,   182,    46,     0,    99,    45,
   183,    46,     0,     0,    36,   160,   182,     0,    36,   134,
   182,     0,   160,    17,   160,   184,     0,   134,    17,   160,
   184,     0,   137,    17,   160,   184,     0,   160,    17,   134,
   184,     0,   134,    17,   134,   184,     0,   137,    17,   134,
   184,     0,   160,    77,   160,   184,     0,   134,    77,   160,
   184,     0,    45,   148,    46,    77,   160,   184,     0,   137,
    77,   160,   184,     0,   160,    77,   134,   184,     0,   134,
    77,   134,   184,     0,    45,   148,    46,    77,   134,   184,
     0,   160,    17,   120,     0,   160,    77,   120,     0,   137,
    77,   134,   184,     0,    45,   183,    46,     0,     0,    17,
   160,   184,     0,    17,   134,   184,     0,    77,   160,   184,
     0,    77,   134,   184,     0,    17,   120,     0,    77,   120,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   148,   179,   180,   184,   185,   186,   187,   188,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   206,   207,   208,
   209,   210,   211,   215,   216,   221,   222,   226,   230,   235,
   237,   244,   353,   354,   356,   357,   358,   359,   360,   361,
   363,   364,   366,   367,   368,   369,   370,   371,   377,   378,
   379,   380,   381,   382,   384,   387,   393,   397,   403,   411,
   421,   423,   425,   439,   443,   447,   454,   455,   460,   465,
   470,   479,   487,   498,   512,   513,   514,   518,   522,   526,
   530,   534,   538,   545,   547,   549,   554,   566,   567,   568,
   571,   572,   573,   580,   584,   588,   593,   599,   604,   611,
   617,   628,   630,   631,   635,   642,   646,   647,   655,   659,
   660,   661,   662,   663,   664,   665,   668,   670,   672,   674,
   676,   678,   680,   682,   684,   686,   688,   690,   692,   697,
   698,   701,   702,   703,   704,   705,   708,   712,   713,   717,
   722,   727,   732,   737,   742,   748,   750,   751,   757,   758,
   759,   761,   763,   765,   767,   773,   774,   775,   776,   777,
   778,   782,   786,   787,   791,   792,   796,   797,   798,   799,
   800,   801,   802,   803,   804,   805,   806,   807,   808,   809,
   810,   811,   812,   813,   816,   817,   818,   819,   820,   821,
   822,   823,   824,   825,   830,   831,   832,   833,   839,   843,
   851,   863,   876,   888,   892,   900,   904,   905,   908,   913,
   917,   922,   926,   933,   936,   937,   940,   941,   944,   945,
   948,   949,   950,   951,   952,   953,   956,   957,   958,   959,
   960,   961,   963,   964,   966,   967,   969,   980,   981,   982,
   983,   984,   985,   992,   994,   997,   999,  1005,  1009,  1014,
  1020,  1026,  1032,  1042,  1048,  1054,  1060,  1068,  1072,  1076,
  1082,  1086,  1090,  1096,  1102,  1109,  1115,  1121,  1125,  1133,
  1139,  1142,  1146,  1150,  1156,  1162,  1168,  1175,  1183,  1189,
  1204,  1211,  1214,  1222,  1230,  1236,  1242,  1246,  1255,  1266,
  1270,  1274,  1275,  1279,  1293,  1294,  1302,  1304,  1311,  1313,
  1319,  1320,  1324,  1329,  1334,  1339,  1345,  1349,  1350,  1356,
  1357,  1368,  1378,  1379,  1381,  1383,  1389,  1395,  1403,  1411,
  1415,  1419,  1425,  1429,  1435,  1439,  1446,  1450,  1454,  1461,
  1465,  1469,  1473,  1483,  1484,  1490,  1491,  1495,  1496,  1501,
  1502,  1503,  1504,  1505,  1508,  1509,  1510,  1516,  1517,  1518,
  1520,  1521,  1522,  1524,  1525,  1526,  1527,  1529,  1530,  1531,
  1532,  1533,  1534,  1535,  1539,  1540,  1541,  1542,  1543,  1544,
  1545
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND",
"POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE","DEFINE",
"MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT",
"UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","OR","PARALLEL","AND","ASS_P","ASS_N","CON","ADDRESS","BOOL_AND",
"IMPLY","IFF","PROPIMPLY","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB",
"MUL","DIV","MOD","BNE","BOOL_OR","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST",
"FINAL","KEEP","ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL",
"STRUCT_TYPE","INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition",
"complexProposition","poptional_projection","statement","option_struct_declaration",
"empty_statement","function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","array_cast_exp","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp",
"option_exp_else_statement","simple_ari_exp","member_in_exp","arith_operator",
"array_exp","option_list_value","option_struct_list_value","inner_option_list_value",
"address_exp","type_cast","casted_element","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   113,   114,   114,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   116,   116,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   118,   118,   119,   119,   120,   120,
   120,   121,   122,   122,   123,   123,   123,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   125,   125,   125,
   125,   125,   125,   126,   126,   126,   126,   126,   126,   126,
   126,   127,   127,   127,    -1,    -1,    -1,    -1,   128,   129,
   129,   129,   129,   129,   129,   129,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   131,
   131,   132,   132,   132,   132,   132,   133,   134,   134,   135,
   135,   135,   135,   135,   135,   136,   136,   136,   137,   137,
   137,   137,   137,   137,   137,   138,   138,   138,   138,   138,
   138,   139,   140,   140,   141,   141,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   144,   144,   144,   144,   145,   145,
   145,   146,   146,   147,   147,   147,   147,   147,   148,   148,
   148,   148,   148,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   150,   151,   151,   151,
   151,   151,   151,   152,   152,   153,   153,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   156,   156,
   156,   156,   156,   157,   157,   157,   158,   158,   159,   159,
   160,   160,   161,   162,   163,   164,   165,   165,   165,   166,
   166,   167,   167,   167,   167,   167,   168,   169,   170,   171,
   171,   171,   172,   172,   173,   173,   174,   175,   175,   176,
   176,   176,   177,   178,   178,   179,   179,   180,   180,   181,
   181,   181,   181,   181,   182,   182,   182,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   184,   184,   184,   184,   184,   184,
   184
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     8,     9,
     1,     1,     7,     3,     1,     3,     1,     0,     4,     5,
     4,     4,     2,     2,     2,     2,     1,     2,     2,     3,
     3,     3,     3,     7,     8,    11,    13,     1,     1,     1,
     1,     1,     1,     2,     6,     4,     5,     5,     8,     8,
     2,     2,     2,     0,     6,     7,     0,     2,     3,     1,
     1,     1,     1,     3,     2,     1,    11,    12,    11,    11,
    17,    18,    17,    18,    19,    18,    17,    18,    17,     1,
     1,     1,     1,    10,     3,     1,     4,     5,     3,    11,
    12,    11,    11,    12,     3,     3,     2,     0,     2,     2,
     2,     7,     6,     4,     3,     1,     3,     3,     3,     2,
     5,     1,     2,     0,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
     1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     3,     1,     1,     3,     4,     4,
     4,     4,     4,     3,     3,     3,     0,     2,     2,     2,
     2,     2,     3,     4,     4,     4,     5,     5,     5,     5,
     5,     6,     5,     5,     6,     5,     6,     7,     6,     6,
     7,     6,     6,     5,     7,     6,     1,     1,     1,     1,
     1,     1,     1,     2,     2,     1,     1,     3,     2,     3,
     4,     5,     4,     3,     4,     5,     4,     2,     3,     4,
     2,     3,     4,     4,     5,     7,     4,     3,     5,     8,
     0,     4,     3,     4,     4,     5,     5,     5,     5,     6,
     9,     0,     7,     9,     8,     5,     4,     2,     2,     1,
     1,     0,     2,     3,     0,     2,     3,     2,     3,     2,
     1,     3,     1,     1,     1,     1,     3,     0,     2,     0,
     3,     0,     2,     3,     3,     3,     3,     5,     9,     1,
     1,     0,     1,     0,     1,     0,     7,     7,     5,     2,
     1,     0,     5,     2,     0,     4,     5,     0,     3,     4,
     5,     4,     5,     4,     0,     3,     3,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     6,
     3,     3,     4,     3,     0,     3,     3,     3,     3,     2,
     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,    93,    47,     0,
     0,     0,     0,     0,    51,    52,     0,     0,    45,    88,
    91,    90,    92,    89,   312,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   301,     0,     1,
    62,    61,     0,    34,    77,     0,    33,     0,   116,   112,
   113,   110,    37,    38,    39,    35,    36,    50,    49,   111,
     0,     0,    29,    13,    22,     0,   181,   182,   183,     0,
     0,     0,     0,     0,   303,   304,   306,   305,   174,   172,
   178,   173,    17,   156,   165,   175,   176,   171,   170,   167,
   168,   169,   177,    21,    10,     9,    20,    12,    11,     2,
     0,     0,     0,     0,     0,    26,     0,     0,     0,    73,
     0,    74,     0,     0,     0,   301,   282,     0,   322,     0,
     0,     0,     0,     0,     0,   312,     0,   312,     0,     0,
   112,   113,     0,   110,     0,   111,     0,     0,     0,     0,
     0,     0,    76,    75,     0,   301,   151,   150,   149,     0,
     0,   115,   112,     0,     0,     0,     0,     0,   292,     0,
     0,   301,    79,   104,     0,     0,     0,     0,     0,    78,
   130,   131,     0,     0,   292,     0,     0,     0,     0,     0,
     0,    27,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   172,   178,   173,     0,   175,   171,
   177,     0,   210,     0,   212,   209,   211,   179,   180,   160,
   193,   194,   192,     0,   240,   243,   238,   239,   241,   242,
   190,   191,   185,   186,   187,   188,   189,     0,     0,     0,
     8,     5,     4,     6,     7,     0,     0,     0,    80,    82,
    81,    83,   271,     0,     0,     0,   308,     0,    88,    90,
    92,    89,     0,     0,   321,   320,   172,   173,   171,     0,
   177,     0,   300,     0,     0,     0,   317,     0,     0,     0,
     0,     0,     0,   136,   132,   133,   196,   197,    88,    90,
    89,     0,     0,     0,     0,   301,   149,   312,   313,    64,
   114,   139,   155,     0,   302,     0,   312,   312,   364,     0,
     0,     0,   271,   292,     0,     0,     0,     0,   247,     0,
   246,     0,   312,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   291,   295,   290,     0,   148,   101,
     0,     0,     0,     0,    94,    32,    31,    54,    30,     0,
    65,   109,     0,   365,   365,     0,   365,   365,   365,   365,
   365,   365,   361,   365,   365,   362,   365,   365,    25,    29,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
   184,   213,     0,     0,     0,     0,   158,   159,   166,   157,
     0,   335,    43,     0,   282,   282,   282,     0,   288,     0,
     0,     0,   282,     0,     0,     0,     0,     0,     0,     0,
   324,     0,   299,   298,     0,     0,     0,     0,     0,     0,
   170,     0,   207,   207,   207,   207,   170,     0,     0,   336,
     0,     0,     0,     0,     0,    90,   316,   149,     0,     0,
     0,     0,     0,     0,   315,   314,   310,     0,     0,     0,
     0,     0,   301,     0,   244,   245,   154,     0,    40,     0,
     0,    48,     0,   342,     0,   340,     0,   344,    53,    41,
    42,   293,     0,   289,    69,     0,     0,     0,   148,   103,
   102,   104,    72,     0,     0,     0,     0,   352,   349,    71,
   359,   355,   353,   350,   363,   357,   351,   348,   358,   354,
    28,     0,   164,     0,   214,   162,     0,     0,   216,     0,
     0,     0,     0,   215,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   333,     0,   282,   261,   282,   282,   258,   282,   282,
   249,   282,     0,     0,   282,     0,   282,   282,   273,   282,
     0,   309,   308,     0,     0,     0,     0,     0,     0,     0,
   323,     0,   318,   297,     0,   135,   198,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   338,   337,
     0,   195,     0,     0,     0,     0,     0,   148,   271,   316,
   148,   365,   365,     0,   311,    58,     0,     0,    70,     0,
     0,     0,     0,     0,     0,     0,   345,   345,   343,   341,
   296,   295,   147,   148,   138,   104,   104,     0,    96,    66,
   370,   365,   365,   371,   365,   365,     0,     0,   161,     0,
     0,   237,   221,     0,   224,     0,   226,     0,   223,     0,
     0,     0,     0,     0,     0,   219,     0,     0,   220,     0,
     0,   217,   218,   234,     0,     0,     0,     0,   334,     0,
   282,   262,   282,   282,   254,   282,   259,   282,   282,   250,
     0,   268,   282,   282,   248,     0,     0,   282,   274,   282,
   282,   275,   287,   282,   282,     0,   272,     0,   307,     0,
     0,     0,     0,     0,     0,   326,     0,     0,   208,   207,
   207,   170,   202,   203,   199,   201,   200,     0,   137,   339,
     0,     0,     0,     0,     0,     0,   271,     0,     0,     0,
   360,   356,     0,    57,     0,   148,   153,     0,   347,   346,
   294,   146,    97,    98,   104,   367,   366,   369,   368,     0,
   163,   233,     0,   227,   230,   232,   229,   171,   171,   171,
     0,     0,   222,     0,   225,     0,   236,     0,     0,   327,
     0,   263,   282,   255,   257,   260,   282,   251,   253,   282,
   282,   267,     0,   264,    68,     0,   277,   276,   278,   282,
   286,     0,   279,     0,    63,     0,     0,     0,     0,     0,
   325,     0,     0,     0,   204,   206,   205,     0,     0,     0,
     0,     0,     0,     0,     0,   138,    84,   152,    55,     0,
     0,     0,    95,    23,   235,     0,     0,     0,   171,   171,
   228,   231,     0,     0,   271,   256,   252,   269,   265,     0,
    67,     0,   271,   280,     0,     0,   282,     0,     0,   304,
     0,   304,   304,     0,     0,    44,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    85,     0,
    59,     0,   104,   104,     0,     0,     0,     0,     0,     0,
     0,     0,   282,    60,     0,   282,     0,   283,    56,     0,
     0,     0,   304,   319,   271,     0,     0,     0,   148,     0,
     0,     0,   148,   148,     0,     0,     0,     0,   271,    99,
   100,   148,   148,   148,     0,     0,     0,   329,   282,   266,
   282,   285,   282,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   148,     0,     0,     0,     0,   148,   148,
   332,   270,   281,   284,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   119,     0,     0,
     0,   117,   120,     0,     0,     0,     0,    86,   140,   143,
   142,     0,     0,     0,   331,   328,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   134,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   118,     0,
   141,   144,   330,   304,   304,     0,   304,   304,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    87,   304,   304,   304,   304,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   304,   148,   148,
     0,   148,   148,     0,     0,     0,     0,     0,     0,   148,
     0,     0,   148,   148,   148,     0,   129,   127,     0,   123,
   121,     0,     0,     0,   148,   128,   122,   126,   124,     0,
   125,     0,     0,     0
};

static const short yydefgoto[] = {  1092,
     2,    21,   204,   149,   360,   852,    99,    62,    63,    64,
    65,    66,   350,   355,    67,    68,    69,   193,   346,   294,
   100,   101,   497,   102,   218,   652,   649,   104,   105,   249,
   296,   297,   298,   592,   106,   107,   653,   250,   331,   417,
   418,   266,   348,   494,   287,   143,   108,   109,   110,   111,
   112,   426,   322,   155,    73,    74,    75,   280,   582,   812,
    76,   678,   996,    77,   552,    78,   451,    79,   485,   113,
   508
};

static const short yypact[] = {    46,
   901,  2464,-32768,-32768,   -33,-32768,-32768,-32768,   901,   901,
   901,   901,  1571,   901,   901,   901,   901,   901,   901,-32768,
   202,    44,  1571,-32768,    55,   600,   700,-32768,-32768,    92,
    -9,   106,  2209,    75,-32768,-32768,   197,   147,-32768,-32768,
-32768,-32768,-32768,-32768,  2159,  2464,   149,   165,   468,   468,
    -8,   162,   325,   353,   363,   392,   416,   326,   267,  1165,
-32768,-32768,   251,-32768,-32768,   267,-32768,   246,-32768,   276,
    40,   128,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   432,   599,   667,   405,   405,  1571,-32768,-32768,-32768,  2934,
   219,   749,   749,  1571,-32768,-32768,-32768,-32768,-32768,   276,
-32768,    40,-32768,  2360,-32768,-32768,-32768,   128,-32768,-32768,
-32768,-32768,-32768,   405,   405,   405,   405,   405,   405,-32768,
   901,   901,   901,   901,   901,-32768,   749,   483,  1571,   267,
   267,   267,   267,   480,    -9,-32768,   514,    -9,  2503,   536,
   556,  1571,    95,  2464,  3457,  2262,   327,    -4,   860,   419,
   240,   233,   574,   427,   829,   580,   799,   570,   604,   719,
   831,   581,-32768,-32768,  3362,   605,-32768,-32768,-32768,  2363,
   271,-32768,   166,  1571,   332,  2464,  2464,  2464,  2583,  1571,
   267,   143,-32768,   177,  2464,  2464,  2464,  2464,   456,-32768,
-32768,-32768,  3457,    14,  2583,    14,    14,    14,    62,    62,
  1571,-32768,   901,   626,   656,   592,    80,   111,   591,   173,
  2973,   185,   478,   612,   240,   680,   233,   697,   701,   427,
   580,   219,   166,    40,-32768,   128,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1571,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1571,   749,  1571,
   825,   884,   858,   653,   653,   723,    95,   753,-32768,-32768,
-32768,-32768,   644,   770,   189,   780,   724,   836,    80,   111,
   591,   173,  2856,   335,-32768,-32768,   522,   394,   544,   800,
   442,   827,-32768,   837,   833,  2464,-32768,   986,  2023,  3507,
  3507,   338,   359,-32768,-32768,   802,-32768,-32768,   805,   811,
   824,   609,   701,   879,    -8,   839,   880,    -4,-32768,-32768,
-32768,-32768,   897,   874,-32768,   877,    -4,    -4,-32768,  2464,
   948,   915,   644,  2583,   267,   267,   340,   562,-32768,   921,
-32768,   878,  2262,   906,   158,   923,   219,   512,   588,   932,
   963,   974,  1020,    16,-32768,   949,-32768,   944,   960,-32768,
   938,  1571,    34,  3457,-32768,   848,   941,   941,-32768,   964,
   945,-32768,    14,   183,   183,   969,   183,   183,   183,   183,
   183,   183,-32768,   313,   183,-32768,   313,   183,-32768,   667,
  1010,  1571,   936,   749,   285,   749,   289,   294,   749,   310,
   319,   343,   361,   569,   380,   436,   984,   992,   450,-32768,
-32768,   874,   447,   233,   427,   580,-32768,-32768,-32768,-32768,
   993,  1038,-32768,   957,    11,    15,    18,  1003,-32768,   968,
    -9,   351,    41,  1002,    43,  1015,   378,  2895,  1016,    69,
  1571,    95,-32768,-32768,  1133,  1037,  2661,  1025,   697,   168,
  1027,  2739,  1040,    54,  1040,    54,  1040,  3401,  3457,-32768,
  1032,   804,  1033,  1036,  1046,   996,   877,  1047,  1571,  1049,
   887,  1571,    14,  1048,  1012,-32768,   254,    95,  1085,  1051,
  1055,    -9,  1052,   880,-32768,-32768,-32768,  1057,-32768,  1029,
   447,-32768,    14,-32768,  1067,-32768,  1068,-32768,-32768,-32768,
-32768,-32768,  1098,-32768,-32768,  1442,  1071,    47,   960,-32768,
-32768,  1087,-32768,   456,  1078,    62,    62,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1086,  1118,   457,-32768,  1414,   749,  1083,-32768,   749,
  1089,   749,  1091,-32768,   749,  1092,   508,   550,   567,   572,
   576,   749,   583,   749,   584,   749,   749,   749,  1094,   980,
    95,-32768,  1026,    49,-32768,   497,   132,-32768,   502,   139,
-32768,   519,  1069,  1035,   555,    -9,   654,    26,-32768,   830,
  2464,-32768,   724,  1073,   238,   590,   610,   615,   757,   243,
-32768,  1117,-32768,-32768,  1100,-32768,-32768,  1112,  2817,   168,
  1738,  1110,  1113,  1125,  1126,  1138,  3012,  1166,  1175,-32768,
   804,-32768,     3,    20,  1105,  1172,  1176,   960,   644,-32768,
   960,   183,   183,  2464,-32768,-32768,    95,  1183,-32768,  1047,
  1571,  1571,   805,   811,   824,  1179,  1188,  1188,-32768,-32768,
-32768,   949,-32768,   960,-32768,   170,  1087,  1174,-32768,-32768,
-32768,   313,   183,-32768,   313,   183,   901,  1571,-32768,   749,
  1198,-32768,-32768,   749,-32768,   749,-32768,   749,-32768,   749,
   749,   749,   749,   630,   662,-32768,   749,  1204,-32768,   749,
  1205,-32768,-32768,-32768,   749,   749,  1215,  1208,-32768,  1213,
    26,-32768,   514,   514,-32768,    26,-32768,   514,   514,-32768,
    -9,-32768,   714,   495,-32768,  1206,  1214,   514,-32768,   514,
   514,-32768,-32768,   725,   752,  1571,-32768,  1158,-32768,  1216,
   292,   665,   666,   675,   687,   271,  1571,  1155,-32768,  1040,
    54,  1040,-32768,-32768,-32768,-32768,-32768,  3051,-32768,-32768,
  1217,  1220,  1218,  1223,  1224,    30,   644,  1221,  1227,  1226,
-32768,-32768,  1115,-32768,  2464,   960,-32768,   996,-32768,-32768,
-32768,-32768,-32768,-32768,   407,-32768,-32768,-32768,-32768,   646,
-32768,-32768,   749,-32768,-32768,-32768,-32768,   520,   529,   535,
   749,   749,-32768,   749,-32768,   749,-32768,  1228,  1236,-32768,
  1238,-32768,   514,-32768,-32768,-32768,   514,-32768,-32768,   514,
   514,-32768,  1571,-32768,  2464,  1243,-32768,-32768,-32768,   514,
-32768,  1571,-32768,    36,-32768,  2464,  1268,  2310,  3323,   688,
-32768,  1252,  1254,  1257,-32768,-32768,-32768,   843,  1239,   849,
  1255,  1256,  1259,  1261,  1262,  1263,-32768,-32768,-32768,  1170,
  1260,    47,-32768,-32768,-32768,  1264,  1265,  1267,   542,   565,
-32768,-32768,  1273,  2464,   644,-32768,-32768,-32768,-32768,  1270,
  1165,  1222,   644,-32768,  1271,  1571,   514,  1039,  3090,  1220,
  3129,  1223,  1224,  3473,    95,-32768,  1274,  1234,  1235,  1269,
  1571,  1237,  1240,  1285,  1571,  1571,   850,  1278,-32768,  1284,
-32768,  1263,   170,  1087,  1571,  1571,  1571,  1282,  1290,  2464,
  1081,  1266,   514,-32768,  1289,   514,  1291,-32768,-32768,  3168,
  3207,  3246,  1261,-32768,   644,  1295,  1298,  1258,   960,  1299,
  1300,  1272,   960,   960,  1275,  1277,  1308,  1571,   644,-32768,
-32768,   960,   960,   960,  1571,  1571,  1101,-32768,   514,-32768,
   514,-32768,   514,   691,   696,   784,   703,   711,   796,  3285,
  1304,  1241,  1242,  1307,  1303,  1245,  1246,  1313,  1312,  1317,
  1318,  1323,  1280,   960,  1325,  1321,  1322,  1326,   960,   960,
   472,-32768,-32768,-32768,   713,   718,   720,   721,   722,   728,
   729,   733,   870,   144,  1328,  1335,  1279,-32768,  1337,  1339,
  1286,-32768,-32768,  1287,  1292,  1341,  1343,  1331,-32768,-32768,
-32768,  1349,  1353,   980,-32768,-32768,  3513,  3585,   737,  3612,
  3619,   739,   754,   760,   774,    39,   326,-32768,  1345,  1359,
  1360,  1361,  1362,  1364,  1365,  1366,  1367,  1305,-32768,   804,
-32768,-32768,-32768,  1328,  1335,  3625,  1337,  1339,  3720,  3726,
  3732,   775,   605,  1369,  1370,  1375,  1376,  1377,  1382,  1384,
  1385,  1390,   802,  1361,  1365,  1366,  1367,  3827,  1571,  1571,
  1387,  1571,  1571,  1388,  1389,  1391,  1394,  1390,   960,   960,
  1571,   960,   960,  1571,  1571,  1571,  1395,  1396,  1397,   960,
  1400,  1401,   960,   960,   960,  1571,-32768,-32768,  1403,-32768,
-32768,  1404,  1406,  1408,   960,-32768,-32768,-32768,-32768,  1409,
-32768,  1416,  1461,-32768
};

static const short yypgoto[] = {-32768,
-32768,    13,  1082,     9,   959,-32768,   386,-32768,-32768,  -177,
   -36,  -161,   -21,  -463,  -132,     1,  1019,-32768,  -129,-32768,
   795,   -69,   105,  1109,   -13,  -306,-32768,   950,   -84,-32768,
  -288,-32768,-32768,  -378,  1177,-32768,  1219,-32768,-32768,  -146,
  -318,  1225,  -180,   840,  -251,-32768,   216,  -239,-32768,-32768,
-32768,   895,  1004,  -106,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -770,-32768,-32768,-32768,-32768,   875,-32768,  -313,  1247,
    85
};


#define	YYLAST		3939


static const short yytable[] = {   103,
   440,   444,   446,   329,   470,   412,   276,   228,   229,   128,
    60,   361,   163,   164,   366,   293,   492,   329,   332,   140,
   216,    82,    83,    84,    85,   487,   114,   115,   116,   117,
   118,   119,   347,   329,   500,   135,   165,   183,   639,   304,
   308,   309,   256,   572,   190,   150,   265,   731,   347,   441,
   265,   447,   172,   265,   157,   135,   197,     1,   363,   135,
   222,   265,   135,   362,   733,   593,   594,   595,   596,   216,
   135,   856,   205,    81,   823,   141,   265,   525,   135,   529,
   230,    51,   534,  1006,   265,   135,   857,   135,   127,   591,
    91,   601,   148,   135,   290,   285,   291,   136,   166,   129,
   554,   329,   275,   329,   557,    51,   363,   560,   259,   260,
   261,   262,   732,   135,   548,   258,   198,   136,   423,   142,
   166,   136,   166,   181,   136,   384,    48,   452,   284,   734,
   568,   295,   136,   251,   252,   253,   254,   255,   681,   824,
   182,   216,   286,   471,   199,  1033,   150,   136,   440,   136,
   138,   330,   288,   590,    95,   136,   386,   351,   580,   438,
   336,   329,   329,   602,   409,   295,   349,   265,    58,   385,
   150,   172,   753,   754,   265,   182,   135,   347,   334,   295,
   583,   295,   194,   135,   341,   342,   343,   379,  1006,   419,
   995,   145,   352,   356,   357,   358,   359,   441,   134,   506,
   387,   461,   480,   216,   200,   353,   170,    28,    48,   636,
   465,   466,   353,   587,   120,   380,   616,    72,   389,   216,
   407,   686,   395,  1023,   502,   396,    40,    41,   691,    42,
    43,    44,    91,   420,   408,   666,   410,   669,   136,   672,
   673,   452,   196,   452,   144,   136,   137,    51,   354,   197,
  1007,    51,   183,   171,   328,   158,   194,   171,   637,   507,
   154,    72,   390,   222,   166,   163,   169,    72,   166,   121,
   122,   159,   123,   429,   184,   439,   443,   445,   313,   124,
   125,   184,   135,   650,   195,   312,   329,   135,   675,   320,
   739,   833,   194,    91,   435,   421,   126,   422,   189,   679,
   590,   332,   721,   259,   261,   220,   226,   438,    51,   198,
   295,   135,   590,   749,   750,   335,   196,   191,   192,   599,
   195,   185,   186,   187,   188,   166,   361,   711,   467,   506,
   527,   501,   181,   150,   530,   429,   135,   763,   499,   532,
   295,   815,   816,   817,   182,   184,   184,   184,   184,   182,
   264,   722,   196,   267,   279,   535,   181,   195,   216,    72,
    51,   154,   307,   632,   384,   744,   171,   216,   523,   174,
   179,   165,   216,   182,   528,   180,   337,   166,   531,   135,
   220,   181,   448,   533,   135,   154,    72,    61,   386,   507,
   339,    72,    72,    72,   449,   135,   184,   175,   182,   536,
    72,    72,    72,    72,   450,   260,   389,   176,   537,   365,
   197,   368,   370,   372,   375,   378,   305,   581,   825,   920,
   921,    51,   135,   439,   430,   542,   220,    51,   429,   472,
    61,    61,   538,   306,   330,   295,   177,   405,   166,   313,
   566,   182,   353,   199,   166,   608,   473,   329,   611,   509,
   539,   511,   512,   513,   514,   515,   516,   136,   517,   518,
   178,   519,   520,   194,   311,  -113,  -113,   575,   201,   543,
   198,   160,   315,   161,    28,   676,   994,   677,   832,   295,
   429,   544,   634,   160,   182,   161,    28,   319,   279,   184,
   191,   192,   312,    40,    41,   548,    42,    43,    44,-32768,
   162,    72,   650,   200,   220,    40,    41,   169,    42,    43,
    44,   684,   162,  -111,  -111,   397,   689,   257,   398,   216,
   458,    49,    50,   196,   263,   545,   892,   216,   194,    61,
   265,    61,   265,   694,   895,    72,   199,   265,   194,   549,
   184,   184,   474,   883,   793,   199,   651,   483,   154,   265,
   154,   199,   405,   661,   265,    61,   814,   484,   199,   226,
   199,    61,    61,    61,    59,   836,   195,   312,   184,   698,
    61,    61,    61,    61,   837,   329,    59,   720,   264,   708,
   838,   199,   282,   811,   373,   376,   941,   888,   196,   315,
   265,   778,   884,  -112,  -112,   662,   200,   528,   196,   475,
   955,   283,   476,   638,   199,   200,   540,   746,   747,   541,
   889,   200,   663,   904,   323,  -110,  -110,   542,   200,   314,
   200,   544,   743,   483,   160,   319,   161,    28,   667,   670,
   556,   559,   562,   486,   761,   384,   565,   567,   570,   531,
   573,   200,   184,   279,   202,   184,    40,    41,   324,   456,
    43,    44,   220,   162,   180,   386,   536,   220,   216,   760,
   389,   664,    28,   220,   200,   665,   121,   122,   701,   123,
   327,    61,   668,   671,   381,   771,   124,   125,   613,   712,
   388,    40,    41,   329,    42,    43,    44,   620,   414,   265,
   382,   329,   804,   126,   834,   154,   741,   742,   628,   713,
   383,   399,   203,   813,   714,    61,   130,   772,   131,   328,
   807,   808,   738,   121,   122,   740,   123,    59,    61,   668,
   809,   643,   646,   124,   125,   400,   756,   757,   791,   758,
   759,  1043,   544,   864,   121,   122,   384,   123,   752,   800,
   126,   386,   401,   329,   124,   125,   402,   126,   384,   265,
   415,   671,   416,   830,   528,   531,   386,   329,   997,   425,
   265,   126,    87,   998,   536,   544,  1000,  1001,   411,   683,
    88,    89,   688,   544,   384,   693,   810,   671,   386,   850,
   965,   700,  1026,   704,  1029,   966,    72,   265,   855,   216,
   184,   216,   968,    90,   540,   184,    70,   715,   413,  1030,
   969,   802,   528,   851,   220,  1031,   132,   531,   133,   999,
   528,   531,   220,    48,   858,   315,   424,  1002,  1003,   544,
  1048,   540,  1004,    91,   967,   325,   671,   131,   671,    72,
   216,   216,   216,   540,   320,   431,   970,    92,    51,   151,
    70,    93,   897,   528,   705,   167,   173,   321,   601,   531,
   831,   290,   891,   291,   432,    58,    95,   909,    96,    97,
    98,   913,   914,  1032,   671,   265,   185,   186,   187,   188,
   216,   922,   923,   924,   316,   452,   768,   769,   770,   706,
   868,   434,   433,   869,   215,   223,   872,   915,   459,   873,
   916,   641,   644,   122,   453,   123,   783,   317,   927,   318,
   454,   787,   124,   125,   954,   310,   790,   540,   870,     3,
  1005,   959,   960,   455,   874,   917,   186,   187,   188,   126,
     4,     5,     6,     7,   457,   460,   184,   185,   186,   187,
   188,    72,   610,   277,     8,   124,   125,   326,    70,   133,
   151,   167,   325,   220,   427,     9,   462,   317,    10,   318,
   463,   479,   126,   464,   123,   317,    61,   318,   468,   215,
    72,   124,   125,   469,   151,   173,   477,   478,   482,   338,
    70,    70,    70,   185,   186,   187,   188,   488,   126,    70,
    70,    70,    70,   676,   493,   677,   839,   840,   364,   495,
   367,   369,   371,   374,   377,   496,    11,    12,    13,    61,
    14,    15,    16,    17,    18,   215,    19,    20,   489,   498,
    72,   188,   503,   945,   510,   504,   403,   949,   950,   490,
   522,    72,   768,   769,   770,   524,   956,   957,   958,   546,
   185,   186,   187,   188,   436,  1059,  1060,   547,  1062,  1063,
   550,   185,   186,   187,   188,   551,   553,  1070,   563,   571,
  1073,  1074,  1075,   185,   186,   187,   188,   564,   987,    72,
   574,   311,  1085,   992,   993,   491,   623,   277,   585,   624,
   586,   625,   588,   480,   220,   591,   220,   600,   603,   840,
    70,   604,   318,   215,   899,   606,   167,   185,   186,   187,
   188,   605,   607,   609,   626,   617,   618,   614,   631,   167,
   619,   621,   622,    91,    86,    72,   185,   186,   187,   188,
    71,    87,   629,   630,    70,   220,   220,   220,    51,    88,
    89,   635,   353,   312,   171,   648,   928,   151,   654,   481,
    61,   403,   680,   647,   656,   166,   658,   660,   223,   675,
   696,   697,   289,   710,   717,   290,   961,   291,   185,   186,
   187,   188,   716,   152,    71,   220,   718,   505,   723,   168,
    71,   724,    48,  1068,  1069,   829,  1071,  1072,   185,   186,
   187,   188,    91,    28,  1079,   725,   726,  1082,  1083,  1084,
    61,   584,   185,   186,   187,   188,    92,   292,   727,  1090,
    93,    61,    40,    41,    94,    42,    43,    44,   217,   224,
   185,   186,   187,   188,    58,    95,   805,    96,    97,    98,
   449,   729,   768,   769,   735,   768,   769,   736,   881,   748,
   737,   153,   277,   483,   755,   185,   186,   187,   188,    61,
   745,   215,   185,   186,   187,   188,   215,   185,   186,   187,
   188,   840,   215,   763,   840,   768,   769,   278,    80,   774,
   776,   779,    71,   795,   152,   168,   780,   612,   781,   796,
   806,   818,   820,   840,   843,   819,   219,   225,   821,   822,
   894,   826,   827,   217,   481,    61,   828,   627,   152,    71,
   844,    87,   845,   224,    71,    71,    71,   853,   871,    88,
    89,   156,    80,    71,    71,    71,    71,   865,    80,   866,
   642,   645,   867,   877,   875,   876,   878,   879,   880,   908,
   882,   929,   859,   885,   886,   219,   887,   890,   905,   217,
   893,   896,   303,   906,   907,   912,   910,   918,   919,   911,
   404,   925,    48,   526,   931,   526,   221,   227,   526,   926,
   942,   933,    91,   943,   946,   947,   153,   944,   953,   974,
   975,   976,   977,   978,   979,   980,    92,    51,   981,  1008,
    93,   948,   982,   984,   951,    70,   952,   983,   985,   986,
   988,   989,   990,  1010,    58,    95,   991,   860,    97,    98,
  1011,   278,  1013,   215,  1014,   281,  1018,   219,  1012,   195,
    80,   215,   156,  1019,    71,  1015,  1016,   217,   303,  1021,
   168,  1017,  1020,  1022,  1034,  1035,  1036,  1037,    70,  1038,
  1039,  1040,  1041,   168,  1042,  1093,   156,    80,  1049,  1050,
  1051,   340,    80,    80,    80,  1052,  1053,  1054,    71,  1055,
  1056,    80,    80,    80,    80,  1057,  1061,  1064,  1065,  1067,
  1066,   152,   633,   152,  1076,   404,  1077,  1078,    86,   219,
  1080,  1081,   224,  1086,  1087,    87,  1088,   221,  1089,  1091,
  1094,   521,   640,    88,    89,   219,   598,   709,   406,   231,
   615,   751,     0,   730,     0,     0,   526,     0,     0,   526,
     0,   526,     0,     0,   526,     0,    90,   232,   233,     0,
     0,   526,     0,   526,     0,   526,   526,   526,     0,   241,
   242,   243,   244,   245,   246,   247,    48,     0,     0,   303,
   173,   153,     0,   153,     0,     0,    91,     0,     0,   281,
   225,     0,   215,     0,     0,     0,     0,     0,     0,     0,
    92,    51,    80,     0,    93,   221,   278,     0,    94,    70,
     0,     0,     0,     0,     0,   217,     0,     0,    58,    95,
   217,    96,    97,    98,     0,     0,   217,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    80,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    86,     0,   156,
     0,   156,     0,   406,    87,     0,     0,     0,   152,    70,
   227,     0,    88,    89,     0,     0,     0,     0,     0,   526,
    70,     0,     0,   526,   219,   526,     0,   526,     0,   526,
   526,   526,   526,   219,     0,    90,   526,     0,   219,   526,
     0,     0,     0,     0,   526,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,     0,     0,    70,   555,
   558,   561,     0,     0,     0,    91,     0,   569,     0,     0,
     0,     0,     0,   215,     0,   215,   303,     0,     0,    92,
    51,     0,     0,    93,     0,     0,     0,    94,     0,     0,
     0,     0,     0,     0,   281,     0,     0,    58,    95,    71,
    96,    97,    98,   221,    70,     0,     0,     0,   221,     0,
     0,     0,     0,     0,   215,   215,   215,   217,     0,     0,
     0,     0,     0,     0,     0,   217,     0,     0,     0,     0,
     0,     0,   526,     0,     0,     0,     0,     0,     0,     0,
   526,   526,    71,   526,     0,   526,   156,     0,     0,     0,
     0,     0,     0,     0,   215,     0,     0,     0,   719,     0,
     0,     0,     0,     0,    86,     0,     0,     0,   655,     0,
   657,    87,     0,   659,     0,     0,   526,   526,   526,    88,
    89,     0,     0,     0,     0,   219,   674,     0,  1009,     0,
     0,     0,     0,   219,     0,     0,     0,     0,   682,     0,
   685,   687,   442,   690,   692,   290,   695,   291,     0,   699,
     0,   702,   703,     0,   707,     0,     0,     0,     0,     0,
   505,     0,    48,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    91,   526,     0,     0,     0,    80,     0,     0,
     0,     0,     0,     0,    71,     0,    92,    51,     0,     0,
    93,     0,     0,     0,    94,   221,   217,     0,     0,     0,
     0,     0,     0,   221,    58,    95,     0,    96,    97,    98,
     0,     0,     0,    71,     0,     0,     0,     0,     0,     0,
    80,     0,     0,     0,     0,     0,     0,     0,   762,     0,
     0,     0,   764,     0,   765,     0,   766,     0,   767,     0,
   655,   659,     0,     0,     0,   773,     0,     0,   775,     0,
     0,     0,     0,   777,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    71,   219,   782,     0,   784,   785,     0,
   786,     0,   788,   789,    71,     0,     0,   792,   794,     0,
     0,     0,   797,     0,   798,   799,     0,     0,   801,   803,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   526,   526,     0,   526,
   526,     0,    71,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    80,     0,     0,     0,     0,   217,     0,   217,
     0,     0,     0,     0,   221,   526,     0,     0,   526,   526,
   526,   835,     0,     0,     0,     0,     0,     0,     0,   773,
   775,    80,   841,     0,   842,     0,     0,   526,    71,     0,
     0,     0,     0,     0,     0,     0,     0,   846,   217,   217,
   217,   847,     0,     0,   848,   849,     0,     0,     0,     0,
     0,     0,     0,     0,   854,     0,   655,   659,     0,    86,
     0,     0,     0,     0,     0,   219,    87,   219,   206,     0,
     0,    80,     0,     0,    88,    89,     0,     0,   217,     0,
     0,     0,    80,     0,     0,     0,     0,     0,     0,     0,
   207,     0,     0,   208,   209,   210,     0,   437,     0,     0,
   290,     0,   291,     0,     0,     0,   219,   219,   219,     0,
     0,   898,   775,     0,     0,     0,     0,    48,   212,   213,
    80,     0,     0,     0,     0,     0,     0,    91,     0,     0,
     0,     0,     0,     0,     0,   221,     0,   221,     0,     0,
     0,    92,   292,     0,     0,    93,   219,   930,     0,    94,
   932,     0,     0,     0,     0,     0,     0,     0,     0,    58,
    95,   214,    96,    97,    98,     0,    80,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   221,   221,   221,     0,
     0,     0,     0,   962,     0,   963,     0,   964,     0,     0,
     0,    22,     0,     0,     0,    23,     0,    24,    25,     0,
     0,     0,     0,     0,    26,     0,    27,    28,    29,    30,
     0,     0,    31,    32,    33,    34,   221,    35,    36,    37,
     0,    38,    39,     0,     0,     0,    40,    41,     0,    42,
    43,    44,     0,   146,     0,     0,    46,     0,     0,     0,
    47,     0,     0,     0,     0,    86,   655,     0,     0,   655,
     0,     0,    87,    48,    49,    50,     0,     0,     0,     0,
    88,    89,     0,    91,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   775,     0,     0,   775,   147,   655,
     0,     0,     0,   139,    52,   148,    53,    54,    55,    56,
    57,     0,     0,     0,    22,    58,   775,    59,    23,     0,
    24,    25,     0,    48,     0,     0,     0,    26,     0,    27,
    28,    29,    30,    91,     0,    31,    32,    33,    34,     0,
    35,    36,    37,     0,    38,    39,     0,    92,    51,   299,
    41,    93,   300,    43,   301,    94,   146,     0,     0,    46,
     0,     0,     0,    47,     0,    58,    95,     0,    96,    97,
    98,     0,     0,    87,     0,     0,    48,   302,    50,     0,
     0,    88,    89,     0,     0,     0,    91,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   147,     0,     0,   861,     0,     0,    52,   148,    53,
    54,    55,    56,    57,     0,    22,     0,     0,    58,    23,
    59,    24,    25,     0,    48,     0,     0,     0,    26,     0,
    27,    28,    29,    30,    91,     0,    31,    32,    33,    34,
     0,    35,    36,    37,     0,    38,    39,     0,    92,    51,
    40,    41,    93,    42,    43,    44,     0,   333,     0,     0,
    46,     0,     0,     0,    47,   231,    58,    95,     0,   862,
    97,    98,     0,     0,     0,     0,     0,    48,    49,    50,
     0,     0,     0,   232,   233,   234,     0,    91,     0,   235,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,    51,   248,     0,     0,     0,     0,    52,     0,
    53,    54,    55,    56,    57,     0,    22,     0,     0,    58,
    23,    59,    24,    25,     0,     0,     0,     0,     0,    26,
     0,    27,    28,    29,    30,     0,     0,    31,    32,    33,
    34,     0,    35,    36,    37,     0,    38,    39,     0,     0,
     0,    40,    41,     0,    42,    43,    44,     0,    45,    86,
     0,    46,     0,     0,     0,    47,    87,     0,   268,     0,
   161,    28,     0,     0,    88,    89,     0,     0,    48,    49,
    50,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   269,    41,     0,   270,   271,   272,     0,   273,     0,     0,
     0,     0,     0,    51,     0,     0,     0,     0,     0,    52,
     0,    53,    54,    55,    56,    57,     0,    48,   212,   213,
    58,     0,    59,     0,     0,     0,     0,    91,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
     0,    92,    51,     0,     0,    93,    87,     0,   171,    94,
     0,    28,     0,     0,    88,    89,     0,     0,     0,    58,
    95,   274,    96,    97,    98,     0,     0,     0,     0,     0,
    40,    41,     0,    42,    43,    44,     0,   289,     0,     0,
   290,     0,   291,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    48,   328,     0,
     0,     0,     0,     0,     0,     0,     0,   344,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    86,     0,     0,
     0,    92,   292,     0,    87,    93,   206,     0,     0,    94,
     0,     0,    88,    89,     0,     0,     0,     0,     0,    58,
    95,   345,    96,    97,    98,     0,     0,     0,   391,     0,
     0,   392,   209,   393,     0,   437,     0,     0,   290,     0,
   291,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,   394,   213,     0,     0,
     0,     0,     0,     0,     0,    91,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    86,     0,     0,     0,    92,
   292,     0,    87,    93,   206,     0,     0,    94,     0,     0,
    88,    89,     0,     0,     0,     0,     0,    58,    95,   214,
    96,    97,    98,     0,     0,     0,   207,     0,     0,   208,
   209,   210,     0,   589,     0,     0,   290,     0,   291,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    48,   212,   213,     0,     0,     0,     0,
     0,     0,     0,    91,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,    92,    51,     0,
    87,    93,   206,     0,     0,    94,     0,     0,    88,    89,
     0,     0,     0,     0,     0,    58,    95,   214,    96,    97,
    98,     0,     0,     0,   391,     0,     0,   392,   209,   393,
     0,   589,    86,     0,   290,     0,   291,     0,     0,    87,
     0,   206,     0,     0,     0,     0,     0,    88,    89,     0,
     0,    48,   394,   213,     0,     0,     0,     0,     0,     0,
     0,    91,     0,   391,     0,     0,   392,   209,   393,     0,
   428,    86,     0,     0,     0,    92,    51,     0,    87,    93,
   206,     0,     0,    94,     0,     0,    88,    89,     0,     0,
    48,   394,   213,    58,    95,   214,    96,    97,    98,     0,
    91,     0,   576,     0,     0,   577,   209,   578,     0,   428,
    86,     0,     0,     0,    92,   147,     0,    87,    93,   206,
     0,   171,    94,     0,     0,    88,    89,     0,     0,    48,
   579,   213,    58,    95,   214,    96,    97,    98,     0,    91,
     0,   207,     0,     0,   208,   209,   210,     0,   211,    86,
     0,     0,     0,    92,    51,     0,    87,    93,   206,     0,
   171,    94,     0,     0,    88,    89,     0,     0,    48,   212,
   213,    58,    95,   214,    96,    97,    98,     0,    91,     0,
   391,     0,     0,   392,   209,   393,     0,   211,    86,     0,
     0,     0,    92,    51,     0,    87,    93,   206,     0,     0,
    94,     0,     0,    88,    89,     0,     0,    48,   394,   213,
    58,    95,   214,    96,    97,    98,     0,    91,     0,   207,
     0,     0,   208,   209,   210,     0,   728,    86,     0,     0,
     0,    92,    51,     0,    87,    93,   206,     0,     0,    94,
     0,     0,    88,    89,     0,     0,    48,   212,   213,    58,
    95,   214,    96,    97,    98,     0,    91,     0,   576,     0,
     0,   577,   209,   578,     0,   211,    86,     0,     0,     0,
    92,    51,     0,    87,    93,   206,     0,     0,    94,     0,
     0,    88,    89,     0,     0,    48,   579,   213,    58,    95,
   214,    96,    97,    98,     0,    91,     0,   207,     0,     0,
   208,   209,   210,     0,   900,    86,     0,     0,     0,    92,
    51,     0,    87,    93,   206,     0,     0,    94,     0,     0,
    88,    89,     0,     0,    48,   212,   213,    58,    95,   214,
    96,    97,    98,     0,    91,     0,   207,     0,     0,   208,
   209,   210,     0,   901,    86,     0,     0,     0,    92,    51,
     0,    87,    93,   206,     0,     0,    94,     0,     0,    88,
    89,     0,     0,    48,   212,   213,    58,    95,   214,    96,
    97,    98,     0,    91,     0,   934,     0,     0,   935,   209,
   393,     0,   211,    86,     0,     0,     0,    92,    51,     0,
    87,    93,   206,     0,     0,    94,     0,     0,    88,    89,
     0,     0,    48,   936,   213,    58,    95,   214,    96,    97,
    98,     0,    91,     0,   937,     0,     0,   938,   209,   393,
     0,   211,    86,     0,     0,     0,    92,    51,     0,    87,
    93,   206,     0,     0,    94,     0,     0,    88,    89,     0,
     0,    48,   939,   213,    58,    95,   214,    96,    97,    98,
     0,    91,     0,   207,     0,     0,   208,   209,   210,     0,
   940,    86,     0,     0,     0,    92,    51,     0,    87,    93,
   206,     0,     0,    94,     0,     0,    88,    89,     0,     0,
    48,   212,   213,    58,    95,   214,    96,    97,    98,     0,
    91,     0,   971,     0,     0,   972,   209,   393,     0,   211,
     0,     0,     0,     0,    92,    51,    87,     0,    93,     0,
     0,     0,    94,     0,    88,    89,     0,     0,     0,    48,
   973,   213,    58,    95,   214,    96,    97,    98,     0,    91,
     0,     0,     0,     0,     0,     0,     0,    90,    86,     0,
     0,     0,     0,    92,    51,    87,     0,    93,     0,     0,
    28,    94,     0,    88,    89,     0,     0,    48,     0,     0,
     0,    58,    95,   214,    96,    97,    98,    91,     0,    40,
    41,     0,    42,    43,    44,     0,    90,    86,     0,     0,
     0,    92,    51,     0,    87,    93,     0,     0,     0,    28,
     0,     0,    88,    89,     0,     0,    48,   328,     0,    58,
    95,     0,   863,    97,    98,     0,    91,     0,    40,    41,
     0,    42,    43,    44,     0,   597,     0,     0,     0,     0,
    92,    51,     0,     0,    93,     0,     0,     0,    94,     0,
     0,     0,     0,    86,     0,    48,   328,     0,    58,    95,
    87,    96,    97,    98,     0,    91,     0,     0,    88,    89,
     0,     0,     0,     0,     0,     0,    87,     0,     0,    92,
    51,     0,     0,    93,    88,    89,     0,    94,     0,     0,
     0,   289,     0,     0,   290,     0,   291,    58,    95,     0,
    96,    97,    98,    86,     0,     0,     0,   902,     0,     0,
    87,    48,     0,     0,     0,     0,    87,     0,    88,    89,
     0,    91,     0,     0,    88,    89,     0,    48,     0,     0,
     0,     0,     0,     0,     0,    92,   292,    91,     0,    93,
     0,   442,     0,    94,   290,     0,   291,    90,     0,     0,
     0,    92,    51,    58,    95,    93,    96,    97,    98,     0,
     0,    48,     0,     0,     0,     0,     0,    48,     0,    58,
    95,    91,   903,    97,    98,     0,     0,    91,     0,     0,
     0,     0,     0,     0,     0,    92,    51,     0,    87,    93,
     0,    92,    51,    94,     0,    93,    88,    89,     0,     0,
     0,     0,     0,    58,    95,     0,    96,    97,    98,    58,
    95,     0,  1024,    97,    98,    87,     0,     0,     0,    90,
     0,     0,    87,    88,    89,     0,     0,     0,    87,     0,
    88,    89,     0,     0,     0,     0,    88,    89,     0,    48,
     0,     0,     0,     0,     0,     0,    90,     0,     0,    91,
     0,     0,     0,    90,     0,     0,     0,     0,     0,    90,
     0,     0,     0,    92,    51,     0,    48,    93,     0,     0,
     0,     0,     0,    48,     0,     0,    91,     0,     0,    48,
     0,    58,    95,    91,  1025,    97,    98,     0,     0,    91,
    92,    51,     0,     0,    93,     0,     0,    92,    51,     0,
     0,    93,     0,    92,    51,     0,     0,    93,    58,    95,
     0,  1027,    97,    98,     0,    58,    95,     0,  1028,    97,
    98,    58,    95,    87,  1044,    97,    98,     0,     0,    87,
     0,    88,    89,     0,     0,    87,     0,    88,    89,     0,
     0,     0,     0,    88,    89,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    90,     0,     0,     0,     0,     0,
    90,     0,     0,     0,     0,     0,    90,     0,     0,     0,
     0,     0,     0,     0,    48,     0,     0,     0,     0,     0,
    48,     0,     0,     0,    91,     0,    48,     0,     0,     0,
    91,     0,     0,     0,     0,     0,    91,     0,    92,    51,
     0,     0,    93,     0,    92,    51,     0,     0,    93,     0,
    92,    51,     0,     0,    93,     0,    58,    95,     0,  1045,
    97,    98,    58,    95,     0,  1046,    97,    98,    58,    95,
    87,  1047,    97,    98,     0,     0,     0,     0,    88,    89,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    90,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    91,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    92,    51,     0,     0,    93,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    58,    95,     0,  1058,    97,    98
};

static const short yycheck[] = {    13,
   289,   290,   291,   165,   323,   257,   139,    92,    93,    23,
     2,   189,    49,    50,   195,   145,     1,   179,   165,    33,
    90,     9,    10,    11,    12,   339,    14,    15,    16,    17,
    18,    19,   179,   195,     1,    45,    45,    59,   502,   146,
    45,   148,   127,     1,    66,    45,    36,    45,   195,   289,
    36,   291,    52,    36,    46,    45,    17,    12,    45,    45,
    45,    36,    45,   193,    45,   444,   445,   446,   447,   139,
    45,    36,    86,   107,    45,     1,    36,   384,    45,   386,
    94,    90,   389,    45,    36,    45,    51,    45,    45,    36,
    75,    45,    97,    45,    48,     1,    50,   107,   107,    45,
    90,   263,   139,   265,    90,    90,    45,    90,   130,   131,
   132,   133,   110,    45,    46,   129,    77,   107,   265,    45,
   107,   107,   107,    90,   107,    46,    65,    74,   142,   110,
    90,   145,   107,   121,   122,   123,   124,   125,    90,   110,
   107,   211,    48,   324,    17,   107,   146,   107,   437,   107,
    45,   165,   144,   442,   108,   107,    46,    15,    90,   289,
   174,   323,   324,   452,   249,   179,   180,    36,   107,    90,
   170,   171,   636,   637,    36,   107,    45,   324,   170,   193,
   432,   195,    17,    45,   176,   177,   178,   201,    45,     1,
   961,    45,    50,   185,   186,   187,   188,   437,   107,    17,
    90,   308,    45,   273,    77,    36,    45,    19,    65,   498,
   317,   318,    36,    46,    13,   203,   468,     2,    46,   289,
   234,    90,    38,   994,   354,    41,    38,    39,    90,    41,
    42,    43,    75,    45,   248,   542,   250,   544,   107,   546,
   547,    74,    77,    74,    48,   107,    31,    90,    72,    17,
   107,    90,   274,    96,    66,   107,    17,    96,   498,    77,
    45,    46,    90,    45,   107,   302,    51,    52,   107,    68,
    69,   107,    71,   273,    59,   289,   290,   291,    46,    78,
    79,    66,    45,    46,    45,    46,   448,    45,    46,    36,
   609,   755,    17,    75,   286,   107,    95,   109,    48,   551,
   589,   448,   591,   325,   326,    90,    91,   437,    90,    77,
   324,    45,   601,   627,   628,    45,    77,    72,    73,   449,
    45,    68,    69,    70,    71,   107,   504,    90,   320,    17,
    46,   353,    90,   333,    46,   335,    45,    46,   352,    46,
   354,   720,   721,   722,   107,   130,   131,   132,   133,   107,
   135,   591,    77,   138,   139,    46,    90,    45,   428,   144,
    90,   146,   147,   493,    46,   617,    96,   437,   382,    45,
    45,    45,   442,   107,    90,    50,    45,   107,    90,    45,
   165,    90,    45,    90,    45,   170,   171,     2,    46,    77,
   175,   176,   177,   178,    36,    45,   181,    45,   107,    90,
   185,   186,   187,   188,    46,   427,    46,    45,    90,   194,
    17,   196,   197,   198,   199,   200,    90,   431,   737,   883,
   884,    90,    45,   437,    90,    46,   211,    90,   428,    90,
    45,    46,    90,   107,   448,   449,    45,   222,   107,    46,
    90,   107,    36,    17,   107,   459,   107,   609,   462,   365,
    90,   367,   368,   369,   370,   371,   372,   107,   374,   375,
    45,   377,   378,    17,    46,    72,    73,    90,    37,    90,
    77,    16,    46,    18,    19,     4,     5,     6,    72,   493,
   480,    46,   496,    16,   107,    18,    19,    46,   273,   274,
    72,    73,    46,    38,    39,    46,    41,    42,    43,    95,
    45,   286,    46,    77,   289,    38,    39,   292,    41,    42,
    43,    15,    45,    72,    73,    38,    15,    35,    41,   589,
   305,    66,    67,    77,    45,    90,   845,   597,    17,   144,
    36,   146,    36,    15,   853,   320,    17,    36,    17,    90,
   325,   326,   327,   832,    50,    17,    90,    36,   333,    36,
   335,    17,   337,    46,    36,   170,   718,    46,    17,   344,
    17,   176,   177,   178,   109,    46,    45,    46,   353,    15,
   185,   186,   187,   188,    46,   737,   109,   591,   363,   571,
    46,    17,    47,   716,   199,   200,   905,    46,    77,    46,
    36,   676,   832,    72,    73,    46,    77,    90,    77,    38,
   919,    46,    41,   499,    17,    77,    38,   621,   622,    41,
    46,    77,    46,   865,    45,    72,    73,    46,    77,    46,
    77,    46,   614,    36,    16,    46,    18,    19,    46,    46,
   415,   416,   417,    46,   648,    46,   421,   422,   423,    90,
   425,    77,   427,   428,    46,   430,    38,    39,    45,    41,
    42,    43,   437,    45,    50,    46,    90,   442,   728,   647,
    46,    90,    19,   448,    77,    90,    68,    69,    15,    71,
    90,   286,    90,    90,    49,    46,    78,    79,   463,    90,
    90,    38,    39,   845,    41,    42,    43,   472,    45,    36,
    35,   853,   706,    95,    49,   480,   612,   613,   483,    90,
   109,    90,    36,   717,    90,   320,   107,    46,   109,    66,
    46,    46,   608,    68,    69,   611,    71,   109,   333,    90,
    46,   506,   507,    78,    79,    46,   642,   643,    15,   645,
   646,  1020,    46,    46,    68,    69,    46,    71,   634,    15,
    95,    46,    46,   905,    78,    79,    46,    95,    46,    36,
   107,    90,   109,   745,    90,    90,    46,   919,    46,    36,
    36,    95,    14,    46,    90,    46,    46,    46,    46,   554,
    22,    23,   557,    46,    46,   560,    90,    90,    46,   793,
    90,   566,    46,   568,    46,    90,   571,    36,   802,   859,
   575,   861,    90,    45,    38,   580,     2,    41,    46,    46,
    90,    50,    90,   795,   589,    46,   107,    90,   109,    90,
    90,    90,   597,    65,   806,    46,    37,    90,    90,    46,
    46,    38,    90,    75,    41,   107,    90,   109,    90,   614,
   900,   901,   902,    38,    36,    36,    41,    89,    90,    45,
    46,    93,   856,    90,    15,    51,    52,    49,    45,    90,
   746,    48,   844,    50,    28,   107,   108,   871,   110,   111,
   112,   875,   876,    90,    90,    36,    68,    69,    70,    71,
   940,   885,   886,   887,    46,    74,   661,   662,   663,    50,
    38,    49,    46,    41,    90,    91,    38,    38,    50,    41,
    41,   506,   507,    69,    90,    71,   681,    69,   890,    71,
    90,   686,    78,    79,   918,    46,   691,    38,    66,     9,
    41,   925,   926,    90,    66,    66,    69,    70,    71,    95,
    20,    21,    22,    23,    46,    46,   711,    68,    69,    70,
    71,   716,    46,   139,    34,    78,    79,   107,   144,   109,
   146,   147,   107,   728,   109,    45,    50,    69,    48,    71,
    77,    46,    95,    77,    71,    69,   571,    71,    11,   165,
   745,    78,    79,    49,   170,   171,    46,    90,    46,   175,
   176,   177,   178,    68,    69,    70,    71,    46,    95,   185,
   186,   187,   188,     4,    36,     6,   771,   772,   194,    46,
   196,   197,   198,   199,   200,    36,    96,    97,    98,   614,
   100,   101,   102,   103,   104,   211,   106,   107,    46,    72,
   795,    71,    49,   909,    46,    71,   222,   913,   914,    46,
    11,   806,   807,   808,   809,    90,   922,   923,   924,    46,
    68,    69,    70,    71,    49,  1049,  1050,    46,  1052,  1053,
    48,    68,    69,    70,    71,     8,    90,  1061,    46,    48,
  1064,  1065,  1066,    68,    69,    70,    71,    90,   954,   844,
    46,    46,  1076,   959,   960,    46,    38,   273,    32,    41,
    46,    43,    46,    45,   859,    36,   861,    46,    46,   864,
   286,    46,    71,   289,    46,    90,   292,    68,    69,    70,
    71,    46,    46,    45,    66,    11,    46,    50,     1,   305,
    46,    50,    46,    75,     7,   890,    68,    69,    70,    71,
     2,    14,    46,    46,   320,   900,   901,   902,    90,    22,
    23,    51,    36,    46,    96,     8,    46,   333,    46,   335,
   745,   337,   107,    48,    46,   107,    46,    46,   344,    46,
    72,   107,    45,    71,    45,    48,    46,    50,    68,    69,
    70,    71,    36,    45,    46,   940,    45,   363,    49,    51,
    52,    49,    65,  1059,  1060,    51,  1062,  1063,    68,    69,
    70,    71,    75,    19,  1070,    51,    51,  1073,  1074,  1075,
   795,    49,    68,    69,    70,    71,    89,    90,    51,  1085,
    93,   806,    38,    39,    97,    41,    42,    43,    90,    91,
    68,    69,    70,    71,   107,   108,    49,   110,   111,   112,
    36,    46,   997,   998,   110,  1000,  1001,    46,    49,    41,
    45,    45,   428,    36,    51,    68,    69,    70,    71,   844,
    48,   437,    68,    69,    70,    71,   442,    68,    69,    70,
    71,  1026,   448,    46,  1029,  1030,  1031,   139,     2,    46,
    46,    37,   144,    48,   146,   147,    49,   463,    46,    46,
    45,    45,    45,  1048,    37,    46,    90,    91,    46,    46,
    49,    51,    46,   165,   480,   890,    51,   483,   170,   171,
    45,    14,    45,   175,   176,   177,   178,    45,    50,    22,
    23,    45,    46,   185,   186,   187,   188,    46,    52,    46,
   506,   507,    46,    45,    50,    50,    46,    46,    46,    41,
    51,    46,    45,    50,    50,   139,    50,    45,    45,   211,
    51,    51,   146,    90,    90,    41,    90,    50,    45,    90,
   222,    50,    65,   384,    46,   386,    90,    91,   389,    50,
    46,    51,    75,    46,    46,    46,   170,    90,    41,    46,
   110,   110,    46,    51,   110,   110,    89,    90,    46,   974,
    93,    90,    51,    46,    90,   571,    90,    51,    46,    90,
    46,    51,    51,    46,   107,   108,    51,   110,   111,   112,
    46,   273,    46,   589,    46,   139,    46,   211,   110,    45,
   144,   597,   146,    51,   286,   110,   110,   289,   222,    51,
   292,   110,    72,    51,    46,    46,    46,    46,   614,    46,
    46,    46,    46,   305,   110,     0,   170,   171,    50,    50,
    46,   175,   176,   177,   178,    50,    50,    46,   320,    46,
    46,   185,   186,   187,   188,    46,    50,    50,    50,    46,
    50,   333,     1,   335,    50,   337,    51,    51,     7,   273,
    51,    51,   344,    51,    51,    14,    51,   211,    51,    51,
     0,   380,   504,    22,    23,   289,   448,   573,   222,    56,
   467,   632,    -1,   599,    -1,    -1,   527,    -1,    -1,   530,
    -1,   532,    -1,    -1,   535,    -1,    45,    74,    75,    -1,
    -1,   542,    -1,   544,    -1,   546,   547,   548,    -1,    86,
    87,    88,    89,    90,    91,    92,    65,    -1,    -1,   333,
   716,   335,    -1,   337,    -1,    -1,    75,    -1,    -1,   273,
   344,    -1,   728,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    89,    90,   286,    -1,    93,   289,   428,    -1,    97,   745,
    -1,    -1,    -1,    -1,    -1,   437,    -1,    -1,   107,   108,
   442,   110,   111,   112,    -1,    -1,   448,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   320,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,   333,
    -1,   335,    -1,   337,    14,    -1,    -1,    -1,   480,   795,
   344,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,   650,
   806,    -1,    -1,   654,   428,   656,    -1,   658,    -1,   660,
   661,   662,   663,   437,    -1,    45,   667,    -1,   442,   670,
    -1,    -1,    -1,    -1,   675,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,   844,   415,
   416,   417,    -1,    -1,    -1,    75,    -1,   423,    -1,    -1,
    -1,    -1,    -1,   859,    -1,   861,   480,    -1,    -1,    89,
    90,    -1,    -1,    93,    -1,    -1,    -1,    97,    -1,    -1,
    -1,    -1,    -1,    -1,   428,    -1,    -1,   107,   108,   571,
   110,   111,   112,   437,   890,    -1,    -1,    -1,   442,    -1,
    -1,    -1,    -1,    -1,   900,   901,   902,   589,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,
    -1,    -1,   763,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   771,   772,   614,   774,    -1,   776,   480,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   940,    -1,    -1,    -1,     1,    -1,
    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,   530,    -1,
   532,    14,    -1,   535,    -1,    -1,   807,   808,   809,    22,
    23,    -1,    -1,    -1,    -1,   589,   548,    -1,   974,    -1,
    -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,   554,    -1,
   556,   557,    45,   559,   560,    48,   562,    50,    -1,   565,
    -1,   567,   568,    -1,   570,    -1,    -1,    -1,    -1,    -1,
  1006,    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,   864,    -1,    -1,    -1,   571,    -1,    -1,
    -1,    -1,    -1,    -1,   716,    -1,    89,    90,    -1,    -1,
    93,    -1,    -1,    -1,    97,   589,   728,    -1,    -1,    -1,
    -1,    -1,    -1,   597,   107,   108,    -1,   110,   111,   112,
    -1,    -1,    -1,   745,    -1,    -1,    -1,    -1,    -1,    -1,
   614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   650,    -1,
    -1,    -1,   654,    -1,   656,    -1,   658,    -1,   660,    -1,
   662,   663,    -1,    -1,    -1,   667,    -1,    -1,   670,    -1,
    -1,    -1,    -1,   675,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   795,   728,   681,    -1,   683,   684,    -1,
   686,    -1,   688,   689,   806,    -1,    -1,   693,   694,    -1,
    -1,    -1,   698,    -1,   700,   701,    -1,    -1,   704,   705,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   997,   998,    -1,  1000,
  1001,    -1,   844,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   716,    -1,    -1,    -1,    -1,   859,    -1,   861,
    -1,    -1,    -1,    -1,   728,  1026,    -1,    -1,  1029,  1030,
  1031,   763,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   771,
   772,   745,   774,    -1,   776,    -1,    -1,  1048,   890,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   783,   900,   901,
   902,   787,    -1,    -1,   790,   791,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   800,    -1,   808,   809,    -1,     7,
    -1,    -1,    -1,    -1,    -1,   859,    14,   861,    16,    -1,
    -1,   795,    -1,    -1,    22,    23,    -1,    -1,   940,    -1,
    -1,    -1,   806,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
    48,    -1,    50,    -1,    -1,    -1,   900,   901,   902,    -1,
    -1,   857,   864,    -1,    -1,    -1,    -1,    65,    66,    67,
   844,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   859,    -1,   861,    -1,    -1,
    -1,    89,    90,    -1,    -1,    93,   940,   893,    -1,    97,
   896,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
   108,   109,   110,   111,   112,    -1,   890,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   900,   901,   902,    -1,
    -1,    -1,    -1,   929,    -1,   931,    -1,   933,    -1,    -1,
    -1,     3,    -1,    -1,    -1,     7,    -1,     9,    10,    -1,
    -1,    -1,    -1,    -1,    16,    -1,    18,    19,    20,    21,
    -1,    -1,    24,    25,    26,    27,   940,    29,    30,    31,
    -1,    33,    34,    -1,    -1,    -1,    38,    39,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,
    52,    -1,    -1,    -1,    -1,     7,   998,    -1,    -1,  1001,
    -1,    -1,    14,    65,    66,    67,    -1,    -1,    -1,    -1,
    22,    23,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1026,    -1,    -1,  1029,    90,  1031,
    -1,    -1,    -1,    45,    96,    97,    98,    99,   100,   101,
   102,    -1,    -1,    -1,     3,   107,  1048,   109,     7,    -1,
     9,    10,    -1,    65,    -1,    -1,    -1,    16,    -1,    18,
    19,    20,    21,    75,    -1,    24,    25,    26,    27,    -1,
    29,    30,    31,    -1,    33,    34,    -1,    89,    90,    38,
    39,    93,    41,    42,    43,    97,    45,    -1,    -1,    48,
    -1,    -1,    -1,    52,    -1,   107,   108,    -1,   110,   111,
   112,    -1,    -1,    14,    -1,    -1,    65,    66,    67,    -1,
    -1,    22,    23,    -1,    -1,    -1,    75,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    -1,    -1,    45,    -1,    -1,    96,    97,    98,
    99,   100,   101,   102,    -1,     3,    -1,    -1,   107,     7,
   109,     9,    10,    -1,    65,    -1,    -1,    -1,    16,    -1,
    18,    19,    20,    21,    75,    -1,    24,    25,    26,    27,
    -1,    29,    30,    31,    -1,    33,    34,    -1,    89,    90,
    38,    39,    93,    41,    42,    43,    -1,    45,    -1,    -1,
    48,    -1,    -1,    -1,    52,    56,   107,   108,    -1,   110,
   111,   112,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,
    -1,    -1,    -1,    74,    75,    76,    -1,    75,    -1,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    90,    94,    -1,    -1,    -1,    -1,    96,    -1,
    98,    99,   100,   101,   102,    -1,     3,    -1,    -1,   107,
     7,   109,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,
    -1,    18,    19,    20,    21,    -1,    -1,    24,    25,    26,
    27,    -1,    29,    30,    31,    -1,    33,    34,    -1,    -1,
    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,     7,
    -1,    48,    -1,    -1,    -1,    52,    14,    -1,    16,    -1,
    18,    19,    -1,    -1,    22,    23,    -1,    -1,    65,    66,
    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
    -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    96,
    -1,    98,    99,   100,   101,   102,    -1,    65,    66,    67,
   107,    -1,   109,    -1,    -1,    -1,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,
    -1,    89,    90,    -1,    -1,    93,    14,    -1,    96,    97,
    -1,    19,    -1,    -1,    22,    23,    -1,    -1,    -1,   107,
   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,
    -1,    89,    90,    -1,    14,    93,    16,    -1,    -1,    97,
    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,   107,
   108,   109,   110,   111,   112,    -1,    -1,    -1,    38,    -1,
    -1,    41,    42,    43,    -1,    45,    -1,    -1,    48,    -1,
    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    89,
    90,    -1,    14,    93,    16,    -1,    -1,    97,    -1,    -1,
    22,    23,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
   110,   111,   112,    -1,    -1,    -1,    38,    -1,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    48,    -1,    50,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     7,    -1,    -1,    -1,    89,    90,    -1,
    14,    93,    16,    -1,    -1,    97,    -1,    -1,    22,    23,
    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,     7,    -1,    48,    -1,    50,    -1,    -1,    14,
    -1,    16,    -1,    -1,    -1,    -1,    -1,    22,    23,    -1,
    -1,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    75,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
    45,     7,    -1,    -1,    -1,    89,    90,    -1,    14,    93,
    16,    -1,    -1,    97,    -1,    -1,    22,    23,    -1,    -1,
    65,    66,    67,   107,   108,   109,   110,   111,   112,    -1,
    75,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
     7,    -1,    -1,    -1,    89,    90,    -1,    14,    93,    16,
    -1,    96,    97,    -1,    -1,    22,    23,    -1,    -1,    65,
    66,    67,   107,   108,   109,   110,   111,   112,    -1,    75,
    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,     7,
    -1,    -1,    -1,    89,    90,    -1,    14,    93,    16,    -1,
    96,    97,    -1,    -1,    22,    23,    -1,    -1,    65,    66,
    67,   107,   108,   109,   110,   111,   112,    -1,    75,    -1,
    38,    -1,    -1,    41,    42,    43,    -1,    45,     7,    -1,
    -1,    -1,    89,    90,    -1,    14,    93,    16,    -1,    -1,
    97,    -1,    -1,    22,    23,    -1,    -1,    65,    66,    67,
   107,   108,   109,   110,   111,   112,    -1,    75,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,     7,    -1,    -1,
    -1,    89,    90,    -1,    14,    93,    16,    -1,    -1,    97,
    -1,    -1,    22,    23,    -1,    -1,    65,    66,    67,   107,
   108,   109,   110,   111,   112,    -1,    75,    -1,    38,    -1,
    -1,    41,    42,    43,    -1,    45,     7,    -1,    -1,    -1,
    89,    90,    -1,    14,    93,    16,    -1,    -1,    97,    -1,
    -1,    22,    23,    -1,    -1,    65,    66,    67,   107,   108,
   109,   110,   111,   112,    -1,    75,    -1,    38,    -1,    -1,
    41,    42,    43,    -1,    45,     7,    -1,    -1,    -1,    89,
    90,    -1,    14,    93,    16,    -1,    -1,    97,    -1,    -1,
    22,    23,    -1,    -1,    65,    66,    67,   107,   108,   109,
   110,   111,   112,    -1,    75,    -1,    38,    -1,    -1,    41,
    42,    43,    -1,    45,     7,    -1,    -1,    -1,    89,    90,
    -1,    14,    93,    16,    -1,    -1,    97,    -1,    -1,    22,
    23,    -1,    -1,    65,    66,    67,   107,   108,   109,   110,
   111,   112,    -1,    75,    -1,    38,    -1,    -1,    41,    42,
    43,    -1,    45,     7,    -1,    -1,    -1,    89,    90,    -1,
    14,    93,    16,    -1,    -1,    97,    -1,    -1,    22,    23,
    -1,    -1,    65,    66,    67,   107,   108,   109,   110,   111,
   112,    -1,    75,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,     7,    -1,    -1,    -1,    89,    90,    -1,    14,
    93,    16,    -1,    -1,    97,    -1,    -1,    22,    23,    -1,
    -1,    65,    66,    67,   107,   108,   109,   110,   111,   112,
    -1,    75,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
    45,     7,    -1,    -1,    -1,    89,    90,    -1,    14,    93,
    16,    -1,    -1,    97,    -1,    -1,    22,    23,    -1,    -1,
    65,    66,    67,   107,   108,   109,   110,   111,   112,    -1,
    75,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
    -1,    -1,    -1,    -1,    89,    90,    14,    -1,    93,    -1,
    -1,    -1,    97,    -1,    22,    23,    -1,    -1,    -1,    65,
    66,    67,   107,   108,   109,   110,   111,   112,    -1,    75,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,     7,    -1,
    -1,    -1,    -1,    89,    90,    14,    -1,    93,    -1,    -1,
    19,    97,    -1,    22,    23,    -1,    -1,    65,    -1,    -1,
    -1,   107,   108,   109,   110,   111,   112,    75,    -1,    38,
    39,    -1,    41,    42,    43,    -1,    45,     7,    -1,    -1,
    -1,    89,    90,    -1,    14,    93,    -1,    -1,    -1,    19,
    -1,    -1,    22,    23,    -1,    -1,    65,    66,    -1,   107,
   108,    -1,   110,   111,   112,    -1,    75,    -1,    38,    39,
    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
    89,    90,    -1,    -1,    93,    -1,    -1,    -1,    97,    -1,
    -1,    -1,    -1,     7,    -1,    65,    66,    -1,   107,   108,
    14,   110,   111,   112,    -1,    75,    -1,    -1,    22,    23,
    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,    89,
    90,    -1,    -1,    93,    22,    23,    -1,    97,    -1,    -1,
    -1,    45,    -1,    -1,    48,    -1,    50,   107,   108,    -1,
   110,   111,   112,     7,    -1,    -1,    -1,    45,    -1,    -1,
    14,    65,    -1,    -1,    -1,    -1,    14,    -1,    22,    23,
    -1,    75,    -1,    -1,    22,    23,    -1,    65,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    75,    -1,    93,
    -1,    45,    -1,    97,    48,    -1,    50,    45,    -1,    -1,
    -1,    89,    90,   107,   108,    93,   110,   111,   112,    -1,
    -1,    65,    -1,    -1,    -1,    -1,    -1,    65,    -1,   107,
   108,    75,   110,   111,   112,    -1,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    -1,    14,    93,
    -1,    89,    90,    97,    -1,    93,    22,    23,    -1,    -1,
    -1,    -1,    -1,   107,   108,    -1,   110,   111,   112,   107,
   108,    -1,   110,   111,   112,    14,    -1,    -1,    -1,    45,
    -1,    -1,    14,    22,    23,    -1,    -1,    -1,    14,    -1,
    22,    23,    -1,    -1,    -1,    -1,    22,    23,    -1,    65,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    75,
    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    45,
    -1,    -1,    -1,    89,    90,    -1,    65,    93,    -1,    -1,
    -1,    -1,    -1,    65,    -1,    -1,    75,    -1,    -1,    65,
    -1,   107,   108,    75,   110,   111,   112,    -1,    -1,    75,
    89,    90,    -1,    -1,    93,    -1,    -1,    89,    90,    -1,
    -1,    93,    -1,    89,    90,    -1,    -1,    93,   107,   108,
    -1,   110,   111,   112,    -1,   107,   108,    -1,   110,   111,
   112,   107,   108,    14,   110,   111,   112,    -1,    -1,    14,
    -1,    22,    23,    -1,    -1,    14,    -1,    22,    23,    -1,
    -1,    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
    65,    -1,    -1,    -1,    75,    -1,    65,    -1,    -1,    -1,
    75,    -1,    -1,    -1,    -1,    -1,    75,    -1,    89,    90,
    -1,    -1,    93,    -1,    89,    90,    -1,    -1,    93,    -1,
    89,    90,    -1,    -1,    93,    -1,   107,   108,    -1,   110,
   111,   112,   107,   108,    -1,   110,   111,   112,   107,   108,
    14,   110,   111,   112,    -1,    -1,    -1,    -1,    22,    23,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    -1,    -1,    93,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   107,   108,    -1,   110,   111,   112
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 149 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 179 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 180 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 186 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 187 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 189 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 200 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 201 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 209 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 210 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 212 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 215 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 217 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 221 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 222 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 227 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 230 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 237 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 245 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								yyvsp[0].tnode->SetChild1(struct_tree);
								struct_tree=yyvsp[0].tnode;
																
								/*CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1($3);
								$$=$1;*/
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 357 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 358 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 359 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 360 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 361 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 368 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 369 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 370 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 371 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 377 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 378 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 379 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 380 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 382 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 385 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 388 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 394 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 398 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 404 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 412 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 423 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 426 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 64:
#line 439 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 65:
#line 444 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 66:
#line 448 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 67:
#line 454 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 68:
#line 455 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 69:
#line 461 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 70:
#line 466 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 71:
#line 471 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 72:
#line 480 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 73:
#line 488 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 74:
#line 499 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 75:
#line 512 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 76:
#line 513 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 77:
#line 514 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 519 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 79:
#line 523 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 80:
#line 527 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 81:
#line 531 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 82:
#line 535 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 539 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 545 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 85:
#line 547 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 86:
#line 550 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 87:
#line 555 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 88:
#line 566 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 89:
#line 567 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 90:
#line 568 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 91:
#line 571 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 92:
#line 572 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 93:
#line 573 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 94:
#line 581 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 95:
#line 585 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 96:
#line 589 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 594 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 600 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 605 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 100:
#line 612 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 101:
#line 618 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 102:
#line 629 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 103:
#line 630 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 104:
#line 631 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 105:
#line 636 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 106:
#line 643 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 107:
#line 646 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 108:
#line 647 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 656 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 110:
#line 659 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 111:
#line 660 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 112:
#line 661 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 662 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 663 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 115:
#line 664 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 116:
#line 665 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 117:
#line 669 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 118:
#line 671 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 119:
#line 673 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 120:
#line 675 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 121:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 122:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 125:
#line 685 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 687 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 689 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 128:
#line 691 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 129:
#line 693 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 697 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 131:
#line 698 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 132:
#line 701 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 133:
#line 702 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 134:
#line 703 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 135:
#line 704 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 136:
#line 705 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 137:
#line 708 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 138:
#line 712 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 139:
#line 713 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 140:
#line 718 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, INTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 141:
#line 723 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, UINTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 142:
#line 728 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,FLOATPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 143:
#line 733 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,CHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 144:
#line 738 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, UCHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 145:
#line 743 "msv.y"
{ 
	      yyval.tnode=yyvsp[-1].tnode
	   ;
    break;}
case 146:
#line 749 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 147:
#line 750 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 148:
#line 751 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 149:
#line 757 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 150:
#line 758 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 151:
#line 760 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 152:
#line 762 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 153:
#line 764 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 154:
#line 766 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 155:
#line 767 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 156:
#line 773 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 157:
#line 774 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 158:
#line 775 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 159:
#line 776 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 160:
#line 777 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 161:
#line 778 "msv.y"
{ yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 162:
#line 782 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 163:
#line 786 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 164:
#line 787 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 165:
#line 791 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 166:
#line 792 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 167:
#line 796 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 168:
#line 797 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 169:
#line 798 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 170:
#line 799 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 171:
#line 800 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 801 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 802 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 803 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 804 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 805 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 806 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 807 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 808 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 180:
#line 809 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 181:
#line 810 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 182:
#line 811 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 183:
#line 812 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 184:
#line 813 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 185:
#line 816 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 186:
#line 817 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 187:
#line 818 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 188:
#line 819 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 189:
#line 820 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 190:
#line 821 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 191:
#line 822 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 192:
#line 823 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 193:
#line 824 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 194:
#line 825 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 195:
#line 830 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 196:
#line 831 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 197:
#line 832 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 198:
#line 833 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 199:
#line 840 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 200:
#line 844 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 201:
#line 852 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 202:
#line 864 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 203:
#line 877 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 889 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 205:
#line 893 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 206:
#line 901 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 207:
#line 904 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 208:
#line 905 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 209:
#line 910 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 210:
#line 914 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 211:
#line 918 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 212:
#line 923 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 213:
#line 926 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 214:
#line 935 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 215:
#line 936 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 216:
#line 937 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 217:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 218:
#line 941 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 219:
#line 944 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 220:
#line 945 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 221:
#line 948 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 222:
#line 949 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 223:
#line 950 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 224:
#line 951 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 225:
#line 952 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 226:
#line 953 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 227:
#line 956 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 228:
#line 957 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 229:
#line 958 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 230:
#line 959 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 231:
#line 960 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 232:
#line 961 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 233:
#line 963 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 234:
#line 964 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 235:
#line 966 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 236:
#line 967 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 237:
#line 969 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 238:
#line 980 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 239:
#line 981 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 240:
#line 982 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 241:
#line 983 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 242:
#line 984 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 243:
#line 985 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 244:
#line 993 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 245:
#line 994 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 246:
#line 998 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 247:
#line 999 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 248:
#line 1006 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 249:
#line 1010 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 250:
#line 1015 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 251:
#line 1021 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 252:
#line 1027 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 253:
#line 1033 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 254:
#line 1043 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 255:
#line 1049 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 256:
#line 1055 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 257:
#line 1061 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 258:
#line 1069 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 259:
#line 1073 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 260:
#line 1077 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 261:
#line 1083 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 262:
#line 1087 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 263:
#line 1091 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 264:
#line 1097 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 265:
#line 1103 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 266:
#line 1110 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 267:
#line 1116 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 268:
#line 1122 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 269:
#line 1126 "msv.y"
{
		  CSyntaxNode* pChild00=new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
		  CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, pChild00, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 270:
#line 1134 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].cString,yyvsp[-2].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 271:
#line 1139 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 272:
#line 1143 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 273:
#line 1147 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 274:
#line 1151 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 275:
#line 1157 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 276:
#line 1163 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 277:
#line 1169 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 278:
#line 1176 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 279:
#line 1184 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 280:
#line 1190 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 281:
#line 1205 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].cString,yyvsp[-2].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;

		;
    break;}
case 282:
#line 1211 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 283:
#line 1216 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 284:
#line 1224 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 285:
#line 1231 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 286:
#line 1237 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 287:
#line 1243 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 288:
#line 1246 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 289:
#line 1256 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 290:
#line 1267 "msv.y"
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
case 291:
#line 1271 "msv.y"
{
	      yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].cString, NULL, STRUCTTYPE);
	   ;
    break;}
case 292:
#line 1274 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 293:
#line 1275 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 294:
#line 1280 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 295:
#line 1293 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 296:
#line 1294 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 297:
#line 1302 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 298:
#line 1304 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 299:
#line 1311 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 300:
#line 1313 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 301:
#line 1319 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 302:
#line 1320 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 303:
#line 1324 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 304:
#line 1329 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 305:
#line 1334 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 306:
#line 1339 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 307:
#line 1346 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 308:
#line 1349 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 309:
#line 1350 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 310:
#line 1356 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1358 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 313:
#line 1378 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 314:
#line 1380 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 315:
#line 1382 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 316:
#line 1383 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 317:
#line 1389 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 318:
#line 1396 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 319:
#line 1404 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 320:
#line 1412 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 321:
#line 1416 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 322:
#line 1420 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 323:
#line 1426 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 324:
#line 1430 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 325:
#line 1436 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 326:
#line 1440 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 327:
#line 1447 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 328:
#line 1451 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 329:
#line 1455 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 330:
#line 1462 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 331:
#line 1466 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 332:
#line 1469 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 333:
#line 1474 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 334:
#line 1483 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 335:
#line 1484 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 336:
#line 1490 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 337:
#line 1491 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 338:
#line 1495 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 339:
#line 1496 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 340:
#line 1501 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 341:
#line 1502 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 342:
#line 1503 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 343:
#line 1504 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 344:
#line 1505 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 345:
#line 1508 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 346:
#line 1509 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 347:
#line 1510 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 348:
#line 1516 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 349:
#line 1517 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 350:
#line 1518 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 351:
#line 1520 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 352:
#line 1521 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 353:
#line 1522 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 354:
#line 1524 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 355:
#line 1525 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 356:
#line 1526 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 357:
#line 1527 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 358:
#line 1529 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 359:
#line 1530 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 360:
#line 1531 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 361:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 362:
#line 1533 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 363:
#line 1534 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 364:
#line 1535 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 365:
#line 1539 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 366:
#line 1540 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1541 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1542 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1543 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1544 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 371:
#line 1545 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1547 "msv.y"
