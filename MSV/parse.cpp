
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	IF	262
#define	ELSE	263
#define	EMPTY	264
#define	AWAIT	265
#define	PROJECTION	266
#define	PBEGIN	267
#define	PEND	268
#define	POINTERNULL	269
#define	ARRAY	270
#define	STRUCT	271
#define	DOT	272
#define	UNION	273
#define	FILEDECLARATION	274
#define	MORE	275
#define	DEFINE	276
#define	MY_TRUE	277
#define	MY_FALSE	278
#define	EXIST	279
#define	FRAME	280
#define	FOR	281
#define	WHILE	282
#define	DO	283
#define	TRUE	284
#define	FALSE	285
#define	REPEAT	286
#define	UNTIL	287
#define	DISPLAY	288
#define	SKIP	289
#define	THEN	290
#define	COMMA	291
#define	COLON	292
#define	INTDECLARATION	293
#define	STRDECLARATION	294
#define	POINTERDECLARATION	295
#define	CHARDECLARATION	296
#define	VOIDDECLARATION	297
#define	FLOATDECLARATION	298
#define	LISTDECLARATION	299
#define	OPEN_PAR	300
#define	CLOSE_PAR	301
#define	TIMES	302
#define	OPEN_BPAR	303
#define	CLOSE_BPAR	304
#define	OPEN_MPAR	305
#define	CLOSE_MPAR	306
#define	FUNCTION	307
#define	OVER	308
#define	CYLINDER	309
#define	OVEREP	310
#define	INTER_OR	311
#define	NON_DETERMINED	312
#define	SEND	313
#define	RECEIVE	314
#define	PROCESS	315
#define	CHANNEL	316
#define	PUT	317
#define	GET	318
#define	ERROR_TOKEN	319
#define	EXTERN	320
#define	UNSIGNED	321
#define	SIGNED	322
#define	CHOP	323
#define	OR	324
#define	PARALLEL	325
#define	AND	326
#define	ASS_P	327
#define	ASS_N	328
#define	BOOL_OR	329
#define	CON	330
#define	ADDRESS	331
#define	BOOL_AND	332
#define	IMPLY	333
#define	IFF	334
#define	PROPIMPLY	335
#define	NE	336
#define	EQ	337
#define	GE	338
#define	LE	339
#define	GT	340
#define	LT	341
#define	LST	342
#define	RST	343
#define	ADD	344
#define	SUB	345
#define	MUL	346
#define	DIV	347
#define	MOD	348
#define	BNE	349
#define	CHOPSTAR	350
#define	NEXT	351
#define	NEGATION	352
#define	LENGTH	353
#define	REQUEST	354
#define	FINAL	355
#define	KEEP	356
#define	ALWAYS	357
#define	HALT	358
#define	W_NEXT	359
#define	PREFIX	360
#define	SOMETIMES	361
#define	ID	362
#define	STRLITERAL	363
#define	STRUCT_TYPE	364
#define	INTLITERAL	365
#define	FLOATLITERAL	366
#define	CHARLITERAL	367

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1060
#define	YYFLAG		-32768
#define	YYNTBASE	113

#define YYTRANSLATE(x) ((unsigned)(x) <= 367 ? yytranslate[x] : 182)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   216,
   226,   228,   230,   238,   242,   244,   248,   250,   251,   256,
   262,   267,   272,   275,   278,   281,   284,   286,   289,   292,
   296,   300,   304,   308,   316,   325,   337,   351,   353,   355,
   357,   359,   361,   363,   366,   373,   378,   384,   390,   399,
   408,   411,   414,   417,   418,   425,   433,   434,   437,   441,
   443,   445,   447,   449,   453,   456,   458,   470,   483,   495,
   507,   525,   544,   562,   581,   601,   620,   638,   657,   675,
   677,   679,   681,   683,   694,   698,   700,   705,   711,   715,
   727,   740,   752,   764,   777,   781,   785,   788,   789,   792,
   795,   798,   806,   813,   818,   822,   824,   828,   832,   836,
   840,   844,   848,   852,   856,   860,   864,   870,   874,   878,
   882,   886,   890,   894,   898,   902,   905,   907,   910,   911,
   913,   915,   917,   919,   921,   923,   925,   927,   929,   931,
   933,   935,   938,   941,   943,   945,   947,   951,   955,   957,
   959,   963,   968,   973,   978,   983,   988,   992,   996,  1000,
  1001,  1004,  1007,  1010,  1013,  1016,  1020,  1025,  1030,  1035,
  1041,  1047,  1053,  1059,  1065,  1072,  1078,  1084,  1091,  1097,
  1104,  1112,  1119,  1126,  1134,  1141,  1148,  1154,  1162,  1169,
  1171,  1174,  1177,  1179,  1181,  1185,  1188,  1192,  1197,  1203,
  1208,  1212,  1217,  1223,  1228,  1231,  1235,  1240,  1243,  1247,
  1252,  1257,  1263,  1271,  1276,  1280,  1286,  1295,  1296,  1299,
  1300,  1303,  1305,  1307,  1308,  1311,  1315,  1316,  1319,  1323,
  1326,  1330,  1333,  1335,  1339,  1341,  1343,  1345,  1347,  1351,
  1352,  1355,  1356,  1360,  1361,  1364,  1368,  1372,  1376,  1380,
  1386,  1396,  1398,  1400,  1401,  1403,  1404,  1406,  1407,  1415,
  1423,  1429,  1432,  1434,  1435,  1441,  1444,  1445,  1450,  1456,
  1457,  1461,  1466,  1472,  1477,  1483,  1488,  1489,  1493,  1497,
  1502,  1507,  1512,  1517,  1522,  1527,  1532,  1537,  1544,  1549,
  1554,  1559,  1566,  1570,  1574,  1579,  1583,  1584,  1588,  1592,
  1596,  1600,  1603
};

static const short yyrhs[] = {   114,
   117,     0,    12,   115,    13,     0,     0,   115,    71,   115,
     0,   115,    69,   115,     0,   115,    79,   115,     0,   115,
    80,   115,     0,   115,    68,   115,     0,   102,   115,     0,
   101,   115,     0,   106,   115,     0,   104,   115,     0,    96,
   115,     0,    34,     0,    22,     0,    23,     0,    98,   138,
     0,     9,     0,    20,     0,   103,   115,     0,   100,   115,
     0,    97,   115,     0,    48,   115,   116,    49,    11,    48,
   115,    49,     0,   107,     0,    21,   107,    37,   138,     0,
   115,    95,     0,    45,   115,    46,     0,    36,   115,   116,
     0,     0,   117,    71,   117,     0,   117,    69,   117,     0,
   117,    68,   117,     0,   128,     0,   123,     0,   171,     0,
   174,     0,   165,     0,   166,     0,   167,     0,    96,    45,
   117,    46,     0,   101,    45,   117,    46,     0,   102,    45,
   117,    46,     0,    10,    45,   138,    46,     0,    31,    48,
   117,    49,    32,    45,   138,    46,     0,    34,     0,     9,
     0,    20,     0,    98,    45,   138,    46,     0,   178,     0,
   176,     0,    29,     0,    30,     0,   100,    45,   117,    46,
     0,   117,    70,   117,     0,    45,   164,    46,    78,    50,
   117,    51,     0,    25,    45,   157,   162,    46,    71,    45,
   117,    46,     0,    48,   117,   163,    49,    11,   155,     0,
    48,   117,    49,    11,   155,     0,    52,   107,    45,   151,
    46,    48,   117,    49,     0,    21,   107,    45,   151,    46,
    72,    48,   119,    49,     0,   121,     0,   120,     0,    24,
   157,   152,    37,    48,   117,    49,     0,    45,   117,    46,
     0,   123,     0,   123,    71,   118,     0,   117,     0,     0,
   107,    45,   153,    46,     0,    65,   107,    45,   153,    46,
     0,   134,    45,   153,    46,     0,   122,    48,   118,    49,
     0,    16,   107,     0,    18,   107,     0,    67,   124,     0,
    66,   124,     0,   124,     0,   125,   126,     0,   109,   126,
     0,    16,   107,   126,     0,    18,   107,   126,     0,    16,
   109,   126,     0,    18,   109,   126,     0,    45,    91,   157,
    46,    45,   151,    46,     0,    45,    91,    91,   157,    46,
    45,   151,    46,     0,    45,    91,   107,    50,   138,   136,
    51,    46,    45,   151,    46,     0,    45,    91,   107,    50,
   138,   136,    51,    46,    45,   151,    46,    72,   142,     0,
    38,     0,    43,     0,    41,     0,    39,     0,    42,     0,
    19,     0,   157,   127,     0,   107,    50,   138,   136,    51,
   127,     0,   157,    72,   132,   127,     0,   107,    15,    72,
   142,   127,     0,   107,    15,    72,   158,   127,     0,   107,
    50,   138,   136,    51,    72,   142,   127,     0,   107,    50,
   138,   136,    51,    72,   158,   127,     0,    91,   126,     0,
    36,   126,     0,    36,     1,     0,     0,   107,    50,   138,
   136,    51,     0,     0,    36,   107,    50,   138,   136,    51,
     0,     0,     0,    36,     1,     0,   129,   131,   132,     0,
   157,     0,   180,     0,   134,     0,   137,     0,    45,   129,
    46,     0,    96,   129,     0,   130,     0,    45,    45,    41,
    91,    46,   110,    46,    50,   138,   136,    51,     0,    45,
    45,    66,    41,    91,    46,   110,    46,    50,   138,   136,
    51,     0,    45,    45,    38,    91,    46,   110,    46,    50,
   138,   136,    51,     0,    45,    45,    43,    91,    46,   110,
    46,    50,   138,   136,    51,     0,    45,    45,    41,    91,
    46,    45,    45,    41,    91,    46,   110,    46,    46,    50,
   138,   136,    51,     0,    45,    45,    41,    91,    46,    45,
    45,    66,    41,    91,    46,   110,    46,    46,    50,   138,
   136,    51,     0,    45,    45,    41,    91,    46,    45,    45,
    38,    91,    46,   110,    46,    46,    50,   138,   136,    51,
     0,    45,    45,    66,    41,    91,    46,    45,    45,    41,
    91,    46,   110,    46,    46,    50,   138,   136,    51,     0,
    45,    45,    66,    41,    91,    46,    45,    45,    66,    41,
    91,    46,   110,    46,    46,    50,   138,   136,    51,     0,
    45,    45,    66,    41,    91,    46,    45,    45,    38,    91,
    46,   110,    46,    46,    50,   138,   136,    51,     0,    45,
    45,    38,    91,    46,    45,    45,    41,    91,    46,   110,
    46,    46,    50,   138,   136,    51,     0,    45,    45,    38,
    91,    46,    45,    45,    66,    41,    91,    46,   110,    46,
    46,    50,   138,   136,    51,     0,    45,    45,    38,    91,
    46,    45,    45,    38,    91,    46,   110,    46,    46,    50,
   138,   136,    51,     0,    72,     0,    73,     0,   138,     0,
   142,     0,    45,   158,    46,    45,   125,    46,    45,   151,
    46,   120,     0,    45,   132,    46,     0,   133,     0,    91,
    45,   130,    46,     0,   107,    50,   138,   136,    51,     0,
    45,   134,    46,     0,    45,    45,    38,    91,    46,   157,
    46,    50,   138,   136,    51,     0,    45,    45,    66,    38,
    91,    46,   157,    46,    50,   138,   136,    51,     0,    45,
    45,    43,    91,    46,   157,    46,    50,   138,   136,    51,
     0,    45,    45,    41,    91,    46,   157,    46,    50,   138,
   136,    51,     0,    45,    45,    66,    41,    91,    46,   157,
    46,    50,   138,   136,    51,     0,    45,   135,    46,     0,
    36,   138,   136,     0,    36,     1,     0,     0,    91,   157,
     0,    91,   137,     0,    91,   134,     0,    45,   137,    46,
    50,   138,   136,    51,     0,    91,    45,   150,    91,    46,
   138,     0,    91,    45,   138,    46,     0,    45,   137,    46,
     0,   141,     0,   138,    89,   138,     0,   138,    90,   138,
     0,   138,    91,   138,     0,   138,    92,   138,     0,   138,
    93,   138,     0,   138,    87,   138,     0,   138,    88,   138,
     0,   138,    76,   138,     0,   138,    56,   138,     0,   138,
    75,   138,     0,     7,   138,    35,   138,   140,     0,   138,
    85,   138,     0,   138,    83,   138,     0,   138,    84,   138,
     0,   138,    81,   138,     0,   138,    86,   138,     0,   138,
    82,   138,     0,   138,    77,   138,     0,   138,    74,   138,
     0,    97,   138,     0,   141,     0,     8,   138,     0,     0,
   159,     0,   160,     0,   161,     0,   158,     0,   157,     0,
   134,     0,   137,     0,   120,     0,   146,     0,   147,     0,
   180,     0,   135,     0,    90,   141,     0,    94,   141,     0,
    14,     0,    22,     0,    23,     0,    45,   138,    46,     0,
   142,    75,   142,     0,   143,     0,   144,     0,    45,   142,
    46,     0,    50,   138,   145,    51,     0,    50,   158,   145,
    51,     0,    50,   142,   145,    51,     0,    48,   138,   145,
    49,     0,    48,   142,   145,    49,     0,    36,   138,   145,
     0,    36,   158,   145,     0,    36,   142,   145,     0,     0,
    36,     1,     0,    76,   157,     0,    76,   134,     0,    76,
   180,     0,    76,   146,     0,    45,   146,    46,     0,    45,
    38,    46,   139,     0,    45,    43,    46,   139,     0,    45,
    41,    46,   139,     0,    45,    67,    38,    46,   139,     0,
    45,    67,    41,    46,   139,     0,    45,    66,    38,    46,
   139,     0,    45,    66,    41,    46,   139,     0,    45,    38,
    91,    46,   148,     0,    45,    66,    38,    91,    46,   148,
     0,    45,    43,    91,    46,   148,     0,    45,    41,    91,
    46,   148,     0,    45,    66,    41,    91,    46,   148,     0,
    45,    42,    91,    46,   148,     0,    45,    38,    91,    91,
    46,   148,     0,    45,    66,    38,    91,    91,    46,   148,
     0,    45,    43,    91,    91,    46,   148,     0,    45,    41,
    91,    91,    46,   148,     0,    45,    66,    41,    91,    91,
    46,   148,     0,    45,    42,    91,    91,    46,   148,     0,
    45,    16,   109,    91,    46,   148,     0,    45,   109,    91,
    46,   148,     0,    45,    16,   109,    91,    91,    46,   148,
     0,    45,   109,    91,    91,    46,   148,     0,   139,     0,
    66,    38,     0,    66,    41,     0,   149,     0,   125,     0,
   150,   157,   152,     0,   150,   152,     0,   109,   157,   152,
     0,   109,    91,   157,   152,     0,   109,    91,    91,   157,
   152,     0,   109,   157,    15,   152,     0,   107,   157,   152,
     0,   107,    91,   157,   152,     0,   107,    91,    91,   157,
   152,     0,   107,   157,    15,   152,     0,   109,   152,     0,
   109,    91,   152,     0,   109,    91,    91,   152,     0,   107,
   152,     0,   107,    91,   152,     0,   107,    91,    91,   152,
     0,   150,   157,    15,   152,     0,   150,    91,   157,    15,
   152,     0,   150,   157,    15,    50,   138,    51,   152,     0,
   150,    91,   157,   152,     0,   150,    91,   152,     0,   150,
    91,    91,   157,   152,     0,    45,    91,   107,    46,    45,
   151,    46,   152,     0,     0,    36,   151,     0,     0,   132,
   154,     0,   150,     0,   109,     0,     0,    76,     1,     0,
    36,   132,   154,     0,     0,    36,     1,     0,    48,   117,
    49,     0,     1,    49,     0,    45,   138,    46,     0,     1,
    46,     0,   107,     0,    45,   157,    46,     0,   108,     0,
   110,     0,   112,     0,   111,     0,    36,   157,   162,     0,
     0,    36,     1,     0,     0,    36,   117,   163,     0,     0,
    97,   164,     0,   164,    71,   164,     0,   164,    69,   164,
     0,    45,   164,    46,     0,    27,   156,   155,     0,    26,
   138,    47,    28,   155,     0,    26,    45,   168,    36,   169,
    36,   170,    46,   155,     0,   128,     0,   124,     0,     0,
   138,     0,     0,   128,     0,     0,     3,    45,   141,    46,
    48,   172,    49,     0,     4,   141,    37,    45,   117,    46,
   173,     0,     6,    37,    45,   117,    46,     0,     5,   172,
     0,   172,     0,     0,     7,   138,    35,   155,   175,     0,
     8,   155,     0,     0,    33,    45,   132,    46,     0,    33,
    45,   132,   177,    46,     0,     0,    36,   132,   177,     0,
    99,    45,   157,    46,     0,    99,    45,   157,   179,    46,
     0,    99,    45,   134,    46,     0,    99,    45,   134,   179,
    46,     0,    99,    45,   180,    46,     0,     0,    36,   157,
   179,     0,    36,   134,   179,     0,   157,    17,   157,   181,
     0,   134,    17,   157,   181,     0,   137,    17,   157,   181,
     0,   157,    17,   134,   181,     0,   134,    17,   134,   181,
     0,   137,    17,   134,   181,     0,   157,    78,   157,   181,
     0,   134,    78,   157,   181,     0,    45,   146,    46,    78,
   157,   181,     0,   137,    78,   157,   181,     0,   157,    78,
   134,   181,     0,   134,    78,   134,   181,     0,    45,   146,
    46,    78,   134,   181,     0,   157,    17,   120,     0,   157,
    78,   120,     0,   137,    78,   134,   181,     0,    45,   180,
    46,     0,     0,    17,   157,   181,     0,    17,   134,   181,
     0,    78,   157,   181,     0,    78,   134,   181,     0,    17,
   120,     0,    78,   120,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   149,   180,   181,   185,   186,   187,   188,   189,   194,   195,
   196,   197,   198,   199,   200,   201,   202,   207,   208,   209,
   210,   211,   212,   216,   217,   222,   223,   227,   231,   236,
   238,   245,   354,   355,   357,   358,   359,   360,   361,   362,
   364,   365,   367,   368,   369,   370,   371,   372,   378,   379,
   380,   381,   382,   383,   385,   388,   394,   398,   404,   412,
   422,   424,   426,   440,   444,   448,   455,   456,   461,   466,
   471,   480,   488,   499,   513,   514,   515,   519,   523,   527,
   531,   535,   539,   546,   548,   550,   555,   567,   568,   569,
   572,   573,   574,   581,   585,   589,   594,   600,   605,   612,
   618,   629,   631,   632,   636,   643,   647,   648,   656,   660,
   661,   662,   663,   664,   665,   666,   669,   671,   673,   675,
   677,   679,   681,   683,   685,   687,   689,   691,   693,   698,
   699,   702,   703,   704,   705,   706,   709,   713,   714,   718,
   723,   728,   733,   738,   743,   749,   751,   752,   758,   759,
   760,   762,   764,   766,   768,   774,   776,   777,   778,   779,
   780,   781,   782,   783,   784,   785,   786,   788,   789,   790,
   791,   792,   793,   794,   795,   796,   800,   804,   805,   810,
   811,   812,   813,   814,   815,   816,   817,   818,   819,   820,
   821,   822,   823,   824,   825,   826,   827,   833,   834,   835,
   836,   842,   846,   850,   858,   862,   874,   878,   882,   886,
   887,   890,   895,   899,   904,   908,   915,   918,   919,   922,
   923,   926,   927,   930,   931,   932,   933,   934,   935,   938,
   939,   940,   941,   942,   943,   945,   946,   948,   949,   951,
   967,   969,   972,   974,   980,   984,   991,   997,  1003,  1009,
  1019,  1025,  1031,  1037,  1045,  1049,  1053,  1059,  1063,  1067,
  1073,  1079,  1086,  1092,  1098,  1102,  1110,  1116,  1119,  1120,
  1126,  1131,  1135,  1139,  1140,  1144,  1148,  1149,  1157,  1159,
  1166,  1168,  1174,  1175,  1179,  1184,  1189,  1194,  1200,  1204,
  1205,  1211,  1212,  1223,  1233,  1234,  1236,  1238,  1244,  1250,
  1258,  1266,  1270,  1274,  1280,  1284,  1290,  1294,  1301,  1305,
  1309,  1316,  1320,  1324,  1328,  1338,  1339,  1345,  1346,  1350,
  1351,  1356,  1357,  1358,  1359,  1360,  1363,  1364,  1365,  1371,
  1372,  1373,  1375,  1376,  1377,  1379,  1380,  1381,  1382,  1384,
  1385,  1386,  1387,  1388,  1389,  1390,  1394,  1395,  1396,  1397,
  1398,  1399,  1400
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND",
"POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE","DEFINE",
"MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT",
"UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","OR","PARALLEL","AND","ASS_P","ASS_N","BOOL_OR","CON","ADDRESS",
"BOOL_AND","IMPLY","IFF","PROPIMPLY","NE","EQ","GE","LE","GT","LT","LST","RST",
"ADD","SUB","MUL","DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST",
"FINAL","KEEP","ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL",
"STRUCT_TYPE","INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition",
"complexProposition","poptional_projection","statement","option_struct_declaration",
"empty_statement","function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","array_cast_exp","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp",
"option_exp_else_statement","simple_ari_exp","array_exp","option_list_value",
"option_struct_list_value","inner_option_list_value","address_exp","type_cast",
"casted_element","sign_type_define","all_type_define","option_function_parameter_list",
"inner_option_define_identifier","option_function_identifier","inner_option_function_identifier",
"statement_bpar","bool_par","identifier","strliteral","intliteral","charliteral",
"floatliteral","option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   113,   114,   114,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   116,   116,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   118,   118,   119,   119,   120,   120,
   120,   121,   122,   122,   123,   123,   123,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   125,   125,   125,
   125,   125,   125,   126,   126,   126,   126,   126,   126,   126,
   126,   127,   127,   127,    -1,    -1,    -1,    -1,   128,   129,
   129,   129,   129,   129,   129,   129,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   131,
   131,   132,   132,   132,   132,   132,   133,   134,   134,   135,
   135,   135,   135,   135,   135,   136,   136,   136,   137,   137,
   137,   137,   137,   137,   137,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   139,   140,   140,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141,   141,   141,   141,   141,   142,   142,   142,
   142,   143,   143,   143,   144,   144,   145,   145,   145,   145,
   145,   146,   146,   146,   146,   146,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,   148,
   149,   149,   150,   150,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   152,   152,
   153,   153,   153,   153,   153,   154,   154,   154,   155,   155,
   156,   156,   157,   157,   158,   159,   160,   161,   162,   162,
   162,   163,   163,   164,   164,   164,   164,   164,   165,   166,
   167,   168,   168,   168,   169,   169,   170,   170,   171,   172,
   172,   173,   173,   173,   174,   175,   175,   176,   176,   177,
   177,   178,   178,   178,   178,   178,   179,   179,   179,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   181,   181,   181,   181,
   181,   181,   181
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     8,     9,
     1,     1,     7,     3,     1,     3,     1,     0,     4,     5,
     4,     4,     2,     2,     2,     2,     1,     2,     2,     3,
     3,     3,     3,     7,     8,    11,    13,     1,     1,     1,
     1,     1,     1,     2,     6,     4,     5,     5,     8,     8,
     2,     2,     2,     0,     6,     7,     0,     2,     3,     1,
     1,     1,     1,     3,     2,     1,    11,    12,    11,    11,
    17,    18,    17,    18,    19,    18,    17,    18,    17,     1,
     1,     1,     1,    10,     3,     1,     4,     5,     3,    11,
    12,    11,    11,    12,     3,     3,     2,     0,     2,     2,
     2,     7,     6,     4,     3,     1,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     5,     3,     3,     3,
     3,     3,     3,     3,     3,     2,     1,     2,     0,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     2,     2,     1,     1,     1,     3,     3,     1,     1,
     3,     4,     4,     4,     4,     4,     3,     3,     3,     0,
     2,     2,     2,     2,     2,     3,     4,     4,     4,     5,
     5,     5,     5,     5,     6,     5,     5,     6,     5,     6,
     7,     6,     6,     7,     6,     6,     5,     7,     6,     1,
     2,     2,     1,     1,     3,     2,     3,     4,     5,     4,
     3,     4,     5,     4,     2,     3,     4,     2,     3,     4,
     4,     5,     7,     4,     3,     5,     8,     0,     2,     0,
     2,     1,     1,     0,     2,     3,     0,     2,     3,     2,
     3,     2,     1,     3,     1,     1,     1,     1,     3,     0,
     2,     0,     3,     0,     2,     3,     3,     3,     3,     5,
     9,     1,     1,     0,     1,     0,     1,     0,     7,     7,
     5,     2,     1,     0,     5,     2,     0,     4,     5,     0,
     3,     4,     5,     4,     5,     4,     0,     3,     3,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     6,     3,     3,     4,     3,     0,     3,     3,     3,
     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,    93,    47,     0,
     0,     0,     0,     0,    51,    52,     0,     0,    45,    88,
    91,    90,    92,    89,   294,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   283,     0,     1,
    62,    61,     0,    34,    77,     0,    33,     0,   116,   112,
   113,   110,    37,    38,    39,    35,    36,    50,    49,   111,
     0,     0,    29,    13,    22,     0,   194,   195,   196,     0,
     0,     0,     0,     0,   285,   286,   288,   287,   187,   185,
   191,   186,    17,   156,   188,   189,   184,   183,   180,   181,
   182,   190,    21,    10,     9,    20,    12,    11,     2,     0,
     0,     0,     0,     0,    26,     0,     0,     0,    73,     0,
    74,     0,     0,     0,   283,   270,     0,   304,     0,     0,
     0,     0,     0,     0,   294,     0,   294,     0,     0,   112,
   113,     0,   110,     0,   111,     0,     0,     0,     0,     0,
     0,    76,    75,     0,   283,   151,   150,   149,     0,     0,
   115,   112,     0,     0,     0,     0,     0,   274,     0,     0,
   283,    79,   104,     0,     0,     0,     0,     0,    78,   130,
   131,     0,     0,   274,     0,     0,     0,     0,     0,     0,
    27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   185,   191,   186,     0,   188,   184,   190,
     0,   213,     0,   215,   212,   214,   192,   193,   176,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     5,     4,
     6,     7,     0,     0,     0,    80,    82,    81,    83,   268,
     0,   268,     0,   290,     0,    88,    90,    92,    89,     0,
     0,   303,   302,   185,   186,   184,     0,   190,     0,   282,
     0,     0,     0,   299,     0,     0,     0,     0,     0,     0,
   136,   132,   133,   199,   200,    88,    90,    89,     0,     0,
     0,     0,   283,   149,   294,   295,    64,   114,   139,   155,
     0,   284,     0,   294,   294,   346,     0,     0,     0,   268,
   274,     0,     0,     0,     0,   244,     0,   243,     0,   294,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   273,   277,   272,     0,   148,   101,     0,     0,     0,
     0,    94,    32,    31,    54,    30,     0,    65,   109,     0,
   347,   347,     0,   347,   347,   347,   347,   347,   347,   343,
   347,   347,   344,   347,   347,    25,    29,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   145,   197,   216,     0,
     0,     0,     0,   165,   175,   166,   164,   174,   171,   173,
   169,   170,   168,   172,   162,   163,   157,   158,   159,   160,
   161,     0,   317,    43,     0,   270,   270,   270,     0,   269,
     0,     0,     0,     0,     0,     0,     0,   306,     0,   281,
   280,     0,     0,     0,     0,     0,     0,   183,     0,   210,
   210,   210,   210,   183,     0,     0,   318,     0,     0,     0,
     0,     0,    90,   298,   149,     0,     0,     0,     0,     0,
     0,   297,   296,   292,     0,     0,     0,     0,     0,   283,
     0,   241,   242,   154,     0,    40,     0,     0,    48,     0,
   324,     0,   322,     0,   326,    53,    41,    42,   275,     0,
   271,    69,     0,     0,     0,   148,   103,   102,   104,    72,
     0,     0,     0,     0,   334,   331,    71,   341,   337,   335,
   332,   345,   339,   333,   330,   340,   336,    28,     0,   179,
     0,   217,   177,     0,     0,   219,     0,     0,     0,     0,
   218,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   315,     0,
   270,   258,   270,   270,   255,   270,   270,   246,   270,     0,
     0,   291,   290,     0,     0,     0,     0,     0,     0,     0,
   305,     0,   300,   279,     0,   135,   201,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   320,   319,
     0,   198,     0,     0,     0,     0,     0,   148,   268,   298,
   148,   347,   347,     0,   293,    58,     0,     0,    70,     0,
     0,     0,     0,     0,     0,     0,   327,   327,   325,   323,
   278,   277,   147,   148,   138,   104,   104,     0,    96,    66,
   352,   347,   347,   353,   347,   347,     0,     0,   167,     0,
     0,   240,   224,     0,   227,     0,   229,     0,   226,     0,
     0,     0,     0,     0,     0,   222,     0,     0,   223,     0,
     0,   220,   221,   237,     0,     0,     0,     0,   316,     0,
   270,   259,   270,   270,   251,   270,   256,   270,   270,   247,
     0,   265,   270,   270,   245,     0,     0,   289,     0,     0,
     0,     0,     0,     0,   308,     0,     0,   211,   210,   210,
   183,   205,   206,   202,   204,   203,     0,   137,   321,     0,
     0,     0,     0,     0,     0,   268,     0,     0,     0,   342,
   338,     0,    57,     0,   148,   153,     0,   329,   328,   276,
   146,    97,    98,   104,   349,   348,   351,   350,     0,   178,
   236,     0,   230,   233,   235,   232,   184,   184,   184,     0,
     0,   225,     0,   228,     0,   239,     0,     0,   309,     0,
   260,   270,   252,   254,   257,   270,   248,   250,   270,   270,
   264,     0,   261,    68,    63,     0,     0,     0,     0,     0,
   307,     0,     0,     0,   207,   209,   208,     0,     0,     0,
     0,     0,     0,     0,     0,   138,    84,   152,    55,     0,
     0,     0,    95,    23,   238,     0,     0,     0,   184,   184,
   231,   234,     0,     0,   268,   253,   249,   266,   262,     0,
    67,     0,     0,     0,   286,     0,   286,   286,     0,     0,
    44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    85,     0,    59,     0,   104,   104,     0,
     0,     0,     0,     0,     0,     0,     0,   270,    60,    56,
     0,     0,     0,   286,   301,   268,     0,     0,     0,   148,
     0,     0,     0,   148,   148,     0,     0,     0,     0,   268,
    99,   100,   148,   148,   148,     0,     0,     0,   311,   270,
   263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   148,     0,     0,     0,     0,   148,   148,   314,   267,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   119,     0,     0,     0,   117,   120,     0,
     0,     0,     0,    86,   140,   143,   142,     0,     0,     0,
   313,   310,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   134,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   118,     0,   141,   144,   312,   286,
   286,     0,   286,   286,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    87,   286,
   286,   286,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   286,   148,   148,     0,   148,   148,     0,
     0,     0,     0,     0,     0,   148,     0,     0,   148,   148,
   148,     0,   129,   127,     0,   123,   121,     0,     0,     0,
   148,   128,   122,   126,   124,     0,   125,     0,     0,     0
};

static const short yydefgoto[] = {  1058,
     2,    21,   203,   148,   357,   832,    99,    62,    63,    64,
    65,    66,   347,   352,    67,    68,    69,   192,   343,   291,
   100,   101,   504,   102,   217,   652,   649,   104,   293,   294,
   295,   592,   105,   106,   653,   328,   428,   429,   263,   345,
   501,   284,   142,   107,   108,   109,   110,   111,   433,   319,
   154,    73,    74,    75,   277,   582,   792,    76,   678,   962,
    77,   559,    78,   458,    79,   492,   112,   515
};

static const short yypact[] = {    25,
   608,  2368,-32768,-32768,   -52,-32768,-32768,-32768,   608,   608,
   608,   608,   654,   608,   608,   608,   608,   608,   608,-32768,
    93,    65,   654,-32768,    81,   339,   507,-32768,-32768,    28,
    -3,    98,   868,    31,-32768,-32768,   104,   113,-32768,-32768,
-32768,-32768,-32768,-32768,  1919,  2368,    52,    70,  1107,  1107,
    62,    12,   169,   209,   247,   269,   318,   -10,   320,   919,
-32768,-32768,   322,-32768,-32768,   320,-32768,   -50,-32768,   161,
    16,   163,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   334,   871,   791,   288,   288,   654,-32768,-32768,-32768,  2834,
   277,  1414,  1414,   654,-32768,-32768,-32768,-32768,-32768,   161,
-32768,    16,  4188,-32768,-32768,-32768,   163,-32768,-32768,-32768,
-32768,-32768,   288,   288,   288,   288,   288,   288,-32768,   608,
   608,   608,   608,   608,-32768,  1414,  1165,   654,   320,   320,
   320,   320,   409,    -3,-32768,   502,    -3,  2407,  4212,   496,
   654,    30,  2368,  2028,  2153,   331,    26,   939,   490,   243,
   221,   511,   372,   784,   514,   852,   410,   503,   634,   854,
   493,-32768,-32768,  3414,   613,-32768,-32768,-32768,  2261,    20,
-32768,   175,   654,   358,  2368,  2368,  2368,  1958,   654,   320,
   740,-32768,     0,  2368,  2368,  2368,  2368,   374,-32768,-32768,
-32768,  2028,    96,  1958,    96,    96,    96,    75,    75,   654,
-32768,   608,   625,  3911,   566,   -25,   170,   594,   204,  2871,
   562,   582,   603,   243,   691,   221,  4003,   703,   372,   514,
   277,   175,    16,-32768,   163,-32768,-32768,-32768,-32768,   654,
   654,   654,   654,   654,   654,   654,   654,   654,   654,   654,
   654,   654,   654,   654,   654,   654,   654,   944,  1114,   157,
   605,   605,   704,    30,  4025,-32768,-32768,-32768,-32768,   697,
   742,   697,   756,   766,   921,   -25,   170,   594,   204,  2718,
   360,-32768,-32768,   508,   486,   529,   776,   645,   792,-32768,
  4073,   779,  2368,-32768,   963,  2486,  3492,  3492,   385,   258,
-32768,  4188,   782,-32768,-32768,   749,   750,   767,  1172,   703,
   858,    62,   813,   833,    26,-32768,-32768,-32768,-32768,   830,
   807,-32768,   811,    26,    26,-32768,  2368,   887,   851,   697,
  1958,   320,   320,   415,   739,-32768,  4095,-32768,   823,  2153,
   992,   248,  4143,   277,   301,   504,   873,  1039,  1089,  1094,
    11,-32768,   894,-32768,   885,  3933,-32768,   865,   654,    14,
  2028,-32768,   855,   872,   872,-32768,   907,   881,-32768,    96,
   194,   194,   911,   194,   194,   194,   194,   194,   194,-32768,
   407,   194,-32768,   407,   194,  4188,   791,   962,   654,   883,
  1414,   205,  1414,   241,   259,  1414,   273,   283,   348,   383,
   778,   387,   424,   931,   950,   438,-32768,-32768,   807,   427,
   221,   372,   514,  4275,  4256,  4293,  4310,  4323,  1465,  1465,
  1307,  1307,  1307,  1307,  1038,  1038,   934,   934,-32768,-32768,
-32768,   953,   984,-32768,   925,     5,     7,    18,   958,-32768,
   972,    15,   975,   419,  2755,   996,    22,   654,    30,-32768,
-32768,  1240,  1012,  2523,  1005,  4003,   681,  1006,  2602,  3955,
   127,  3955,   127,  1019,  3444,  2028,-32768,  1013,   619,  1018,
  1025,  1028,   974,   811,  1035,   654,  1041,   863,   654,    96,
  1042,  1020,-32768,   825,    30,  1082,  1057,  1058,    -3,  1062,
   833,-32768,-32768,-32768,  1069,-32768,   448,   427,-32768,    96,
-32768,  1071,-32768,  1074,-32768,-32768,-32768,-32768,-32768,  1269,
-32768,-32768,   946,  1085,    99,  3933,-32768,-32768,  1086,-32768,
   374,  1087,    75,    75,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1090,  2150,
   456,-32768,-32768,  1414,  1095,-32768,  1414,  1097,  1414,  1105,
-32768,  1414,  1108,   458,   465,   481,   519,   520,  1414,   528,
  1414,   533,  1414,  1414,  1414,  1109,   764,    30,-32768,  1046,
   199,-32768,     3,   219,-32768,   271,   255,-32768,   422,  1096,
  2368,-32768,   766,  1110,   354,   553,   560,   579,   783,   356,
  4188,  1130,-32768,-32768,  1122,-32768,-32768,  1131,  2639,   681,
  1796,  1133,  1134,  1128,  1129,  1136,  2950,  1138,  1159,-32768,
   619,-32768,   -31,   -28,  1088,  1150,  1154,  3933,   697,-32768,
  3933,   194,   194,  2368,-32768,-32768,    30,  1153,-32768,  1035,
   654,   654,   749,   750,   767,  1161,  1176,  1176,-32768,-32768,
-32768,   894,-32768,  3933,-32768,   294,  1086,  1167,-32768,-32768,
-32768,   407,   194,-32768,   407,   194,   608,   654,-32768,  1414,
  1173,-32768,-32768,  1414,-32768,  1414,-32768,  1414,-32768,  1414,
  1414,  1414,  1414,   580,   581,-32768,  1414,  1177,-32768,  1414,
  1178,-32768,-32768,-32768,  1414,  1414,  1185,  1181,-32768,  1186,
    -7,-32768,   502,   502,-32768,    -7,-32768,   502,   502,-32768,
    -3,-32768,   621,   501,-32768,  1183,  1271,-32768,  1189,   389,
   588,   601,   606,   612,    20,   654,  1256,-32768,  3955,   127,
  1019,-32768,-32768,-32768,-32768,-32768,  2987,-32768,-32768,  1191,
  1192,  1200,  1213,  1215,   -15,   697,  1211,  1218,  1220,-32768,
-32768,   913,-32768,  2368,  3933,  4188,   974,-32768,-32768,-32768,
-32768,-32768,-32768,   390,-32768,-32768,-32768,-32768,  1026,  4188,
-32768,  1414,-32768,-32768,-32768,-32768,   576,   587,   595,  1414,
  1414,-32768,  1414,-32768,  1414,-32768,  1232,  1228,-32768,  1229,
-32768,   502,-32768,-32768,-32768,   502,-32768,-32768,   502,   502,
-32768,   654,-32768,  2368,-32768,  2368,  3522,  3549,  3597,   632,
-32768,  1231,  4165,  1234,-32768,-32768,-32768,   457,  1236,   801,
  1237,  1246,  1233,  1238,  1255,  1257,-32768,-32768,-32768,  1286,
  1261,    99,-32768,-32768,-32768,  1263,  1265,  1266,   604,   642,
-32768,-32768,  1262,  2368,   697,-32768,-32768,-32768,-32768,  4234,
   919,  1272,  1101,  3066,  1192,  3103,  1213,  1215,  3604,    30,
-32768,  1273,  1235,  1239,  1241,   654,  1242,  1245,  1283,   654,
   654,   840,  1275,-32768,  1282,-32768,  1257,   294,  1086,   654,
   654,   654,  1281,  1287,  2368,  1158,  1297,   502,-32768,-32768,
  3182,  3219,  3298,  1238,-32768,   697,  1298,  1300,  1258,  3933,
  1302,  1304,  1260,  3933,  3933,  1270,  1278,  1291,   654,   697,
-32768,-32768,  3933,  3933,  3933,   654,   654,  1197,-32768,   502,
-32768,   637,   641,   877,   661,   667,   900,  3335,  1318,  1243,
  1264,  1324,  1320,  1268,  1274,  1326,  1331,  1332,  1329,  1339,
  1295,  3933,  1341,  1338,  1340,  1351,  3933,  3933,  1064,-32768,
   676,   680,   683,   685,   688,   701,   707,   708,   929,    92,
  1346,  1357,  1294,-32768,  1360,  1362,  1309,-32768,-32768,  1314,
  1315,  1364,  1378,  1358,-32768,-32768,-32768,  1380,  1381,   764,
-32768,-32768,  3641,  3678,   727,  3705,  3711,   735,   738,   741,
   743,   105,   -10,-32768,  1388,  1389,  1392,  1393,  1394,  1396,
  1397,  1398,  1399,  1345,-32768,   619,-32768,-32768,-32768,  1346,
  1357,  3761,  1360,  1362,  3811,  3817,  3844,   765,   613,  1384,
  1400,  1402,  1406,  1407,  1403,  1412,  1419,  1420,   782,  1393,
  1397,  1398,  1399,  3872,   654,   654,  1410,   654,   654,  1417,
  1418,  1421,  1423,  1420,  3933,  3933,   654,  3933,  3933,   654,
   654,   654,  1422,  1424,  1425,  3933,  1426,  1427,  3933,  3933,
  3933,   654,-32768,-32768,  1429,-32768,-32768,  1430,  1431,  1432,
  3933,-32768,-32768,-32768,-32768,  1433,-32768,  1470,  1473,-32768
};

static const short yypgoto[] = {-32768,
-32768,    74,  1111,    -1,   980,-32768,   332,-32768,-32768,  -183,
   -41,  -130,   149,  -498,  -136,     1,  1031,-32768,  -141,-32768,
   903,   -77,   754,  1277,   -13,  -306,-32768,   751,  -132,-32768,
-32768,  -426,   -21,-32768,   147,-32768,  -120,  -258,  1144,  -187,
   861,  -235,-32768,   211,  -239,-32768,-32768,-32768,   922,  1022,
   -46,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -793,-32768,
-32768,-32768,-32768,   895,-32768,  -330,  1483,   223
};


#define	YYLAST		4416


static const short yytable[] = {   103,
    60,   273,   290,   430,   358,   494,   363,   162,   163,   127,
   639,   499,   215,   720,   507,   572,   722,   684,   423,   139,
   381,   190,   191,   152,   593,   594,   595,   596,   262,   803,
   282,   140,   196,   326,   178,   350,     1,   134,   262,   179,
   262,   134,   262,   329,   156,   149,   448,   326,   454,   134,
   359,   134,   171,   262,    81,   221,   169,   344,   134,   134,
   215,   477,   134,   326,   332,   382,   134,   555,   218,   224,
   305,   351,   204,   344,   532,   141,   536,   283,   721,   541,
   229,   723,    82,    83,    84,    85,    91,   113,   114,   115,
   116,   117,   118,   197,   804,   561,   272,   564,   301,   135,
   306,    51,    51,   135,   180,   119,   164,   170,   567,   126,
    51,   135,   580,   135,   255,   170,   218,   165,   165,   360,
   181,   135,   147,   300,   135,   128,   165,   281,   181,   326,
   292,   326,   215,   478,   133,   961,   972,   742,   743,    48,
   360,   285,   137,   601,   445,   149,   287,   152,   288,   972,
   327,   143,    51,   447,   451,   453,    48,   144,   157,   333,
   120,   121,   591,   122,   292,   346,   989,   331,   165,   149,
   171,   123,   124,   338,   339,   340,   158,   193,   292,   198,
   292,    58,   353,   354,   355,   356,   376,   125,   218,   326,
   326,   193,   215,   248,   249,   250,   251,   252,   973,   300,
   344,   459,   165,   583,   448,   194,    95,   182,   215,   509,
   513,   999,    72,   173,   189,   383,   404,   405,   406,   407,
   408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
   418,   419,   420,   421,   262,   123,   124,   196,   195,   616,
   199,   136,   666,   134,   669,   813,   672,   673,   218,   386,
   534,   125,   195,   174,   262,   153,    72,   162,   468,   193,
   384,   168,    72,   134,   218,   637,   310,   472,   473,   183,
   436,   514,   446,   450,   452,   377,   183,   256,   257,   258,
   259,   442,   795,   796,   797,   689,   537,   194,   309,   681,
   262,   175,   487,   456,   387,   535,   738,   739,   197,   134,
   219,   225,   445,   457,   539,   135,   262,   292,   300,   686,
   152,   447,   152,   176,   599,   474,   590,   193,   542,   224,
   195,   221,   679,    91,   326,   135,   602,   358,   381,   350,
   149,   538,   436,    61,   329,   506,   490,   292,    51,   183,
   183,   183,   183,   170,   261,   691,   491,   264,   276,   540,
   728,   711,    91,    72,   165,   153,   304,   215,   632,   891,
   892,   135,   177,   543,   134,   530,   215,    51,   459,   188,
   200,   215,   636,   544,   219,   164,    61,    61,   195,   153,
    72,   733,-32768,   165,   336,    72,    72,    72,   198,   159,
   183,   160,    28,   383,    72,    72,    72,    72,   134,   650,
   134,   675,   334,   362,   134,   365,   367,   369,   372,   375,
   180,    40,    41,   218,    42,    43,    44,   312,   161,   182,
   219,   302,   218,   513,   581,   350,   181,   218,   386,   455,
   446,   402,   549,   134,   752,   436,   694,   303,   545,    49,
    50,   327,   292,   193,   700,   129,   180,   130,    51,   199,
   437,   194,   608,   260,   320,   611,   590,   262,   710,   134,
   181,   812,   181,   134,   165,   300,   181,   805,   590,   551,
   256,   258,   309,   546,    61,    51,    61,   550,   326,   180,
   276,   183,    59,   555,   514,   623,   292,   436,   624,   634,
   625,   165,   487,    72,   843,   181,   219,   844,   508,   168,
    61,   650,   196,   661,   195,   479,    61,    61,    61,   575,
   662,   215,   465,   626,   552,    61,    61,    61,    61,   215,
   198,   480,   845,    91,   193,   181,   663,    72,   556,   370,
   373,   310,   183,   183,   481,   308,   262,   262,    51,   490,
   153,   280,   153,   170,   402,   198,   651,   321,   535,   493,
   782,   225,   194,   309,   165,   538,   311,  -113,  -113,   316,
   183,   190,   191,   197,   549,   551,   867,   218,   791,   697,
   261,   543,   859,   667,   312,   218,   794,   709,   670,  -112,
  -112,   199,   257,   324,   516,   195,   518,   519,   520,   521,
   522,   523,   198,   524,   525,   326,   526,   527,   381,   392,
  -110,  -110,   393,   198,   875,   383,   199,   735,   736,   664,
   665,   198,   732,   131,    61,   132,     3,   909,   668,   394,
   198,   816,   395,   671,   386,   760,   761,     4,     5,     6,
     7,   923,   817,   787,   750,   780,   563,   566,   569,   215,
   818,     8,   573,   701,   183,   276,   788,   183,    61,   863,
   702,   789,     9,   199,   219,    10,   262,   551,   198,   219,
    86,    61,   179,   601,   199,   219,   287,    87,   288,   703,
   668,   671,   199,   378,   380,    88,    89,   839,   535,   858,
   613,   199,   381,   655,   385,   657,   383,   864,   659,   620,
   316,   538,   793,   396,   326,   218,   543,   153,    90,   125,
   628,   674,   790,    11,    12,    13,   381,    14,    15,    16,
    17,    18,   383,    19,    20,    28,  -111,  -111,    48,   199,
   749,   963,   671,   643,   646,   964,   587,   931,   551,    91,
   966,   932,   810,   967,    40,    41,   397,    42,    43,    44,
   322,   425,   130,    92,    51,   326,   551,    93,   399,   422,
    94,   934,   381,   383,   348,   459,   215,   935,   215,   326,
    58,    95,   325,    96,    97,    98,   535,   676,   830,   677,
   538,   683,   992,   965,   688,   535,   482,   693,   538,   483,
   995,    72,   831,   996,   833,   183,   997,   312,   551,   349,
   183,   968,   431,   215,   215,   215,   751,   969,   970,   219,
   753,   432,   754,   426,   755,   427,   756,   219,   655,   659,
  1014,   438,   218,   762,   218,   547,   764,   671,   548,   439,
   547,   766,   866,   704,    72,   671,   202,   441,   535,   313,
   215,   538,   880,   998,   730,   731,   884,   885,   847,   460,
   461,   848,   227,   228,   641,   644,   893,   894,   895,   218,
   218,   218,   314,  1009,   315,   671,   459,   462,   120,   121,
   317,   122,   466,   898,   745,   746,   849,   747,   748,   123,
   124,   757,   758,   759,    86,   922,   253,   886,   467,   469,
   887,    87,   927,   928,   470,   125,   218,   317,   471,    88,
    89,   772,   184,   185,   186,   187,   776,   475,   815,   476,
   318,   779,    61,   464,    70,   888,   762,   764,   610,   821,
   183,   822,   138,   485,   547,    72,   201,   933,   495,   184,
   185,   186,   187,   185,   186,   187,   314,   219,   315,   500,
   502,   314,    48,   315,   655,   659,   505,   547,   120,   121,
   936,   122,   187,    91,    72,    61,   633,   150,    70,   123,
   124,   511,    86,   166,   172,   510,   517,    92,    51,    87,
   323,    93,   132,   809,    94,   125,   547,    88,    89,   971,
   819,   820,   529,   531,    58,    95,   553,    96,    97,    98,
   184,   185,   186,   187,   307,   764,   184,   185,   186,   187,
    90,   558,   214,   222,    72,   554,    72,   757,   758,   759,
   557,  1025,  1026,   570,  1028,  1029,   184,   185,   186,   187,
    48,   443,   121,  1036,   122,   560,  1039,  1040,  1041,   571,
   574,    91,   123,   124,   245,   246,   247,   322,  1051,   434,
   184,   185,   186,   187,    72,    92,    51,   486,   125,    93,
   274,   308,    94,   585,   219,    70,   219,   150,   166,   820,
   586,   588,    58,    95,   591,    96,    97,    98,   600,   184,
   185,   186,   187,   603,   606,    61,   214,   676,   960,   677,
   604,   150,   172,   605,   814,    72,   335,    70,    70,    70,
   607,   219,   219,   219,   496,   609,    70,    70,    70,    70,
   315,   614,   617,   120,   121,   361,   122,   364,   366,   368,
   371,   374,   618,   619,   123,   124,   184,   185,   186,   187,
   655,   621,   214,   655,   622,    61,   629,    61,   219,   630,
   125,   350,   159,   400,   160,    28,   243,   244,   245,   246,
   247,   533,   309,   533,   497,   635,   533,   647,   764,   498,
   654,   764,   656,   655,    40,    41,   870,    42,    43,    44,
   658,   161,   680,   660,   675,    61,   184,   185,   186,   187,
   764,   184,   185,   186,   187,   705,   706,   696,   184,   185,
   186,   187,   274,   757,   758,   707,   757,   758,   714,   715,
   699,   712,   713,   718,   122,    70,   716,   159,   214,   160,
    28,   166,   123,   124,   456,   725,    61,   724,   726,   254,
   734,   737,   820,   899,   166,   820,   757,   758,   125,    40,
    41,   490,   463,    43,    44,    59,   161,   744,   752,    70,
   230,   768,   763,   765,   820,   184,   185,   186,   187,   769,
   784,   770,   150,   786,   488,   798,   400,   799,   231,   232,
   233,   234,   929,   222,   800,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   801,   638,
   802,   806,   512,   807,   184,   185,   186,   187,   823,   631,
   808,   974,   824,   825,    28,    86,   840,   852,    71,   842,
    59,   879,    87,   853,   533,   846,   850,   533,   584,   533,
    88,    89,   533,    40,    41,   851,    42,    43,    44,   533,
   854,   533,   855,   533,   533,   533,   865,   184,   185,   186,
   187,   857,   860,   286,   861,   862,   287,   876,   288,   785,
   869,   151,    71,   883,   889,   877,   890,   167,    71,   878,
   896,   921,   881,    48,   856,   882,   897,   274,   184,   185,
   186,   187,   900,   910,    91,   911,   214,   914,   912,   915,
   916,   214,   941,   184,   185,   186,   187,   214,    92,   289,
   919,   727,    93,   940,   729,    94,   216,   223,   920,   943,
   944,   947,   612,   942,   950,    58,    95,   945,    96,    97,
    98,   948,   949,   946,   951,   952,   954,   741,   955,   488,
   956,   976,   627,   241,   242,   243,   244,   245,   246,   247,
   533,   957,   977,   978,   533,   979,   533,   980,   533,   984,
   533,   533,   533,   533,   275,   642,   645,   533,   981,    71,
   533,   151,   167,   982,   983,   533,   767,    87,   985,   986,
   987,   988,   194,  1015,  1000,    88,    89,  1001,  1002,  1003,
   216,  1004,  1005,  1006,  1007,   151,    71,  1017,  1020,  1016,
   223,    71,    71,    71,  1008,  1018,  1019,  1021,    90,  1027,
    71,    71,    71,    71,  1022,  1023,  1030,  1031,  1033,  1059,
  1032,  1042,  1060,    70,  1043,  1044,  1046,  1047,    48,  1052,
  1053,  1054,  1055,  1057,    80,   598,   216,   528,   811,    91,
   640,   214,   740,   719,   698,   615,     0,   401,     0,   214,
     0,     0,   533,    92,    51,     0,     0,    93,     0,     0,
   533,   533,     0,   533,     0,   533,    70,     0,     0,     0,
    58,    95,     0,    96,    97,    98,     0,   155,    80,     0,
     0,     0,     0,     0,    80,     0,     0,   533,   533,   533,
     0,     0,     0,     0,     0,     0,   275,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,     0,    71,
     0,     0,   216,     0,     0,   167,     0,     0,     0,   562,
   565,   568,   220,   226,     0,     0,     0,     0,   167,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   533,
     0,     0,     0,    71,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   151,   172,   151,     0,
   401,     0,     0,     0,     0,     0,     0,   223,     0,   214,
   278,     0,     0,     0,     0,    80,     0,   155,     0,     0,
     0,     0,     0,   913,     0,     0,    70,   917,   918,     0,
     0,     0,     0,     0,     0,     0,   924,   925,   926,     0,
     0,   155,    80,     0,     0,     0,   337,    80,    80,    80,
     0,     0,     0,     0,     0,     0,    80,    80,    80,    80,
     0,     0,     0,     0,     0,   953,     0,     0,     0,     0,
   958,   959,     0,     0,     0,     0,    70,     0,    70,     0,
     0,     0,   220,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   403,   682,     0,   685,   687,     0,   690,
   692,   275,   695,   533,   533,     0,   533,   533,     0,     0,
   216,     0,     0,     0,     0,   216,    70,     0,     0,     0,
     0,   216,     0,     0,     0,     0,   214,     0,   214,     0,
     0,     0,   533,     0,     0,   533,   533,   533,     0,     0,
     0,     0,   278,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   151,   533,    80,     0,    70,   220,     0,
     0,     0,     0,   214,   214,   214,     0,     0,  1034,  1035,
     0,  1037,  1038,     0,     0,     0,     0,     0,     0,  1045,
     0,     0,  1048,  1049,  1050,     0,   708,     0,     0,    80,
     0,     0,    86,     0,  1056,     0,     0,     0,     0,    87,
   214,     0,   155,     0,   155,     0,   403,    88,    89,     0,
     0,     0,     0,   226,   771,     0,   773,   774,     0,   775,
     0,   777,   778,     0,     0,     0,   781,   783,     0,     0,
   449,     0,   975,   287,     0,   288,     0,    71,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    48,     0,     0,     0,     0,   216,     0,     0,     0,     0,
     0,    91,     0,   216,   512,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    92,    51,     0,     0,    93,
    71,     0,    94,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    58,    95,     0,    96,    97,    98,     0,     0,
     0,     0,     0,     0,     0,   826,     0,   278,     0,   827,
     0,    22,   828,   829,     0,    23,   220,    24,    25,     0,
     0,   220,     0,     0,    26,     0,    27,    28,    29,    30,
     0,     0,    31,    32,    33,    34,     0,    35,    36,    37,
     0,    38,    39,     0,     0,     0,    40,    41,     0,    42,
    43,    44,     0,   145,    86,     0,    46,     0,     0,   155,
    47,    87,     0,     0,     0,     0,    28,     0,     0,    88,
    89,    71,     0,    48,    49,    50,     0,     0,     0,     0,
     0,     0,     0,   216,    91,    40,    41,     0,    42,    43,
    44,     0,   286,     0,     0,   287,     0,   288,     0,   146,
    71,   901,     0,     0,    52,   147,    53,    54,    55,    56,
    57,     0,    48,   325,     0,    58,     0,    59,     0,     0,
     0,     0,     0,   341,    86,     0,     0,     0,     0,     0,
     0,    87,     0,   930,     0,     0,     0,    92,   289,    88,
    89,    93,     0,    80,    94,     0,     0,     0,     0,     0,
    71,     0,    71,     0,    58,    95,   342,    96,    97,    98,
     0,   220,   286,     0,     0,   287,     0,   288,     0,   220,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    48,     0,     0,     0,    80,     0,     0,     0,
    71,     0,     0,    91,     0,     0,     0,     0,     0,     0,
   216,     0,   216,     0,     0,     0,     0,    92,   289,     0,
     0,    93,     0,     0,    94,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    58,    95,     0,    96,    97,    98,
     0,    71,     0,     0,     0,     0,     0,   216,   216,   216,
     0,     0,     0,     0,     0,    22,     0,   648,     0,    23,
     0,    24,    25,     0,     0,     0,     0,     0,    26,     0,
    27,    28,    29,    30,     0,     0,    31,    32,    33,    34,
     0,    35,    36,    37,   216,    38,    39,    80,     0,     0,
   296,    41,     0,   297,    43,   298,     0,   145,     0,   220,
    46,     0,     0,     0,    47,   230,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    80,    48,   299,    50,
     0,     0,     0,   231,   232,   233,   234,     0,    91,     0,
   235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   146,     0,     0,     0,     0,    52,   147,
    53,    54,    55,    56,    57,     0,     0,     0,     0,    58,
     0,    59,     0,    22,     0,     0,    80,    23,    80,    24,
    25,     0,     0,     0,     0,     0,    26,     0,    27,    28,
    29,    30,     0,     0,    31,    32,    33,    34,     0,    35,
    36,    37,     0,    38,    39,     0,     0,     0,    40,    41,
     0,    42,    43,    44,     0,   330,    80,     0,    46,     0,
     0,     0,    47,     0,     0,     0,   220,     0,   220,     0,
     0,     0,     0,     0,     0,    48,    49,    50,     0,     0,
     0,     0,     0,     0,     0,     0,    91,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    80,     0,     0,
     0,    51,     0,   220,   220,   220,    52,     0,    53,    54,
    55,    56,    57,     0,     0,     0,     0,    58,     0,    59,
    22,     0,     0,     0,    23,     0,    24,    25,     0,     0,
     0,     0,     0,    26,     0,    27,    28,    29,    30,     0,
   220,    31,    32,    33,    34,     0,    35,    36,    37,     0,
    38,    39,     0,     0,     0,    40,    41,     0,    42,    43,
    44,     0,    45,    86,     0,    46,     0,     0,     0,    47,
    87,     0,   265,     0,   160,    28,     0,     0,    88,    89,
     0,     0,    48,    49,    50,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   266,    41,     0,   267,   268,   269,
     0,   270,     0,     0,     0,     0,     0,     0,    51,     0,
     0,     0,     0,    52,     0,    53,    54,    55,    56,    57,
     0,    48,   211,   212,    58,     0,    59,     0,     0,     0,
     0,     0,    91,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    86,     0,     0,     0,    92,    51,     0,    87,
    93,   205,   170,    94,     0,     0,     0,    88,    89,     0,
     0,     0,     0,    58,    95,   271,    96,    97,    98,     0,
     0,     0,     0,   206,     0,     0,   207,   208,   209,    86,
   444,     0,     0,   287,     0,   288,    87,     0,   205,     0,
     0,     0,     0,     0,    88,    89,     0,     0,     0,     0,
    48,   211,   212,     0,     0,     0,     0,     0,     0,     0,
   388,    91,     0,   389,   208,   390,     0,   444,     0,     0,
   287,     0,   288,     0,     0,    92,   289,     0,     0,    93,
     0,     0,    94,     0,     0,     0,     0,    48,   391,   212,
     0,     0,    58,    95,   213,    96,    97,    98,    91,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    86,     0,
     0,     0,    92,   289,     0,    87,    93,   205,     0,    94,
     0,     0,     0,    88,    89,     0,     0,     0,     0,    58,
    95,   213,    96,    97,    98,     0,     0,     0,     0,   206,
     0,     0,   207,   208,   209,    86,   589,     0,     0,   287,
     0,   288,    87,     0,   205,     0,     0,     0,     0,     0,
    88,    89,     0,     0,     0,     0,    48,   211,   212,     0,
     0,     0,     0,     0,     0,     0,   388,    91,     0,   389,
   208,   390,     0,   589,     0,     0,   287,     0,   288,     0,
     0,    92,    51,     0,     0,    93,     0,     0,    94,     0,
     0,     0,     0,    48,   391,   212,     0,     0,    58,    95,
   213,    96,    97,    98,    91,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    86,     0,     0,     0,    92,    51,
     0,    87,    93,   205,     0,    94,     0,     0,     0,    88,
    89,     0,     0,     0,     0,    58,    95,   213,    96,    97,
    98,     0,     0,     0,     0,   388,     0,     0,   389,   208,
   390,    86,   435,     0,     0,     0,     0,     0,    87,     0,
   205,     0,     0,     0,     0,     0,    88,    89,     0,     0,
     0,     0,    48,   391,   212,     0,     0,     0,     0,     0,
     0,     0,   576,    91,     0,   577,   208,   578,     0,   435,
     0,     0,     0,     0,     0,     0,     0,    92,   146,     0,
     0,    93,     0,   170,    94,     0,     0,     0,     0,    48,
   579,   212,     0,     0,    58,    95,   213,    96,    97,    98,
    91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    86,     0,     0,     0,    92,    51,     0,    87,    93,   205,
   170,    94,     0,     0,     0,    88,    89,     0,     0,     0,
     0,    58,    95,   213,    96,    97,    98,     0,     0,     0,
     0,   206,     0,     0,   207,   208,   209,    86,   210,     0,
     0,     0,     0,     0,    87,     0,   205,     0,     0,     0,
     0,     0,    88,    89,     0,     0,     0,     0,    48,   211,
   212,     0,     0,     0,     0,     0,     0,     0,   388,    91,
     0,   389,   208,   390,     0,   210,     0,     0,     0,     0,
     0,     0,     0,    92,    51,     0,     0,    93,     0,     0,
    94,     0,     0,     0,     0,    48,   391,   212,     0,     0,
    58,    95,   213,    96,    97,    98,    91,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    86,     0,     0,     0,
    92,    51,     0,    87,    93,   205,     0,    94,     0,     0,
     0,    88,    89,     0,     0,     0,     0,    58,    95,   213,
    96,    97,    98,     0,     0,     0,     0,   206,     0,     0,
   207,   208,   209,    86,   717,     0,     0,     0,     0,     0,
    87,     0,   205,     0,     0,     0,     0,     0,    88,    89,
     0,     0,     0,     0,    48,   211,   212,     0,     0,     0,
     0,     0,     0,     0,   576,    91,     0,   577,   208,   578,
     0,   210,     0,     0,     0,     0,     0,     0,     0,    92,
    51,     0,     0,    93,     0,     0,    94,     0,     0,     0,
     0,    48,   579,   212,     0,     0,    58,    95,   213,    96,
    97,    98,    91,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    86,     0,     0,     0,    92,    51,     0,    87,
    93,   205,     0,    94,     0,     0,     0,    88,    89,     0,
     0,     0,     0,    58,    95,   213,    96,    97,    98,     0,
     0,     0,     0,   206,     0,     0,   207,   208,   209,    86,
   871,     0,     0,     0,     0,     0,    87,     0,   205,     0,
     0,     0,     0,     0,    88,    89,     0,     0,     0,     0,
    48,   211,   212,     0,     0,     0,     0,     0,     0,     0,
   206,    91,     0,   207,   208,   209,     0,   872,     0,     0,
     0,     0,     0,     0,     0,    92,    51,     0,     0,    93,
     0,     0,    94,     0,     0,     0,     0,    48,   211,   212,
     0,     0,    58,    95,   213,    96,    97,    98,    91,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    86,     0,
     0,     0,    92,    51,     0,    87,    93,   205,     0,    94,
     0,     0,     0,    88,    89,     0,     0,     0,     0,    58,
    95,   213,    96,    97,    98,     0,     0,     0,     0,   902,
     0,     0,   903,   208,   390,    86,   210,     0,     0,     0,
     0,     0,    87,     0,   205,     0,     0,     0,     0,     0,
    88,    89,     0,     0,     0,     0,    48,   904,   212,     0,
     0,     0,     0,     0,     0,     0,   905,    91,     0,   906,
   208,   390,     0,   210,     0,     0,     0,     0,     0,     0,
     0,    92,    51,     0,     0,    93,     0,     0,    94,     0,
     0,     0,     0,    48,   907,   212,     0,     0,    58,    95,
   213,    96,    97,    98,    91,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    86,     0,     0,     0,    92,    51,
     0,    87,    93,   205,     0,    94,     0,     0,     0,    88,
    89,     0,     0,     0,     0,    58,    95,   213,    96,    97,
    98,     0,     0,     0,     0,   206,     0,     0,   207,   208,
   209,    86,   908,     0,     0,     0,     0,     0,    87,     0,
   205,     0,     0,     0,     0,     0,    88,    89,     0,     0,
     0,     0,    48,   211,   212,     0,     0,     0,     0,     0,
     0,     0,   937,    91,     0,   938,   208,   390,     0,   210,
     0,     0,     0,     0,     0,     0,     0,    92,    51,     0,
     0,    93,     0,     0,    94,     0,     0,     0,     0,    48,
   939,   212,     0,     0,    58,    95,   213,    96,    97,    98,
    91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    86,     0,     0,     0,    92,    51,     0,    87,    93,     0,
     0,    94,    28,     0,     0,    88,    89,     0,     0,     0,
     0,    58,    95,   213,    96,    97,    98,     0,     0,     0,
    86,    40,    41,     0,    42,    43,    44,    87,    90,     0,
     0,     0,    28,     0,     0,    88,    89,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    48,   325,
     0,    40,    41,     0,    42,    43,    44,     0,   597,    91,
     0,     0,     0,     0,     0,     0,     0,     0,    86,     0,
     0,     0,     0,    92,    51,    87,     0,    93,    48,   325,
    94,     0,     0,    88,    89,     0,     0,     0,     0,    91,
    58,    95,     0,    96,    97,    98,     0,     0,     0,     0,
     0,     0,     0,    92,    51,    87,   449,    93,     0,   287,
    94,   288,     0,    88,    89,     0,     0,     0,     0,     0,
    58,    95,     0,    96,    97,    98,    48,     0,     0,     0,
     0,     0,    87,     0,     0,     0,   834,    91,     0,     0,
    88,    89,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    92,    51,     0,     0,    93,    48,     0,    94,     0,
     0,     0,     0,   836,     0,     0,     0,    91,    58,    95,
     0,    96,    97,    98,     0,     0,     0,     0,     0,     0,
    87,    92,    51,    48,     0,    93,     0,    87,    88,    89,
     0,     0,     0,     0,    91,    88,    89,     0,    58,    95,
     0,   835,    97,    98,     0,     0,     0,     0,    92,    51,
     0,    90,    93,     0,     0,     0,     0,     0,   873,     0,
     0,     0,     0,     0,    87,    58,    95,     0,   837,    97,
    98,    48,    88,    89,     0,     0,     0,     0,    48,     0,
     0,     0,    91,     0,     0,     0,     0,     0,     0,    91,
     0,     0,     0,     0,     0,    90,    92,    51,     0,     0,
    93,    87,     0,    92,    51,     0,     0,    93,     0,    88,
    89,     0,     0,    58,    95,    48,   838,    97,    98,     0,
    58,    95,     0,   874,    97,    98,    91,     0,    87,     0,
     0,     0,    90,     0,    87,     0,    88,    89,     0,     0,
    92,    51,    88,    89,    93,     0,     0,     0,     0,     0,
     0,     0,    48,     0,     0,     0,     0,    58,    95,    90,
   990,    97,    98,    91,     0,    90,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    92,    51,    48,
     0,    93,     0,     0,    87,    48,     0,     0,     0,     0,
    91,     0,    88,    89,    58,    95,    91,   991,    97,    98,
     0,     0,     0,     0,    92,    51,     0,     0,    93,     0,
    92,    51,     0,     0,    93,    90,     0,     0,     0,     0,
     0,    58,    95,     0,   993,    97,    98,    58,    95,     0,
   994,    97,    98,     0,    87,    48,     0,     0,     0,     0,
    87,     0,    88,    89,     0,     0,    91,     0,    88,    89,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    92,    51,     0,     0,    93,    90,     0,    87,     0,     0,
     0,    90,     0,     0,     0,    88,    89,    58,    95,     0,
  1010,    97,    98,     0,     0,    48,     0,     0,     0,     0,
     0,    48,     0,     0,     0,    87,    91,     0,    90,     0,
     0,     0,    91,    88,    89,     0,     0,     0,     0,     0,
    92,    51,     0,     0,    93,     0,    92,    51,    48,     0,
    93,     0,     0,     0,     0,     0,    90,    58,    95,    91,
  1011,    97,    98,    58,    95,     0,  1012,    97,    98,     0,
     0,     0,     0,    92,    51,     0,    48,    93,     0,     0,
     0,     0,     0,     0,     0,   379,     0,    91,     0,     0,
    58,    95,     0,  1013,    97,    98,     0,     0,     0,     0,
     0,    92,    51,     0,     0,    93,   230,     0,   503,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    58,    95,
     0,  1024,    97,    98,   231,   232,   233,   234,   230,     0,
   591,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,     0,     0,   231,   232,   233,   234,
   230,     0,     0,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,     0,     0,   231,   232,
   233,   234,     0,     0,     0,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   398,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   230,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   424,     0,     0,     0,     0,     0,   231,   232,   233,   234,
   230,     0,     0,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,     0,     0,   231,   232,
   233,   234,     0,     0,     0,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   440,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   230,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   484,     0,     0,     0,     0,     0,   231,   232,   233,   234,
   230,     0,     0,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,     0,     0,   231,   232,
   233,   234,     0,     0,     0,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   489,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   230,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   841,     0,     0,     0,     0,     0,   231,   232,   233,   234,
   230,     0,     0,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,     0,     0,   231,   232,
   233,   234,     0,   230,     0,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   279,     0,
     0,   231,   232,   233,   234,     0,     0,   230,   235,   236,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,     0,     0,     0,   868,   231,   232,   233,   234,   230,
     0,     0,   235,   236,   237,   238,   239,   240,   241,   242,
   243,   244,   245,   246,   247,     0,     0,   231,   232,   233,
   234,   230,     0,     0,   235,   236,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,     0,     0,     0,
   232,   233,   234,     0,     0,     0,   235,   236,   237,   238,
   239,   240,   241,   242,   243,   244,   245,   246,   247,   232,
   233,   234,     0,     0,     0,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   233,   234,
     0,     0,     0,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   234,     0,     0,     0,
   235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247
};

static const short yycheck[] = {    13,
     2,   138,   144,   262,   188,   336,   194,    49,    50,    23,
   509,     1,    90,    45,     1,     1,    45,    15,   254,    33,
    46,    72,    73,    45,   451,   452,   453,   454,    36,    45,
     1,     1,    17,   164,    45,    36,    12,    45,    36,    50,
    36,    45,    36,   164,    46,    45,   286,   178,   288,    45,
   192,    45,    52,    36,   107,    45,    45,   178,    45,    45,
   138,   320,    45,   194,    45,    91,    45,    46,    90,    91,
    45,    72,    86,   194,   381,    45,   383,    48,   110,   386,
    94,   110,     9,    10,    11,    12,    76,    14,    15,    16,
    17,    18,    19,    78,   110,    91,   138,    91,   145,   107,
   147,    91,    91,   107,    91,    13,    45,    96,    91,    45,
    91,   107,    91,   107,   128,    96,   138,   107,   107,    45,
   107,   107,    97,   145,   107,    45,   107,   141,   107,   260,
   144,   262,   210,   321,   107,   929,    45,   636,   637,    65,
    45,   143,    45,    45,   286,   145,    48,   169,    50,    45,
   164,    48,    91,   286,   287,   288,    65,    45,   107,   173,
    68,    69,    36,    71,   178,   179,   960,   169,   107,   169,
   170,    79,    80,   175,   176,   177,   107,    17,   192,    17,
   194,   107,   184,   185,   186,   187,   200,    95,   210,   320,
   321,    17,   270,   120,   121,   122,   123,   124,   107,   221,
   321,    75,   107,   439,   444,    45,   108,    59,   286,   351,
    17,   107,     2,    45,    66,    46,   230,   231,   232,   233,
   234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
   244,   245,   246,   247,    36,    79,    80,    17,    78,   475,
    78,    31,   549,    45,   551,   744,   553,   554,   270,    46,
    46,    95,    78,    45,    36,    45,    46,   299,   305,    17,
    91,    51,    52,    45,   286,   505,    46,   314,   315,    59,
   270,    78,   286,   287,   288,   202,    66,   129,   130,   131,
   132,   283,   709,   710,   711,    15,    46,    45,    46,    91,
    36,    45,    45,    36,    91,    91,   627,   628,    78,    45,
    90,    91,   444,    46,    46,   107,    36,   321,   330,    91,
   332,   444,   334,    45,   456,   317,   449,    17,    46,   341,
    78,    45,   558,    76,   455,   107,   459,   511,    46,    36,
   330,    91,   332,     2,   455,   349,    36,   351,    91,   129,
   130,   131,   132,    96,   134,    91,    46,   137,   138,    91,
   609,   591,    76,   143,   107,   145,   146,   435,   500,   858,
   859,   107,    45,    91,    45,   379,   444,    91,    75,    48,
    37,   449,   505,    91,   164,    45,    45,    46,    78,   169,
   170,   617,    95,   107,   174,   175,   176,   177,    17,    16,
   180,    18,    19,    46,   184,   185,   186,   187,    45,    46,
    45,    46,    45,   193,    45,   195,   196,   197,   198,   199,
    91,    38,    39,   435,    41,    42,    43,    46,    45,   271,
   210,    91,   444,    17,   438,    36,   107,   449,    46,    45,
   444,   221,    46,    45,    46,   435,    15,   107,    91,    66,
    67,   455,   456,    17,    91,   107,    91,   109,    91,    78,
    91,    45,   466,    45,    45,   469,   589,    36,   591,    45,
   107,    72,   107,    45,   107,   487,   107,   726,   601,    46,
   322,   323,    46,    91,   143,    91,   145,    91,   609,    91,
   270,   271,   109,    46,    78,    38,   500,   487,    41,   503,
    43,   107,    45,   283,    38,   107,   286,    41,   350,   289,
   169,    46,    17,    46,    78,    91,   175,   176,   177,    91,
    46,   589,   302,    66,    91,   184,   185,   186,   187,   597,
    17,   107,    66,    76,    17,   107,    46,   317,    91,   198,
   199,    46,   322,   323,   324,    46,    36,    36,    91,    36,
   330,    46,   332,    96,   334,    17,    91,    45,    91,    46,
    50,   341,    45,    46,   107,    91,    46,    72,    73,    46,
   350,    72,    73,    78,    46,    46,   825,   589,   705,   571,
   360,    91,   812,    46,    46,   597,   707,   591,    46,    72,
    73,    78,   434,    91,   362,    78,   364,   365,   366,   367,
   368,   369,    17,   371,   372,   726,   374,   375,    46,    38,
    72,    73,    41,    17,   840,    46,    78,   621,   622,    91,
    91,    17,   614,   107,   283,   109,     9,   876,    91,    38,
    17,    46,    41,    91,    46,    46,    46,    20,    21,    22,
    23,   890,    46,    46,   648,    15,   426,   427,   428,   717,
    46,    34,   432,    91,   434,   435,    46,   437,   317,    46,
    91,    46,    45,    78,   444,    48,    36,    46,    17,   449,
     7,   330,    50,    45,    78,   455,    48,    14,    50,    91,
    91,    91,    78,    49,   109,    22,    23,    46,    91,   812,
   470,    78,    46,   537,    91,   539,    46,    46,   542,   479,
    46,    91,   706,    91,   825,   717,    91,   487,    45,    95,
   490,   555,    91,    96,    97,    98,    46,   100,   101,   102,
   103,   104,    46,   106,   107,    19,    72,    73,    65,    78,
   647,    46,    91,   513,   514,    46,    46,    91,    46,    76,
    46,    91,   734,    46,    38,    39,    46,    41,    42,    43,
   107,    45,   109,    90,    91,   876,    46,    94,    46,    46,
    97,    91,    46,    46,    15,    75,   834,    91,   836,   890,
   107,   108,    66,   110,   111,   112,    91,     4,   782,     6,
    91,   561,    46,    91,   564,    91,    38,   567,    91,    41,
    46,   571,   784,    46,   786,   575,    46,    46,    46,    50,
   580,    91,    37,   871,   872,   873,   650,    91,    91,   589,
   654,    36,   656,   107,   658,   109,   660,   597,   662,   663,
    46,    36,   834,   667,   836,    38,   670,    91,    41,    28,
    38,   675,   824,    41,   614,    91,    36,    49,    91,    46,
   908,    91,   846,    91,   612,   613,   850,   851,    38,    91,
    91,    41,    92,    93,   513,   514,   860,   861,   862,   871,
   872,   873,    69,   986,    71,    91,    75,    91,    68,    69,
    36,    71,    50,   865,   642,   643,    66,   645,   646,    79,
    80,   661,   662,   663,     7,   889,   126,    38,    46,    50,
    41,    14,   896,   897,    78,    95,   908,    36,    78,    22,
    23,   681,    68,    69,    70,    71,   686,    11,   752,    49,
    49,   691,   571,    46,     2,    66,   760,   761,    46,   763,
   700,   765,    45,    91,    38,   705,    46,    41,    46,    68,
    69,    70,    71,    69,    70,    71,    69,   717,    71,    36,
    46,    69,    65,    71,   788,   789,    72,    38,    68,    69,
    41,    71,    71,    76,   734,   614,     1,    45,    46,    79,
    80,    71,     7,    51,    52,    49,    46,    90,    91,    14,
   107,    94,   109,    51,    97,    95,    38,    22,    23,    41,
   760,   761,    11,    91,   107,   108,    46,   110,   111,   112,
    68,    69,    70,    71,    46,   839,    68,    69,    70,    71,
    45,     8,    90,    91,   784,    46,   786,   787,   788,   789,
    48,  1015,  1016,    46,  1018,  1019,    68,    69,    70,    71,
    65,    49,    69,  1027,    71,    91,  1030,  1031,  1032,    48,
    46,    76,    79,    80,    91,    92,    93,   107,  1042,   109,
    68,    69,    70,    71,   824,    90,    91,    46,    95,    94,
   138,    46,    97,    32,   834,   143,   836,   145,   146,   839,
    46,    46,   107,   108,    36,   110,   111,   112,    46,    68,
    69,    70,    71,    46,    91,   734,   164,     4,     5,     6,
    46,   169,   170,    46,    49,   865,   174,   175,   176,   177,
    46,   871,   872,   873,    46,    45,   184,   185,   186,   187,
    71,    50,    11,    68,    69,   193,    71,   195,   196,   197,
   198,   199,    46,    46,    79,    80,    68,    69,    70,    71,
   964,    50,   210,   967,    46,   784,    46,   786,   908,    46,
    95,    36,    16,   221,    18,    19,    89,    90,    91,    92,
    93,   381,    46,   383,    46,    51,   386,    48,   992,    46,
    46,   995,    46,   997,    38,    39,    46,    41,    42,    43,
    46,    45,   107,    46,    46,   824,    68,    69,    70,    71,
  1014,    68,    69,    70,    71,    36,    45,    72,    68,    69,
    70,    71,   270,   963,   964,    45,   966,   967,    51,    51,
    71,    49,    49,    46,    71,   283,    51,    16,   286,    18,
    19,   289,    79,    80,    36,    46,   865,   110,    45,    35,
    48,    41,   992,    46,   302,   995,   996,   997,    95,    38,
    39,    36,    41,    42,    43,   109,    45,    51,    46,   317,
    56,    37,    46,    46,  1014,    68,    69,    70,    71,    49,
    48,    46,   330,    45,   332,    45,   334,    46,    74,    75,
    76,    77,    46,   341,    45,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    46,   506,
    46,    51,   360,    46,    68,    69,    70,    71,    37,     1,
    51,   940,    45,    45,    19,     7,    46,    45,     2,    46,
   109,    41,    14,    46,   534,    50,    50,   537,    49,   539,
    22,    23,   542,    38,    39,    50,    41,    42,    43,   549,
    46,   551,    46,   553,   554,   555,    45,    68,    69,    70,
    71,    51,    50,    45,    50,    50,    48,    45,    50,    49,
    49,    45,    46,    41,    50,    91,    45,    51,    52,    91,
    50,    41,    91,    65,    49,    91,    50,   435,    68,    69,
    70,    71,    46,    46,    76,    46,   444,    46,    91,    46,
    91,   449,   110,    68,    69,    70,    71,   455,    90,    91,
    91,   608,    94,    46,   611,    97,    90,    91,    91,    46,
    51,    46,   470,   110,    46,   107,   108,   110,   110,   111,
   112,    51,    51,   110,    46,    91,    46,   634,    51,   487,
    51,    46,   490,    87,    88,    89,    90,    91,    92,    93,
   650,    51,    46,   110,   654,    46,   656,    46,   658,    46,
   660,   661,   662,   663,   138,   513,   514,   667,   110,   143,
   670,   145,   146,   110,   110,   675,   676,    14,    51,    72,
    51,    51,    45,    50,    46,    22,    23,    46,    46,    46,
   164,    46,    46,    46,    46,   169,   170,    46,    46,    50,
   174,   175,   176,   177,   110,    50,    50,    46,    45,    50,
   184,   185,   186,   187,    46,    46,    50,    50,    46,     0,
    50,    50,     0,   571,    51,    51,    51,    51,    65,    51,
    51,    51,    51,    51,     2,   455,   210,   377,   735,    76,
   511,   589,   632,   599,   573,   474,    -1,   221,    -1,   597,
    -1,    -1,   752,    90,    91,    -1,    -1,    94,    -1,    -1,
   760,   761,    -1,   763,    -1,   765,   614,    -1,    -1,    -1,
   107,   108,    -1,   110,   111,   112,    -1,    45,    46,    -1,
    -1,    -1,    -1,    -1,    52,    -1,    -1,   787,   788,   789,
    -1,    -1,    -1,    -1,    -1,    -1,   270,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    -1,   283,
    -1,    -1,   286,    -1,    -1,   289,    -1,    -1,    -1,   426,
   427,   428,    90,    91,    -1,    -1,    -1,    -1,   302,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   839,
    -1,    -1,    -1,   317,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   330,   705,   332,    -1,
   334,    -1,    -1,    -1,    -1,    -1,    -1,   341,    -1,   717,
   138,    -1,    -1,    -1,    -1,   143,    -1,   145,    -1,    -1,
    -1,    -1,    -1,   880,    -1,    -1,   734,   884,   885,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   893,   894,   895,    -1,
    -1,   169,   170,    -1,    -1,    -1,   174,   175,   176,   177,
    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,   186,   187,
    -1,    -1,    -1,    -1,    -1,   922,    -1,    -1,    -1,    -1,
   927,   928,    -1,    -1,    -1,    -1,   784,    -1,   786,    -1,
    -1,    -1,   210,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   221,   561,    -1,   563,   564,    -1,   566,
   567,   435,   569,   963,   964,    -1,   966,   967,    -1,    -1,
   444,    -1,    -1,    -1,    -1,   449,   824,    -1,    -1,    -1,
    -1,   455,    -1,    -1,    -1,    -1,   834,    -1,   836,    -1,
    -1,    -1,   992,    -1,    -1,   995,   996,   997,    -1,    -1,
    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   487,  1014,   283,    -1,   865,   286,    -1,
    -1,    -1,    -1,   871,   872,   873,    -1,    -1,  1025,  1026,
    -1,  1028,  1029,    -1,    -1,    -1,    -1,    -1,    -1,  1036,
    -1,    -1,  1039,  1040,  1041,    -1,     1,    -1,    -1,   317,
    -1,    -1,     7,    -1,  1051,    -1,    -1,    -1,    -1,    14,
   908,    -1,   330,    -1,   332,    -1,   334,    22,    23,    -1,
    -1,    -1,    -1,   341,   681,    -1,   683,   684,    -1,   686,
    -1,   688,   689,    -1,    -1,    -1,   693,   694,    -1,    -1,
    45,    -1,   940,    48,    -1,    50,    -1,   571,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    65,    -1,    -1,    -1,    -1,   589,    -1,    -1,    -1,    -1,
    -1,    76,    -1,   597,   972,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    90,    91,    -1,    -1,    94,
   614,    -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   107,   108,    -1,   110,   111,   112,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   772,    -1,   435,    -1,   776,
    -1,     3,   779,   780,    -1,     7,   444,     9,    10,    -1,
    -1,   449,    -1,    -1,    16,    -1,    18,    19,    20,    21,
    -1,    -1,    24,    25,    26,    27,    -1,    29,    30,    31,
    -1,    33,    34,    -1,    -1,    -1,    38,    39,    -1,    41,
    42,    43,    -1,    45,     7,    -1,    48,    -1,    -1,   487,
    52,    14,    -1,    -1,    -1,    -1,    19,    -1,    -1,    22,
    23,   705,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   717,    76,    38,    39,    -1,    41,    42,
    43,    -1,    45,    -1,    -1,    48,    -1,    50,    -1,    91,
   734,   868,    -1,    -1,    96,    97,    98,    99,   100,   101,
   102,    -1,    65,    66,    -1,   107,    -1,   109,    -1,    -1,
    -1,    -1,    -1,    76,     7,    -1,    -1,    -1,    -1,    -1,
    -1,    14,    -1,   900,    -1,    -1,    -1,    90,    91,    22,
    23,    94,    -1,   571,    97,    -1,    -1,    -1,    -1,    -1,
   784,    -1,   786,    -1,   107,   108,   109,   110,   111,   112,
    -1,   589,    45,    -1,    -1,    48,    -1,    50,    -1,   597,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    65,    -1,    -1,    -1,   614,    -1,    -1,    -1,
   824,    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    -1,
   834,    -1,   836,    -1,    -1,    -1,    -1,    90,    91,    -1,
    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,   108,    -1,   110,   111,   112,
    -1,   865,    -1,    -1,    -1,    -1,    -1,   871,   872,   873,
    -1,    -1,    -1,    -1,    -1,     3,    -1,     8,    -1,     7,
    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    -1,
    18,    19,    20,    21,    -1,    -1,    24,    25,    26,    27,
    -1,    29,    30,    31,   908,    33,    34,   705,    -1,    -1,
    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,   717,
    48,    -1,    -1,    -1,    52,    56,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   734,    65,    66,    67,
    -1,    -1,    -1,    74,    75,    76,    77,    -1,    76,    -1,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    91,    -1,    -1,    -1,    -1,    96,    97,
    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,
    -1,   109,    -1,     3,    -1,    -1,   784,     7,   786,     9,
    10,    -1,    -1,    -1,    -1,    -1,    16,    -1,    18,    19,
    20,    21,    -1,    -1,    24,    25,    26,    27,    -1,    29,
    30,    31,    -1,    33,    34,    -1,    -1,    -1,    38,    39,
    -1,    41,    42,    43,    -1,    45,   824,    -1,    48,    -1,
    -1,    -1,    52,    -1,    -1,    -1,   834,    -1,   836,    -1,
    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    76,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   865,    -1,    -1,
    -1,    91,    -1,   871,   872,   873,    96,    -1,    98,    99,
   100,   101,   102,    -1,    -1,    -1,    -1,   107,    -1,   109,
     3,    -1,    -1,    -1,     7,    -1,     9,    10,    -1,    -1,
    -1,    -1,    -1,    16,    -1,    18,    19,    20,    21,    -1,
   908,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
    33,    34,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
    43,    -1,    45,     7,    -1,    48,    -1,    -1,    -1,    52,
    14,    -1,    16,    -1,    18,    19,    -1,    -1,    22,    23,
    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
    -1,    -1,    -1,    96,    -1,    98,    99,   100,   101,   102,
    -1,    65,    66,    67,   107,    -1,   109,    -1,    -1,    -1,
    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     7,    -1,    -1,    -1,    90,    91,    -1,    14,
    94,    16,    96,    97,    -1,    -1,    -1,    22,    23,    -1,
    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,    -1,
    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,     7,
    45,    -1,    -1,    48,    -1,    50,    14,    -1,    16,    -1,
    -1,    -1,    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,
    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    76,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
    48,    -1,    50,    -1,    -1,    90,    91,    -1,    -1,    94,
    -1,    -1,    97,    -1,    -1,    -1,    -1,    65,    66,    67,
    -1,    -1,   107,   108,   109,   110,   111,   112,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,
    -1,    -1,    90,    91,    -1,    14,    94,    16,    -1,    97,
    -1,    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,   107,
   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    38,
    -1,    -1,    41,    42,    43,     7,    45,    -1,    -1,    48,
    -1,    50,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,
    22,    23,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    38,    76,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    48,    -1,    50,    -1,
    -1,    90,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
    -1,    -1,    -1,    65,    66,    67,    -1,    -1,   107,   108,
   109,   110,   111,   112,    76,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    90,    91,
    -1,    14,    94,    16,    -1,    97,    -1,    -1,    -1,    22,
    23,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
    43,     7,    45,    -1,    -1,    -1,    -1,    -1,    14,    -1,
    16,    -1,    -1,    -1,    -1,    -1,    22,    23,    -1,    -1,
    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    38,    76,    -1,    41,    42,    43,    -1,    45,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    -1,
    -1,    94,    -1,    96,    97,    -1,    -1,    -1,    -1,    65,
    66,    67,    -1,    -1,   107,   108,   109,   110,   111,   112,
    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     7,    -1,    -1,    -1,    90,    91,    -1,    14,    94,    16,
    96,    97,    -1,    -1,    -1,    22,    23,    -1,    -1,    -1,
    -1,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,    -1,
    -1,    -1,    -1,    -1,    14,    -1,    16,    -1,    -1,    -1,
    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,    65,    66,
    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    76,
    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    90,    91,    -1,    -1,    94,    -1,    -1,
    97,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,
   107,   108,   109,   110,   111,   112,    76,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,
    90,    91,    -1,    14,    94,    16,    -1,    97,    -1,    -1,
    -1,    22,    23,    -1,    -1,    -1,    -1,   107,   108,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    38,    -1,    -1,
    41,    42,    43,     7,    45,    -1,    -1,    -1,    -1,    -1,
    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    22,    23,
    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    38,    76,    -1,    41,    42,    43,
    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,
    91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
    -1,    65,    66,    67,    -1,    -1,   107,   108,   109,   110,
   111,   112,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     7,    -1,    -1,    -1,    90,    91,    -1,    14,
    94,    16,    -1,    97,    -1,    -1,    -1,    22,    23,    -1,
    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,    -1,
    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,     7,
    45,    -1,    -1,    -1,    -1,    -1,    14,    -1,    16,    -1,
    -1,    -1,    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,
    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    76,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    90,    91,    -1,    -1,    94,
    -1,    -1,    97,    -1,    -1,    -1,    -1,    65,    66,    67,
    -1,    -1,   107,   108,   109,   110,   111,   112,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,
    -1,    -1,    90,    91,    -1,    14,    94,    16,    -1,    97,
    -1,    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,   107,
   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    38,
    -1,    -1,    41,    42,    43,     7,    45,    -1,    -1,    -1,
    -1,    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,
    22,    23,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    38,    76,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
    -1,    -1,    -1,    65,    66,    67,    -1,    -1,   107,   108,
   109,   110,   111,   112,    76,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    90,    91,
    -1,    14,    94,    16,    -1,    97,    -1,    -1,    -1,    22,
    23,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
    43,     7,    45,    -1,    -1,    -1,    -1,    -1,    14,    -1,
    16,    -1,    -1,    -1,    -1,    -1,    22,    23,    -1,    -1,
    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    38,    76,    -1,    41,    42,    43,    -1,    45,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    -1,
    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,    -1,    65,
    66,    67,    -1,    -1,   107,   108,   109,   110,   111,   112,
    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     7,    -1,    -1,    -1,    90,    91,    -1,    14,    94,    -1,
    -1,    97,    19,    -1,    -1,    22,    23,    -1,    -1,    -1,
    -1,   107,   108,   109,   110,   111,   112,    -1,    -1,    -1,
     7,    38,    39,    -1,    41,    42,    43,    14,    45,    -1,
    -1,    -1,    19,    -1,    -1,    22,    23,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    76,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,
    -1,    -1,    -1,    90,    91,    14,    -1,    94,    65,    66,
    97,    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,    76,
   107,   108,    -1,   110,   111,   112,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    90,    91,    14,    45,    94,    -1,    48,
    97,    50,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,
   107,   108,    -1,   110,   111,   112,    65,    -1,    -1,    -1,
    -1,    -1,    14,    -1,    -1,    -1,    45,    76,    -1,    -1,
    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    91,    -1,    -1,    94,    65,    -1,    97,    -1,
    -1,    -1,    -1,    45,    -1,    -1,    -1,    76,   107,   108,
    -1,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,
    14,    90,    91,    65,    -1,    94,    -1,    14,    22,    23,
    -1,    -1,    -1,    -1,    76,    22,    23,    -1,   107,   108,
    -1,   110,   111,   112,    -1,    -1,    -1,    -1,    90,    91,
    -1,    45,    94,    -1,    -1,    -1,    -1,    -1,    45,    -1,
    -1,    -1,    -1,    -1,    14,   107,   108,    -1,   110,   111,
   112,    65,    22,    23,    -1,    -1,    -1,    -1,    65,    -1,
    -1,    -1,    76,    -1,    -1,    -1,    -1,    -1,    -1,    76,
    -1,    -1,    -1,    -1,    -1,    45,    90,    91,    -1,    -1,
    94,    14,    -1,    90,    91,    -1,    -1,    94,    -1,    22,
    23,    -1,    -1,   107,   108,    65,   110,   111,   112,    -1,
   107,   108,    -1,   110,   111,   112,    76,    -1,    14,    -1,
    -1,    -1,    45,    -1,    14,    -1,    22,    23,    -1,    -1,
    90,    91,    22,    23,    94,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    65,    -1,    -1,    -1,    -1,   107,   108,    45,
   110,   111,   112,    76,    -1,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    91,    65,
    -1,    94,    -1,    -1,    14,    65,    -1,    -1,    -1,    -1,
    76,    -1,    22,    23,   107,   108,    76,   110,   111,   112,
    -1,    -1,    -1,    -1,    90,    91,    -1,    -1,    94,    -1,
    90,    91,    -1,    -1,    94,    45,    -1,    -1,    -1,    -1,
    -1,   107,   108,    -1,   110,   111,   112,   107,   108,    -1,
   110,   111,   112,    -1,    14,    65,    -1,    -1,    -1,    -1,
    14,    -1,    22,    23,    -1,    -1,    76,    -1,    22,    23,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    91,    -1,    -1,    94,    45,    -1,    14,    -1,    -1,
    -1,    45,    -1,    -1,    -1,    22,    23,   107,   108,    -1,
   110,   111,   112,    -1,    -1,    65,    -1,    -1,    -1,    -1,
    -1,    65,    -1,    -1,    -1,    14,    76,    -1,    45,    -1,
    -1,    -1,    76,    22,    23,    -1,    -1,    -1,    -1,    -1,
    90,    91,    -1,    -1,    94,    -1,    90,    91,    65,    -1,
    94,    -1,    -1,    -1,    -1,    -1,    45,   107,   108,    76,
   110,   111,   112,   107,   108,    -1,   110,   111,   112,    -1,
    -1,    -1,    -1,    90,    91,    -1,    65,    94,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    35,    -1,    76,    -1,    -1,
   107,   108,    -1,   110,   111,   112,    -1,    -1,    -1,    -1,
    -1,    90,    91,    -1,    -1,    94,    56,    -1,    36,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
    -1,   110,   111,   112,    74,    75,    76,    77,    56,    -1,
    36,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    -1,    -1,    74,    75,    76,    77,
    56,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    -1,    -1,    74,    75,
    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    46,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    46,    -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,
    56,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    -1,    -1,    74,    75,
    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    46,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    46,    -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,
    56,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    -1,    -1,    74,    75,
    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    46,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    46,    -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,
    56,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    -1,    -1,    74,    75,
    76,    77,    -1,    56,    -1,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    47,    -1,
    -1,    74,    75,    76,    77,    -1,    -1,    56,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    -1,    -1,    -1,    51,    74,    75,    76,    77,    56,
    -1,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    -1,    -1,    74,    75,    76,
    77,    56,    -1,    -1,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    -1,    -1,    -1,
    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    75,
    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    76,    77,
    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    77,    -1,    -1,    -1,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 150 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 180 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 181 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 186 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 187 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 188 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 190 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 200 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 201 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 202 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 209 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 210 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 211 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 213 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 216 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 218 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 222 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 223 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 228 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 231 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 236 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 238 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 246 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								yyvsp[0].tnode->SetChild1(struct_tree);
								struct_tree=yyvsp[0].tnode;
																
								/*CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1($3);
								$$=$1;*/
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 357 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 358 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 359 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 360 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 361 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 362 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 368 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 369 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 370 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 371 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 372 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 378 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 379 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 380 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 382 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 383 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 386 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 389 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 395 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 399 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 405 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 413 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 424 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 427 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 64:
#line 440 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 65:
#line 445 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 66:
#line 449 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 67:
#line 455 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 68:
#line 456 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 69:
#line 462 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 70:
#line 467 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 71:
#line 472 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 72:
#line 481 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 73:
#line 489 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 74:
#line 500 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 75:
#line 513 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 76:
#line 514 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 77:
#line 515 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 520 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 79:
#line 524 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 80:
#line 528 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 81:
#line 532 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 82:
#line 536 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 540 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 546 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 85:
#line 548 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 86:
#line 551 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 87:
#line 556 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 88:
#line 567 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 89:
#line 568 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 90:
#line 569 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 91:
#line 572 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 92:
#line 573 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 93:
#line 574 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 94:
#line 582 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 95:
#line 586 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 96:
#line 590 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 595 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 601 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 606 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 100:
#line 613 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 101:
#line 619 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 102:
#line 630 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 103:
#line 631 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 104:
#line 632 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 105:
#line 637 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 106:
#line 644 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 107:
#line 647 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 108:
#line 648 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 657 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 110:
#line 660 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 111:
#line 661 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 112:
#line 662 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 663 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 664 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 115:
#line 665 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 116:
#line 666 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 117:
#line 670 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 118:
#line 672 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 119:
#line 674 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 120:
#line 676 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 121:
#line 678 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 122:
#line 680 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 682 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 684 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 125:
#line 686 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 688 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 690 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 128:
#line 692 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 129:
#line 694 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 698 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 131:
#line 699 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 132:
#line 702 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 133:
#line 703 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 134:
#line 704 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 135:
#line 705 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 136:
#line 706 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 137:
#line 709 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 138:
#line 713 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 139:
#line 714 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 140:
#line 719 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, INTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 141:
#line 724 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, UINTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 142:
#line 729 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,FLOATPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 143:
#line 734 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,CHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 144:
#line 739 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, UCHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 145:
#line 744 "msv.y"
{ 
	      yyval.tnode=yyvsp[-1].tnode
	   ;
    break;}
case 146:
#line 750 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 147:
#line 751 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 148:
#line 752 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 149:
#line 758 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 150:
#line 759 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 151:
#line 761 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 152:
#line 763 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 153:
#line 765 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 154:
#line 767 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 155:
#line 768 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 156:
#line 774 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 157:
#line 776 "msv.y"
{yyval.tnode=new CSyntaxNode(ADD_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 158:
#line 777 "msv.y"
{yyval.tnode=new CSyntaxNode(SUB_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 159:
#line 778 "msv.y"
{yyval.tnode=new CSyntaxNode(MUL_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 160:
#line 779 "msv.y"
{yyval.tnode=new CSyntaxNode(DIV_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 161:
#line 780 "msv.y"
{yyval.tnode=new CSyntaxNode(MOD_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 162:
#line 781 "msv.y"
{yyval.tnode=new CSyntaxNode(LST_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 163:
#line 782 "msv.y"
{yyval.tnode=new CSyntaxNode(RST_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 164:
#line 783 "msv.y"
{yyval.tnode=new CSyntaxNode(BAN_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 165:
#line 784 "msv.y"
{yyval.tnode=new CSyntaxNode(BOR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 166:
#line 785 "msv.y"
{yyval.tnode=new CSyntaxNode(XOR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 167:
#line 786 "msv.y"
{ yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 168:
#line 788 "msv.y"
{ yyval.tnode=new CSyntaxNode(GT_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 169:
#line 789 "msv.y"
{ yyval.tnode=new CSyntaxNode(GE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 170:
#line 790 "msv.y"
{ yyval.tnode=new CSyntaxNode(LE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 171:
#line 791 "msv.y"
{ yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 172:
#line 792 "msv.y"
{ yyval.tnode=new CSyntaxNode(LT_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 173:
#line 793 "msv.y"
{ yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 174:
#line 794 "msv.y"
{ yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);   ;
    break;}
case 175:
#line 795 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 176:
#line 796 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 177:
#line 800 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 804 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 805 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 180:
#line 810 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 181:
#line 811 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 182:
#line 812 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 183:
#line 813 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 184:
#line 814 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 185:
#line 815 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 186:
#line 816 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 187:
#line 817 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 188:
#line 818 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 189:
#line 819 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 190:
#line 820 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 191:
#line 821 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 192:
#line 822 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 193:
#line 823 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 194:
#line 824 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 195:
#line 825 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 196:
#line 826 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 197:
#line 827 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 198:
#line 833 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 199:
#line 834 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 200:
#line 835 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 201:
#line 836 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 202:
#line 843 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 203:
#line 847 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 851 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 205:
#line 859 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 206:
#line 863 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 207:
#line 875 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 208:
#line 879 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 209:
#line 883 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 210:
#line 886 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 211:
#line 887 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 212:
#line 892 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 213:
#line 896 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 214:
#line 900 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 215:
#line 905 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 216:
#line 908 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 217:
#line 917 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 218:
#line 918 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 219:
#line 919 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 220:
#line 922 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 221:
#line 923 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 222:
#line 926 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 223:
#line 927 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 224:
#line 930 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 225:
#line 931 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 226:
#line 932 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 227:
#line 933 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 228:
#line 934 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 229:
#line 935 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 230:
#line 938 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 231:
#line 939 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 232:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 233:
#line 941 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 234:
#line 942 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 235:
#line 943 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 236:
#line 945 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 237:
#line 946 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 238:
#line 948 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 239:
#line 949 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 240:
#line 951 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 241:
#line 968 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 242:
#line 969 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 243:
#line 973 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 244:
#line 974 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 245:
#line 981 "msv.y"
{
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 246:
#line 985 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(IDENT_EXP, "$$NoCare", NULL, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-1].returntype);
	   ;
    break;}
case 247:
#line 992 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 248:
#line 998 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 249:
#line 1004 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 250:
#line 1010 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 251:
#line 1020 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 252:
#line 1026 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 253:
#line 1032 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 254:
#line 1038 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 255:
#line 1046 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 256:
#line 1050 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 257:
#line 1054 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 258:
#line 1060 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 259:
#line 1064 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 260:
#line 1068 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 261:
#line 1074 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 262:
#line 1080 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 263:
#line 1087 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 264:
#line 1093 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 265:
#line 1099 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 266:
#line 1103 "msv.y"
{
		  CSyntaxNode* pChild00=new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
		  CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, pChild00, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 267:
#line 1111 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].cString,yyvsp[-2].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(FORMAL_PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 268:
#line 1116 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 269:
#line 1119 "msv.y"
{yyval.tnode=yyvsp[0].tnode;
    break;}
case 270:
#line 1120 "msv.y"
{yyval.tnode=NULL;
    break;}
case 271:
#line 1127 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 272:
#line 1132 "msv.y"
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
case 273:
#line 1136 "msv.y"
{
	      yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].cString, NULL, STRUCTTYPE);
	   ;
    break;}
case 274:
#line 1139 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 275:
#line 1140 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 276:
#line 1145 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 277:
#line 1148 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 278:
#line 1149 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 279:
#line 1157 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 280:
#line 1159 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 281:
#line 1166 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 282:
#line 1168 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 283:
#line 1174 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 284:
#line 1175 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 285:
#line 1179 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 286:
#line 1184 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 287:
#line 1189 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 288:
#line 1194 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 289:
#line 1201 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 290:
#line 1204 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 291:
#line 1205 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 292:
#line 1211 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 293:
#line 1213 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 295:
#line 1233 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 296:
#line 1235 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 297:
#line 1237 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 298:
#line 1238 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 299:
#line 1244 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 300:
#line 1251 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 301:
#line 1259 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 302:
#line 1267 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 303:
#line 1271 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 304:
#line 1275 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 305:
#line 1281 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 306:
#line 1285 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 307:
#line 1291 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 308:
#line 1295 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 309:
#line 1302 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 310:
#line 1306 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 311:
#line 1310 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 312:
#line 1317 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 313:
#line 1321 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 314:
#line 1324 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 315:
#line 1329 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 316:
#line 1338 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 317:
#line 1339 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 318:
#line 1345 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 319:
#line 1346 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 320:
#line 1350 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 321:
#line 1351 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 322:
#line 1356 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 323:
#line 1357 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 324:
#line 1358 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 325:
#line 1359 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 326:
#line 1360 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 327:
#line 1363 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 328:
#line 1364 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 329:
#line 1365 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 330:
#line 1371 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 331:
#line 1372 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 332:
#line 1373 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 333:
#line 1375 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 334:
#line 1376 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 335:
#line 1377 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 336:
#line 1379 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 337:
#line 1380 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 338:
#line 1381 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 339:
#line 1382 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 340:
#line 1384 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 341:
#line 1385 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 342:
#line 1386 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 343:
#line 1387 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 344:
#line 1388 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 345:
#line 1389 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 346:
#line 1390 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 347:
#line 1394 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 348:
#line 1395 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 349:
#line 1396 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 350:
#line 1397 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 351:
#line 1398 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 352:
#line 1399 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 353:
#line 1400 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1402 "msv.y"
