
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	IF	262
#define	ELSE	263
#define	EMPTY	264
#define	AWAIT	265
#define	PROJECTION	266
#define	PBEGIN	267
#define	PEND	268
#define	POINTERNULL	269
#define	ARRAY	270
#define	STRUCT	271
#define	DOT	272
#define	UNION	273
#define	FILEDECLARATION	274
#define	MORE	275
#define	DEFINE	276
#define	MY_TRUE	277
#define	MY_FALSE	278
#define	EXIST	279
#define	FRAME	280
#define	FOR	281
#define	WHILE	282
#define	DO	283
#define	TRUE	284
#define	FALSE	285
#define	REPEAT	286
#define	UNTIL	287
#define	DISPLAY	288
#define	SKIP	289
#define	THEN	290
#define	COMMA	291
#define	COLON	292
#define	INTDECLARATION	293
#define	STRDECLARATION	294
#define	POINTERDECLARATION	295
#define	CHARDECLARATION	296
#define	VOIDDECLARATION	297
#define	FLOATDECLARATION	298
#define	LISTDECLARATION	299
#define	OPEN_PAR	300
#define	CLOSE_PAR	301
#define	TIMES	302
#define	OPEN_BPAR	303
#define	CLOSE_BPAR	304
#define	OPEN_MPAR	305
#define	CLOSE_MPAR	306
#define	FUNCTION	307
#define	OVER	308
#define	CYLINDER	309
#define	OVEREP	310
#define	INTER_OR	311
#define	NON_DETERMINED	312
#define	SEND	313
#define	RECEIVE	314
#define	PROCESS	315
#define	CHANNEL	316
#define	PUT	317
#define	GET	318
#define	ERROR_TOKEN	319
#define	STRFUNCHEAD	320
#define	STRFUNCTAIL	321
#define	STRFUNCCAT	322
#define	STRFUNCCMP	323
#define	STRFUNCCPY	324
#define	STRFUNCLEN	325
#define	EXTERN	326
#define	UNSIGNED	327
#define	SIGNED	328
#define	CHOP	329
#define	IMPLY	330
#define	IFF	331
#define	PROPIMPLY	332
#define	OR	333
#define	PARALLEL	334
#define	AND	335
#define	ASS_P	336
#define	ASS_N	337
#define	CON	338
#define	ADDRESS	339
#define	NE	340
#define	EQ	341
#define	GE	342
#define	LE	343
#define	GT	344
#define	LT	345
#define	LST	346
#define	RST	347
#define	ADD	348
#define	SUB	349
#define	MUL	350
#define	DIV	351
#define	MOD	352
#define	BNE	353
#define	CHOPSTAR	354
#define	NEXT	355
#define	NEGATION	356
#define	LENGTH	357
#define	REQUEST	358
#define	FINAL	359
#define	KEEP	360
#define	ALWAYS	361
#define	HALT	362
#define	W_NEXT	363
#define	PREFIX	364
#define	SOMETIMES	365
#define	ID	366
#define	STRLITERAL	367
#define	STRUCT_TYPE	368
#define	INTLITERAL	369
#define	FLOATLITERAL	370
#define	CHARLITERAL	371

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1166
#define	YYFLAG		-32768
#define	YYNTBASE	117

#define YYTRANSLATE(x) ((unsigned)(x) <= 371 ? yytranslate[x] : 191)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   216,
   226,   228,   230,   238,   242,   244,   248,   250,   251,   256,
   262,   267,   272,   275,   278,   281,   284,   286,   289,   292,
   296,   300,   304,   308,   316,   325,   337,   351,   353,   355,
   357,   359,   361,   363,   366,   373,   378,   384,   390,   399,
   408,   411,   414,   417,   418,   425,   433,   434,   437,   441,
   443,   445,   447,   449,   453,   456,   458,   470,   483,   495,
   507,   525,   544,   562,   581,   601,   620,   638,   657,   675,
   677,   679,   681,   683,   685,   696,   700,   702,   707,   713,
   725,   738,   750,   762,   775,   779,   783,   786,   787,   790,
   793,   796,   804,   811,   816,   820,   822,   826,   830,   836,
   838,   842,   845,   846,   848,   852,   854,   857,   860,   862,
   864,   866,   868,   870,   872,   876,   878,   880,   882,   884,
   886,   888,   890,   892,   894,   896,   898,   900,   902,   904,
   908,   910,   912,   916,   921,   926,   931,   936,   941,   946,
   950,   954,   958,   959,   962,   965,   968,   971,   974,   978,
   983,   988,   993,   999,  1005,  1011,  1017,  1023,  1030,  1036,
  1042,  1049,  1055,  1062,  1070,  1077,  1084,  1092,  1099,  1106,
  1112,  1120,  1127,  1129,  1131,  1134,  1138,  1142,  1146,  1150,
  1152,  1154,  1156,  1160,  1164,  1168,  1172,  1176,  1180,  1184,
  1188,  1192,  1196,  1198,  1200,  1202,  1204,  1206,  1208,  1211,
  1214,  1216,  1218,  1222,  1225,  1229,  1234,  1240,  1245,  1249,
  1254,  1260,  1265,  1268,  1272,  1277,  1280,  1284,  1289,  1294,
  1300,  1308,  1313,  1317,  1323,  1332,  1333,  1338,  1342,  1347,
  1352,  1358,  1364,  1370,  1376,  1383,  1393,  1394,  1402,  1412,
  1421,  1427,  1432,  1435,  1438,  1440,  1441,  1444,  1448,  1449,
  1452,  1456,  1459,  1463,  1466,  1468,  1472,  1474,  1476,  1478,
  1480,  1484,  1485,  1488,  1489,  1493,  1495,  1498,  1502,  1506,
  1510,  1514,  1520,  1530,  1532,  1534,  1535,  1537,  1538,  1540,
  1541,  1549,  1557,  1563,  1566,  1568,  1569,  1575,  1578,  1579,
  1584,  1590,  1591,  1595,  1600,  1606,  1611,  1617,  1622,  1623,
  1627,  1631,  1636,  1641,  1646,  1651,  1656,  1661,  1666,  1671,
  1678,  1683,  1688,  1693,  1700,  1704,  1708,  1713,  1717,  1718,
  1722,  1726,  1730,  1734,  1737
};

static const short yyrhs[] = {   118,
   121,     0,    12,   119,    13,     0,     0,   119,    80,   119,
     0,   119,    78,   119,     0,   119,    76,   119,     0,   119,
    77,   119,     0,   119,    74,   119,     0,   106,   119,     0,
   105,   119,     0,   110,   119,     0,   108,   119,     0,   100,
   119,     0,    34,     0,    22,     0,    23,     0,   102,   141,
     0,     9,     0,    20,     0,   107,   119,     0,   104,   119,
     0,   101,   119,     0,    48,   119,   120,    49,    11,    48,
   119,    49,     0,   111,     0,    21,   111,    37,   156,     0,
   119,    99,     0,    45,   119,    46,     0,    36,   119,   120,
     0,     0,   121,    80,   121,     0,   121,    78,   121,     0,
   121,    74,   121,     0,   132,     0,   127,     0,   180,     0,
   183,     0,   174,     0,   175,     0,   176,     0,   100,    45,
   121,    46,     0,   105,    45,   121,    46,     0,   106,    45,
   121,    46,     0,    10,    45,   155,    46,     0,    31,    48,
   121,    49,    32,    45,   155,    46,     0,    34,     0,     9,
     0,    20,     0,   102,    45,   141,    46,     0,   187,     0,
   185,     0,    29,     0,    30,     0,   104,    45,   121,    46,
     0,   121,    79,   121,     0,    45,   173,    46,    75,    50,
   121,    51,     0,    25,    45,   166,   171,    46,    80,    45,
   121,    46,     0,    48,   121,   172,    49,    11,   164,     0,
    48,   121,    49,    11,   164,     0,    52,   111,    45,   160,
    46,    48,   121,    49,     0,    21,   111,    45,   160,    46,
    81,    48,   123,    49,     0,   125,     0,   124,     0,    24,
   166,   161,    37,    48,   121,    49,     0,    45,   121,    46,
     0,   127,     0,   127,    80,   122,     0,   121,     0,     0,
   111,    45,   162,    46,     0,    71,   111,    45,   162,    46,
     0,   138,    45,   162,    46,     0,   126,    48,   122,    49,
     0,    16,   111,     0,    18,   111,     0,    73,   128,     0,
    72,   128,     0,   128,     0,   129,   130,     0,   113,   130,
     0,    16,   111,   130,     0,    18,   111,   130,     0,    16,
   113,   130,     0,    18,   113,   130,     0,    45,    95,   166,
    46,    45,   160,    46,     0,    45,    95,    95,   166,    46,
    45,   160,    46,     0,    45,    95,   111,    50,   141,   139,
    51,    46,    45,   160,    46,     0,    45,    95,   111,    50,
   141,   139,    51,    46,    45,   160,    46,    81,   148,     0,
    38,     0,    43,     0,    41,     0,    39,     0,    42,     0,
    19,     0,   166,   131,     0,   111,    50,   141,   139,    51,
   131,     0,   166,    81,   136,   131,     0,   111,    15,    81,
   148,   131,     0,   111,    15,    81,   167,   131,     0,   111,
    50,   141,   139,    51,    81,   148,   131,     0,   111,    50,
   141,   139,    51,    81,   167,   131,     0,    95,   130,     0,
    36,   130,     0,    36,     1,     0,     0,   111,    50,   141,
   139,    51,     0,     0,    36,   111,    50,   141,   139,    51,
     0,     0,     0,    36,     1,     0,   133,   135,   136,     0,
   166,     0,   189,     0,   138,     0,   140,     0,    45,   133,
    46,     0,   100,   133,     0,   134,     0,    45,    45,    41,
    95,    46,   114,    46,    50,   141,   139,    51,     0,    45,
    45,    72,    41,    95,    46,   114,    46,    50,   141,   139,
    51,     0,    45,    45,    38,    95,    46,   114,    46,    50,
   141,   139,    51,     0,    45,    45,    43,    95,    46,   114,
    46,    50,   141,   139,    51,     0,    45,    45,    41,    95,
    46,    45,    45,    41,    95,    46,   114,    46,    46,    50,
   141,   139,    51,     0,    45,    45,    41,    95,    46,    45,
    45,    72,    41,    95,    46,   114,    46,    46,    50,   141,
   139,    51,     0,    45,    45,    41,    95,    46,    45,    45,
    38,    95,    46,   114,    46,    46,    50,   141,   139,    51,
     0,    45,    45,    72,    41,    95,    46,    45,    45,    41,
    95,    46,   114,    46,    46,    50,   141,   139,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    72,    41,
    95,    46,   114,    46,    46,    50,   141,   139,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    38,    95,
    46,   114,    46,    46,    50,   141,   139,    51,     0,    45,
    45,    38,    95,    46,    45,    45,    41,    95,    46,   114,
    46,    46,    50,   141,   139,    51,     0,    45,    45,    38,
    95,    46,    45,    45,    72,    41,    95,    46,   114,    46,
    46,    50,   141,   139,    51,     0,    45,    45,    38,    95,
    46,    45,    45,    38,    95,    46,   114,    46,    46,    50,
   141,   139,    51,     0,    81,     0,    82,     0,   141,     0,
   148,     0,   167,     0,    45,   167,    46,    45,   129,    46,
    45,   160,    46,   124,     0,    45,   136,    46,     0,   137,
     0,    95,    45,   134,    46,     0,   111,    50,   141,   139,
    51,     0,    45,    45,    38,    95,    46,   111,    46,    50,
   141,   139,    51,     0,    45,    45,    72,    38,    95,    46,
   111,    46,    50,   141,   139,    51,     0,    45,    45,    43,
    95,    46,   111,    46,    50,   141,   139,    51,     0,    45,
    45,    41,    95,    46,   111,    46,    50,   141,   139,    51,
     0,    45,    45,    72,    41,    95,    46,   111,    46,    50,
   141,   139,    51,     0,    45,   138,    46,     0,    36,   141,
   139,     0,    36,     1,     0,     0,    95,   166,     0,    95,
   140,     0,    95,   138,     0,    45,   140,    46,    50,   141,
   139,    51,     0,    95,    45,   159,    95,    46,   141,     0,
    95,    45,   141,    46,     0,    45,   140,    46,     0,   144,
     0,   144,   157,   141,     0,   141,   147,   144,     0,     7,
   155,    35,   141,   143,     0,   144,     0,   144,   147,   144,
     0,     8,   141,     0,     0,   145,     0,   144,   146,   145,
     0,   168,     0,    94,   145,     0,    98,   145,     0,    14,
     0,   170,     0,   166,     0,   138,     0,   140,     0,   124,
     0,    45,   141,    46,     0,   169,     0,   152,     0,   153,
     0,   189,     0,    95,     0,    96,     0,    97,     0,    91,
     0,    92,     0,    84,     0,    56,     0,    83,     0,    93,
     0,    94,     0,   148,    83,   148,     0,   149,     0,   150,
     0,    45,   148,    46,     0,    50,   141,   151,    51,     0,
    50,   167,   151,    51,     0,    50,   148,   151,    51,     0,
    48,   141,   151,    49,     0,    48,   167,   151,    49,     0,
    48,   148,   151,    49,     0,    36,   141,   151,     0,    36,
   167,   151,     0,    36,   148,   151,     0,     0,    36,     1,
     0,    84,   166,     0,    84,   138,     0,    84,   189,     0,
    84,   152,     0,    45,   152,    46,     0,    45,    38,    46,
   142,     0,    45,    43,    46,   142,     0,    45,    41,    46,
   142,     0,    45,    73,    38,    46,   142,     0,    45,    73,
    41,    46,   142,     0,    45,    72,    38,    46,   142,     0,
    45,    72,    41,    46,   142,     0,    45,    38,    95,    46,
   154,     0,    45,    72,    38,    95,    46,   154,     0,    45,
    43,    95,    46,   154,     0,    45,    41,    95,    46,   154,
     0,    45,    72,    41,    95,    46,   154,     0,    45,    42,
    95,    46,   154,     0,    45,    38,    95,    95,    46,   154,
     0,    45,    72,    38,    95,    95,    46,   154,     0,    45,
    43,    95,    95,    46,   154,     0,    45,    41,    95,    95,
    46,   154,     0,    45,    72,    41,    95,    95,    46,   154,
     0,    45,    42,    95,    95,    46,   154,     0,    45,    16,
   113,    95,    46,   154,     0,    45,   113,    95,    46,   154,
     0,    45,    16,   113,    95,    95,    46,   154,     0,    45,
   113,    95,    95,    46,   154,     0,   142,     0,   156,     0,
   101,   155,     0,   155,    80,   155,     0,   155,    78,   155,
     0,    45,   155,    46,     0,   141,   157,   141,     0,    22,
     0,    23,     0,   141,     0,   141,    86,   167,     0,   141,
    85,   167,     0,   167,    86,   141,     0,   167,    85,   141,
     0,   141,    86,    14,     0,   141,    85,    14,     0,    14,
    86,   141,     0,    14,    85,   141,     0,   141,    86,   169,
     0,   141,    85,   169,     0,    87,     0,    88,     0,    85,
     0,    89,     0,    90,     0,    86,     0,    72,    38,     0,
    72,    41,     0,   158,     0,   129,     0,   159,   166,   161,
     0,   159,   161,     0,   113,   166,   161,     0,   113,    95,
   166,   161,     0,   113,    95,    95,   166,   161,     0,   113,
   166,    15,   161,     0,   111,   166,   161,     0,   111,    95,
   166,   161,     0,   111,    95,    95,   166,   161,     0,   111,
   166,    15,   161,     0,   113,   161,     0,   113,    95,   161,
     0,   113,    95,    95,   161,     0,   111,   161,     0,   111,
    95,   161,     0,   111,    95,    95,   161,     0,   159,   166,
    15,   161,     0,   159,    95,   166,    15,   161,     0,   159,
   166,    15,    50,   141,    51,   161,     0,   159,    95,   166,
   161,     0,   159,    95,   161,     0,   159,    95,    95,   166,
   161,     0,    45,    95,   111,    46,    45,   160,    46,   161,
     0,     0,    36,   159,   166,   161,     0,    36,   159,   161,
     0,    36,   111,   166,   161,     0,    36,   113,   166,   161,
     0,    36,   113,    95,   166,   161,     0,    36,   111,   166,
    15,   161,     0,    36,   113,   166,    15,   161,     0,    36,
   159,   166,    15,   161,     0,    36,   159,    95,   166,    15,
   161,     0,    36,    45,    95,   111,    46,    45,   160,    46,
   161,     0,     0,    36,   159,   166,    50,   141,    51,   161,
     0,    36,   159,   166,    50,   141,    36,   141,    51,   161,
     0,    36,   159,   166,    15,    50,   141,    51,   161,     0,
    36,   159,    95,   166,   161,     0,    36,   159,    95,   161,
     0,    36,     1,     0,   136,   163,     0,   159,     0,     0,
    84,     1,     0,    36,   136,   163,     0,     0,    36,     1,
     0,    48,   121,    49,     0,     1,    49,     0,    45,   155,
    46,     0,     1,    46,     0,   111,     0,    45,   166,    46,
     0,   112,     0,   114,     0,   116,     0,   115,     0,    36,
   166,   171,     0,     0,    36,     1,     0,     0,    36,   121,
   172,     0,   156,     0,   101,   173,     0,   173,    80,   173,
     0,   173,    78,   173,     0,    45,   173,    46,     0,    27,
   165,   164,     0,    26,   141,    47,    28,   164,     0,    26,
    45,   177,    36,   178,    36,   179,    46,   164,     0,   132,
     0,   128,     0,     0,   155,     0,     0,   132,     0,     0,
     3,    45,   145,    46,    48,   181,    49,     0,     4,   145,
    37,    45,   121,    46,   182,     0,     6,    37,    45,   121,
    46,     0,     5,   181,     0,   181,     0,     0,     7,   155,
    35,   164,   184,     0,     8,   164,     0,     0,    33,    45,
   136,    46,     0,    33,    45,   136,   186,    46,     0,     0,
    36,   136,   186,     0,   103,    45,   166,    46,     0,   103,
    45,   166,   188,    46,     0,   103,    45,   138,    46,     0,
   103,    45,   138,   188,    46,     0,   103,    45,   189,    46,
     0,     0,    36,   166,   188,     0,    36,   138,   188,     0,
   166,    17,   166,   190,     0,   138,    17,   166,   190,     0,
   140,    17,   166,   190,     0,   166,    17,   138,   190,     0,
   138,    17,   138,   190,     0,   140,    17,   138,   190,     0,
   166,    75,   166,   190,     0,   138,    75,   166,   190,     0,
    45,   152,    46,    75,   166,   190,     0,   140,    75,   166,
   190,     0,   166,    75,   138,   190,     0,   138,    75,   138,
   190,     0,    45,   152,    46,    75,   138,   190,     0,   166,
    17,   124,     0,   166,    75,   124,     0,   140,    75,   138,
   190,     0,    45,   189,    46,     0,     0,    17,   166,   190,
     0,    17,   138,   190,     0,    75,   166,   190,     0,    75,
   138,   190,     0,    17,   124,     0,    75,   124,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   177,   178,   182,   183,   184,   185,   186,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   204,   205,   206,
   207,   208,   209,   213,   214,   219,   220,   224,   228,   233,
   235,   242,   348,   349,   351,   352,   353,   354,   355,   356,
   358,   359,   361,   362,   363,   364,   365,   366,   372,   373,
   374,   375,   376,   377,   379,   382,   388,   392,   398,   406,
   416,   418,   420,   434,   438,   442,   449,   450,   455,   460,
   465,   474,   482,   493,   507,   508,   509,   513,   517,   521,
   525,   529,   533,   540,   542,   544,   549,   561,   562,   563,
   566,   567,   568,   575,   579,   583,   588,   594,   599,   606,
   612,   623,   625,   626,   630,   637,   641,   642,   650,   654,
   655,   656,   657,   658,   659,   660,   663,   665,   667,   669,
   671,   673,   675,   677,   679,   681,   683,   685,   687,   692,
   693,   696,   697,   698,   701,   702,   703,   706,   710,   715,
   717,   719,   721,   723,   725,   729,   731,   732,   738,   739,
   740,   742,   744,   746,   748,   754,   755,   757,   758,   764,
   765,   769,   770,   774,   775,   779,   780,   781,   782,   783,
   785,   786,   787,   788,   789,   790,   791,   792,   793,   796,
   797,   798,   799,   800,   801,   802,   803,   805,   807,   811,
   812,   813,   814,   820,   824,   832,   844,   848,   857,   869,
   873,   881,   885,   886,   889,   894,   898,   903,   907,   914,
   917,   918,   921,   922,   925,   926,   929,   930,   931,   932,
   933,   934,   937,   938,   939,   940,   941,   942,   944,   945,
   947,   948,   950,   958,   959,   960,   961,   962,   968,   970,
   971,   974,   975,   976,   979,   980,   983,   984,   987,   988,
   991,   992,   997,   998,   999,  1000,  1001,  1002,  1009,  1011,
  1014,  1016,  1022,  1026,  1031,  1037,  1043,  1049,  1059,  1065,
  1071,  1077,  1085,  1089,  1093,  1099,  1103,  1107,  1113,  1119,
  1126,  1132,  1138,  1142,  1150,  1156,  1159,  1163,  1167,  1173,
  1179,  1185,  1192,  1200,  1206,  1221,  1228,  1231,  1239,  1247,
  1253,  1259,  1263,  1272,  1283,  1287,  1288,  1292,  1306,  1307,
  1315,  1317,  1324,  1326,  1332,  1333,  1337,  1342,  1347,  1352,
  1358,  1362,  1363,  1369,  1370,  1381,  1392,  1393,  1395,  1397,
  1403,  1409,  1417,  1425,  1429,  1433,  1439,  1443,  1449,  1453,
  1460,  1464,  1468,  1475,  1479,  1483,  1487,  1497,  1498,  1504,
  1505,  1509,  1510,  1515,  1516,  1517,  1518,  1519,  1522,  1523,
  1524,  1530,  1531,  1532,  1534,  1535,  1536,  1538,  1539,  1540,
  1541,  1543,  1544,  1545,  1546,  1547,  1548,  1549,  1553,  1554,
  1555,  1556,  1557,  1558,  1559
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND",
"POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE","DEFINE",
"MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT",
"UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N",
"CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp","option_exp_else_statement",
"simple_ari_exp","member_in_exp","bi_operator","ari_operator","array_exp","option_list_value",
"option_struct_list_value","inner_option_list_value","address_exp","type_cast",
"casted_element","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   117,   118,   118,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   120,   120,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   122,   122,   123,   123,   124,   124,
   124,   125,   126,   126,   127,   127,   127,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   129,   129,   129,
   129,   129,   129,   130,   130,   130,   130,   130,   130,   130,
   130,   131,   131,   131,    -1,    -1,    -1,    -1,   132,   133,
   133,   133,   133,   133,   133,   133,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,   135,
   135,   136,   136,   136,   136,   136,   136,   137,   138,   138,
   138,   138,   138,   138,   138,   139,   139,   139,   140,   140,
   140,   140,   140,   140,   140,   141,   141,   141,   141,   142,
   142,   143,   143,   144,   144,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,   146,
   146,   146,   146,   146,   146,   146,   146,   147,   147,   148,
   148,   148,   148,   149,   149,   149,   150,   150,   150,   151,
   151,   151,   151,   151,   152,   152,   152,   152,   152,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   154,   155,   155,   155,   155,   155,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   157,   157,   157,   157,   157,   157,   158,   158,
   159,   159,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   162,   162,   162,   162,   163,   163,   163,
   164,   164,   165,   165,   166,   166,   167,   168,   169,   170,
   171,   171,   171,   172,   172,   173,   173,   173,   173,   173,
   174,   175,   176,   177,   177,   177,   178,   178,   179,   179,
   180,   181,   181,   182,   182,   182,   183,   184,   184,   185,
   185,   186,   186,   187,   187,   187,   187,   187,   188,   188,
   188,   189,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   189,   189,   189,   190,   190,
   190,   190,   190,   190,   190
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     8,     9,
     1,     1,     7,     3,     1,     3,     1,     0,     4,     5,
     4,     4,     2,     2,     2,     2,     1,     2,     2,     3,
     3,     3,     3,     7,     8,    11,    13,     1,     1,     1,
     1,     1,     1,     2,     6,     4,     5,     5,     8,     8,
     2,     2,     2,     0,     6,     7,     0,     2,     3,     1,
     1,     1,     1,     3,     2,     1,    11,    12,    11,    11,
    17,    18,    17,    18,    19,    18,    17,    18,    17,     1,
     1,     1,     1,     1,    10,     3,     1,     4,     5,    11,
    12,    11,    11,    12,     3,     3,     2,     0,     2,     2,
     2,     7,     6,     4,     3,     1,     3,     3,     5,     1,
     3,     2,     0,     1,     3,     1,     2,     2,     1,     1,
     1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
     1,     1,     3,     4,     4,     4,     4,     4,     4,     3,
     3,     3,     0,     2,     2,     2,     2,     2,     3,     4,
     4,     4,     5,     5,     5,     5,     5,     6,     5,     5,
     6,     5,     6,     7,     6,     6,     7,     6,     6,     5,
     7,     6,     1,     1,     2,     3,     3,     3,     3,     1,
     1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     2,     2,
     1,     1,     3,     2,     3,     4,     5,     4,     3,     4,
     5,     4,     2,     3,     4,     2,     3,     4,     4,     5,
     7,     4,     3,     5,     8,     0,     4,     3,     4,     4,
     5,     5,     5,     5,     6,     9,     0,     7,     9,     8,
     5,     4,     2,     2,     1,     0,     2,     3,     0,     2,
     3,     2,     3,     2,     1,     3,     1,     1,     1,     1,
     3,     0,     2,     0,     3,     1,     2,     3,     3,     3,
     3,     5,     9,     1,     1,     0,     1,     0,     1,     0,
     7,     7,     5,     2,     1,     0,     5,     2,     0,     4,
     5,     0,     3,     4,     5,     4,     5,     4,     0,     3,
     3,     4,     4,     4,     4,     4,     4,     4,     4,     6,
     4,     4,     4,     6,     3,     3,     4,     3,     0,     3,
     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,    93,    47,     0,
     0,     0,     0,     0,    51,    52,     0,     0,    45,    88,
    91,    90,    92,    89,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   315,     0,     1,
    62,    61,     0,    34,    77,     0,    33,     0,   116,   112,
   113,   110,    37,    38,    39,    35,    36,    50,    49,   111,
     0,     0,    29,    13,    22,     0,   169,     0,     0,     0,
     0,   318,   320,   319,   174,   172,   173,    17,   156,   164,
   177,   178,   171,   166,   176,   170,   179,    21,    10,     9,
    20,    12,    11,     2,     0,     0,     0,     0,     0,    26,
     0,   169,   240,   241,     0,     0,   317,   242,     0,   234,
     0,     0,    73,     0,    74,     0,     0,     0,   315,   297,
     0,   336,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   174,     0,   172,   173,   177,   326,   171,
     0,   179,     0,     0,     0,     0,     0,     0,    76,    75,
     0,   315,   151,   150,   149,     0,     0,   115,   112,     0,
     0,     0,     0,     0,   306,     0,     0,   315,    79,   104,
     0,     0,     0,     0,     0,    78,   130,   131,     0,     0,
   306,     0,     0,     0,     0,     0,     0,    27,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   172,   173,     0,   177,   171,   179,     0,   206,     0,   208,
   205,   207,   167,   168,   188,   189,     0,   186,   187,   185,
   255,   258,   253,   254,   256,   257,   183,   184,   180,   181,
   182,     0,     0,     8,     6,     7,     5,     4,     0,     0,
     0,     0,   242,     0,   235,   255,   258,     0,     0,     0,
     0,     0,     0,     0,    80,    82,    81,    83,   286,     0,
     0,     0,   322,     0,    88,    90,    92,    89,     0,     0,
   335,   334,     0,     0,   314,     0,     0,     0,   331,     0,
     0,     0,     0,     0,     0,   137,   132,   133,   191,   192,
   134,     0,     0,    88,    90,    89,     0,     0,     0,     0,
   315,   149,     0,   327,    64,   114,   145,   155,     0,   316,
     0,     0,     0,   378,     0,     0,     0,   286,   306,     0,
     0,     0,     0,   262,     0,   261,     0,     0,     0,   112,
   113,     0,   110,   111,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   309,   305,     0,   148,   101,     0,
     0,     0,     0,    94,    32,    31,    54,    30,     0,    65,
   109,     0,   379,   379,     0,   379,   379,   379,   379,   379,
   379,   375,   379,   379,   376,   379,   379,    25,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   175,   209,
     0,     0,     0,     0,     0,     0,   158,   165,   157,     0,
   250,   249,   238,   248,   244,   252,   247,   243,   251,   239,
   349,   237,   236,   246,   245,    43,     0,   297,   297,   297,
     0,   303,     0,     0,     0,   297,     0,     0,     0,     0,
     0,     0,     0,   338,     0,   313,   312,     0,     0,     0,
     0,     0,     0,     0,     0,   203,   203,   203,   203,   203,
   203,     0,     0,   350,     0,     0,     0,     0,     0,     0,
    88,    90,    88,    90,   330,   149,     0,     0,     0,     0,
     0,     0,     0,   329,   328,   324,     0,     0,     0,     0,
     0,   315,     0,   259,   260,   154,     0,    88,    90,    89,
     0,    40,     0,     0,    48,     0,   356,     0,   354,     0,
   358,    53,    41,    42,   307,     0,   304,    69,     0,     0,
     0,   148,   103,   102,   104,    72,     0,     0,     0,     0,
     0,   366,   363,    71,   373,   369,   367,   364,   377,   371,
   365,   362,   372,   368,    28,     0,   163,     0,   210,   160,
     0,     0,   212,     0,     0,     0,     0,   211,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   347,
     0,   297,   276,   297,   297,   273,   297,   297,   264,   297,
     0,     0,   297,     0,   297,   297,   288,   297,     0,   323,
   322,     0,     0,     0,     0,     0,     0,     0,   337,     0,
   332,   311,     0,   136,   193,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   352,   351,     0,
   190,     0,     0,     0,     0,     0,     0,   148,   286,   330,
   148,   379,   379,     0,   325,    58,     0,     0,    70,     0,
     0,     0,     0,     0,     0,    88,    90,     0,     0,     0,
     0,   359,   359,   357,   355,   310,   309,   147,   148,   139,
   104,   104,     0,    96,    66,   384,   379,   379,   385,   379,
   379,     0,     0,   159,     0,     0,     0,   233,   217,     0,
   220,     0,   222,     0,   219,     0,     0,     0,     0,     0,
   215,     0,     0,   216,     0,     0,   213,   214,   230,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   348,     0,
   297,   277,   297,   297,   269,   297,   274,   297,   297,   265,
     0,   283,   297,   297,   263,     0,     0,   297,   289,   297,
   297,   290,   302,   297,   297,     0,   287,     0,   321,     0,
     0,     0,   340,     0,     0,   204,   203,   203,   203,   197,
   199,   198,   194,   196,   195,     0,   138,   353,     0,   315,
   318,     0,   315,   318,   315,   318,     0,     0,   286,     0,
     0,     0,   374,   370,     0,    57,     0,   148,   153,     0,
     0,     0,     0,     0,     0,   361,   360,   308,   146,    97,
    98,   104,   381,   380,   383,   382,     0,   162,   229,     0,
   161,   223,   226,   228,   225,     0,   218,     0,   221,     0,
   232,     0,     0,     0,     0,     0,     0,   341,     0,   278,
   297,   270,   272,   275,   297,   266,   268,   297,   297,   282,
     0,   279,    68,     0,   292,   291,   293,   297,   301,     0,
   294,     0,    63,     0,   339,     0,     0,     0,   200,   202,
   201,     0,     0,     0,     0,     0,     0,     0,     0,   315,
     0,   315,   318,     0,   139,    84,   152,    55,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    95,    23,   231,   224,   227,     0,     0,     0,   286,
   271,   267,   284,   280,     0,    67,     0,   286,   295,     0,
     0,   297,     0,     0,    44,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    85,     0,    59,     0,     0,     0,     0,     0,
     0,     0,   104,   104,     0,     0,     0,   297,    60,     0,
   297,     0,   298,    56,   333,   286,     0,     0,     0,   148,
   148,     0,     0,     0,   148,   148,   148,   148,     0,     0,
     0,     0,     0,     0,   286,     0,     0,     0,     0,     0,
     0,     0,    99,   100,     0,   343,   297,   281,   297,   300,
   297,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   148,     0,     0,     0,   148,   148,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   346,   285,   296,   299,     0,   318,   318,     0,   140,   119,
   318,   318,     0,   143,   117,   142,   120,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   345,   342,     0,     0,   135,     0,
     0,     0,   318,     0,     0,   318,   141,   318,   318,     0,
   144,   118,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   344,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   318,    87,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   148,   148,     0,   148,   148,     0,     0,     0,     0,     0,
     0,   148,     0,     0,   148,   148,   148,     0,   129,   127,
     0,   123,   121,     0,     0,     0,   148,   128,   122,   126,
   124,     0,   125,     0,     0,     0
};

static const short yydefgoto[] = {  1164,
     2,    21,   210,   153,   379,   927,    95,    62,    63,    64,
    65,    66,   369,   374,    67,    68,    69,   199,   365,   306,
    96,   540,    97,   128,   708,   704,    99,   100,   252,   237,
   308,   309,   310,   640,   101,   102,   709,   264,   130,   268,
   346,   450,   451,   282,   367,   537,   441,   146,   103,   131,
   104,   105,   106,   459,   337,   161,    73,    74,    75,   293,
   630,   876,    76,   738,  1076,    77,   600,    78,   485,    79,
   528,   107,   552
};

static const short yypact[] = {    39,
  1573,  2934,-32768,-32768,   -52,-32768,-32768,-32768,  1573,  1573,
  1573,  1573,  1417,  1573,  1573,  1573,  1573,  1573,  1573,-32768,
    21,    34,  1302,-32768,   116,   219,   501,-32768,-32768,    63,
   -19,   170,  1922,    85,-32768,-32768,   174,   199,-32768,-32768,
-32768,-32768,-32768,-32768,  2487,  2934,   212,   236,  1059,  1059,
   130,   -15,   333,   345,   372,   437,   450,   269,   336,   -12,
-32768,-32768,   456,-32768,-32768,   336,-32768,   921,-32768,   216,
    38,    53,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   515,   775,   575,   446,   446,  1302,-32768,  3453,   392,  1023,
  1023,-32768,-32768,-32768,-32768,   216,    38,  1094,  2459,-32768,
-32768,-32768,    53,-32768,-32768,-32768,-32768,   446,   446,   446,
   446,   446,   446,-32768,  1573,  1573,  1573,  1573,  1573,-32768,
  1023,   862,-32768,-32768,  2166,  1302,-32768,  1627,   905,-32768,
   966,  1302,   336,   336,   336,   336,   530,   -19,-32768,   594,
   -19,  2971,   791,   621,  1302,   159,  2934,  1712,  1302,  2601,
   399,  1425,   961,   979,   562,   137,   559,   632,-32768,   693,
   996,   648,  1115,   663,   667,   549,   641,   624,-32768,-32768,
  3878,   682,-32768,-32768,-32768,  2829,   261,-32768,   164,  1417,
   419,  2934,  2934,  2934,  3248,  1417,   336,   135,-32768,    -3,
  2934,  2934,  2934,  2934,   762,-32768,-32768,-32768,  1712,    37,
  3248,    37,    37,    37,   -23,   -23,   875,-32768,  1573,   677,
   944,   643,   -22,    15,   672,   151,  3501,   381,   724,   713,
   631,   547,   473,   731,   600,   793,   422,   878,    38,-32768,
   902,-32768,-32768,-32768,-32768,-32768,  1023,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1023,  1417,  1299,  1066,  1066,    -9,   784,   883,  1417,
  1417,  2305,  1833,  1008,-32768,    43,    50,  1417,   159,  1302,
  1302,  1417,  1417,  1053,-32768,-32768,-32768,-32768,   956,   893,
   644,   917,   926,   714,   -22,    15,   672,   151,  1840,   430,
-32768,-32768,   935,   950,-32768,  1104,   943,  2934,-32768,  1228,
  3128,  1737,  1737,   451,   655,-32768,  1094,   901,-32768,-32768,
-32768,   958,  1002,   175,   221,   254,  1272,  1434,  1132,   130,
   946,   965,  3008,-32768,-32768,-32768,-32768,   973,   952,-32768,
   990,  1425,  1425,-32768,  2934,  1069,  1046,   956,  3248,   336,
   336,   462,   820,-32768,   676,-32768,  1019,  2715,  1082,   631,
   547,   632,   600,   793,   355,   912,   422,   288,   675,  1057,
  1096,  1152,  1159,    20,  1100,-32768,  1084,   200,-32768,  1062,
  1417,     5,  1712,-32768,   954,  1060,  1060,-32768,  1114,  1072,
-32768,    69,   181,   181,  1133,   181,   181,   181,   181,   181,
   181,-32768,   352,   181,-32768,   352,   181,-32768,   575,  1170,
  1417,  1108,  1023,   337,  1023,   443,   453,  1023,   455,   470,
   523,   589,  1221,   593,   610,  1165,  1176,   620,-32768,   952,
  1260,   604,   547,   731,   600,   793,  1408,-32768,  1094,  1161,
  1094,  1094,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1094,
  1215,  1168,-32768,  1094,  1094,-32768,  1157,   -18,   142,   273,
  1211,-32768,  1171,   -19,   486,   299,  1216,    13,  1222,   514,
  3416,  1230,   357,  1302,   159,-32768,-32768,  1472,  1249,  3211,
  1236,   473,   119,  1247,  3331,   218,   271,  1268,   218,   271,
  1268,  3926,  1712,-32768,  1266,  1196,   609,   651,   652,   653,
   703,   717,  1165,  1176,   990,  1285,  1417,  1281,  3091,  1162,
  1417,    37,  1295,  1276,-32768,  1013,   159,  1337,  1314,  1316,
   -19,  1317,   965,-32768,-32768,-32768,  1320,  1277,  1279,  1287,
  1596,-32768,   477,   604,-32768,    37,-32768,  1334,-32768,  1338,
-32768,-32768,-32768,-32768,-32768,   484,-32768,-32768,   476,  1343,
    24,   200,-32768,-32768,  1352,-32768,   762,   348,  1349,   -23,
   -23,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1351,    45,   737,-32768,  1640,
  1023,  1364,-32768,  1023,  1365,  1023,  1366,-32768,  1023,  1382,
   741,   748,   749,   703,   750,  1023,   751,  1023,   764,  1023,
  1023,  1023,  1387,  1339,  1340,  1342,  1232,  1012,   159,-32768,
  1332,   317,-32768,   177,   330,-32768,   202,   335,-32768,   209,
  1363,  1335,   522,   -19,   591,   -20,-32768,   938,  2934,-32768,
   926,  1369,   433,   175,   221,   254,  1251,   490,  1079,  1409,
-32768,-32768,  1410,-32768,-32768,  1411,  3368,   119,   792,  1405,
  1412,  1414,  1406,  1415,  1418,  3538,  1413,  1432,-32768,  1196,
-32768,  1102,  1934,  2083,   767,   771,  1420,   200,   956,-32768,
   200,   181,   181,  2934,-32768,-32768,   159,  1423,-32768,  1285,
  1417,  1417,  1436,  1437,  1439,  1383,  1385,  1277,  1279,  1287,
  1300,  1450,  1450,-32768,-32768,-32768,  1100,-32768,   200,-32768,
   390,  1352,  1438,-32768,-32768,-32768,   352,   181,-32768,   352,
   181,  1573,  1417,-32768,  1023,  1444,  1023,-32768,-32768,  1023,
-32768,  1023,-32768,  1023,-32768,  1023,  2191,  2238,  2296,   776,
-32768,  1023,  1448,-32768,  1023,  1451,-32768,-32768,-32768,  1023,
  1460,  1462,  1464,  1383,  1419,  1023,  1485,  1478,-32768,  1483,
   -20,-32768,   594,   594,-32768,   -20,-32768,   594,   594,-32768,
   -19,-32768,   736,   263,-32768,  1486,  1489,   594,-32768,   594,
   594,-32768,-32768,   941,   359,  1417,-32768,  1481,-32768,  1493,
   508,   717,   261,  1302,  1280,-32768,   218,   271,  1268,-32768,
-32768,-32768,-32768,-32768,-32768,  3586,-32768,-32768,  3623,  1121,
  1498,  3671,  1179,  1502,  1210,  1503,  2342,  2384,   956,  1491,
  1507,  1514,-32768,-32768,  1530,-32768,  2934,   200,  1094,   -30,
    11,   709,  1512,  1516,  1385,-32768,-32768,-32768,-32768,-32768,
-32768,   503,-32768,-32768,-32768,-32768,   712,  1094,-32768,  1023,
  1408,-32768,-32768,-32768,-32768,  3932,-32768,  1023,-32768,  1023,
-32768,  1455,  1457,  1458,  1531,  1543,  1538,-32768,  1539,-32768,
   594,-32768,-32768,-32768,   594,-32768,-32768,   594,   594,-32768,
  1417,-32768,  2934,  1541,-32768,-32768,-32768,   594,-32768,  1417,
-32768,   666,-32768,  2934,-32768,  1542,  1169,  1544,-32768,-32768,
-32768,  3708,  1537,  1547,  3756,  1548,  1553,  1561,  1566,  1307,
  3793,  1313,  1545,  1546,  1571,-32768,-32768,-32768,  1496,  1568,
  1577,  1578,  1498,  1582,  1583,  1502,  1585,  1503,  1517,    57,
    24,-32768,-32768,-32768,-32768,-32768,  1521,  1588,  2934,   956,
-32768,-32768,-32768,-32768,   367,   -12,  1540,   956,-32768,   691,
  1417,   594,  1290,   159,-32768,  1595,   782,   801,  1305,  1417,
  1417,   804,   810,  1368,  1417,  1417,  1417,  1417,  1592,  3841,
  1594,  1597,-32768,  1600,-32768,  1571,   885,  1081,  1602,  1604,
  1605,  1545,   390,  1352,  2934,  1341,  1608,   594,-32768,  1609,
   594,   828,-32768,-32768,-32768,   956,   814,   818,   819,   200,
   200,   822,   846,   847,   200,   200,   200,   200,  1417,   848,
   854,  1384,  1417,  1417,   956,  1528,  1562,  1618,  1565,  1567,
  1622,  1163,-32768,-32768,  1362,-32768,   594,-32768,   594,-32768,
   594,  1620,  3960,  3967,   855,  1613,  1616,  4008,  4014,   856,
  1621,  1625,  1631,  1634,   200,   865,   866,   869,   200,   200,
  1623,  1643,  1644,  1603,  1651,  1653,  1606,  1611,  1612,  1659,
   507,-32768,-32768,-32768,    78,  1662,  1664,  4042,-32768,-32768,
  1665,  1679,  4049,-32768,-32768,-32768,-32768,  1676,  4090,  4096,
   870,  1678,  1688,  1660,  1629,  1632,  1699,  1633,  1636,  1702,
  1708,  1709,  1661,  1012,-32768,-32768,   158,   269,-32768,  1713,
  1717,  1719,  1720,  1722,  1723,  1725,-32768,  1726,  1728,  4124,
-32768,-32768,  1196,  1662,  1664,  1645,  1665,  1679,  1666,  1667,
  1674,  1729,-32768,   370,   682,  1739,  1740,  1730,  1741,  1742,
  1732,  1733,  1748,  1749,   901,  1720,  1725,  1726,  1728,  1683,
  1417,  1417,  1751,  1417,  1417,  1752,  1763,  1764,  1753,  1749,
   200,   200,  1417,   200,   200,  1417,  1417,  1417,  1765,  1766,
  1767,   200,  1768,  1769,   200,   200,   200,  1417,-32768,-32768,
  1771,-32768,-32768,  1774,  1779,  1782,   200,-32768,-32768,-32768,
-32768,  1786,-32768,  1816,  1839,-32768
};

static const short yypgoto[] = {-32768,
-32768,    26,  1441,    17,  1296,-32768,   145,-32768,-32768,  -182,
   -21,  -162,   168,  -540,  -135,    66,  1360,-32768,   -96,-32768,
    81,  -316,  1103,   -13,  -137,-32768,  1433,   -89,-32768,  1275,
  -291,-32768,-32768,  -372,  1429,-32768,   553,     8,    44,  1756,
-32768,  -125,  -334,  1355,  -193,  1173,  -143,-32768,   879,   132,
-32768,   823,-32768,  1237,  1356,  -103,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -987,-32768,-32768,-32768,-32768,  1209,-32768,
  -342,  1511,   347
};


#define	YYLAST		4240


static const short yytable[] = {    98,
   233,   234,   299,   509,   694,   543,   292,   385,   344,   473,
   477,   480,   380,   620,   901,   281,   530,   281,    60,   143,
   535,   382,   344,   403,   138,   138,   138,   169,   170,   176,
   129,   259,   372,   114,    82,    83,    84,    85,   344,   108,
   109,   110,   111,   112,   113,   347,   319,    48,   324,   138,
     1,   305,   703,  1075,   203,   904,   434,   138,    81,   366,
   405,   191,   163,   437,   227,   192,   193,   194,   650,   205,
   119,   302,   404,   303,   223,   366,   602,   373,   121,    51,
   902,   382,    70,   903,   177,   144,  1103,    58,   159,   120,
   139,   139,   139,   211,   115,   172,   116,   117,   118,   187,
   119,   960,   381,    89,   641,   642,   643,   644,   645,   406,
   155,   263,   204,   548,    51,   188,   344,   178,   344,   120,
   291,   905,  1077,   139,   906,   156,    70,   206,   223,   145,
   172,   173,   179,   265,   307,   127,   263,   235,   236,   274,
   254,   255,   256,   257,   258,   510,    61,   172,    48,   370,
   820,   821,   296,   200,   127,   456,   312,   345,    94,   297,
   132,   127,   428,   300,   635,    94,   356,   961,   221,   228,
   962,   307,   368,   137,   171,   344,   344,   281,   473,   172,
   200,   201,   327,   638,   371,   307,   138,   307,  1078,   154,
    61,   744,   349,   159,   651,   159,   408,   550,   361,   362,
   363,   486,  1104,   223,   471,   221,   298,   375,   376,   377,
   378,   202,   281,   366,   141,   155,   749,  -112,  -112,   500,
   403,   147,   156,   754,    51,   693,   189,    70,   504,   505,
   156,   173,   200,   196,   399,   539,   605,   281,   202,   429,
   172,   155,   178,   148,   281,   409,   431,   432,   263,   691,
   398,   221,   139,   639,   440,   551,   350,   179,   444,   445,
   201,   358,    70,    70,    70,   569,   405,   573,  1105,   488,
   578,    70,    70,    70,    70,   223,   545,   442,   443,   311,
   383,   912,   386,   388,   390,   393,   396,   472,   476,   479,
   202,    61,   235,   236,   154,   169,   170,   221,   281,   408,
   275,   276,   277,   278,   200,   355,   639,   422,   281,   263,
   235,   236,   861,   185,   468,   489,   311,   138,   186,   344,
    61,   631,   164,   526,   801,   307,    61,    61,    61,   133,
   311,   134,   311,   527,   281,    61,    61,    61,    61,   816,
   817,   800,   221,   138,   802,   638,   165,   778,   490,   392,
   395,   506,   281,   486,   462,    51,   347,   542,   638,   307,
   177,   138,   202,   666,   380,   281,   159,   608,   550,   156,
   281,   172,   819,   471,   138,   159,   159,   180,    70,   138,
   138,   221,   571,   139,   173,   594,   648,   567,   595,   181,
   596,   159,   548,   616,   281,   500,   201,   435,   438,   523,
   173,   138,   592,   221,   879,   880,   881,   594,   870,   139,
   595,   741,   596,   155,  1104,    70,   182,   968,   414,   597,
   462,   415,  1003,  1004,   746,   372,   551,   139,   156,   751,
   187,   572,   474,   478,   481,   524,   227,   422,    89,   687,
   139,   597,    61,   171,   228,   139,   188,   223,   721,    51,
   724,   628,   727,   728,   177,   739,   472,   189,   172,   235,
   236,   223,   549,   357,   894,   172,   421,   188,   345,   307,
   311,   629,   486,   567,   138,    89,   688,   138,   705,    61,
  1105,   183,    86,   658,   686,   263,    51,   661,   574,    87,
    86,   900,   154,   320,   184,   482,   344,    87,   576,   169,
   579,   422,   172,   195,   311,    89,   138,   275,   277,   321,
   736,  1074,   737,    51,   678,   403,    51,   679,   419,   680,
    88,   523,   307,   806,   463,   689,   462,   771,   301,   172,
   138,   302,   172,   303,   138,   730,   758,   575,   372,   544,
   188,   156,   159,   188,-32768,    51,    48,   577,   681,   580,
   221,   207,   138,   830,    48,   221,   511,   281,   138,    89,
    89,   172,   221,   203,   581,   235,   236,    89,   405,    90,
    51,    51,   512,    91,   279,   203,   177,    90,   304,   221,
   614,    91,   662,   911,   187,   967,    58,   172,   462,    92,
    93,    94,   328,   970,    58,   127,   139,    92,    93,    94,
   188,   474,   187,   524,   328,   761,   682,   326,   623,   297,
   209,   135,   878,   136,   311,    86,   205,   582,   188,   963,
   200,   204,    87,   223,   188,   777,   281,   276,   549,   281,
   697,   700,   223,   204,   408,   768,   344,   875,   586,  -113,
  -113,  1012,   197,   198,   452,   330,   846,   200,   115,   327,
   116,   117,   118,    88,   119,   588,   298,   808,   809,   340,
  1031,   134,    28,  1016,  1017,   592,   295,   311,  1021,  1022,
  1023,  1024,   692,   120,   206,   201,   327,   329,   202,    48,
   805,    40,    41,   583,    42,    43,    44,   587,   453,   828,
   483,   205,    89,   334,   696,   699,   652,   653,   654,    70,
   484,   931,    90,    51,   589,   202,    91,   338,  1058,   205,
   526,   339,  1062,  1063,   593,   343,   932,   221,   342,    58,
   529,   516,    92,    93,    94,   400,   221,   827,  -111,  -111,
   553,   186,   555,   556,   557,   558,   559,   560,   330,   561,
   562,   971,   563,   564,    70,   572,   575,   580,   586,   206,
   859,   341,   872,   136,   454,   402,   455,   344,   235,   236,
   913,   416,   588,    61,   417,   344,   407,   206,   235,   236,
   779,   281,   223,  -110,  -110,   223,   420,   166,   223,   167,
    28,   877,   705,   235,   236,   115,   717,   116,   117,   118,
   975,   119,   776,   718,   719,   588,   722,   655,    86,    40,
    41,  1115,    42,    43,    44,    87,   168,   418,    61,   725,
   120,   656,   797,   344,  1140,  1141,   798,  1143,  1144,   907,
   208,   836,   908,   899,   340,  1151,   460,   403,  1154,  1155,
  1156,   706,   344,    49,    50,   572,   475,   294,   334,   302,
  1162,   303,   575,   580,   720,   723,   405,   925,   115,   403,
   116,   117,   118,   179,   119,   405,   930,   514,   726,  1013,
   515,   723,    48,  1014,   588,   726,   221,  1018,   223,   221,
   726,   223,   221,   120,    59,    89,   977,   223,  1011,   926,
    72,    86,   120,   235,   236,    90,    51,    70,   122,    91,
   933,  1019,   588,   403,   200,   978,   123,   124,   982,   405,
  1048,  1053,    58,   127,   983,    92,    93,    94,   572,   140,
  1059,  1060,   575,  1015,   588,  1090,   572,   972,   205,    88,
   235,   236,   996,   160,    72,   997,   980,   981,   430,   175,
    72,   985,   986,   987,   988,   966,   223,   190,   330,   269,
   575,  1020,  1026,    70,   190,    48,   260,   261,  1027,   726,
   726,    61,   765,   457,    70,   868,   998,   525,    89,   572,
   575,   458,   221,  1061,   726,   221,   225,   231,    90,    51,
   464,   221,    91,   281,    28,  1025,   281,   465,   401,  1029,
  1030,  1005,   270,   486,   271,    58,   127,   766,    92,    93,
    94,   467,   487,    40,    41,   497,    42,    43,    44,    70,
   447,   197,   198,   225,   235,   236,   325,    61,   803,   804,
   498,   190,   190,   190,   190,   736,   280,   737,    61,   283,
   160,   270,   501,   271,   -62,    72,   502,   343,   160,   322,
   221,   192,   193,   194,   191,   270,    87,   271,   192,   193,
   194,   331,   964,   823,   824,    70,   825,   826,   335,   225,
   272,   273,   -62,   433,   353,    72,   -62,   -62,   -62,   359,
    72,    72,    72,    61,   503,   190,   448,    88,   449,    72,
    72,    72,    72,   332,   166,   333,   167,    28,   384,   507,
   387,   389,   391,   394,   397,   270,   191,   271,   436,   439,
   192,   193,   194,    48,   508,   225,    40,    41,   446,    42,
    43,    44,   531,   168,    71,   425,    89,  1131,  1132,    61,
  1134,  1135,   133,   517,   460,    87,    90,    51,   999,  1142,
    91,  1000,  1145,  1146,  1147,  1080,   711,   522,   713,   538,
   270,   715,   271,    58,  1157,   536,    92,    93,    94,   194,
   225,   532,   541,   118,   729,   119,   789,   157,    71,   466,
   335,   547,  1001,   174,    71,   191,   270,   549,   271,   192,
   193,   194,   546,   336,   120,   185,   883,   160,   190,   191,
   186,    59,    48,   192,   193,   194,    72,   495,   554,   225,
   566,   270,   175,   271,   549,    89,   235,   236,   191,  1079,
   222,   229,   192,   193,   194,    90,    51,   533,   496,    91,
  1038,   225,   568,  1039,   534,   711,   715,   660,   598,   332,
   590,   333,   790,    72,   935,   791,    93,    94,   190,   190,
   513,   591,   599,   185,   886,   191,   160,   222,   186,   192,
   193,   194,   191,   353,  1040,   425,   192,   193,   194,   332,
   650,   333,   231,   302,   157,   303,   270,   271,   271,    71,
   190,   601,   157,   174,   185,   888,   611,   829,   584,   186,
   280,   585,   832,   619,   833,   612,   834,   622,   835,   734,
   711,   715,   735,   222,   837,   326,   469,   839,   351,    71,
   633,   634,   841,   229,    71,    71,    71,   166,   584,   167,
    28,   772,   636,    71,    71,    71,    71,   594,    28,   425,
   595,   191,   596,   639,   421,   192,   193,   194,    86,   491,
    41,   649,   492,    43,    44,   122,   168,    40,    41,   222,
    42,    43,    44,   123,   124,   659,   604,   607,   610,   423,
   657,   597,   613,   615,   618,   974,   621,   734,   190,   160,
   815,   190,   584,    89,   664,   979,   125,   667,   225,   837,
   839,   185,   949,   225,    51,   333,   186,   185,   951,   668,
   225,   669,   186,   191,   222,   672,   671,   192,   193,   194,
   172,   673,    48,   674,   116,   117,   118,   225,   119,   684,
   663,   675,   914,   685,    59,    89,  1006,   372,   839,   670,
   915,   157,   916,   690,   327,    90,    51,   120,   702,    91,
    71,   353,   126,   222,   683,   584,   174,  1041,   984,   710,
   712,   714,    58,   127,   191,    92,    93,    94,   192,   193,
   194,   584,   174,    86,  1028,   222,   280,   716,   698,   701,
    87,    86,   730,   731,   732,   191,   733,    71,   122,   192,
   193,   194,   740,   756,   773,   757,   123,   124,   770,   166,
   157,   167,    28,   780,   774,   775,   783,   351,   787,   423,
   781,    88,   782,   238,   799,   784,   229,   483,   785,   323,
   807,   493,    41,   158,   494,    43,    44,   813,   168,   814,
   743,   810,   811,   748,   812,   526,   753,    48,   822,   830,
   239,   240,   760,   838,   764,    48,   840,    72,   247,   248,
    89,   190,   249,   250,   251,   842,   190,   843,    89,   844,
    90,    51,    80,   845,    91,   225,   224,   230,    90,    51,
   632,   847,    91,   423,   225,   152,   848,    58,   849,   873,
    92,    93,    94,   863,   864,    58,   127,   874,    92,    93,
    94,   895,    72,   884,   955,   191,    59,   887,   889,   192,
   193,   194,   896,   224,   191,   162,    80,   909,   192,   193,
   194,   910,    80,   157,   897,   902,   711,   905,   907,   191,
   224,   711,   222,   192,   193,   194,   917,   222,   224,   918,
   898,     3,   919,   920,   222,   928,   940,   934,   969,   936,
   952,   953,     4,     5,     6,     7,   941,   945,   226,   232,
   839,   222,   946,   191,   352,   839,     8,   192,   193,   194,
   947,   166,   711,   167,    28,   948,   954,     9,   956,   851,
    10,   957,  1032,   883,   855,   351,   958,   959,   886,   858,
   888,   961,   965,   676,    41,   226,   677,    43,    44,   976,
   168,   989,   839,   993,   995,   224,   994,   949,  1002,   190,
   951,    72,   162,  1007,  1009,   424,  1033,    80,  1034,  1035,
   162,  1036,  1037,  1049,   225,  1045,  1050,   225,  1064,   427,
   225,  1054,    11,    12,    13,  1055,    14,    15,    16,    17,
    18,  1056,    19,    20,  1057,    72,   354,    80,  1065,  1066,
   224,   360,    80,    80,    80,   238,  1068,  1067,  1069,  1073,
  1070,    80,    80,    80,    80,  1071,  1072,  1081,    59,  1082,
  1084,   266,   267,   243,   244,   245,   246,   224,    86,   235,
   236,    71,   239,   240,  1085,    87,  1087,   226,  1091,   224,
   247,   248,   235,   236,   249,   250,   251,   426,  1092,   222,
  1093,    72,  1094,    86,  1096,  1095,  1097,  1099,   222,  1098,
    87,   224,    72,  1100,  1101,  1102,   301,   201,  1116,   302,
   225,   303,  1106,   225,  1107,  1108,    71,  1109,  1110,   225,
  1111,  1112,   226,  1113,  1120,  1123,   224,  1126,  1127,  1117,
  1118,   475,    48,   352,   302,   352,   303,  1119,  1121,  1122,
  1124,  1125,   230,  1128,  1129,    89,  1130,    72,  1139,   162,
  1133,  1136,   603,   606,   609,    90,   304,    48,    80,    91,
   617,   226,  1137,  1138,  1148,  1165,  1149,  1150,  1152,  1153,
    89,  1158,    58,   127,  1159,    92,    93,    94,   225,  1160,
    90,    51,  1161,   226,    91,   570,  1163,   570,  1166,   565,
   570,   647,   695,    72,   707,    80,    86,    58,   127,   424,
    92,    93,    94,    87,   253,   212,   788,   769,   162,   818,
     0,   665,     0,     0,     0,   354,     0,   426,     0,     0,
     0,     0,     0,     0,   232,    71,     0,   410,   419,     0,
   411,   215,   412,     0,   461,     0,     0,     0,   222,   224,
     0,   222,     0,     0,   222,     0,     0,     0,   224,     0,
     0,     0,     0,   224,     0,     0,     0,     0,     0,    71,
    48,   413,   219,     0,     0,     0,     0,   266,   267,   243,
   244,   245,   246,    89,     0,   235,   236,   224,    86,     0,
     0,   426,     0,    90,   151,    87,     0,    91,     0,   177,
     0,     0,     0,     0,     0,     0,     0,    87,     0,     0,
    58,   424,   220,    92,    93,    94,   742,     0,   745,   747,
     0,   750,   752,     0,   755,    71,   142,   759,     0,   762,
   763,   162,   767,     0,     0,     0,    71,     0,   792,     0,
   226,     0,     0,     0,   222,   226,     0,   222,     0,     0,
     0,     0,    48,   222,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   570,    48,    89,   570,     0,   570,   226,
     0,   570,     0,     0,     0,    90,    51,    89,   570,    91,
   570,    71,   570,   570,   570,     0,     0,    90,    51,     0,
     0,    91,    58,   354,     0,    92,    93,    94,     0,     0,
     0,     0,     0,     0,   793,     0,     0,   794,    93,    94,
     0,     0,   222,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   224,     0,    71,     0,     0,
     0,     0,     0,     0,   224,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   570,   570,   570,     0,     0,     0,
     0,     0,     0,     0,     0,   850,    87,   852,   853,     0,
   854,     0,   856,   857,     0,     0,     0,   860,   862,     0,
     0,     0,   865,     0,   866,   867,     0,     0,   869,   871,
     0,     0,     0,     0,     0,     0,     0,    88,     0,    80,
     0,     0,     0,     0,     0,     0,     0,   570,     0,   831,
     0,     0,   570,     0,   570,     0,   570,   226,   570,   570,
   570,   570,     0,    48,   570,     0,   226,   570,     0,     0,
     0,     0,   570,     0,     0,     0,    89,     0,     0,     0,
     0,     0,    86,     0,    80,     0,    90,    51,     0,   122,
    91,   212,     0,     0,     0,     0,     0,   123,   124,     0,
     0,     0,     0,   795,     0,     0,   796,    93,    94,     0,
     0,     0,     0,   213,    87,   921,   214,   215,   216,   922,
   262,     0,   923,   924,   224,     0,     0,   224,     0,     0,
   224,     0,   929,     0,     0,     0,     0,     0,     0,   570,
   570,     0,     0,     0,     0,    88,    48,   218,   219,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    89,
     0,    87,     0,     0,     0,     0,     0,     0,     0,    90,
    51,    48,   570,    91,     0,     0,   126,     0,   570,     0,
   570,     0,   570,     0,    89,     0,    58,   127,   220,    92,
    93,    94,    88,    80,    90,    51,   973,     0,    91,     0,
     0,     0,     0,     0,     0,     0,   226,     0,     0,   226,
     0,   790,   226,     0,    92,    93,    94,     0,    48,    87,
   224,    86,     0,   224,     0,     0,     0,    80,   122,   224,
   212,    89,  1008,     0,     0,  1010,   123,   124,     0,     0,
     0,    90,    51,     0,     0,    91,     0,     0,     0,     0,
    88,     0,   410,     0,     0,   411,   215,   412,   793,   262,
     0,    92,    93,    94,     0,    87,     0,     0,     0,     0,
     0,  1042,     0,  1043,     0,  1044,    48,     0,     0,     0,
     0,     0,     0,    80,     0,    48,   413,   219,   224,    89,
     0,     0,     0,     0,    80,     0,    88,     0,    89,    90,
    51,     0,   226,    91,     0,   226,     0,    87,    90,    51,
     0,   226,    91,     0,     0,   126,   795,     0,     0,    92,
    93,    94,    48,     0,     0,    58,   127,   220,    92,    93,
    94,     0,     0,     0,     0,    89,     0,     0,   891,    80,
     0,     0,     0,     0,     0,    90,    51,     0,     0,    91,
     0,     0,     0,     0,     0,   570,   570,     0,     0,     0,
   570,   570,   890,     0,    48,    92,    93,    94,     0,     0,
   226,     0,     0,     0,     0,     0,     0,    89,     0,     0,
     0,     0,     0,     0,     0,    80,     0,    90,    51,     0,
   570,    91,     0,     0,     0,   570,     0,     0,     0,    22,
     0,   570,   570,   149,   892,    24,    25,   893,    93,    94,
   122,     0,    26,     0,    27,    28,    29,    30,   123,   124,
    31,    32,    33,    34,   238,    35,    36,    37,     0,    38,
    39,     0,   570,     0,    40,    41,     0,    42,    43,    44,
     0,   150,     0,     0,    46,     0,     0,     0,    47,     0,
     0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,     0,     0,   249,   250,   251,     0,    48,    49,    50,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    89,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    90,   151,     0,     0,    91,     0,    52,   152,    53,    54,
    55,    56,    57,     0,     0,     0,     0,    58,   127,    59,
    92,    93,    94,    22,     0,     0,     0,   149,     0,    24,
    25,     0,     0,     0,   122,     0,   313,     0,    27,    28,
    29,    30,   123,   124,    31,    32,    33,    34,     0,    35,
    36,    37,     0,    38,    39,     0,     0,     0,   314,    41,
     0,   315,   287,   316,     0,   150,     0,     0,    46,     0,
     0,     0,    47,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   317,   318,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    89,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    90,   151,     0,     0,    91,     0,
    52,   152,    53,    54,    55,    56,    57,     0,     0,     0,
     0,    58,   127,   290,    92,    93,    94,    22,     0,     0,
     0,   149,     0,    24,    25,     0,     0,     0,   122,     0,
    26,     0,    27,    28,    29,    30,   123,   124,    31,    32,
    33,    34,     0,    35,    36,    37,     0,    38,    39,     0,
     0,     0,   518,    41,     0,   519,    43,   520,     0,   150,
     0,     0,    46,     0,     0,     0,    47,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,   521,    50,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    89,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    90,   151,
     0,     0,    91,     0,    52,   152,    53,    54,    55,    56,
    57,     0,     0,     0,     0,    58,   127,    59,    92,    93,
    94,    22,     0,     0,     0,    23,     0,    24,    25,     0,
     0,     0,     0,     0,    26,     0,    27,    28,    29,    30,
     0,     0,    31,    32,    33,    34,     0,    35,    36,    37,
     0,    38,    39,     0,     0,     0,    40,    41,     0,    42,
    43,    44,     0,   348,     0,     0,    46,     0,     0,     0,
    47,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    48,
    49,    50,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    89,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    51,     0,     0,     0,     0,    52,     0,
    53,    54,    55,    56,    57,     0,    22,     0,     0,    58,
    23,    59,    24,    25,     0,     0,     0,     0,     0,    26,
     0,    27,    28,    29,    30,     0,     0,    31,    32,    33,
    34,     0,    35,    36,    37,     0,    38,    39,     0,     0,
     0,    40,    41,     0,    42,    43,    44,    86,    45,     0,
     0,    46,     0,     0,    87,    47,   284,     0,   167,    28,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    48,    49,    50,     0,   285,    41,
     0,   286,   287,   288,    86,   289,     0,     0,     0,     0,
     0,   122,     0,   212,     0,     0,     0,     0,    51,   123,
   124,     0,     0,    52,     0,    53,    54,    55,    56,    57,
     0,    48,   218,   219,    58,   213,    59,     0,   214,   215,
   216,     0,   499,     0,    89,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    90,    51,     0,     0,    91,     0,
   177,     0,     0,     0,     0,     0,     0,     0,    48,   218,
   219,    58,     0,   290,    92,    93,    94,     0,     0,     0,
     0,    89,     0,     0,     0,     0,     0,    86,     0,     0,
     0,    90,    51,     0,   122,    91,   212,     0,   152,     0,
     0,     0,   123,   124,     0,     0,     0,     0,    58,   127,
   220,    92,    93,    94,     0,     0,     0,     0,   410,     0,
     0,   411,   215,   412,    86,   499,     0,     0,     0,     0,
     0,    87,     0,   212,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   413,   219,     0,   213,     0,     0,   214,   215,
   216,     0,   470,     0,    89,   302,     0,   303,     0,     0,
     0,     0,     0,     0,    90,    51,     0,     0,    91,     0,
     0,   152,     0,     0,     0,     0,     0,     0,    48,   218,
   219,    58,   127,   220,    92,    93,    94,     0,     0,     0,
     0,    89,     0,     0,     0,     0,     0,    86,     0,     0,
     0,    90,   304,     0,    87,    91,   212,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    58,   127,
   220,    92,    93,    94,     0,     0,     0,     0,   410,     0,
     0,   411,   215,   412,    86,   470,     0,     0,   302,     0,
   303,    87,     0,     0,     0,     0,    28,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   413,   219,     0,    40,    41,     0,    42,    43,
    44,     0,   301,     0,    89,   302,     0,   303,     0,     0,
     0,     0,     0,     0,    90,   304,     0,     0,    91,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    48,   343,
     0,    58,   127,   220,    92,    93,    94,     0,     0,     0,
     0,   364,     0,     0,     0,     0,     0,    86,     0,     0,
     0,    90,   304,     0,    87,    91,   212,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    58,   127,
     0,    92,    93,    94,     0,     0,     0,     0,   213,     0,
     0,   214,   215,   216,    86,   637,     0,     0,   302,     0,
   303,    87,     0,   212,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   218,   219,     0,   410,     0,     0,   411,   215,
   412,     0,   637,     0,    89,   302,     0,   303,     0,     0,
     0,     0,    86,     0,    90,    51,     0,     0,    91,    87,
     0,   212,     0,     0,     0,     0,     0,     0,    48,   413,
   219,    58,     0,   220,    92,    93,    94,     0,     0,     0,
     0,    89,     0,   624,     0,     0,   625,   215,   626,    86,
   461,    90,    51,     0,     0,    91,    87,     0,   212,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    58,     0,
   220,    92,    93,    94,     0,     0,    48,   627,   219,     0,
   213,     0,     0,   214,   215,   216,     0,   217,     0,    89,
     0,     0,     0,     0,     0,     0,     0,    86,     0,    90,
    51,     0,     0,    91,    87,   177,   212,     0,     0,     0,
     0,     0,     0,    48,   218,   219,    58,     0,   220,    92,
    93,    94,     0,     0,     0,     0,    89,     0,   410,     0,
     0,   411,   215,   412,    86,   217,    90,    51,     0,     0,
    91,    87,     0,   212,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    58,     0,   220,    92,    93,    94,     0,
     0,    48,   413,   219,     0,   410,     0,     0,   411,   215,
   412,     0,   786,     0,    89,     0,     0,     0,     0,     0,
     0,     0,    86,     0,    90,    51,     0,     0,    91,    87,
     0,   212,     0,     0,     0,     0,     0,     0,    48,   413,
   219,    58,     0,   220,    92,    93,    94,     0,     0,     0,
     0,    89,     0,   624,     0,     0,   625,   215,   626,    86,
   217,    90,    51,     0,     0,    91,    87,     0,   212,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    58,     0,
   220,    92,    93,    94,     0,     0,    48,   627,   219,     0,
   213,     0,     0,   214,   215,   216,     0,   882,     0,    89,
     0,     0,     0,     0,     0,     0,     0,    86,     0,    90,
    51,     0,     0,    91,    87,     0,   212,     0,     0,     0,
     0,     0,     0,    48,   218,   219,    58,     0,   220,    92,
    93,    94,     0,     0,     0,     0,    89,     0,   213,     0,
     0,   214,   215,   216,    86,   885,    90,    51,     0,     0,
    91,    87,     0,   212,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    58,     0,   220,    92,    93,    94,     0,
     0,    48,   218,   219,     0,   937,     0,     0,   938,   215,
   412,     0,   217,     0,    89,     0,     0,     0,     0,     0,
     0,     0,    86,     0,    90,    51,     0,     0,    91,    87,
     0,   212,     0,     0,     0,     0,     0,     0,    48,   939,
   219,    58,     0,   220,    92,    93,    94,     0,     0,     0,
     0,    89,     0,   942,     0,     0,   943,   215,   412,    86,
   217,    90,    51,     0,     0,    91,    87,     0,   212,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    58,     0,
   220,    92,    93,    94,     0,     0,    48,   944,   219,     0,
   213,     0,     0,   214,   215,   216,     0,   950,     0,    89,
     0,     0,     0,     0,     0,     0,     0,    86,     0,    90,
    51,     0,     0,    91,    87,     0,   212,     0,     0,     0,
     0,     0,     0,    48,   218,   219,    58,     0,   220,    92,
    93,    94,     0,     0,     0,     0,    89,     0,   990,     0,
     0,   991,   215,   412,    86,   217,    90,    51,     0,     0,
    91,    87,     0,     0,     0,     0,    28,     0,     0,     0,
     0,     0,     0,    58,     0,   220,    92,    93,    94,     0,
     0,    48,   992,   219,     0,    40,    41,     0,    42,    43,
    44,     0,   217,     0,    89,     0,     0,     0,     0,     0,
     0,     0,    86,     0,    90,    51,     0,     0,    91,    87,
     0,     0,     0,     0,    28,    87,     0,     0,    48,   343,
     0,    58,     0,   220,    92,    93,    94,     0,     0,     0,
     0,    89,     0,    40,    41,     0,    42,    43,    44,     0,
   646,    90,    51,    87,     0,    91,    88,     0,     0,     0,
    87,     0,     0,     0,     0,     0,     0,     0,    58,     0,
     0,    92,    93,    94,     0,     0,    48,   343,     0,     0,
     0,     0,    48,     0,    88,     0,     0,     0,     0,    89,
     0,    88,     0,     0,     0,    89,     0,     0,     0,    90,
    51,    87,     0,    91,     0,    90,    51,    87,     0,    91,
    48,     0,     0,     0,     0,     0,    58,    48,     0,    92,
    93,    94,   892,    89,     0,    92,    93,    94,     0,     0,
    89,     0,    88,    90,    51,    87,     0,    91,    88,     0,
    90,    51,    87,     0,    91,     0,     0,     0,     0,     0,
   790,     0,     0,  1046,    93,    94,     0,   793,    48,     0,
  1047,    93,    94,     0,    48,     0,    88,     0,     0,     0,
     0,    89,     0,    88,     0,     0,     0,    89,     0,     0,
     0,    90,    51,    87,     0,    91,     0,    90,    51,    87,
     0,    91,    48,     0,     0,     0,     0,     0,   790,    48,
     0,  1051,    93,    94,   793,    89,     0,  1052,    93,    94,
     0,     0,    89,     0,    88,    90,    51,    87,     0,    91,
    88,     0,    90,    51,     0,     0,    91,     0,     0,     0,
     0,     0,   892,     0,     0,  1083,    93,    94,     0,   892,
    48,     0,  1086,    93,    94,     0,    48,     0,    88,     0,
     0,     0,     0,    89,     0,     0,     0,     0,     0,    89,
     0,     0,     0,    90,    51,     0,     0,    91,     0,    90,
    51,     0,     0,    91,    48,     0,     0,     0,     0,     0,
   790,     0,     0,  1088,    93,    94,   793,    89,     0,  1089,
    93,    94,     0,     0,     0,     0,     0,    90,    51,     0,
     0,    91,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   892,     0,     0,  1114,    93,    94
};

static const short yycheck[] = {    13,
    90,    91,   146,   338,   545,     1,   142,   201,   171,   301,
   302,   303,   195,     1,    45,    36,   359,    36,     2,    33,
     1,    45,   185,    46,    45,    45,    45,    49,    50,    45,
    23,   121,    36,    13,     9,    10,    11,    12,   201,    14,
    15,    16,    17,    18,    19,   171,   150,    71,   152,    45,
    12,   148,     8,  1041,    17,    45,    14,    45,   111,   185,
    46,    74,    46,    14,    45,    78,    79,    80,    45,    17,
    80,    48,    95,    50,    88,   201,    95,    81,    45,    95,
   111,    45,     2,   114,   100,     1,  1074,   111,    45,    99,
   111,   111,   111,    86,    74,   111,    76,    77,    78,    95,
    80,    45,   199,    84,   477,   478,   479,   480,   481,    95,
    45,   125,    75,    45,    95,   111,   279,    52,   281,    99,
   142,   111,    45,   111,   114,    45,    46,    75,   142,    45,
   111,    51,    52,   126,   148,   112,   150,    93,    94,   132,
   115,   116,   117,   118,   119,   339,     2,   111,    71,    15,
   691,   692,   145,    17,   112,   281,   149,   171,   116,     1,
    45,   112,   252,   147,    46,   116,   180,   111,    88,    89,
   114,   185,   186,   111,    45,   338,   339,    36,   470,   111,
    17,    45,    46,   475,    50,   199,    45,   201,   111,    45,
    46,    15,   176,   150,   486,   152,    46,    17,   182,   183,
   184,    83,    45,   217,   301,   125,    48,   191,   192,   193,
   194,    75,    36,   339,    45,   150,    15,    81,    82,   323,
    46,    48,   142,    15,    95,   542,    59,   147,   332,   333,
   150,   151,    17,    66,   209,    36,    95,    36,    75,   253,
   111,   176,   177,    45,    36,    95,   260,   261,   262,   541,
   207,   171,   111,    36,   268,    75,   176,   177,   272,   273,
    45,   181,   182,   183,   184,   403,    46,   405,   111,    95,
   408,   191,   192,   193,   194,   289,   373,   270,   271,   148,
   200,   822,   202,   203,   204,   205,   206,   301,   302,   303,
    75,   147,    93,    94,   150,   317,   318,   217,    36,    46,
   133,   134,   135,   136,    17,    45,    36,   227,    36,   323,
    93,    94,    50,    45,   298,    95,   185,    45,    50,   482,
   176,   465,   111,    36,   659,   339,   182,   183,   184,   111,
   199,   113,   201,    46,    36,   191,   192,   193,   194,   682,
   683,   658,   262,    45,   661,   637,   111,   639,    95,   205,
   206,   335,    36,    83,   289,    95,   482,   371,   650,   373,
   100,    45,    75,   507,   547,    36,   323,    95,    17,   289,
    36,   111,   689,   470,    45,   332,   333,    45,   298,    45,
    45,   301,    46,   111,   304,    38,   483,   401,    41,    45,
    43,   348,    45,    95,    36,   499,    45,   266,   267,    45,
   320,    45,    46,   323,   777,   778,   779,    38,    50,   111,
    41,    95,    43,   348,    45,   335,    45,    51,    38,    72,
   355,    41,   963,   964,    95,    36,    75,   111,   348,    95,
    95,    95,   301,   302,   303,   355,    45,   357,    84,   536,
   111,    72,   298,    45,   364,   111,   111,   461,   586,    95,
   588,    95,   590,   591,   100,   599,   470,   290,   111,    93,
    94,   475,   382,    45,   799,   111,    45,   111,   482,   483,
   339,   464,    83,   487,    45,    84,     1,    45,    46,   335,
   111,    45,     7,   497,     1,   499,    95,   501,    46,    14,
     7,   808,   348,    95,    45,    45,   659,    14,    46,   521,
    46,   421,   111,    48,   373,    84,    45,   340,   341,   111,
     4,     5,     6,    95,    38,    46,    95,    41,    46,    43,
    45,    45,   536,   667,    95,   539,   461,    95,    45,   111,
    45,    48,   111,    50,    45,    46,    15,    95,    36,   372,
   111,   461,   499,   111,    99,    95,    71,    95,    72,    95,
   470,    37,    45,    46,    71,   475,    95,    36,    45,    84,
    84,   111,   482,    17,    95,    93,    94,    84,    46,    94,
    95,    95,   111,    98,    45,    17,   100,    94,    95,   499,
    95,    98,   502,    81,    95,   920,   111,   111,   523,   114,
   115,   116,    46,   928,   111,   112,   111,   114,   115,   116,
   111,   470,    95,   523,    46,    15,   526,    46,    95,     1,
    36,   111,   775,   113,   483,     7,    17,    95,   111,   911,
    17,    75,    14,   637,   111,   639,    36,   460,   548,    36,
   550,   551,   646,    75,    46,   619,   799,   773,    46,    81,
    82,   976,    81,    82,     1,    46,   736,    17,    74,    46,
    76,    77,    78,    45,    80,    46,    48,   671,   672,   111,
   995,   113,    19,   980,   981,    46,    46,   536,   985,   986,
   987,   988,   541,    99,    75,    45,    46,    46,    75,    71,
   664,    38,    39,    95,    41,    42,    43,    95,    45,   703,
    36,    17,    84,    46,   550,   551,    46,    46,    46,   619,
    46,    36,    94,    95,    95,    75,    98,    45,  1025,    17,
    36,    45,  1029,  1030,    95,    72,    51,   637,    95,   111,
    46,    46,   114,   115,   116,    49,   646,   702,    81,    82,
   384,    50,   386,   387,   388,   389,   390,   391,    46,   393,
   394,    51,   396,   397,   664,    95,    95,    95,    46,    75,
    15,   111,   766,   113,   111,   113,   113,   920,    93,    94,
    49,    38,    46,   619,    41,   928,    95,    75,    93,    94,
   639,    36,   786,    81,    82,   789,    46,    16,   792,    18,
    19,   774,    46,    93,    94,    74,    46,    76,    77,    78,
   934,    80,     1,    46,    46,    46,    46,    95,     7,    38,
    39,  1093,    41,    42,    43,    14,    45,    95,   664,    46,
    99,    95,    46,   976,  1131,  1132,    46,  1134,  1135,   111,
    46,    46,   114,   807,   111,  1142,   113,    46,  1145,  1146,
  1147,    95,   995,    72,    73,    95,    45,    47,    46,    48,
  1157,    50,    95,    95,    95,    95,    46,   861,    74,    46,
    76,    77,    78,   773,    80,    46,   870,    38,    95,    46,
    41,    95,    71,    46,    46,    95,   786,    46,   882,   789,
    95,   885,   792,    99,   113,    84,    95,   891,    51,   863,
     2,     7,    99,    93,    94,    94,    95,   807,    14,    98,
   874,    46,    46,    46,    17,    95,    22,    23,    95,    46,
    46,    46,   111,   112,    95,   114,   115,   116,    95,    31,
    46,    46,    95,    95,    46,    46,    95,   931,    17,    45,
    93,    94,    38,    45,    46,    41,   940,   941,    46,    51,
    52,   945,   946,   947,   948,   919,   950,    59,    46,    35,
    95,    95,    95,   863,    66,    71,    85,    86,    95,    95,
    95,   807,    15,    37,   874,    15,    72,    46,    84,    95,
    95,    36,   882,    95,    95,   885,    88,    89,    94,    95,
    36,   891,    98,    36,    19,   989,    36,    28,    35,   993,
   994,   965,    78,    83,    80,   111,   112,    50,   114,   115,
   116,    49,    35,    38,    39,    50,    41,    42,    43,   919,
    45,    81,    82,   125,    93,    94,    46,   863,   662,   663,
    46,   133,   134,   135,   136,     4,   138,     6,   874,   141,
   142,    78,    50,    80,    46,   147,    75,    72,   150,   151,
   950,    78,    79,    80,    74,    78,    14,    80,    78,    79,
    80,    46,   911,   697,   698,   965,   700,   701,    36,   171,
    85,    86,    74,    46,   176,   177,    78,    79,    80,   181,
   182,   183,   184,   919,    75,   187,   111,    45,   113,   191,
   192,   193,   194,    78,    16,    80,    18,    19,   200,    11,
   202,   203,   204,   205,   206,    78,    74,    80,   266,   267,
    78,    79,    80,    71,    49,   217,    38,    39,    46,    41,
    42,    43,    46,    45,     2,   227,    84,  1121,  1122,   965,
  1124,  1125,   111,    95,   113,    14,    94,    95,    38,  1133,
    98,    41,  1136,  1137,  1138,  1045,   574,    46,   576,    46,
    78,   579,    80,   111,  1148,    36,   114,   115,   116,    80,
   262,    46,    81,    78,   592,    80,    45,    45,    46,    46,
    36,    80,    72,    51,    52,    74,    78,  1077,    80,    78,
    79,    80,    49,    49,    99,    45,    46,   289,   290,    74,
    50,   113,    71,    78,    79,    80,   298,    46,    46,   301,
    11,    78,   304,    80,  1104,    84,    93,    94,    74,  1045,
    88,    89,    78,    79,    80,    94,    95,    46,   320,    98,
    38,   323,    95,    41,    46,   653,   654,    46,    48,    78,
    46,    80,   111,   335,    46,   114,   115,   116,   340,   341,
   342,    46,     8,    45,    46,    74,   348,   125,    50,    78,
    79,    80,    74,   355,    72,   357,    78,    79,    80,    78,
    45,    80,   364,    48,   142,    50,    78,    80,    80,   147,
   372,    95,   150,   151,    45,    46,    46,   705,    38,    50,
   382,    41,   710,    48,   712,    95,   714,    46,   716,    38,
   718,   719,    41,   171,   722,    46,    49,   725,   176,   177,
    32,    46,   730,   181,   182,   183,   184,    16,    38,    18,
    19,    41,    46,   191,   192,   193,   194,    38,    19,   421,
    41,    74,    43,    36,    45,    78,    79,    80,     7,    38,
    39,    46,    41,    42,    43,    14,    45,    38,    39,   217,
    41,    42,    43,    22,    23,    45,   448,   449,   450,   227,
    46,    72,   454,   455,   456,    46,   458,    38,   460,   461,
    41,   463,    38,    84,    50,    41,    45,    11,   470,   797,
   798,    45,    46,   475,    95,    80,    50,    45,    46,    46,
   482,    46,    50,    74,   262,    46,    50,    78,    79,    80,
   111,    95,    71,    95,    76,    77,    78,   499,    80,    46,
   502,    95,   830,    46,   113,    84,    46,    36,   836,   511,
   838,   289,   840,    51,    46,    94,    95,    99,    48,    98,
   298,   523,   101,   301,   526,    38,   304,    46,    41,    46,
    46,    46,   111,   112,    74,   114,   115,   116,    78,    79,
    80,    38,   320,     7,    41,   323,   548,    46,   550,   551,
    14,     7,    46,    95,    95,    74,    95,   335,    14,    78,
    79,    80,   111,    81,    36,   111,    22,    23,    80,    16,
   348,    18,    19,    49,    45,    45,    51,   355,    46,   357,
    49,    45,    49,    56,    45,    51,   364,    36,    51,    45,
    48,    38,    39,    45,    41,    42,    43,    95,    45,    95,
   602,    46,    46,   605,    46,    36,   608,    71,    51,    46,
    83,    84,   614,    46,   616,    71,    46,   619,    91,    92,
    84,   623,    95,    96,    97,    46,   628,    46,    84,    46,
    94,    95,     2,    95,    98,   637,    88,    89,    94,    95,
    49,    37,    98,   421,   646,   101,    49,   111,    46,    49,
   114,   115,   116,    48,    46,   111,   112,    45,   114,   115,
   116,    51,   664,    46,    49,    74,   113,    46,    46,    78,
    79,    80,    46,   125,    74,    45,    46,    46,    78,    79,
    80,    46,    52,   461,    51,   111,  1014,   111,   111,    74,
   142,  1019,   470,    78,    79,    80,    46,   475,   150,    37,
    51,     9,    45,    45,   482,    45,    50,    46,    49,    46,
    46,    46,    20,    21,    22,    23,    50,    50,    88,    89,
  1048,   499,    50,    74,   176,  1053,    34,    78,    79,    80,
    50,    16,  1060,    18,    19,    50,    46,    45,    51,   741,
    48,    45,    95,    46,   746,   523,    45,   111,    46,   751,
    46,   111,    45,    38,    39,   125,    41,    42,    43,    45,
    45,    50,  1090,    50,    45,   217,    50,    46,    45,   771,
    46,   773,   142,    46,    46,   227,    95,   147,    41,    95,
   150,    95,    41,    51,   786,    46,    51,   789,    46,   237,
   792,    51,   100,   101,   102,    51,   104,   105,   106,   107,
   108,    51,   110,   111,    51,   807,   176,   177,    46,    46,
   262,   181,   182,   183,   184,    56,    46,    95,    46,    41,
    95,   191,   192,   193,   194,    95,    95,    46,   113,    46,
    46,    85,    86,    87,    88,    89,    90,   289,     7,    93,
    94,   619,    83,    84,    46,    14,    51,   217,    51,   301,
    91,    92,    93,    94,    95,    96,    97,   227,    51,   637,
    81,   863,   114,     7,    46,   114,   114,    46,   646,   114,
    14,   323,   874,    46,    46,    95,    45,    45,   114,    48,
   882,    50,    46,   885,    46,    46,   664,    46,    46,   891,
    46,    46,   262,    46,    46,    46,   348,    46,    46,   114,
   114,    45,    71,   355,    48,   357,    50,   114,    50,    50,
    50,    50,   364,    46,    46,    84,   114,   919,    46,   289,
    50,    50,   448,   449,   450,    94,    95,    71,   298,    98,
   456,   301,    50,    50,    50,     0,    51,    51,    51,    51,
    84,    51,   111,   112,    51,   114,   115,   116,   950,    51,
    94,    95,    51,   323,    98,   403,    51,   405,     0,   399,
   408,   482,   547,   965,   570,   335,     7,   111,   112,   421,
   114,   115,   116,    14,    99,    16,   648,   621,   348,   687,
    -1,   506,    -1,    -1,    -1,   355,    -1,   357,    -1,    -1,
    -1,    -1,    -1,    -1,   364,   773,    -1,    38,    46,    -1,
    41,    42,    43,    -1,    45,    -1,    -1,    -1,   786,   461,
    -1,   789,    -1,    -1,   792,    -1,    -1,    -1,   470,    -1,
    -1,    -1,    -1,   475,    -1,    -1,    -1,    -1,    -1,   807,
    71,    72,    73,    -1,    -1,    -1,    -1,    85,    86,    87,
    88,    89,    90,    84,    -1,    93,    94,   499,     7,    -1,
    -1,   421,    -1,    94,    95,    14,    -1,    98,    -1,   100,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,
   111,   523,   113,   114,   115,   116,   602,    -1,   604,   605,
    -1,   607,   608,    -1,   610,   863,    45,   613,    -1,   615,
   616,   461,   618,    -1,    -1,    -1,   874,    -1,    45,    -1,
   470,    -1,    -1,    -1,   882,   475,    -1,   885,    -1,    -1,
    -1,    -1,    71,   891,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   571,    71,    84,   574,    -1,   576,   499,
    -1,   579,    -1,    -1,    -1,    94,    95,    84,   586,    98,
   588,   919,   590,   591,   592,    -1,    -1,    94,    95,    -1,
    -1,    98,   111,   523,    -1,   114,   115,   116,    -1,    -1,
    -1,    -1,    -1,    -1,   111,    -1,    -1,   114,   115,   116,
    -1,    -1,   950,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   637,    -1,   965,    -1,    -1,
    -1,    -1,    -1,    -1,   646,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   652,   653,   654,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   741,    14,   743,   744,    -1,
   746,    -1,   748,   749,    -1,    -1,    -1,   753,   754,    -1,
    -1,    -1,   758,    -1,   760,   761,    -1,    -1,   764,   765,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,   619,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   705,    -1,   707,
    -1,    -1,   710,    -1,   712,    -1,   714,   637,   716,   717,
   718,   719,    -1,    71,   722,    -1,   646,   725,    -1,    -1,
    -1,    -1,   730,    -1,    -1,    -1,    84,    -1,    -1,    -1,
    -1,    -1,     7,    -1,   664,    -1,    94,    95,    -1,    14,
    98,    16,    -1,    -1,    -1,    -1,    -1,    22,    23,    -1,
    -1,    -1,    -1,   111,    -1,    -1,   114,   115,   116,    -1,
    -1,    -1,    -1,    38,    14,   851,    41,    42,    43,   855,
    45,    -1,   858,   859,   786,    -1,    -1,   789,    -1,    -1,
   792,    -1,   868,    -1,    -1,    -1,    -1,    -1,    -1,   797,
   798,    -1,    -1,    -1,    -1,    45,    71,    72,    73,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,
    95,    71,   830,    98,    -1,    -1,   101,    -1,   836,    -1,
   838,    -1,   840,    -1,    84,    -1,   111,   112,   113,   114,
   115,   116,    45,   773,    94,    95,   932,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   786,    -1,    -1,   789,
    -1,   111,   792,    -1,   114,   115,   116,    -1,    71,    14,
   882,     7,    -1,   885,    -1,    -1,    -1,   807,    14,   891,
    16,    84,   968,    -1,    -1,   971,    22,    23,    -1,    -1,
    -1,    94,    95,    -1,    -1,    98,    -1,    -1,    -1,    -1,
    45,    -1,    38,    -1,    -1,    41,    42,    43,   111,    45,
    -1,   114,   115,   116,    -1,    14,    -1,    -1,    -1,    -1,
    -1,  1007,    -1,  1009,    -1,  1011,    71,    -1,    -1,    -1,
    -1,    -1,    -1,   863,    -1,    71,    72,    73,   950,    84,
    -1,    -1,    -1,    -1,   874,    -1,    45,    -1,    84,    94,
    95,    -1,   882,    98,    -1,   885,    -1,    14,    94,    95,
    -1,   891,    98,    -1,    -1,   101,   111,    -1,    -1,   114,
   115,   116,    71,    -1,    -1,   111,   112,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    -1,    45,   919,
    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,
    -1,    -1,    -1,    -1,    -1,  1013,  1014,    -1,    -1,    -1,
  1018,  1019,   111,    -1,    71,   114,   115,   116,    -1,    -1,
   950,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   965,    -1,    94,    95,    -1,
  1048,    98,    -1,    -1,    -1,  1053,    -1,    -1,    -1,     3,
    -1,  1059,  1060,     7,   111,     9,    10,   114,   115,   116,
    14,    -1,    16,    -1,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    56,    29,    30,    31,    -1,    33,
    34,    -1,  1090,    -1,    38,    39,    -1,    41,    42,    43,
    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,
    -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    -1,    -1,    95,    96,    97,    -1,    71,    72,    73,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    -1,    -1,    98,    -1,   100,   101,   102,   103,
   104,   105,   106,    -1,    -1,    -1,    -1,   111,   112,   113,
   114,   115,   116,     3,    -1,    -1,    -1,     7,    -1,     9,
    10,    -1,    -1,    -1,    14,    -1,    16,    -1,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
    30,    31,    -1,    33,    34,    -1,    -1,    -1,    38,    39,
    -1,    41,    42,    43,    -1,    45,    -1,    -1,    48,    -1,
    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
   100,   101,   102,   103,   104,   105,   106,    -1,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   116,     3,    -1,    -1,
    -1,     7,    -1,     9,    10,    -1,    -1,    -1,    14,    -1,
    16,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    -1,    29,    30,    31,    -1,    33,    34,    -1,
    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    -1,    -1,    98,    -1,   100,   101,   102,   103,   104,   105,
   106,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
   116,     3,    -1,    -1,    -1,     7,    -1,     9,    10,    -1,
    -1,    -1,    -1,    -1,    16,    -1,    18,    19,    20,    21,
    -1,    -1,    24,    25,    26,    27,    -1,    29,    30,    31,
    -1,    33,    34,    -1,    -1,    -1,    38,    39,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,
    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,   100,    -1,
   102,   103,   104,   105,   106,    -1,     3,    -1,    -1,   111,
     7,   113,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,
    -1,    18,    19,    20,    21,    -1,    -1,    24,    25,    26,
    27,    -1,    29,    30,    31,    -1,    33,    34,    -1,    -1,
    -1,    38,    39,    -1,    41,    42,    43,     7,    45,    -1,
    -1,    48,    -1,    -1,    14,    52,    16,    -1,    18,    19,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    38,    39,
    -1,    41,    42,    43,     7,    45,    -1,    -1,    -1,    -1,
    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,    95,    22,
    23,    -1,    -1,   100,    -1,   102,   103,   104,   105,   106,
    -1,    71,    72,    73,   111,    38,   113,    -1,    41,    42,
    43,    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,
    -1,    84,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,
    -1,    94,    95,    -1,    14,    98,    16,    -1,   101,    -1,
    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,   115,   116,    -1,    -1,    -1,    -1,    38,    -1,
    -1,    41,    42,    43,     7,    45,    -1,    -1,    -1,    -1,
    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,
    43,    -1,    45,    -1,    84,    48,    -1,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
    -1,    84,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,
    -1,    94,    95,    -1,    14,    98,    16,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,   115,   116,    -1,    -1,    -1,    -1,    38,    -1,
    -1,    41,    42,    43,     7,    45,    -1,    -1,    48,    -1,
    50,    14,    -1,    -1,    -1,    -1,    19,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    72,    73,    -1,    38,    39,    -1,    41,    42,
    43,    -1,    45,    -1,    84,    48,    -1,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    -1,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
    -1,    84,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,
    -1,    94,    95,    -1,    14,    98,    16,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
    -1,   114,   115,   116,    -1,    -1,    -1,    -1,    38,    -1,
    -1,    41,    42,    43,     7,    45,    -1,    -1,    48,    -1,
    50,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,
    43,    -1,    45,    -1,    84,    48,    -1,    50,    -1,    -1,
    -1,    -1,     7,    -1,    94,    95,    -1,    -1,    98,    14,
    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,
    -1,    84,    -1,    38,    -1,    -1,    41,    42,    43,     7,
    45,    94,    95,    -1,    -1,    98,    14,    -1,    16,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,
   113,   114,   115,   116,    -1,    -1,    71,    72,    73,    -1,
    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    94,
    95,    -1,    -1,    98,    14,   100,    16,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    72,    73,   111,    -1,   113,   114,
   115,   116,    -1,    -1,    -1,    -1,    84,    -1,    38,    -1,
    -1,    41,    42,    43,     7,    45,    94,    95,    -1,    -1,
    98,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   111,    -1,   113,   114,   115,   116,    -1,
    -1,    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,
    43,    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     7,    -1,    94,    95,    -1,    -1,    98,    14,
    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,
    -1,    84,    -1,    38,    -1,    -1,    41,    42,    43,     7,
    45,    94,    95,    -1,    -1,    98,    14,    -1,    16,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,
   113,   114,   115,   116,    -1,    -1,    71,    72,    73,    -1,
    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    94,
    95,    -1,    -1,    98,    14,    -1,    16,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    72,    73,   111,    -1,   113,   114,
   115,   116,    -1,    -1,    -1,    -1,    84,    -1,    38,    -1,
    -1,    41,    42,    43,     7,    45,    94,    95,    -1,    -1,
    98,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   111,    -1,   113,   114,   115,   116,    -1,
    -1,    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,
    43,    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     7,    -1,    94,    95,    -1,    -1,    98,    14,
    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,
    -1,    84,    -1,    38,    -1,    -1,    41,    42,    43,     7,
    45,    94,    95,    -1,    -1,    98,    14,    -1,    16,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,
   113,   114,   115,   116,    -1,    -1,    71,    72,    73,    -1,
    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    94,
    95,    -1,    -1,    98,    14,    -1,    16,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    72,    73,   111,    -1,   113,   114,
   115,   116,    -1,    -1,    -1,    -1,    84,    -1,    38,    -1,
    -1,    41,    42,    43,     7,    45,    94,    95,    -1,    -1,
    98,    14,    -1,    -1,    -1,    -1,    19,    -1,    -1,    -1,
    -1,    -1,    -1,   111,    -1,   113,   114,   115,   116,    -1,
    -1,    71,    72,    73,    -1,    38,    39,    -1,    41,    42,
    43,    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     7,    -1,    94,    95,    -1,    -1,    98,    14,
    -1,    -1,    -1,    -1,    19,    14,    -1,    -1,    71,    72,
    -1,   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,
    -1,    84,    -1,    38,    39,    -1,    41,    42,    43,    -1,
    45,    94,    95,    14,    -1,    98,    45,    -1,    -1,    -1,
    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,
    -1,   114,   115,   116,    -1,    -1,    71,    72,    -1,    -1,
    -1,    -1,    71,    -1,    45,    -1,    -1,    -1,    -1,    84,
    -1,    45,    -1,    -1,    -1,    84,    -1,    -1,    -1,    94,
    95,    14,    -1,    98,    -1,    94,    95,    14,    -1,    98,
    71,    -1,    -1,    -1,    -1,    -1,   111,    71,    -1,   114,
   115,   116,   111,    84,    -1,   114,   115,   116,    -1,    -1,
    84,    -1,    45,    94,    95,    14,    -1,    98,    45,    -1,
    94,    95,    14,    -1,    98,    -1,    -1,    -1,    -1,    -1,
   111,    -1,    -1,   114,   115,   116,    -1,   111,    71,    -1,
   114,   115,   116,    -1,    71,    -1,    45,    -1,    -1,    -1,
    -1,    84,    -1,    45,    -1,    -1,    -1,    84,    -1,    -1,
    -1,    94,    95,    14,    -1,    98,    -1,    94,    95,    14,
    -1,    98,    71,    -1,    -1,    -1,    -1,    -1,   111,    71,
    -1,   114,   115,   116,   111,    84,    -1,   114,   115,   116,
    -1,    -1,    84,    -1,    45,    94,    95,    14,    -1,    98,
    45,    -1,    94,    95,    -1,    -1,    98,    -1,    -1,    -1,
    -1,    -1,   111,    -1,    -1,   114,   115,   116,    -1,   111,
    71,    -1,   114,   115,   116,    -1,    71,    -1,    45,    -1,
    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    84,
    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,    94,
    95,    -1,    -1,    98,    71,    -1,    -1,    -1,    -1,    -1,
   111,    -1,    -1,   114,   115,   116,   111,    84,    -1,   114,
   115,   116,    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,
    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   111,    -1,    -1,   114,   115,   116
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 147 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 177 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 178 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 182 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 183 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 187 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 191 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 192 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 210 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 213 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 215 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 220 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 225 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 228 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 233 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 243 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 348 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 349 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 351 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 352 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 356 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 358 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 359 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 361 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 362 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 372 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 373 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 374 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 380 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 383 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 389 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 393 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 399 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 407 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 418 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 421 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 64:
#line 434 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 65:
#line 439 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 66:
#line 443 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 67:
#line 449 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 68:
#line 450 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 69:
#line 456 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 70:
#line 461 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 71:
#line 466 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 72:
#line 475 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 73:
#line 483 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 74:
#line 494 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 75:
#line 507 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 76:
#line 508 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 77:
#line 509 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 514 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 79:
#line 518 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 80:
#line 522 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 81:
#line 526 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 82:
#line 530 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 534 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 540 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 85:
#line 542 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 86:
#line 545 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 87:
#line 550 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 88:
#line 561 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 89:
#line 562 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 90:
#line 563 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 91:
#line 566 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 92:
#line 567 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 93:
#line 568 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 94:
#line 576 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 95:
#line 580 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 96:
#line 584 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 589 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 595 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 600 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 100:
#line 607 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 101:
#line 613 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 102:
#line 624 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 103:
#line 625 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 104:
#line 626 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 105:
#line 631 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 106:
#line 638 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 107:
#line 641 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 108:
#line 642 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 651 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 110:
#line 654 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 111:
#line 655 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 112:
#line 656 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 657 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 658 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 115:
#line 659 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 116:
#line 660 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 117:
#line 664 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 118:
#line 666 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 119:
#line 668 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 120:
#line 670 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 121:
#line 672 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 122:
#line 674 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 676 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 678 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 125:
#line 680 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 682 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 684 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 128:
#line 686 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 129:
#line 688 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 692 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 131:
#line 693 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 132:
#line 696 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 133:
#line 697 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 134:
#line 698 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 135:
#line 701 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 136:
#line 702 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 137:
#line 703 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 138:
#line 706 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 139:
#line 710 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 140:
#line 716 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 141:
#line 718 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 142:
#line 720 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 143:
#line 722 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 144:
#line 724 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 145:
#line 725 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 146:
#line 730 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 147:
#line 731 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 148:
#line 732 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 149:
#line 738 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 150:
#line 739 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 151:
#line 741 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 152:
#line 743 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 153:
#line 745 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 154:
#line 747 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 155:
#line 748 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 156:
#line 754 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 157:
#line 755 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 158:
#line 757 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 159:
#line 759 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 160:
#line 764 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 161:
#line 765 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 162:
#line 769 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 163:
#line 770 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 164:
#line 774 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 165:
#line 775 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 166:
#line 779 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 167:
#line 780 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 168:
#line 781 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 169:
#line 782 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 170:
#line 783 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 171:
#line 785 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 786 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 787 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 788 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 789 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 176:
#line 790 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 791 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 792 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 793 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 796 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 181:
#line 797 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 182:
#line 798 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 183:
#line 799 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 184:
#line 800 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 185:
#line 801 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 186:
#line 802 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 187:
#line 803 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 188:
#line 806 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 189:
#line 807 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 190:
#line 811 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 191:
#line 812 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 192:
#line 813 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 193:
#line 814 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 194:
#line 821 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 195:
#line 825 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 196:
#line 833 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 197:
#line 845 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 198:
#line 849 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 199:
#line 858 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 200:
#line 870 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 201:
#line 874 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 202:
#line 882 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 203:
#line 885 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 204:
#line 886 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 205:
#line 891 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 206:
#line 895 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 207:
#line 899 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 208:
#line 904 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 209:
#line 907 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 210:
#line 916 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 211:
#line 917 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 212:
#line 918 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 213:
#line 921 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 214:
#line 922 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 215:
#line 925 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 216:
#line 926 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 217:
#line 929 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 218:
#line 930 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 219:
#line 931 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 220:
#line 932 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 221:
#line 933 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 222:
#line 934 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 223:
#line 937 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 224:
#line 938 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 225:
#line 939 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 226:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 227:
#line 941 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 228:
#line 942 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 229:
#line 944 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 230:
#line 945 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 231:
#line 947 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 232:
#line 948 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 233:
#line 950 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 234:
#line 958 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 235:
#line 959 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 236:
#line 960 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 237:
#line 961 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 238:
#line 962 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 239:
#line 968 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 240:
#line 970 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 241:
#line 971 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 242:
#line 974 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 243:
#line 975 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 244:
#line 976 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 245:
#line 979 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 246:
#line 980 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 983 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 248:
#line 984 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 249:
#line 987 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 250:
#line 988 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 251:
#line 991 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 992 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 997 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 254:
#line 998 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 255:
#line 999 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 256:
#line 1000 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 257:
#line 1001 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 258:
#line 1002 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 259:
#line 1010 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 260:
#line 1011 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 261:
#line 1015 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 262:
#line 1016 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 263:
#line 1023 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 264:
#line 1027 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 265:
#line 1032 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 266:
#line 1038 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 267:
#line 1044 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 268:
#line 1050 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 269:
#line 1060 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 270:
#line 1066 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 271:
#line 1072 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 272:
#line 1078 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 273:
#line 1086 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 274:
#line 1090 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 275:
#line 1094 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 276:
#line 1100 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 277:
#line 1104 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 278:
#line 1108 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 279:
#line 1114 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 280:
#line 1120 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 281:
#line 1127 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 282:
#line 1133 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 283:
#line 1139 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 284:
#line 1143 "msv.y"
{
		  CSyntaxNode* pChild00=new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
		  CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, pChild00, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 285:
#line 1151 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].cString,yyvsp[-2].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 286:
#line 1156 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 287:
#line 1160 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 288:
#line 1164 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 289:
#line 1168 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 290:
#line 1174 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 291:
#line 1180 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 292:
#line 1186 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 293:
#line 1193 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 294:
#line 1201 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 295:
#line 1207 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 296:
#line 1222 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].cString,yyvsp[-2].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;

		;
    break;}
case 297:
#line 1228 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 298:
#line 1233 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 299:
#line 1241 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 300:
#line 1248 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 301:
#line 1254 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 302:
#line 1260 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 303:
#line 1263 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 304:
#line 1273 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 305:
#line 1284 "msv.y"
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
case 306:
#line 1287 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 307:
#line 1288 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 308:
#line 1293 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 309:
#line 1306 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 310:
#line 1307 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1315 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 312:
#line 1317 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 313:
#line 1324 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 314:
#line 1326 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 315:
#line 1332 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 316:
#line 1333 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 317:
#line 1337 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 318:
#line 1342 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 319:
#line 1347 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 320:
#line 1352 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 321:
#line 1359 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 322:
#line 1362 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 323:
#line 1363 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 324:
#line 1369 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 325:
#line 1371 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 326:
#line 1391 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 327:
#line 1392 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 328:
#line 1394 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 329:
#line 1396 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 330:
#line 1397 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 331:
#line 1403 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 332:
#line 1410 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 333:
#line 1418 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 334:
#line 1426 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 335:
#line 1430 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 336:
#line 1434 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 337:
#line 1440 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 338:
#line 1444 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 339:
#line 1450 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 340:
#line 1454 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 341:
#line 1461 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 342:
#line 1465 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 343:
#line 1469 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 344:
#line 1476 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 345:
#line 1480 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 346:
#line 1483 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 347:
#line 1488 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 348:
#line 1497 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 349:
#line 1498 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 350:
#line 1504 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 351:
#line 1505 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 352:
#line 1509 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 353:
#line 1510 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 354:
#line 1515 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 355:
#line 1516 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 356:
#line 1517 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 357:
#line 1518 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 358:
#line 1519 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1522 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 360:
#line 1523 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 361:
#line 1524 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 362:
#line 1530 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 363:
#line 1531 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 364:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 365:
#line 1534 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 366:
#line 1535 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1536 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1538 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1539 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1540 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1541 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1543 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1544 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1545 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1546 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1547 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1548 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1549 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 379:
#line 1553 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 380:
#line 1554 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 381:
#line 1555 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 382:
#line 1556 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 383:
#line 1557 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 384:
#line 1558 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 385:
#line 1559 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1561 "msv.y"
