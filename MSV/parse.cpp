
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	RETURN	262
#define	IF	263
#define	ELSE	264
#define	EMPTY	265
#define	AWAIT	266
#define	PROJECTION	267
#define	PBEGIN	268
#define	PEND	269
#define	POINTERNULL	270
#define	ARRAY	271
#define	STRUCT	272
#define	DOT	273
#define	UNION	274
#define	FILEDECLARATION	275
#define	MORE	276
#define	DEFINE	277
#define	MY_TRUE	278
#define	MY_FALSE	279
#define	EXIST	280
#define	FRAME	281
#define	FOR	282
#define	WHILE	283
#define	DO	284
#define	TRUE	285
#define	FALSE	286
#define	REPEAT	287
#define	UNTIL	288
#define	DISPLAY	289
#define	SKIP	290
#define	THEN	291
#define	COMMA	292
#define	COLON	293
#define	INTDECLARATION	294
#define	STRDECLARATION	295
#define	POINTERDECLARATION	296
#define	CHARDECLARATION	297
#define	VOIDDECLARATION	298
#define	FLOATDECLARATION	299
#define	LISTDECLARATION	300
#define	OPEN_PAR	301
#define	CLOSE_PAR	302
#define	TIMES	303
#define	OPEN_BPAR	304
#define	CLOSE_BPAR	305
#define	OPEN_MPAR	306
#define	CLOSE_MPAR	307
#define	FUNCTION	308
#define	OVER	309
#define	CYLINDER	310
#define	OVEREP	311
#define	INTER_OR	312
#define	NON_DETERMINED	313
#define	SEND	314
#define	RECEIVE	315
#define	PROCESS	316
#define	CHANNEL	317
#define	PUT	318
#define	GET	319
#define	ERROR_TOKEN	320
#define	STRFUNCHEAD	321
#define	STRFUNCTAIL	322
#define	STRFUNCCAT	323
#define	STRFUNCCMP	324
#define	STRFUNCCPY	325
#define	STRFUNCLEN	326
#define	EXTERN	327
#define	UNSIGNED	328
#define	SIGNED	329
#define	CHOP	330
#define	IMPLY	331
#define	IFF	332
#define	PROPIMPLY	333
#define	OR	334
#define	PARALLEL	335
#define	AND	336
#define	ASS_P	337
#define	ASS_N	338
#define	CON	339
#define	ADDRESS	340
#define	NE	341
#define	EQ	342
#define	GE	343
#define	LE	344
#define	GT	345
#define	LT	346
#define	LST	347
#define	RST	348
#define	ADD	349
#define	SUB	350
#define	MUL	351
#define	DIV	352
#define	MOD	353
#define	BNE	354
#define	CHOPSTAR	355
#define	NEXT	356
#define	NEGATION	357
#define	LENGTH	358
#define	REQUEST	359
#define	FINAL	360
#define	KEEP	361
#define	ALWAYS	362
#define	HALT	363
#define	W_NEXT	364
#define	PREFIX	365
#define	SOMETIMES	366
#define	ID	367
#define	STRLITERAL	368
#define	STRUCT_TYPE	369
#define	INTLITERAL	370
#define	FLOATLITERAL	371
#define	CHARLITERAL	372

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1220
#define	YYFLAG		-32768
#define	YYNTBASE	118

#define YYTRANSLATE(x) ((unsigned)(x) <= 372 ? yytranslate[x] : 193)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   114,   116,   118,   120,
   122,   127,   132,   137,   142,   151,   153,   155,   157,   162,
   164,   166,   168,   170,   175,   179,   187,   197,   204,   210,
   220,   222,   224,   226,   234,   238,   240,   244,   246,   247,
   257,   268,   280,   291,   303,   316,   321,   327,   332,   337,
   340,   343,   346,   349,   351,   354,   357,   361,   365,   369,
   373,   381,   390,   402,   416,   418,   420,   422,   424,   426,
   428,   431,   438,   443,   449,   455,   464,   473,   476,   479,
   482,   483,   490,   498,   499,   502,   506,   508,   510,   512,
   514,   518,   521,   523,   535,   548,   560,   572,   590,   609,
   627,   646,   666,   685,   703,   722,   740,   742,   744,   746,
   748,   750,   761,   765,   767,   772,   778,   790,   803,   815,
   827,   840,   844,   848,   851,   852,   855,   858,   861,   869,
   876,   881,   885,   887,   891,   895,   901,   903,   907,   910,
   911,   913,   917,   919,   922,   925,   927,   929,   931,   933,
   935,   937,   941,   943,   945,   947,   949,   951,   953,   955,
   957,   959,   961,   963,   965,   967,   969,   973,   975,   977,
   981,   986,   991,   996,  1001,  1006,  1011,  1015,  1019,  1023,
  1024,  1027,  1030,  1033,  1036,  1039,  1043,  1048,  1053,  1058,
  1064,  1070,  1076,  1082,  1088,  1095,  1101,  1107,  1114,  1120,
  1127,  1135,  1142,  1149,  1157,  1164,  1171,  1177,  1185,  1192,
  1194,  1196,  1199,  1203,  1207,  1211,  1215,  1217,  1219,  1221,
  1225,  1229,  1233,  1237,  1241,  1245,  1249,  1253,  1257,  1261,
  1263,  1265,  1267,  1269,  1271,  1273,  1276,  1279,  1281,  1283,
  1287,  1290,  1294,  1299,  1305,  1310,  1314,  1319,  1325,  1330,
  1333,  1337,  1342,  1345,  1349,  1354,  1359,  1365,  1373,  1378,
  1382,  1388,  1397,  1398,  1403,  1407,  1412,  1417,  1423,  1429,
  1435,  1441,  1448,  1458,  1459,  1467,  1477,  1486,  1492,  1497,
  1500,  1503,  1509,  1510,  1513,  1517,  1524,  1525,  1528,  1532,
  1535,  1539,  1542,  1544,  1548,  1550,  1552,  1554,  1556,  1560,
  1561,  1564,  1565,  1569,  1571,  1574,  1578,  1582,  1586,  1590,
  1596,  1606,  1608,  1610,  1611,  1613,  1614,  1616,  1617,  1625,
  1633,  1639,  1642,  1644,  1645,  1651,  1654,  1655,  1660,  1666,
  1667,  1671,  1676,  1682,  1687,  1693,  1698,  1699,  1703,  1707,
  1712,  1717,  1722,  1727,  1732,  1737,  1742,  1747,  1754,  1759,
  1764,  1769,  1776,  1780,  1784,  1789,  1793,  1794,  1798,  1802,
  1806,  1810,  1813
};

static const short yyrhs[] = {   119,
   122,     0,    13,   120,    14,     0,     0,   120,    81,   120,
     0,   120,    79,   120,     0,   120,    77,   120,     0,   120,
    78,   120,     0,   120,    75,   120,     0,   107,   120,     0,
   106,   120,     0,   111,   120,     0,   109,   120,     0,   101,
   120,     0,    35,     0,    23,     0,    24,     0,   103,   143,
     0,    10,     0,    21,     0,   108,   120,     0,   105,   120,
     0,   102,   120,     0,    49,   120,   121,    50,    12,    49,
   120,    50,     0,   112,     0,    22,   112,    38,   158,     0,
   120,   100,     0,    46,   120,    47,     0,    37,   120,   121,
     0,     0,   122,    81,   122,     0,   122,    79,   122,     0,
   122,    75,   122,     0,   134,     0,   129,     0,   182,     0,
     7,   112,     0,   185,     0,   176,     0,   177,     0,   178,
     0,   101,    46,   122,    47,     0,   106,    46,   122,    47,
     0,   107,    46,   122,    47,     0,    11,    46,   157,    47,
     0,    32,    49,   122,    50,    33,    46,   157,    47,     0,
    35,     0,    10,     0,    21,     0,   103,    46,   143,    47,
     0,   189,     0,   187,     0,    30,     0,    31,     0,   105,
    46,   122,    47,     0,   122,    80,   122,     0,    46,   175,
    47,    76,    51,   122,    52,     0,    26,    46,   168,   173,
    47,    81,    46,   122,    47,     0,    49,   122,   174,    50,
    12,   166,     0,    49,   122,    50,    12,   166,     0,    22,
   112,    46,   162,    47,    82,    49,   124,    50,     0,   127,
     0,   125,     0,   126,     0,    25,   168,   163,    38,    49,
   122,    50,     0,    46,   122,    47,     0,   129,     0,   129,
    81,   123,     0,   122,     0,     0,    53,   161,   112,    46,
   162,    47,    49,   122,    50,     0,    53,   161,    96,   112,
    46,   162,    47,    49,   122,    50,     0,    53,   161,    96,
    96,   112,    46,   162,    47,    49,   122,    50,     0,    53,
    17,   114,   112,    46,   162,    47,    49,   122,    50,     0,
    53,    17,   114,    96,   112,    46,   162,    47,    49,   122,
    50,     0,    53,    17,   114,    96,    96,   112,    46,   162,
    47,    49,   122,    50,     0,   112,    46,   164,    47,     0,
    72,   112,    46,   164,    47,     0,   140,    46,   164,    47,
     0,   128,    49,   123,    50,     0,    17,   112,     0,    19,
   112,     0,    74,   130,     0,    73,   130,     0,   130,     0,
   131,   132,     0,   114,   132,     0,    17,   112,   132,     0,
    19,   112,   132,     0,    17,   114,   132,     0,    19,   114,
   132,     0,    46,    96,   168,    47,    46,   162,    47,     0,
    46,    96,    96,   168,    47,    46,   162,    47,     0,    46,
    96,   112,    51,   143,   141,    52,    47,    46,   162,    47,
     0,    46,    96,   112,    51,   143,   141,    52,    47,    46,
   162,    47,    82,   150,     0,    39,     0,    44,     0,    42,
     0,    40,     0,    43,     0,    20,     0,   168,   133,     0,
   112,    51,   143,   141,    52,   133,     0,   168,    82,   138,
   133,     0,   112,    16,    82,   150,   133,     0,   112,    16,
    82,   169,   133,     0,   112,    51,   143,   141,    52,    82,
   150,   133,     0,   112,    51,   143,   141,    52,    82,   169,
   133,     0,    96,   132,     0,    37,   132,     0,    37,     1,
     0,     0,   112,    51,   143,   141,    52,     0,     0,    37,
   112,    51,   143,   141,    52,     0,     0,     0,    37,     1,
     0,   135,   137,   138,     0,   168,     0,   191,     0,   140,
     0,   142,     0,    46,   135,    47,     0,   101,   135,     0,
   136,     0,    46,    46,    42,    96,    47,   115,    47,    51,
   143,   141,    52,     0,    46,    46,    73,    42,    96,    47,
   115,    47,    51,   143,   141,    52,     0,    46,    46,    39,
    96,    47,   115,    47,    51,   143,   141,    52,     0,    46,
    46,    44,    96,    47,   115,    47,    51,   143,   141,    52,
     0,    46,    46,    42,    96,    47,    46,    46,    42,    96,
    47,   115,    47,    47,    51,   143,   141,    52,     0,    46,
    46,    42,    96,    47,    46,    46,    73,    42,    96,    47,
   115,    47,    47,    51,   143,   141,    52,     0,    46,    46,
    42,    96,    47,    46,    46,    39,    96,    47,   115,    47,
    47,    51,   143,   141,    52,     0,    46,    46,    73,    42,
    96,    47,    46,    46,    42,    96,    47,   115,    47,    47,
    51,   143,   141,    52,     0,    46,    46,    73,    42,    96,
    47,    46,    46,    73,    42,    96,    47,   115,    47,    47,
    51,   143,   141,    52,     0,    46,    46,    73,    42,    96,
    47,    46,    46,    39,    96,    47,   115,    47,    47,    51,
   143,   141,    52,     0,    46,    46,    39,    96,    47,    46,
    46,    42,    96,    47,   115,    47,    47,    51,   143,   141,
    52,     0,    46,    46,    39,    96,    47,    46,    46,    73,
    42,    96,    47,   115,    47,    47,    51,   143,   141,    52,
     0,    46,    46,    39,    96,    47,    46,    46,    39,    96,
    47,   115,    47,    47,    51,   143,   141,    52,     0,    82,
     0,    83,     0,   143,     0,   150,     0,   169,     0,    46,
   169,    47,    46,   131,    47,    46,   162,    47,   126,     0,
    46,   138,    47,     0,   139,     0,    96,    46,   136,    47,
     0,   112,    51,   143,   141,    52,     0,    46,    46,    39,
    96,    47,   112,    47,    51,   143,   141,    52,     0,    46,
    46,    73,    39,    96,    47,   112,    47,    51,   143,   141,
    52,     0,    46,    46,    44,    96,    47,   112,    47,    51,
   143,   141,    52,     0,    46,    46,    42,    96,    47,   112,
    47,    51,   143,   141,    52,     0,    46,    46,    73,    42,
    96,    47,   112,    47,    51,   143,   141,    52,     0,    46,
   140,    47,     0,    37,   143,   141,     0,    37,     1,     0,
     0,    96,   168,     0,    96,   142,     0,    96,   140,     0,
    46,   142,    47,    51,   143,   141,    52,     0,    96,    46,
   161,    96,    47,   143,     0,    96,    46,   143,    47,     0,
    46,   142,    47,     0,   146,     0,   146,   159,   143,     0,
   143,   149,   146,     0,     8,   157,    36,   143,   145,     0,
   146,     0,   146,   149,   146,     0,     9,   143,     0,     0,
   147,     0,   146,   148,   147,     0,   170,     0,    95,   147,
     0,    99,   147,     0,    15,     0,   172,     0,   168,     0,
   140,     0,   142,     0,   126,     0,    46,   143,    47,     0,
   171,     0,   154,     0,   155,     0,   191,     0,    96,     0,
    97,     0,    98,     0,    92,     0,    93,     0,    85,     0,
    57,     0,    84,     0,    94,     0,    95,     0,   150,    84,
   150,     0,   151,     0,   152,     0,    46,   150,    47,     0,
    51,   143,   153,    52,     0,    51,   169,   153,    52,     0,
    51,   150,   153,    52,     0,    49,   143,   153,    50,     0,
    49,   169,   153,    50,     0,    49,   150,   153,    50,     0,
    37,   143,   153,     0,    37,   169,   153,     0,    37,   150,
   153,     0,     0,    37,     1,     0,    85,   168,     0,    85,
   140,     0,    85,   191,     0,    85,   154,     0,    46,   154,
    47,     0,    46,    39,    47,   144,     0,    46,    44,    47,
   144,     0,    46,    42,    47,   144,     0,    46,    74,    39,
    47,   144,     0,    46,    74,    42,    47,   144,     0,    46,
    73,    39,    47,   144,     0,    46,    73,    42,    47,   144,
     0,    46,    39,    96,    47,   156,     0,    46,    73,    39,
    96,    47,   156,     0,    46,    44,    96,    47,   156,     0,
    46,    42,    96,    47,   156,     0,    46,    73,    42,    96,
    47,   156,     0,    46,    43,    96,    47,   156,     0,    46,
    39,    96,    96,    47,   156,     0,    46,    73,    39,    96,
    96,    47,   156,     0,    46,    44,    96,    96,    47,   156,
     0,    46,    42,    96,    96,    47,   156,     0,    46,    73,
    42,    96,    96,    47,   156,     0,    46,    43,    96,    96,
    47,   156,     0,    46,    17,   114,    96,    47,   156,     0,
    46,   114,    96,    47,   156,     0,    46,    17,   114,    96,
    96,    47,   156,     0,    46,   114,    96,    96,    47,   156,
     0,   144,     0,   158,     0,   102,   157,     0,   157,    81,
   157,     0,   157,    79,   157,     0,    46,   157,    47,     0,
   143,   159,   143,     0,    23,     0,    24,     0,   143,     0,
   143,    87,   169,     0,   143,    86,   169,     0,   169,    87,
   143,     0,   169,    86,   143,     0,   143,    87,    15,     0,
   143,    86,    15,     0,    15,    87,   143,     0,    15,    86,
   143,     0,   143,    87,   171,     0,   143,    86,   171,     0,
    88,     0,    89,     0,    86,     0,    90,     0,    91,     0,
    87,     0,    73,    39,     0,    73,    42,     0,   160,     0,
   131,     0,   161,   168,   163,     0,   161,   163,     0,   114,
   168,   163,     0,   114,    96,   168,   163,     0,   114,    96,
    96,   168,   163,     0,   114,   168,    16,   163,     0,   112,
   168,   163,     0,   112,    96,   168,   163,     0,   112,    96,
    96,   168,   163,     0,   112,   168,    16,   163,     0,   114,
   163,     0,   114,    96,   163,     0,   114,    96,    96,   163,
     0,   112,   163,     0,   112,    96,   163,     0,   112,    96,
    96,   163,     0,   161,   168,    16,   163,     0,   161,    96,
   168,    16,   163,     0,   161,   168,    16,    51,   143,    52,
   163,     0,   161,    96,   168,   163,     0,   161,    96,   163,
     0,   161,    96,    96,   168,   163,     0,    46,    96,   168,
    47,    46,   162,    47,   163,     0,     0,    37,   161,   168,
   163,     0,    37,   161,   163,     0,    37,   112,   168,   163,
     0,    37,   114,   168,   163,     0,    37,   114,    96,   168,
   163,     0,    37,   112,   168,    16,   163,     0,    37,   114,
   168,    16,   163,     0,    37,   161,   168,    16,   163,     0,
    37,   161,    96,   168,    16,   163,     0,    37,    46,    96,
   168,    47,    46,   162,    47,   163,     0,     0,    37,   161,
   168,    51,   143,    52,   163,     0,    37,   161,   168,    51,
   143,    37,   143,    52,   163,     0,    37,   161,   168,    16,
    51,   143,    52,   163,     0,    37,   161,    96,   168,   163,
     0,    37,   161,    96,   163,     0,    37,     1,     0,   138,
   165,     0,   112,    46,   164,    47,   165,     0,     0,    85,
     1,     0,    37,   138,   165,     0,    37,   112,    46,   164,
    47,   165,     0,     0,    37,     1,     0,    49,   122,    50,
     0,     1,    50,     0,    46,   157,    47,     0,     1,    47,
     0,   112,     0,    46,   168,    47,     0,   113,     0,   115,
     0,   117,     0,   116,     0,    37,   168,   173,     0,     0,
    37,     1,     0,     0,    37,   122,   174,     0,   158,     0,
   102,   175,     0,   175,    81,   175,     0,   175,    79,   175,
     0,    46,   175,    47,     0,    28,   167,   166,     0,    27,
   143,    48,    29,   166,     0,    27,    46,   179,    37,   180,
    37,   181,    47,   166,     0,   134,     0,   130,     0,     0,
   157,     0,     0,   134,     0,     0,     3,    46,   147,    47,
    49,   183,    50,     0,     4,   147,    38,    46,   122,    47,
   184,     0,     6,    38,    46,   122,    47,     0,     5,   183,
     0,   183,     0,     0,     8,   157,    36,   166,   186,     0,
     9,   166,     0,     0,    34,    46,   138,    47,     0,    34,
    46,   138,   188,    47,     0,     0,    37,   138,   188,     0,
   104,    46,   168,    47,     0,   104,    46,   168,   190,    47,
     0,   104,    46,   140,    47,     0,   104,    46,   140,   190,
    47,     0,   104,    46,   191,    47,     0,     0,    37,   168,
   190,     0,    37,   140,   190,     0,   168,    18,   168,   192,
     0,   140,    18,   168,   192,     0,   142,    18,   168,   192,
     0,   168,    18,   140,   192,     0,   140,    18,   140,   192,
     0,   142,    18,   140,   192,     0,   168,    76,   168,   192,
     0,   140,    76,   168,   192,     0,    46,   154,    47,    76,
   168,   192,     0,   142,    76,   168,   192,     0,   168,    76,
   140,   192,     0,   140,    76,   140,   192,     0,    46,   154,
    47,    76,   140,   192,     0,   168,    18,   126,     0,   168,
    76,   126,     0,   142,    76,   140,   192,     0,    46,   191,
    47,     0,     0,    18,   168,   192,     0,    18,   140,   192,
     0,    76,   168,   192,     0,    76,   140,   192,     0,    18,
   126,     0,    76,   126,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   177,   178,   182,   183,   184,   185,   186,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   204,   205,   206,
   207,   208,   209,   213,   214,   219,   220,   224,   228,   233,
   235,   242,   348,   349,   351,   352,   353,   354,   355,   356,
   357,   359,   360,   362,   363,   364,   365,   366,   367,   373,
   374,   375,   376,   377,   378,   380,   383,   389,   393,   408,
   418,   420,   421,   423,   437,   441,   445,   452,   453,   458,
   463,   469,   475,   481,   487,   497,   502,   507,   516,   524,
   535,   549,   550,   551,   555,   559,   563,   567,   571,   575,
   582,   584,   586,   591,   603,   604,   605,   608,   609,   610,
   617,   621,   625,   630,   636,   641,   648,   654,   665,   667,
   668,   672,   679,   683,   684,   692,   696,   697,   698,   699,
   700,   701,   702,   705,   707,   709,   711,   713,   715,   717,
   719,   721,   723,   725,   727,   729,   734,   735,   738,   739,
   740,   743,   744,   745,   748,   752,   757,   759,   761,   763,
   765,   767,   771,   773,   774,   780,   781,   782,   784,   786,
   788,   790,   796,   797,   799,   800,   806,   807,   811,   812,
   816,   817,   821,   822,   823,   824,   825,   827,   828,   829,
   830,   831,   832,   833,   834,   835,   838,   839,   840,   841,
   842,   843,   844,   845,   847,   849,   853,   854,   855,   856,
   862,   866,   874,   886,   890,   899,   911,   915,   923,   927,
   928,   931,   936,   940,   945,   949,   956,   959,   960,   963,
   964,   967,   968,   971,   972,   973,   974,   975,   976,   979,
   980,   981,   982,   983,   984,   986,   987,   989,   990,   992,
  1000,  1001,  1002,  1003,  1004,  1010,  1012,  1013,  1016,  1017,
  1018,  1021,  1022,  1025,  1026,  1029,  1030,  1033,  1034,  1039,
  1040,  1041,  1042,  1043,  1044,  1051,  1053,  1056,  1058,  1064,
  1068,  1073,  1079,  1085,  1091,  1101,  1107,  1113,  1119,  1127,
  1131,  1135,  1141,  1145,  1149,  1155,  1161,  1168,  1174,  1180,
  1184,  1191,  1197,  1200,  1204,  1208,  1214,  1220,  1226,  1233,
  1241,  1247,  1262,  1268,  1271,  1279,  1287,  1293,  1299,  1303,
  1312,  1316,  1326,  1327,  1331,  1335,  1345,  1346,  1354,  1356,
  1363,  1365,  1371,  1372,  1376,  1381,  1386,  1391,  1397,  1401,
  1402,  1408,  1409,  1420,  1431,  1432,  1434,  1436,  1442,  1448,
  1456,  1464,  1468,  1472,  1478,  1482,  1488,  1492,  1499,  1503,
  1507,  1514,  1518,  1522,  1526,  1536,  1537,  1543,  1544,  1548,
  1549,  1554,  1555,  1556,  1557,  1558,  1561,  1562,  1563,  1569,
  1570,  1571,  1573,  1574,  1575,  1577,  1578,  1579,  1580,  1582,
  1583,  1584,  1585,  1586,  1587,  1588,  1592,  1593,  1594,  1595,
  1596,  1597,  1598
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","RETURN","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN",
"PEND","POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE",
"DEFINE","MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE",
"REPEAT","UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N",
"CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function_define","function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp","option_exp_else_statement",
"simple_ari_exp","member_in_exp","bi_operator","ari_operator","array_exp","option_list_value",
"option_struct_list_value","inner_option_list_value","address_exp","type_cast",
"casted_element","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   118,   119,   119,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   121,   121,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   123,   123,   124,   124,   125,
   125,   125,   125,   125,   125,   126,   126,   126,   127,   128,
   128,   129,   129,   129,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   131,   131,   131,   131,   131,   131,
   132,   132,   132,   132,   132,   132,   132,   132,   133,   133,
   133,    -1,    -1,    -1,    -1,   134,   135,   135,   135,   135,
   135,   135,   135,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   137,   137,   138,   138,
   138,   138,   138,   138,   139,   140,   140,   140,   140,   140,
   140,   140,   141,   141,   141,   142,   142,   142,   142,   142,
   142,   142,   143,   143,   143,   143,   144,   144,   145,   145,
   146,   146,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   148,   148,   148,   148,
   148,   148,   148,   148,   149,   149,   150,   150,   150,   150,
   151,   151,   151,   152,   152,   152,   153,   153,   153,   153,
   153,   154,   154,   154,   154,   154,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   156,
   157,   157,   157,   157,   157,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   159,
   159,   159,   159,   159,   159,   160,   160,   161,   161,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   164,   164,   164,   164,   165,   165,   165,   165,   166,   166,
   167,   167,   168,   168,   169,   170,   171,   172,   173,   173,
   173,   174,   174,   175,   175,   175,   175,   175,   176,   177,
   178,   179,   179,   179,   180,   180,   181,   181,   182,   183,
   183,   184,   184,   184,   185,   186,   186,   187,   187,   188,
   188,   189,   189,   189,   189,   189,   190,   190,   190,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   192,   192,   192,   192,
   192,   192,   192
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     2,     1,     1,     1,     1,
     4,     4,     4,     4,     8,     1,     1,     1,     4,     1,
     1,     1,     1,     4,     3,     7,     9,     6,     5,     9,
     1,     1,     1,     7,     3,     1,     3,     1,     0,     9,
    10,    11,    10,    11,    12,     4,     5,     4,     4,     2,
     2,     2,     2,     1,     2,     2,     3,     3,     3,     3,
     7,     8,    11,    13,     1,     1,     1,     1,     1,     1,
     2,     6,     4,     5,     5,     8,     8,     2,     2,     2,
     0,     6,     7,     0,     2,     3,     1,     1,     1,     1,
     3,     2,     1,    11,    12,    11,    11,    17,    18,    17,
    18,    19,    18,    17,    18,    17,     1,     1,     1,     1,
     1,    10,     3,     1,     4,     5,    11,    12,    11,    11,
    12,     3,     3,     2,     0,     2,     2,     2,     7,     6,
     4,     3,     1,     3,     3,     5,     1,     3,     2,     0,
     1,     3,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     1,     3,
     4,     4,     4,     4,     4,     4,     3,     3,     3,     0,
     2,     2,     2,     2,     2,     3,     4,     4,     4,     5,
     5,     5,     5,     5,     6,     5,     5,     6,     5,     6,
     7,     6,     6,     7,     6,     6,     5,     7,     6,     1,
     1,     2,     3,     3,     3,     3,     1,     1,     1,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     1,
     1,     1,     1,     1,     1,     2,     2,     1,     1,     3,
     2,     3,     4,     5,     4,     3,     4,     5,     4,     2,
     3,     4,     2,     3,     4,     4,     5,     7,     4,     3,
     5,     8,     0,     4,     3,     4,     4,     5,     5,     5,
     5,     6,     9,     0,     7,     9,     8,     5,     4,     2,
     2,     5,     0,     2,     3,     6,     0,     2,     3,     2,
     3,     2,     1,     3,     1,     1,     1,     1,     3,     0,
     2,     0,     3,     1,     2,     3,     3,     3,     3,     5,
     9,     1,     1,     0,     1,     0,     1,     0,     7,     7,
     5,     2,     1,     0,     5,     2,     0,     4,     5,     0,
     3,     4,     5,     4,     5,     4,     0,     3,     3,     4,
     4,     4,     4,     4,     4,     4,     4,     6,     4,     4,
     4,     6,     3,     3,     4,     3,     0,     3,     3,     3,
     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,     0,    47,     0,     0,     0,   100,    48,
     0,     0,     0,     0,     0,    52,    53,     0,     0,    46,
    95,    98,    97,    99,    96,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
     1,    62,    63,    61,     0,    34,    84,     0,    33,     0,
   123,   119,   120,   117,    38,    39,    40,    35,    37,    51,
    50,   118,     0,     0,    29,    13,    22,     0,   176,     0,
     0,     0,     0,   326,   328,   327,   181,   179,   180,    17,
   163,   171,   184,   185,   178,   173,   183,   177,   186,    21,
    10,     9,    20,    12,    11,     2,     0,     0,     0,     0,
     0,    26,     0,    36,   176,   247,   248,     0,     0,   325,
   249,     0,   241,     0,     0,    80,     0,    81,     0,     0,
     0,   323,   304,     0,   344,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   181,     0,   179,   180,
   184,   334,   178,     0,   186,     0,     0,     0,   269,   268,
     0,     0,     0,     0,     0,    83,    82,     0,   323,   158,
   157,   156,     0,     0,   122,   119,     0,     0,     0,     0,
     0,   313,     0,     0,   323,    86,   111,     0,     0,     0,
     0,     0,    85,   137,   138,     0,     0,   313,     0,     0,
     0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   179,   180,     0,
   184,   178,   186,     0,   213,     0,   215,   212,   214,   174,
   175,   195,   196,     0,   193,   194,   192,   262,   265,   260,
   261,   263,   264,   190,   191,   187,   188,   189,     0,     0,
     8,     6,     7,     5,     4,     0,     0,     0,     0,   249,
     0,   242,   262,   265,     0,     0,     0,     0,     0,     0,
     0,    87,    89,    88,    90,   293,     0,     0,     0,   330,
     0,    95,    97,    99,    96,     0,     0,   343,   342,     0,
     0,   322,     0,     0,     0,   339,     0,     0,     0,     0,
     0,     0,   144,   139,   140,   198,   199,   141,     0,     0,
    95,    97,    96,     0,     0,     0,     0,   323,   156,     0,
   335,    65,   121,   152,   162,     0,   324,     0,     0,     0,
   386,     0,     0,     0,     0,   266,   267,     0,     0,   313,
     0,     0,     0,     0,     0,     0,     0,   119,   120,     0,
   117,   118,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   323,   317,     0,   155,   108,     0,     0,     0,
     0,   101,    32,    31,    55,    30,     0,    66,   116,     0,
   387,   387,     0,   387,   387,   387,   387,   387,   387,   383,
   387,   387,   384,   387,   387,    25,    29,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   182,   216,     0,     0,
     0,     0,     0,     0,   165,   172,   164,     0,   257,   256,
   245,   255,   251,   259,   254,   250,   258,   246,   357,   244,
   243,   253,   252,    44,     0,   304,   304,   304,     0,   310,
     0,     0,     0,   304,     0,     0,     0,     0,     0,     0,
     0,   346,     0,   321,   320,     0,     0,     0,     0,     0,
     0,     0,     0,   210,   210,   210,   210,   210,   210,     0,
     0,   358,     0,     0,     0,     0,     0,     0,    95,    97,
    95,    97,   338,   156,     0,     0,     0,     0,     0,     0,
     0,   337,   336,   332,     0,     0,     0,     0,     0,     0,
   293,     0,     0,   323,     0,   161,     0,    95,    97,    96,
     0,    41,     0,     0,    49,     0,   364,     0,   362,     0,
   366,    54,    42,    43,   314,   313,     0,   311,    76,     0,
     0,     0,   155,   110,   109,   111,    79,     0,     0,     0,
     0,     0,   374,   371,    78,   381,   377,   375,   372,   385,
   379,   373,   370,   380,   376,    28,     0,   170,     0,   217,
   167,     0,     0,   219,     0,     0,     0,     0,   218,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   355,     0,   304,   283,   304,   304,   280,   304,   304,   271,
   304,     0,     0,   304,     0,   304,   304,   295,   304,     0,
   331,   330,     0,     0,     0,     0,     0,     0,     0,   345,
     0,   340,   319,     0,   143,   200,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   360,   359,
     0,   197,     0,     0,     0,     0,     0,     0,   155,   293,
   338,   155,   387,   387,     0,   333,    59,     0,     0,     0,
   293,     0,   293,     0,    77,     0,     0,     0,     0,     0,
     0,    95,    97,     0,     0,     0,     0,   367,   367,   365,
   363,     0,   318,   323,   317,   154,   155,   146,   111,   111,
     0,   103,    67,   392,   387,   387,   393,   387,   387,     0,
     0,   166,     0,     0,     0,   240,   224,     0,   227,     0,
   229,     0,   226,     0,     0,     0,     0,     0,   222,     0,
     0,   223,     0,     0,   220,   221,   237,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   356,     0,   304,   284,
   304,   304,   276,   304,   281,   304,   304,   272,     0,   290,
   304,   304,   270,     0,     0,   304,   296,   304,   304,   297,
   309,   304,   304,     0,   294,     0,   329,     0,     0,     0,
   348,     0,     0,   211,   210,   210,   210,   204,   206,   205,
   201,   203,   202,     0,   145,   361,     0,   323,   326,     0,
   323,   326,   323,   326,     0,     0,   293,     0,     0,     0,
   382,   378,     0,    58,     0,   293,     0,   293,     0,     0,
   155,   160,     0,     0,     0,     0,     0,     0,   369,   368,
    76,   313,   315,   153,   104,   105,   111,   389,   388,   391,
   390,     0,   169,   236,     0,   168,   230,   233,   235,   232,
     0,   225,     0,   228,     0,   239,     0,     0,     0,     0,
     0,     0,   349,     0,   285,   304,   277,   279,   282,   304,
   273,   275,   304,   304,   289,     0,   286,    69,     0,   299,
   298,   300,   304,   308,     0,   301,     0,    64,     0,   347,
     0,     0,     0,   207,   209,   208,     0,     0,     0,     0,
     0,     0,     0,     0,   323,     0,   323,   326,     0,   146,
    91,   159,    56,   293,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   312,     0,     0,   102,    23,   238,   231,   234,     0,     0,
     0,   293,   278,   274,   291,   287,     0,    68,     0,   293,
   302,     0,     0,   304,     0,     0,    45,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    92,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    76,
   111,   111,     0,     0,     0,   304,    60,     0,   304,     0,
   305,    57,   341,   293,     0,     0,     0,   155,   155,     0,
     0,     0,   155,   155,   155,   155,     0,     0,     0,     0,
     0,     0,   293,     0,     0,     0,     0,     0,    70,     0,
     0,     0,     0,     0,     0,     0,   316,   106,   107,     0,
   351,   304,   288,   304,   307,   304,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   155,
     0,     0,     0,   155,   155,     0,     0,     0,    73,     0,
    71,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   354,   292,   303,   306,     0,   326,   326,     0,   147,   126,
   326,   326,     0,   150,   124,   149,   127,     0,     0,     0,
     0,     0,     0,    93,     0,    74,    72,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   353,   350,     0,
     0,   142,     0,     0,     0,   326,     0,     0,   326,   148,
   326,   326,     0,   151,   125,     0,    75,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   352,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   326,    94,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   155,   155,     0,   155,   155,     0,
     0,     0,     0,     0,     0,   155,     0,     0,   155,   155,
   155,     0,   136,   134,     0,   130,   128,     0,     0,     0,
   155,   135,   129,   133,   131,     0,   132,     0,     0,     0
};

static const short yydefgoto[] = {  1218,
     2,    21,   217,   156,   387,   959,    62,    97,    64,    65,
    66,    67,    68,   377,   382,    69,    70,    71,   206,   374,
   313,    98,   551,    99,   131,   726,   722,   101,   102,   259,
   244,   315,   316,   317,   651,   103,   104,   727,   271,   133,
   275,   170,   458,   459,   289,   375,   548,   449,   149,   105,
   134,   106,   107,   108,   467,   344,   164,    75,    76,    77,
   300,   641,   901,    78,   756,  1129,    79,   611,    80,   493,
    81,   538,   109,   563
};

static const short yypact[] = {    58,
  2009,  3122,-32768,-32768,    14,-32768,-32768,-32768,  2009,  2009,
  2009,  2009,  2493,  2009,  2009,  2009,  2009,  2009,  2009,-32768,
   344,    50,    52,   723,-32768,   172,   237,  1192,-32768,-32768,
    74,   -15,   231,  2658,   205,-32768,-32768,   232,   273,-32768,
-32768,-32768,-32768,-32768,-32768,  2596,  3122,   811,   248,   499,
   499,   188,   191,   338,   385,   397,   471,   500,   399,   190,
   914,-32768,-32768,-32768,   547,-32768,-32768,   190,-32768,   486,
-32768,   280,   109,   127,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   578,  1051,   856,   559,   559,   723,-32768,  1885,
   263,   806,   806,-32768,-32768,-32768,-32768,   280,   109,   483,
  1140,-32768,-32768,-32768,   127,-32768,-32768,-32768,-32768,   559,
   559,   559,   559,   559,   559,-32768,  2009,  2009,  2009,  2009,
  2009,-32768,   806,-32768,   662,-32768,-32768,   938,   723,-32768,
  1127,   701,-32768,  1356,   723,   190,   190,   190,   190,   583,
   -15,-32768,   642,   -15,  3159,    -3,   649,   723,   204,  3122,
  2229,   723,  2784,   267,  1278,   921,  1230,   891,   636,   766,
   663,-32768,   780,   928,   916,  1027,   609,   838,-32768,-32768,
   361,   686,  1215,  1255,   660,-32768,-32768,  3826,   736,-32768,
-32768,-32768,  3014,   281,-32768,   189,  2493,   415,  3122,  3122,
  3122,  3882,  2493,   190,   304,-32768,   418,  3122,  3122,  3122,
  3122,  1298,-32768,-32768,-32768,  2229,    22,  3882,    22,    22,
    22,    -7,    -7,  2633,-32768,  2009,   724,   906,   679,    27,
   142,   708,   150,  3449,   865,   949,   720,   669,    67,   509,
   796,   165,   832,   403,   840,   109,-32768,   892,-32768,-32768,
-32768,-32768,-32768,   806,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   806,  2493,
  1279,  1001,  1001,   244,   819,   880,  2493,  2493,  2080,  1066,
   984,-32768,    -5,     4,  2493,   204,   723,   723,  2493,  2493,
  1000,-32768,-32768,-32768,-32768,   566,   885,   393,   911,   917,
  1271,    27,   142,   708,   150,  3364,   455,-32768,-32768,   939,
   942,-32768,  1011,   933,  3122,-32768,  1479,  1535,  3911,  3911,
   464,   140,-32768,   483,   932,-32768,-32768,-32768,   934,  1286,
   233,   269,   292,   986,  1029,  1014,   188,   993,   988,  2420,
-32768,-32768,-32768,-32768,  1034,  1035,-32768,  1055,  1278,  1278,
-32768,  3122,  1050,  1090,   469,-32768,-32768,   945,  1099,  3882,
   190,   190,   515,   705,  1054,  2899,  1355,   669,    67,   663,
   165,   832,   394,   849,   403,   707,   783,  1112,  1393,  1408,
  1428,     8,   438,  1134,  1129,    12,-32768,  1098,  2493,    32,
  2229,-32768,  1217,  1103,  1103,-32768,  1141,  1119,-32768,    44,
   198,   198,  1157,   198,   198,   198,   198,   198,   198,-32768,
   335,   198,-32768,   335,   198,-32768,   856,  1211,  2493,  1138,
   806,   294,   806,   314,   342,   806,   350,   424,   436,   456,
  1052,   474,   476,  1196,  1202,   532,-32768,  1035,   655,   225,
    67,   796,   165,   832,  1187,-32768,   483,  1226,   483,   483,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   483,  1273,  1209,
-32768,   483,   483,-32768,  1243,    -9,    29,    35,  1302,-32768,
  1263,   -15,   518,   132,  1321,    43,  1331,   529,  3401,  1341,
   352,   723,   204,-32768,-32768,  1560,  1359,  3279,  1372,   509,
   201,  1377,  1738,    87,    46,  1390,    87,    46,  1390,  3874,
  2229,-32768,  1385,  1124,  1204,   536,   540,   552,   555,   574,
  1196,  1202,  1055,  1391,  2493,  1395,  3196,  1102,  2493,    22,
  1397,  1365,-32768,  1107,   204,  1441,  1024,  1411,  1353,  1420,
   566,  1422,   -15,  1425,   988,-32768,  1424,  1383,  1384,  1386,
  1095,-32768,   576,   225,-32768,    22,-32768,  1443,-32768,  1444,
-32768,-32768,-32768,-32768,-32768,  3882,   690,-32768,-32768,   618,
  1440,   222,    12,-32768,-32768,  1456,-32768,  1298,    40,  1449,
    -7,    -7,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1451,     5,   577,-32768,
  1238,   806,  1454,-32768,   806,  1459,   806,  1463,-32768,   806,
  1475,   593,   596,   608,   555,   613,   806,   615,   806,   624,
   806,   806,   806,  1477,  1431,  1435,  1436,  1125,  1419,   204,
-32768,   -15,   193,-32768,    26,   203,-32768,    51,   242,-32768,
    64,  1452,   -15,   180,   -15,   426,    24,-32768,  1023,  3122,
-32768,   917,  1455,   356,   233,   269,   292,  1200,   428,  1352,
  1504,-32768,-32768,  1496,-32768,-32768,  1499,  3316,   201,   971,
  1498,  1501,  1503,  1494,  1497,  1511,  3486,  1514,  1528,-32768,
  1124,-32768,  1382,  2187,  3920,   646,   659,  1522,    12,   566,
-32768,    12,   198,   198,  3122,-32768,-32768,   204,  1461,  1524,
   566,  1525,   566,  1529,-32768,  1391,  2493,  2493,  1536,  1538,
  1540,  1486,  1493,  1383,  1384,  1386,  1220,  1555,  1555,-32768,
-32768,  1547,-32768,   485,  1134,-32768,    12,-32768,   336,  1456,
  1523,-32768,-32768,-32768,   335,   198,-32768,   335,   198,  2009,
  2493,-32768,   806,  1549,   806,-32768,-32768,   806,-32768,   806,
-32768,   806,-32768,   806,  3957,  3972,  4005,   674,-32768,   806,
  1550,-32768,   806,  1551,-32768,-32768,-32768,   806,  1554,  1557,
  1558,  1486,  1506,   806,  1568,  1561,-32768,  1565,    24,-32768,
   642,   642,-32768,    24,-32768,   642,   642,-32768,   -15,-32768,
   665,    25,-32768,  1572,  1575,   642,-32768,   642,   642,-32768,
-32768,   706,   299,  2493,-32768,  1586,-32768,  1579,   462,   574,
   281,   723,  1079,-32768,    87,    46,  1390,-32768,-32768,-32768,
-32768,-32768,-32768,  3534,-32768,-32768,  3571,  1214,  1585,  3619,
  1227,  1598,  1241,  1599,  4030,  4039,   566,  1562,  1606,  1603,
-32768,-32768,  1563,-32768,  1610,   566,  1613,   566,  1616,  1615,
    12,   483,   -17,   111,  1213,  1621,  1625,  1493,-32768,-32768,
  1134,  3882,-32768,-32768,-32768,-32768,   444,-32768,-32768,-32768,
-32768,  1326,   483,-32768,   806,  1187,-32768,-32768,-32768,-32768,
  4064,-32768,   806,-32768,   806,-32768,  1559,  1566,  1569,  1627,
  1637,  1631,-32768,  1633,-32768,   642,-32768,-32768,-32768,   642,
-32768,-32768,   642,   642,-32768,  2493,-32768,  3122,  1639,-32768,
-32768,-32768,   642,-32768,  2493,-32768,   435,-32768,  3122,-32768,
  1641,  1111,  1642,-32768,-32768,-32768,  3656,  1632,  1650,  3704,
  1651,  1652,  1653,  1662,  1335,  3741,  1370,  1671,  1674,  1675,
-32768,-32768,-32768,   566,  1679,  1680,  1681,  1689,  3122,  1688,
  1696,  1698,  1585,  1701,  1702,  1598,  1707,  1599,  1648,   130,
-32768,  1714,   222,-32768,-32768,-32768,-32768,-32768,  1655,  1716,
  3122,   566,-32768,-32768,-32768,-32768,   590,   914,  1719,   566,
-32768,   772,  2493,   642,  1437,   204,-32768,  1727,   721,   730,
  1304,  2493,  2493,   741,   749,  1306,  2493,  2493,  2493,  2493,
  1697,  3789,  1723,  1724,-32768,  1730,  1732,  1734,  3122,  1736,
  3122,  1636,  1675,   687,  1003,  1739,  1742,  1743,  1671,  1134,
   336,  1456,  3122,  1458,  1745,   642,-32768,  1746,   642,   781,
-32768,-32768,-32768,   566,   764,   765,   785,    12,    12,   787,
   794,   799,    12,    12,    12,    12,  2493,   810,   817,  1322,
  2493,  2493,   566,  1747,  3122,  1644,  3122,  1656,-32768,  1699,
  1704,  1756,  1708,  1710,  1761,  1130,-32768,-32768,-32768,  1548,
-32768,   642,-32768,   642,-32768,   642,  1760,  4093,  4118,   821,
  1757,  1766,  4126,  4151,   824,  1767,  1768,  1770,  1772,    12,
   851,   852,   861,    12,    12,  1778,  3122,  1677,-32768,  1684,
-32768,  1780,  1781,  1712,  1782,  1783,  1717,  1735,  1744,  1790,
   881,-32768,-32768,-32768,    63,  1788,  1794,  4160,-32768,-32768,
  1795,  1796,  4185,-32768,-32768,-32768,-32768,  1786,  4214,  4239,
   862,  1792,  1793,  1765,  1691,-32768,-32768,  1741,  1751,  1802,
  1754,  1755,  1810,  1811,  1812,  1764,  1419,-32768,-32768,    76,
   399,-32768,  1816,  1824,  1826,  1831,  1832,  1833,  1835,-32768,
  1836,  1837,  4247,-32768,-32768,  1124,-32768,  1788,  1794,  1771,
  1795,  1796,  1773,  1774,  1775,  1838,-32768,   511,   736,  1841,
  1843,  1840,  1844,  1845,  1851,  1852,  1854,  1856,   932,  1831,
  1835,  1836,  1837,  1789,  2493,  2493,  1855,  2493,  2493,  1857,
  1859,  1860,  1858,  1856,    12,    12,  2493,    12,    12,  2493,
  2493,  2493,  1861,  1862,  1863,    12,  1864,  1865,    12,    12,
    12,  2493,-32768,-32768,  1867,-32768,-32768,  1868,  1869,  1870,
    12,-32768,-32768,-32768,-32768,  1873,-32768,  1907,  1913,-32768
};

static const short yypgoto[] = {-32768,
-32768,    41,  1519,   467,  1375,-32768,-32768,     1,-32768,-32768,
  -194,   -34,   -36,    34,  -543,  -138,   -35,  1447,-32768,   -87,
-32768,   217,  -260,  1261,   -13,  -370,-32768,  1624,   -91,-32768,
  1360,  -274,-32768,-32768,  -463,  1567,-32768,  1212,   -19,   -16,
  1842,-32768,   -28,  -448,  1791,  -204,  -678,  -143,-32768,  1057,
     2,-32768,  1190,-32768,  1315,  1439,  -115,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -809,-32768,-32768,-32768,-32768,  1275,
-32768,  -352,  1509,   196
};


#define	YYLAST		4364


static const short yytable[] = {   100,
   240,   241,    63,   393,   132,   306,   299,   388,   545,   442,
   158,   169,   712,   721,   540,   176,   177,   185,   445,   171,
   146,   652,   653,   654,   655,   656,   843,   288,   931,   162,
   141,   266,   554,   481,   485,   488,   141,   326,   390,   331,
   580,   762,   584,   631,   301,   589,   157,    63,   550,    84,
    85,    86,    87,   234,   110,   111,   112,   113,   114,   115,
   288,   288,   288,   312,    49,   288,   767,   390,   218,   141,
     1,   288,   684,   411,   141,   886,   230,   141,   605,   772,
   141,   606,   650,   607,   210,   559,   613,   288,   141,   559,
   242,   243,    91,   196,   932,   123,   142,   933,   242,   243,
   288,   203,   142,    52,    59,   242,   243,   130,  1130,   272,
   298,    96,   608,   335,   270,   281,   130,   158,   389,   179,
    96,  1158,   412,   650,   616,    83,   210,   194,   303,   494,
   619,   230,   319,   179,    49,   142,   162,   314,   162,   270,
   142,   169,   211,   195,   212,   522,   142,   158,   185,   355,
    63,   179,   318,   157,   142,   179,   934,   261,   262,   263,
   264,   265,   941,   124,   354,   845,   846,   436,   288,   282,
   283,   284,   285,   364,  1131,   997,   491,   141,   314,   376,
   242,   243,   212,    63,   211,   140,   492,  1159,   413,    63,
    63,    63,   314,   318,   314,   776,   416,   406,    63,    63,
    63,    63,   213,   481,   304,   147,   207,   318,   649,   318,
   230,   337,   400,   403,   508,   561,   288,   135,    72,   662,
   479,   819,   935,   512,   513,   936,   739,   627,   742,   288,
   745,   746,   827,   178,   829,   141,   183,   414,   141,   288,
   213,   998,   207,   142,   999,   417,   437,   646,   141,   169,
   148,   169,   305,   439,   440,   270,   407,   450,   451,   464,
   470,   448,   159,    72,   209,   452,   453,   661,   180,   186,
   309,   334,   310,   562,   443,   446,   144,   709,   288,   411,
   150,  1128,   230,    52,   494,   194,    52,   141,   759,   176,
   177,   184,   711,   556,   480,   484,   487,   207,   764,   179,
   209,   195,   179,   944,   142,    63,   228,   235,   234,   482,
   486,   489,   178,   162,   142,   413,   270,  1157,   151,   378,
   158,  1047,   162,   162,   121,   208,   363,   470,   496,   642,
   196,   904,   905,   906,   130,   288,   314,   769,   416,   162,
   582,   702,    63,   122,   228,   839,   840,    91,   136,   895,
   137,   318,   561,   142,   379,   209,   157,   116,    52,   172,
   585,   159,   327,   388,   497,   553,    72,   314,   919,   159,
   180,   677,   380,   649,   179,   796,    52,   925,   328,   927,
   208,   184,   318,   187,   282,   284,   649,   498,   587,   583,
   479,   508,   179,   460,   228,   578,   590,   141,   603,   358,
   186,   141,   723,   659,   366,    72,    72,    72,   818,   586,
   562,   820,    29,   555,    72,    72,    72,    72,   117,   494,
   118,   119,   120,   391,   121,   394,   396,   398,   401,   404,
   188,    41,    42,   470,    43,    44,    45,   588,   461,   533,
   228,   779,   189,   122,   192,   591,   844,   639,   429,   193,
   430,   789,   640,   169,   380,   230,   348,  1048,  1049,   705,
   365,   355,   288,   195,   480,   168,   757,   195,    61,   230,
   411,   963,   349,   141,   748,   987,   354,   314,    91,   482,
   380,   578,   413,   546,   169,   228,   964,    91,   193,    52,
   162,   669,   318,   270,   184,   672,   176,   470,    52,   381,
   141,   283,   416,  1005,   462,   179,   463,   141,   855,   490,
    52,  1008,   159,   166,   179,   173,   190,   174,    29,   592,
   597,    72,   599,   194,   228,   943,   179,   180,   242,   243,
   842,   593,   314,   314,   824,   193,   707,    41,    42,   195,
    43,    44,    45,   180,   175,   191,   228,   318,   318,   605,
   471,   594,   606,   710,   607,   427,  1158,   194,    72,    52,
   141,   714,   717,   141,   517,  1057,   195,   204,   205,   598,
   930,   600,   159,   195,   141,   179,   242,   243,   603,   534,
   518,   430,   663,   608,  1076,    29,   664,   564,   235,   566,
   567,   568,   569,   570,   571,   202,   572,   573,   665,   574,
   575,   597,   242,   243,    41,    42,   560,    43,    44,    45,
   523,   455,    60,   625,   694,   214,   307,   695,   706,   696,
   599,   533,  1159,   723,   634,    88,   524,   604,   286,   142,
    63,   583,    89,   169,   230,   586,   795,   942,   168,   735,
   195,  1006,   736,   230,   169,   430,   169,   591,   697,   357,
   666,   797,   900,   207,   737,   369,   370,   371,-32768,   599,
    91,   740,   871,    90,   383,   384,   385,   386,  1001,   667,
   743,    52,   724,   831,   832,    63,   184,   456,   288,   457,
   884,   208,   334,   242,   243,   159,   207,   179,   583,    49,
   703,   586,   815,   605,   228,   302,   606,    88,   607,   228,
   429,   288,    91,   591,    89,   816,   228,   853,   738,   336,
   741,   209,    92,    52,   208,   334,    93,  -119,  -119,   744,
   861,   893,   345,   228,   207,  1040,   673,   608,  1041,    59,
    88,   350,    94,    95,    96,   308,   276,   125,   309,    91,
   310,   741,   288,   536,   209,   126,   127,   267,   268,   534,
    52,   526,   698,   537,   744,   353,   903,  1061,  1062,  1042,
   852,    49,  1066,  1067,  1068,  1069,   179,   411,   128,   744,
   897,   476,   902,   408,    91,   560,   413,   715,   718,   277,
   169,   278,   209,   210,    92,   311,   193,   411,    93,   169,
   230,   169,   410,   230,    49,   413,   230,   212,   242,   243,
   212,   704,   130,   415,    94,    95,    96,    91,   514,  1108,
  1058,  1059,   335,  1112,  1113,   426,  1015,    92,    52,   536,
    89,    93,  1013,  1009,   129,  1016,   337,   167,   314,   539,
    29,   599,  1056,  1063,    59,   130,  1020,    94,    95,    96,
  1064,   211,   428,   318,  1021,   599,    72,  -120,  -120,    41,
    42,    90,    43,    44,    45,   213,   411,   207,   213,   583,
   586,  -117,  -117,   413,   228,   242,   243,  1098,   821,   822,
  1103,  1169,   957,   228,   242,   243,   346,    49,   341,   347,
  1060,   962,   583,   168,   754,  1127,   755,   169,    63,   586,
    91,    72,   216,   230,  1065,   535,   230,  1109,  1110,    63,
    92,    52,   230,   422,    93,  1071,   423,   599,  1143,   212,
   848,   849,  1072,   850,   851,   169,   744,    59,   122,   744,
    94,    95,    96,   169,  1194,  1195,   438,  1197,  1198,    63,
   117,   337,   118,   119,   120,  1205,   121,   333,  1208,  1209,
  1210,   409,   242,   243,  1002,    88,   583,   586,   465,  1010,
  1216,    63,   125,   466,   219,   122,  1111,   744,  1018,  1019,
   126,   127,   341,  1023,  1024,  1025,  1026,   332,   230,   495,
   473,   794,   204,   205,   338,   472,   220,   169,    88,   221,
   222,   223,   475,   269,   277,    89,   278,   424,   198,    63,
   425,    63,   199,   200,   201,   198,   169,  -118,  -118,   199,
   200,   201,   173,    63,   174,    29,   339,   186,   340,    49,
   225,   226,   277,  1070,   278,   494,   483,  1074,  1075,   309,
   228,   310,    91,   228,   499,    42,   228,   500,    44,    45,
   441,   175,    92,    52,   506,    63,    93,    63,   783,   129,
   519,  1043,    49,   505,  1044,   173,   454,   174,    29,    59,
   130,   227,    94,    95,    96,    91,   520,   474,    74,   288,
   503,   515,   277,   342,   278,    92,    52,   501,    42,    93,
   502,    44,    45,   784,   175,  1045,   343,    63,   277,   120,
   278,   121,    59,   130,   509,    94,    95,    96,   143,   277,
   595,   278,   339,   596,   340,  1132,   786,   215,    29,    60,
   122,   198,   163,    74,    72,   199,   200,   201,   182,    74,
   510,   173,   427,   174,    29,    72,   197,    41,    42,   679,
    43,    44,    45,   228,   197,   117,   228,   118,   119,   120,
   511,   121,   228,   692,    42,   680,   693,    44,    45,   516,
   175,   823,    60,   342,   521,    72,   232,   238,   671,   527,
   122,   273,   274,   250,   251,   252,   253,   967,   541,   242,
   243,  1185,  1186,   752,  1188,  1189,   753,    72,  1088,   661,
   547,  1089,   309,  1196,   310,   549,  1199,  1200,  1201,   552,
   339,   198,   340,   201,   232,   199,   200,   201,  1211,   277,
   557,   278,   197,   197,   197,   197,   245,   287,   228,   558,
   290,   163,  1090,   565,   304,    72,    74,    72,    60,   163,
   329,    88,   273,   274,   250,   251,   252,   253,    89,    72,
   242,   243,   577,   246,   247,   248,   249,   250,   251,   252,
   253,   254,   255,   579,   232,   256,   257,   258,   595,   361,
    74,   790,   601,   245,   367,    74,    74,    74,   602,    90,
   197,    72,   305,    72,    74,    74,    74,    74,   752,   192,
   908,   838,    73,   392,   193,   395,   397,   399,   402,   405,
   246,   247,   192,   911,   609,    49,   -63,   193,   254,   255,
   232,   610,   256,   257,   258,    88,   192,   913,    91,   278,
   433,   193,   125,    72,   245,   199,   200,   201,    92,    52,
   126,   127,    93,   138,   -63,   139,   160,    73,   -63,   -63,
   -63,  1133,   181,    73,   173,    59,   174,    29,    94,    95,
    96,   246,   247,   330,   937,   232,   351,   938,   137,   254,
   255,   242,   243,   256,   257,   258,    41,    42,   612,    43,
    44,    45,   595,   175,   595,  1017,   560,  1022,   622,    49,
   229,   236,   163,   197,   958,   118,   119,   120,   623,   121,
   595,    74,    91,  1073,   232,   965,   352,   182,   139,   630,
    50,    51,    92,    52,   560,   945,    93,   633,   122,   155,
   192,   981,   351,   504,   468,   193,   232,   333,   229,    59,
   130,   644,    94,    95,    96,   992,    89,   136,    74,   468,
   117,   532,   118,   119,   120,   160,   121,   197,   197,   525,
    73,    60,   163,   160,   181,   192,   983,  1004,   645,   361,
   193,   433,   754,   647,   755,   122,   650,   807,   238,   198,
   277,   660,   278,   199,   200,   201,   197,   668,   229,   542,
   670,   279,   280,   359,    73,   340,   287,   675,   236,    73,
    73,    73,   678,    49,   543,  1036,   681,  1038,    73,    73,
    73,    73,   444,   447,   682,   683,    91,   198,   685,  1050,
   688,   199,   200,   201,   544,   687,    92,    52,   689,   690,
    93,   691,   198,  1012,   229,   433,   199,   200,   201,   700,
   701,   708,   380,   808,   431,   334,   809,    95,    96,   720,
   728,  1078,   198,  1080,  1051,   730,   199,   200,   201,   732,
    82,   198,   615,   618,   621,   199,   200,   201,   624,   626,
   629,   734,   632,   748,   197,   163,   749,   197,   477,   229,
   750,   751,   198,   774,   232,   788,   199,   200,   201,   232,
   791,   792,    88,  1115,   793,   801,   232,   798,   802,    89,
   799,   219,   800,   198,   165,    82,   160,   199,   200,   201,
   805,    82,   803,   232,   491,    73,   674,   817,   229,   826,
   828,   181,   825,   220,   847,   830,   221,   222,   223,   686,
   478,   836,   833,   309,   834,   310,   835,   181,   837,   361,
   229,   536,   699,   841,  1091,   855,   863,   865,   233,   239,
   867,   870,    73,   868,   869,   872,    49,   225,   226,   643,
   873,   874,   161,   920,   923,   287,   160,   716,   719,    91,
   888,   889,   198,   359,   899,   431,   199,   200,   201,    92,
   311,   909,   236,    93,   198,   898,   233,   198,   199,   200,
   201,   199,   200,   201,   912,   914,    59,   130,   227,    94,
    95,    96,   921,   165,   922,   924,   231,   237,    82,   926,
   198,   165,   928,   929,   199,   200,   201,   939,   758,   761,
   932,   940,   766,   949,   950,   771,   951,   935,   952,   775,
   937,   778,   972,   782,   960,  1039,    74,   966,   968,   431,
   197,   362,    82,  1079,   231,   197,   368,    82,    82,    82,
   973,   977,   978,   979,   232,  1081,    82,    82,    82,    82,
   198,   231,   980,   232,   199,   200,   201,   984,   198,   231,
   985,   986,   199,   200,   201,   988,  1116,   990,   989,   160,
   198,    74,   233,  1117,   199,   200,   201,   991,   229,   993,
  1147,   994,   434,   229,   908,    88,   995,  1027,   911,   360,
   229,   198,    89,   913,   219,   199,   200,   201,   198,   996,
  1000,  1003,   199,   200,   201,   198,   998,   229,  1007,   199,
   200,   201,  1014,  1031,  1032,  1033,   220,   233,  1034,   221,
   222,   223,  1035,   648,  1037,   981,   309,  1046,   310,   983,
   231,  1052,  1054,   359,  1082,  1077,   729,  1084,   731,  1083,
   432,   733,  1087,  1085,   165,  1086,  1095,  1120,  1099,    49,
   225,   226,  1123,    82,   747,   876,   233,  1100,  1104,  1105,
   880,  1106,    91,  1107,  1114,   883,  1118,  1119,  1121,  1122,
  1124,  1126,    92,    52,  1134,   231,    93,  1140,   233,  1125,
  1135,  1137,  1138,  1144,  1145,   197,  1146,    74,  1150,    59,
    82,   227,    94,    95,    96,  1148,  1153,  1154,  1155,  1156,
   232,   208,   231,   232,   165,  1149,   232,   435,  1151,  1152,
  1160,   362,  1161,   434,   231,   729,   733,  1162,  1163,  1164,
   239,  1165,  1166,  1167,  1174,  1170,  1177,  1171,  1172,  1173,
    73,  1175,    88,  1176,  1178,  1179,   231,  1180,  1181,    89,
  1182,   219,  1183,  1184,  1193,  1187,  1219,  1190,   229,  1191,
  1192,  1202,  1220,  1203,  1204,  1206,  1207,   229,  1212,  1213,
  1214,  1215,   231,   220,  1217,   576,   221,   222,   223,   360,
   224,   360,   713,   806,   854,    73,   658,   434,   237,   857,
   725,   858,   260,   859,    74,   860,   787,   729,   733,     0,
     0,   862,   676,     0,   864,    74,    49,   225,   226,   866,
     0,     0,     0,   232,     0,     0,   232,     0,     0,    91,
     0,     0,   232,     0,     0,     0,     0,   165,     0,    92,
    52,     0,     0,    93,     0,    74,   233,     0,     0,     0,
     0,   233,     0,     0,     0,   432,    59,     0,   227,    94,
    95,    96,     0,     0,     0,     0,     0,    74,     0,     0,
     0,     0,     0,     0,     0,   233,     0,     0,     3,     0,
     0,     0,     0,     0,     0,     0,   862,   864,     0,     4,
     5,     6,     7,     0,   581,   231,   581,     0,   232,   581,
     0,   362,     0,     8,   231,    74,     0,    74,     0,   231,
     0,    73,     0,     0,     9,     0,     0,    10,     0,    74,
     0,     0,     0,     0,   229,     0,   946,   229,     0,     0,
   229,     0,   864,   231,   947,     0,   948,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    88,     0,     0,
     0,    74,     0,    74,   125,     0,   219,     0,     0,   432,
     0,     0,   126,   127,     0,     0,     0,     0,     0,    11,
    12,    13,     0,    14,    15,    16,    17,    18,   418,    19,
    20,   419,   222,   420,     0,   269,     0,     0,     0,     0,
     0,     0,     0,    74,     0,     0,     0,     0,    82,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    73,     0,
     0,    49,   421,   226,     0,     0,   233,     0,     0,    73,
     0,     0,     0,     0,    91,   233,     0,   229,     0,     0,
   229,     0,     0,     0,    92,    52,   229,     0,    93,     0,
     0,   129,     0,    82,     0,     0,     0,     0,     0,    73,
     0,    59,   130,   227,    94,    95,    96,     0,     0,     0,
     0,    89,     0,     0,     0,   581,     0,     0,   581,     0,
   581,    73,     0,   581,   231,     0,     0,     0,     0,     0,
   581,     0,   581,   231,   581,   581,   581,     0,     0,     0,
     0,     0,   810,     0,     0,     0,    88,     0,     0,     0,
     0,     0,   229,    89,     0,     0,   614,   617,   620,    73,
     0,    73,     0,     0,   628,     0,     0,     0,    49,     0,
     0,     0,     0,    73,     0,     0,     0,     0,     0,     0,
   729,    91,     0,     0,   308,   729,     0,   309,     0,   310,
     0,    92,    52,     0,     0,    93,   581,   581,   581,     0,
     0,     0,     0,     0,     0,    73,     0,    73,   811,    82,
    49,   812,    95,    96,     0,     0,     0,     0,     0,   864,
     0,     0,   233,    91,   864,   233,     0,     0,   233,     0,
     0,   729,     0,    92,   311,     0,     0,    93,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    73,     0,     0,
    59,   130,     0,    94,    95,    96,   581,     0,   856,     0,
     0,   581,     0,   581,   864,   581,     0,   581,   581,   581,
   581,     0,     0,   581,     0,     0,   581,     0,     0,     0,
   231,   581,     0,   231,     0,     0,   231,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    82,     0,     0,     0,
     0,     0,     0,   760,     0,   763,   765,    82,   768,   770,
     0,   773,     0,     0,   777,   233,   780,   781,   233,   785,
     0,     0,     0,     0,   233,     0,     0,    88,     0,     0,
     0,     0,     0,     0,   125,     0,   219,    82,   581,   581,
     0,     0,   126,   127,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   220,    82,
     0,   221,   222,   223,     0,   507,     0,     0,     0,     0,
     0,     0,     0,   231,     0,     0,   231,     0,   581,     0,
     0,     0,   231,     0,   581,     0,   581,     0,   581,     0,
   233,    49,   225,   226,     0,     0,     0,    82,     0,    82,
    88,     0,     0,     0,    91,     0,     0,    89,     0,     0,
     0,    82,     0,     0,    92,    52,     0,     0,    93,     0,
     0,   155,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    59,   130,   227,    94,    95,    96,     0,    90,     0,
     0,     0,     0,    82,     0,    82,     0,     0,   231,   875,
     0,   877,   878,     0,   879,     0,   881,   882,     0,     0,
     0,   885,   887,     0,    49,     0,   890,     0,   891,   892,
     0,     0,   894,   896,     0,     0,     0,    91,     0,     0,
     0,     0,     0,     0,     0,    82,     0,    92,    52,     0,
     0,    93,     0,     0,     0,     0,     0,     0,    22,     0,
     0,     0,    23,   152,    59,    25,    26,    94,    95,    96,
   125,     0,    27,     0,    28,    29,    30,    31,   126,   127,
    32,    33,    34,    35,     0,    36,    37,    38,     0,    39,
    40,     0,     0,     0,    41,    42,     0,    43,    44,    45,
    88,   153,     0,     0,    47,     0,     0,   125,    48,     0,
     0,     0,     0,     0,     0,   126,   127,     0,     0,     0,
     0,     0,     0,     0,     0,    88,   953,    49,    50,    51,
   954,     0,    89,   955,   956,     0,     0,     0,    90,     0,
    91,   581,   581,   961,     0,     0,   581,   581,     0,     0,
    92,   154,     0,     0,    93,     0,    53,   155,    54,    55,
    56,    57,    58,   145,    49,     0,     0,    59,   130,    60,
    94,    95,    96,     0,     0,     0,     0,    91,     0,     0,
     0,   581,     0,     0,     0,     0,   581,    92,    52,    49,
     0,    93,   581,   581,     0,     0,     0,     0,     0,     0,
     0,     0,    91,     0,    59,   130,     0,    94,    95,    96,
     0,     0,    92,    52,  1011,     0,    93,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   581,     0,     0,    59,
     0,     0,    94,    95,    96,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    22,     0,     0,     0,
    23,   152,     0,    25,    26,     0,  1053,     0,   125,  1055,
   320,     0,    28,    29,    30,    31,   126,   127,    32,    33,
    34,    35,     0,    36,    37,    38,     0,    39,    40,     0,
     0,     0,   321,    42,     0,   322,   294,   323,     0,   153,
     0,     0,    47,     0,     0,     0,    48,     0,     0,     0,
     0,     0,  1092,     0,  1093,     0,  1094,     0,     0,     0,
     0,     0,     0,     0,     0,    49,   324,   325,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    91,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    92,   154,
     0,     0,    93,     0,    53,   155,    54,    55,    56,    57,
    58,     0,     0,     0,     0,    59,   130,   297,    94,    95,
    96,    22,     0,     0,     0,    23,   152,     0,    25,    26,
     0,     0,     0,   125,     0,    27,     0,    28,    29,    30,
    31,   126,   127,    32,    33,    34,    35,     0,    36,    37,
    38,     0,    39,    40,     0,     0,     0,   528,    42,     0,
   529,    44,   530,     0,   153,     0,     0,    47,     0,     0,
     0,    48,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    49,   531,    51,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    91,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    92,   154,     0,     0,    93,     0,    53,
   155,    54,    55,    56,    57,    58,     0,     0,     0,     0,
    59,   130,    60,    94,    95,    96,    22,     0,     0,     0,
    23,    24,     0,    25,    26,     0,     0,     0,     0,     0,
    27,     0,    28,    29,    30,    31,     0,     0,    32,    33,
    34,    35,     0,    36,    37,    38,     0,    39,    40,     0,
     0,     0,    41,    42,     0,    43,    44,    45,     0,   356,
     0,     0,    47,     0,     0,     0,    48,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    49,    50,    51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    91,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    52,
     0,     0,     0,     0,    53,     0,    54,    55,    56,    57,
    58,     0,     0,     0,    22,    59,     0,    60,    23,    24,
     0,    25,    26,     0,     0,     0,     0,     0,    27,     0,
    28,    29,    30,    31,     0,     0,    32,    33,    34,    35,
     0,    36,    37,    38,     0,    39,    40,     0,     0,     0,
    41,    42,     0,    43,    44,    45,    88,    46,     0,     0,
    47,     0,     0,    89,    48,   291,     0,   174,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    49,    50,    51,     0,   292,    42,     0,
   293,   294,   295,    88,   296,     0,     0,     0,     0,     0,
   125,     0,   219,     0,     0,     0,     0,    52,   126,   127,
     0,     0,    53,     0,    54,    55,    56,    57,    58,     0,
    49,   225,   226,    59,   418,    60,     0,   419,   222,   420,
     0,   507,     0,    91,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    92,    52,     0,     0,    93,     0,   184,
     0,     0,     0,     0,     0,     0,     0,    49,   421,   226,
    59,     0,   297,    94,    95,    96,     0,     0,     0,     0,
    91,     0,     0,     0,     0,     0,    88,     0,     0,     0,
    92,    52,     0,    89,    93,   219,     0,   155,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    59,   130,   227,
    94,    95,    96,     0,     0,     0,     0,   418,     0,     0,
   419,   222,   420,    88,   478,     0,     0,   309,     0,   310,
    89,     0,   219,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    49,   421,   226,     0,   418,     0,     0,   419,   222,   420,
     0,   648,     0,    91,   309,     0,   310,     0,     0,     0,
     0,    88,     0,    92,   311,     0,     0,    93,    89,     0,
   219,     0,     0,     0,     0,     0,     0,    49,   421,   226,
    59,   130,   227,    94,    95,    96,     0,     0,     0,     0,
    91,     0,   418,     0,     0,   419,   222,   420,    88,   469,
    92,    52,     0,     0,    93,    89,     0,   219,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    59,     0,   227,
    94,    95,    96,     0,     0,    49,   421,   226,     0,   635,
     0,     0,   636,   222,   637,     0,   469,     0,    91,     0,
     0,     0,     0,     0,     0,     0,    88,     0,    92,   154,
     0,     0,    93,    89,   184,   219,     0,     0,     0,     0,
     0,     0,    49,   638,   226,    59,     0,   227,    94,    95,
    96,     0,     0,     0,     0,    91,     0,   418,     0,     0,
   419,   222,   420,    88,   224,    92,    52,     0,     0,    93,
    89,   184,   219,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    59,     0,   227,    94,    95,    96,     0,     0,
    49,   421,   226,     0,   418,     0,     0,   419,   222,   420,
     0,   804,     0,    91,     0,     0,     0,     0,     0,     0,
     0,    88,     0,    92,    52,     0,     0,    93,    89,     0,
   219,     0,     0,     0,     0,     0,     0,    49,   421,   226,
    59,     0,   227,    94,    95,    96,     0,     0,     0,     0,
    91,     0,   635,     0,     0,   636,   222,   637,    88,   224,
    92,    52,     0,     0,    93,    89,     0,   219,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    59,     0,   227,
    94,    95,    96,     0,     0,    49,   638,   226,     0,   220,
     0,     0,   221,   222,   223,     0,   907,     0,    91,     0,
     0,     0,     0,     0,     0,     0,    88,     0,    92,    52,
     0,     0,    93,    89,     0,   219,     0,     0,     0,     0,
     0,     0,    49,   225,   226,    59,     0,   227,    94,    95,
    96,     0,     0,     0,     0,    91,     0,   220,     0,     0,
   221,   222,   223,    88,   910,    92,    52,     0,     0,    93,
    89,     0,   219,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    59,     0,   227,    94,    95,    96,     0,     0,
    49,   225,   226,     0,   969,     0,     0,   970,   222,   420,
     0,   224,     0,    91,     0,     0,     0,     0,     0,     0,
     0,    88,     0,    92,    52,     0,     0,    93,    89,     0,
   219,     0,     0,     0,     0,     0,     0,    49,   971,   226,
    59,     0,   227,    94,    95,    96,     0,     0,     0,     0,
    91,     0,   974,     0,     0,   975,   222,   420,    88,   224,
    92,    52,     0,     0,    93,    89,     0,   219,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    59,     0,   227,
    94,    95,    96,     0,     0,    49,   976,   226,     0,   220,
     0,     0,   221,   222,   223,     0,   982,     0,    91,     0,
     0,     0,     0,     0,     0,     0,    88,     0,    92,    52,
     0,     0,    93,    89,     0,   219,     0,     0,     0,     0,
     0,     0,    49,   225,   226,    59,     0,   227,    94,    95,
    96,     0,     0,     0,     0,    91,     0,  1028,     0,     0,
  1029,   222,   420,    88,   224,    92,    52,     0,     0,    93,
    89,     0,     0,     0,     0,    29,     0,     0,     0,     0,
     0,     0,    59,     0,   227,    94,    95,    96,     0,     0,
    49,  1030,   226,     0,    41,    42,     0,    43,    44,    45,
     0,   224,     0,    91,     0,     0,     0,     0,     0,     0,
     0,    88,     0,    92,    52,     0,     0,    93,    89,    88,
     0,     0,     0,    29,     0,     0,    89,    49,   168,     0,
    59,     0,   227,    94,    95,    96,     0,     0,     0,     0,
    91,     0,    41,    42,     0,    43,    44,    45,    88,   657,
    92,    52,     0,     0,    93,    89,     0,   308,     0,     0,
   309,     0,   310,     0,    89,     0,     0,    59,     0,     0,
    94,    95,    96,     0,     0,    49,   168,     0,     0,     0,
     0,     0,     0,    49,     0,     0,   483,     0,    91,   309,
     0,   310,     0,     0,     0,    90,   372,     0,    92,    52,
     0,    89,    93,     0,     0,     0,    92,   311,     0,     0,
    93,     0,    49,     0,     0,    59,    89,     0,    94,    95,
    96,    49,     0,   373,   130,    91,    94,    95,    96,     0,
     0,     0,    90,     0,    91,    92,    52,     0,     0,    93,
     0,     0,     0,     0,    92,    52,     0,    90,    93,    89,
     0,     0,    59,   130,     0,    94,    95,    96,    49,     0,
     0,   813,     0,     0,   814,    95,    96,     0,     0,     0,
     0,    91,     0,    49,    89,     0,     0,     0,     0,     0,
    90,    92,    52,    89,     0,    93,    91,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    92,    52,   808,     0,
    93,    94,    95,    96,     0,    90,    49,     0,    89,     0,
     0,     0,     0,   811,   916,     0,    94,    95,    96,    91,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
    52,    49,     0,    93,     0,     0,     0,    89,     0,    90,
    49,     0,     0,     0,    91,     0,   813,     0,     0,    94,
    95,    96,     0,    91,    92,    52,     0,     0,    93,     0,
     0,     0,    89,    92,    52,    49,     0,    93,    90,     0,
    89,   915,     0,     0,    94,    95,    96,     0,    91,     0,
   917,     0,     0,   918,    95,    96,     0,     0,    92,    52,
     0,     0,    93,    90,    49,    89,     0,     0,     0,     0,
     0,    90,     0,     0,    89,   917,     0,    91,    94,    95,
    96,     0,     0,     0,     0,     0,     0,    92,    52,    49,
     0,    93,     0,     0,     0,     0,    90,    49,     0,    89,
     0,     0,    91,     0,   808,    90,     0,  1096,    95,    96,
    91,     0,    92,    52,     0,     0,    93,     0,     0,     0,
    92,    52,    49,     0,    93,     0,     0,     0,    89,   811,
    90,    49,  1097,    95,    96,    91,     0,   808,     0,     0,
  1101,    95,    96,     0,    91,    92,    52,     0,     0,    93,
     0,     0,     0,    89,    92,    52,    49,     0,    93,    90,
     0,    89,   811,     0,     0,  1102,    95,    96,     0,    91,
     0,   917,     0,     0,  1136,    95,    96,     0,     0,    92,
    52,     0,     0,    93,    90,    49,     0,     0,     0,     0,
     0,     0,    90,     0,     0,     0,   917,     0,    91,  1139,
    95,    96,     0,     0,     0,     0,     0,     0,    92,    52,
    49,     0,    93,     0,     0,     0,     0,     0,    49,     0,
     0,     0,     0,    91,     0,   808,     0,     0,  1141,    95,
    96,    91,     0,    92,    52,     0,     0,    93,     0,     0,
     0,    92,    52,     0,     0,    93,     0,     0,     0,     0,
   811,     0,     0,  1142,    95,    96,     0,     0,   917,     0,
     0,  1168,    95,    96
};

static const short yycheck[] = {    13,
    92,    93,     2,   208,    24,   149,   145,   202,     1,    15,
    46,    48,   556,     9,   367,    50,    51,    53,    15,    48,
    34,   485,   486,   487,   488,   489,   705,    37,    46,    46,
    46,   123,     1,   308,   309,   310,    46,   153,    46,   155,
   411,    16,   413,     1,    48,   416,    46,    47,    37,     9,
    10,    11,    12,    46,    14,    15,    16,    17,    18,    19,
    37,    37,    37,   151,    72,    37,    16,    46,    88,    46,
    13,    37,   521,    47,    46,    51,    90,    46,    39,    16,
    46,    42,    37,    44,    18,    46,    96,    37,    46,    46,
    94,    95,    85,    60,   112,    46,   112,   115,    94,    95,
    37,    68,   112,    96,   112,    94,    95,   113,    46,   129,
   145,   117,    73,    47,   128,   135,   113,   153,   206,   112,
   117,    46,    96,    37,    96,   112,    18,    96,   148,    84,
    96,   145,   152,   112,    72,   112,   153,   151,   155,   153,
   112,   178,    76,   112,    18,   350,   112,   183,   184,   178,
   150,   112,   151,   153,   112,   112,    46,   117,   118,   119,
   120,   121,   841,   112,   178,   709,   710,   259,    37,   136,
   137,   138,   139,   187,   112,    46,    37,    46,   192,   193,
    94,    95,    18,   183,    76,   112,    47,   112,    47,   189,
   190,   191,   206,   192,   208,    16,    47,   214,   198,   199,
   200,   201,    76,   478,     1,     1,    18,   206,   483,   208,
   224,    47,   212,   213,   330,    18,    37,    46,     2,   494,
   308,   670,   112,   339,   340,   115,   597,    96,   599,    37,
   601,   602,   681,    46,   683,    46,    46,    96,    46,    37,
    76,   112,    18,   112,   115,    96,   260,    47,    46,   286,
    46,   288,    49,   267,   268,   269,   216,   277,   278,   288,
   296,   275,    46,    47,    76,   279,   280,    46,    52,    53,
    49,    47,    51,    76,   273,   274,    46,   552,    37,    47,
    49,  1091,   296,    96,    84,    96,    96,    46,    96,   324,
   325,   101,   553,   381,   308,   309,   310,    18,    96,   112,
    76,   112,   112,   847,   112,   305,    90,    91,    46,   308,
   309,   310,    46,   330,   112,    47,   330,  1127,    46,    16,
   356,  1000,   339,   340,    81,    46,    46,   363,    96,   473,
   297,   795,   796,   797,   113,    37,   350,    96,    47,   356,
    47,   546,   342,   100,   128,   698,   699,    85,   112,    51,
   114,   350,    18,   112,    51,    76,   356,    14,    96,   112,
    47,   145,    96,   558,    96,   379,   150,   381,   817,   153,
   154,   515,    37,   648,   112,   650,    96,   826,   112,   828,
    46,   101,   381,    46,   351,   352,   661,    96,    47,    96,
   478,   507,   112,     1,   178,   409,    47,    46,    47,   183,
   184,    46,    47,   491,   188,   189,   190,   191,   669,    96,
    76,   672,    20,   380,   198,   199,   200,   201,    75,    84,
    77,    78,    79,   207,    81,   209,   210,   211,   212,   213,
    46,    39,    40,   469,    42,    43,    44,    96,    46,    46,
   224,    16,    46,   100,    46,    96,   707,    96,    46,    51,
   234,    96,   472,   490,    37,   469,    96,  1001,  1002,   547,
    46,   490,    37,   112,   478,    73,   610,   112,     2,   483,
    47,    37,   112,    46,    47,   924,   490,   491,    85,   478,
    37,   495,    47,    46,   521,   269,    52,    85,    51,    96,
   507,   505,   491,   507,   101,   509,   531,   533,    96,    82,
    46,   468,    47,   952,   112,   112,   114,    46,    47,    46,
    96,   960,   296,    47,   112,    17,    46,    19,    20,    96,
    47,   305,    47,    96,   308,    82,   112,   311,    94,    95,
    46,    96,   546,   547,   678,    51,   550,    39,    40,   112,
    42,    43,    44,   327,    46,    46,   330,   546,   547,    39,
    96,    96,    42,   552,    44,    47,    46,    96,   342,    96,
    46,   561,   562,    46,    96,  1014,   112,    82,    83,    96,
   831,    96,   356,   112,    46,   112,    94,    95,    47,   363,
   112,   365,    47,    73,  1033,    20,    47,   392,   372,   394,
   395,   396,   397,   398,   399,    49,   401,   402,    47,   404,
   405,    47,    94,    95,    39,    40,   390,    42,    43,    44,
    96,    46,   114,    96,    39,    38,   150,    42,     1,    44,
    47,    46,   112,    47,    96,     8,   112,    96,    46,   112,
   630,    96,    15,   670,   648,    96,   650,   842,    73,    47,
   112,    52,    47,   657,   681,   429,   683,    96,    73,   183,
    96,   650,   791,    18,    47,   189,   190,   191,   100,    47,
    85,    47,   754,    46,   198,   199,   200,   201,   943,    96,
    47,    96,    96,   687,   688,   675,   101,   112,    37,   114,
    16,    46,    47,    94,    95,   469,    18,   112,    96,    72,
     1,    96,    47,    39,   478,    47,    42,     8,    44,   483,
    46,    37,    85,    96,    15,    47,   490,   721,    96,    47,
    96,    76,    95,    96,    46,    47,    99,    82,    83,    96,
    47,    16,   114,   507,    18,    39,   510,    73,    42,   112,
     8,    46,   115,   116,   117,    46,    36,    15,    49,    85,
    51,    96,    37,    37,    76,    23,    24,    86,    87,   533,
    96,    47,   536,    47,    96,    96,   793,  1018,  1019,    73,
   720,    72,  1023,  1024,  1025,  1026,   112,    47,    46,    96,
   784,   305,   792,    50,    85,   559,    47,   561,   562,    79,
   817,    81,    76,    18,    95,    96,    51,    47,    99,   826,
   804,   828,   114,   807,    72,    47,   810,    18,    94,    95,
    18,   112,   113,    96,   115,   116,   117,    85,   342,  1070,
    47,    47,    47,  1074,  1075,    96,    96,    95,    96,    37,
    15,    99,   966,    52,   102,    96,    47,    17,   842,    47,
    20,    47,    52,    47,   112,   113,    96,   115,   116,   117,
    47,    76,    47,   842,    96,    47,   630,    82,    83,    39,
    40,    46,    42,    43,    44,    76,    47,    18,    76,    96,
    96,    82,    83,    47,   648,    94,    95,    47,   673,   674,
    47,  1146,   886,   657,    94,    95,    39,    72,    47,    42,
    96,   895,    96,    73,     4,     5,     6,   924,   888,    96,
    85,   675,    37,   907,    96,    47,   910,    47,    47,   899,
    95,    96,   916,    39,    99,    96,    42,    47,    47,    18,
   715,   716,    96,   718,   719,   952,    96,   112,   100,    96,
   115,   116,   117,   960,  1185,  1186,    47,  1188,  1189,   929,
    75,    47,    77,    78,    79,  1196,    81,    47,  1199,  1200,
  1201,    36,    94,    95,   943,     8,    96,    96,    38,   963,
  1211,   951,    15,    37,    17,   100,    96,    96,   972,   973,
    23,    24,    47,   977,   978,   979,   980,    47,   982,    36,
    29,     1,    82,    83,    47,    37,    39,  1014,     8,    42,
    43,    44,    50,    46,    79,    15,    81,    39,    75,   989,
    42,   991,    79,    80,    81,    75,  1033,    82,    83,    79,
    80,    81,    17,  1003,    19,    20,    79,   791,    81,    72,
    73,    74,    79,  1027,    81,    84,    46,  1031,  1032,    49,
   804,    51,    85,   807,    39,    40,   810,    42,    43,    44,
    47,    46,    95,    96,    47,  1035,    99,  1037,    16,   102,
    96,    39,    72,    51,    42,    17,    47,    19,    20,   112,
   113,   114,   115,   116,   117,    85,   112,    47,     2,    37,
    47,    12,    79,    37,    81,    95,    96,    39,    40,    99,
    42,    43,    44,    51,    46,    73,    50,  1077,    79,    79,
    81,    81,   112,   113,    51,   115,   116,   117,    32,    79,
    39,    81,    79,    42,    81,  1095,   630,    47,    20,   114,
   100,    75,    46,    47,   888,    79,    80,    81,    52,    53,
    76,    17,    47,    19,    20,   899,    60,    39,    40,    96,
    42,    43,    44,   907,    68,    75,   910,    77,    78,    79,
    76,    81,   916,    39,    40,   112,    42,    43,    44,    50,
    46,   675,   114,    37,    46,   929,    90,    91,    47,    96,
   100,    86,    87,    88,    89,    90,    91,    47,    47,    94,
    95,  1175,  1176,    39,  1178,  1179,    42,   951,    39,    46,
    37,    42,    49,  1187,    51,    47,  1190,  1191,  1192,    82,
    79,    75,    81,    81,   128,    79,    80,    81,  1202,    79,
    50,    81,   136,   137,   138,   139,    57,   141,   982,    81,
   144,   145,    73,    47,     1,   989,   150,   991,   114,   153,
   154,     8,    86,    87,    88,    89,    90,    91,    15,  1003,
    94,    95,    12,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    96,   178,    96,    97,    98,    39,   183,
   184,    42,    47,    57,   188,   189,   190,   191,    47,    46,
   194,  1035,    49,  1037,   198,   199,   200,   201,    39,    46,
    47,    42,     2,   207,    51,   209,   210,   211,   212,   213,
    84,    85,    46,    47,    49,    72,    47,    51,    92,    93,
   224,     9,    96,    97,    98,     8,    46,    47,    85,    81,
   234,    51,    15,  1077,    57,    79,    80,    81,    95,    96,
    23,    24,    99,   112,    75,   114,    46,    47,    79,    80,
    81,  1095,    52,    53,    17,   112,    19,    20,   115,   116,
   117,    84,    85,    46,   112,   269,   112,   115,   114,    92,
    93,    94,    95,    96,    97,    98,    39,    40,    96,    42,
    43,    44,    39,    46,    39,    42,  1130,    42,    47,    72,
    90,    91,   296,   297,   888,    77,    78,    79,    96,    81,
    39,   305,    85,    42,   308,   899,   112,   311,   114,    49,
    73,    74,    95,    96,  1158,    50,    99,    47,   100,   102,
    46,    47,   112,   327,   114,    51,   330,    47,   128,   112,
   113,    33,   115,   116,   117,   929,    15,   112,   342,   114,
    75,    47,    77,    78,    79,   145,    81,   351,   352,   353,
   150,   114,   356,   153,   154,    46,    47,   951,    47,   363,
    51,   365,     4,    47,     6,   100,    37,    46,   372,    75,
    79,    47,    81,    79,    80,    81,   380,    47,   178,    47,
    46,    86,    87,   183,   184,    81,   390,    51,   188,   189,
   190,   191,    12,    72,    47,   989,    46,   991,   198,   199,
   200,   201,   273,   274,   112,    46,    85,    75,    47,  1003,
    47,    79,    80,    81,    47,    51,    95,    96,    96,    96,
    99,    96,    75,    47,   224,   429,    79,    80,    81,    47,
    47,    52,    37,   112,   234,    47,   115,   116,   117,    49,
    47,  1035,    75,  1037,    47,    47,    79,    80,    81,    47,
     2,    75,   456,   457,   458,    79,    80,    81,   462,   463,
   464,    47,   466,    47,   468,   469,    96,   471,    50,   269,
    96,    96,    75,    82,   478,    81,    79,    80,    81,   483,
    37,    46,     8,  1077,    46,    52,   490,    50,    52,    15,
    50,    17,    50,    75,    46,    47,   296,    79,    80,    81,
    47,    53,    52,   507,    37,   305,   510,    46,   308,    46,
    46,   311,   112,    39,    52,    47,    42,    43,    44,   523,
    46,    96,    47,    49,    47,    51,    47,   327,    96,   533,
   330,    37,   536,    47,    47,    47,    47,    47,    90,    91,
    47,    96,   342,    47,    47,    38,    72,    73,    74,    50,
    50,    47,    46,    52,    52,   559,   356,   561,   562,    85,
    49,    47,    75,   363,    46,   365,    79,    80,    81,    95,
    96,    47,   372,    99,    75,    50,   128,    75,    79,    80,
    81,    79,    80,    81,    47,    47,   112,   113,   114,   115,
   116,   117,    47,   145,    52,    46,    90,    91,   150,    47,
    75,   153,    47,    49,    79,    80,    81,    47,   612,   613,
   112,    47,   616,    47,    38,   619,    46,   112,    46,   623,
   112,   625,    51,   627,    46,    50,   630,    47,    47,   429,
   634,   183,   184,    50,   128,   639,   188,   189,   190,   191,
    51,    51,    51,    51,   648,    50,   198,   199,   200,   201,
    75,   145,    51,   657,    79,    80,    81,    47,    75,   153,
    47,    47,    79,    80,    81,    47,    50,    47,    49,   469,
    75,   675,   224,    50,    79,    80,    81,    49,   478,    52,
    50,    46,   234,   483,    47,     8,    46,    51,    47,   183,
   490,    75,    15,    47,    17,    79,    80,    81,    75,   112,
    47,    46,    79,    80,    81,    75,   112,   507,    50,    79,
    80,    81,    46,    51,    51,    46,    39,   269,    47,    42,
    43,    44,    49,    46,    49,    47,    49,    46,    51,    47,
   224,    47,    47,   533,    96,    49,   585,    42,   587,    96,
   234,   590,    42,    96,   296,    96,    47,    96,    52,    72,
    73,    74,    96,   305,   603,   759,   308,    52,    52,    52,
   764,    52,    85,    52,    47,   769,    47,    47,    47,    47,
    96,    42,    95,    96,    47,   269,    99,    52,   330,    96,
    47,    47,    47,    52,    52,   789,    82,   791,    47,   112,
   342,   114,   115,   116,   117,   115,    47,    47,    47,    96,
   804,    46,   296,   807,   356,   115,   810,   244,   115,   115,
    47,   363,    47,   365,   308,   664,   665,    47,    47,    47,
   372,    47,    47,    47,    47,   115,    47,   115,   115,   115,
   630,    51,     8,    51,    51,    51,   330,    47,    47,    15,
    47,    17,    47,   115,    47,    51,     0,    51,   648,    51,
    51,    51,     0,    52,    52,    52,    52,   657,    52,    52,
    52,    52,   356,    39,    52,   407,    42,    43,    44,   363,
    46,   365,   558,   659,   723,   675,   490,   429,   372,   728,
   581,   730,   101,   732,   888,   734,   632,   736,   737,    -1,
    -1,   740,   514,    -1,   743,   899,    72,    73,    74,   748,
    -1,    -1,    -1,   907,    -1,    -1,   910,    -1,    -1,    85,
    -1,    -1,   916,    -1,    -1,    -1,    -1,   469,    -1,    95,
    96,    -1,    -1,    99,    -1,   929,   478,    -1,    -1,    -1,
    -1,   483,    -1,    -1,    -1,   429,   112,    -1,   114,   115,
   116,   117,    -1,    -1,    -1,    -1,    -1,   951,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   507,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   815,   816,    -1,    21,
    22,    23,    24,    -1,   411,   469,   413,    -1,   982,   416,
    -1,   533,    -1,    35,   478,   989,    -1,   991,    -1,   483,
    -1,   791,    -1,    -1,    46,    -1,    -1,    49,    -1,  1003,
    -1,    -1,    -1,    -1,   804,    -1,   855,   807,    -1,    -1,
   810,    -1,   861,   507,   863,    -1,   865,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,  1035,    -1,  1037,    15,    -1,    17,    -1,    -1,   533,
    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,   101,
   102,   103,    -1,   105,   106,   107,   108,   109,    39,   111,
   112,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1077,    -1,    -1,    -1,    -1,   630,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   888,    -1,
    -1,    72,    73,    74,    -1,    -1,   648,    -1,    -1,   899,
    -1,    -1,    -1,    -1,    85,   657,    -1,   907,    -1,    -1,
   910,    -1,    -1,    -1,    95,    96,   916,    -1,    99,    -1,
    -1,   102,    -1,   675,    -1,    -1,    -1,    -1,    -1,   929,
    -1,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
    -1,    15,    -1,    -1,    -1,   582,    -1,    -1,   585,    -1,
   587,   951,    -1,   590,   648,    -1,    -1,    -1,    -1,    -1,
   597,    -1,   599,   657,   601,   602,   603,    -1,    -1,    -1,
    -1,    -1,    46,    -1,    -1,    -1,     8,    -1,    -1,    -1,
    -1,    -1,   982,    15,    -1,    -1,   456,   457,   458,   989,
    -1,   991,    -1,    -1,   464,    -1,    -1,    -1,    72,    -1,
    -1,    -1,    -1,  1003,    -1,    -1,    -1,    -1,    -1,    -1,
  1059,    85,    -1,    -1,    46,  1064,    -1,    49,    -1,    51,
    -1,    95,    96,    -1,    -1,    99,   663,   664,   665,    -1,
    -1,    -1,    -1,    -1,    -1,  1035,    -1,  1037,   112,   791,
    72,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,  1098,
    -1,    -1,   804,    85,  1103,   807,    -1,    -1,   810,    -1,
    -1,  1110,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1077,    -1,    -1,
   112,   113,    -1,   115,   116,   117,   723,    -1,   725,    -1,
    -1,   728,    -1,   730,  1143,   732,    -1,   734,   735,   736,
   737,    -1,    -1,   740,    -1,    -1,   743,    -1,    -1,    -1,
   804,   748,    -1,   807,    -1,    -1,   810,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   888,    -1,    -1,    -1,
    -1,    -1,    -1,   613,    -1,   615,   616,   899,   618,   619,
    -1,   621,    -1,    -1,   624,   907,   626,   627,   910,   629,
    -1,    -1,    -1,    -1,   916,    -1,    -1,     8,    -1,    -1,
    -1,    -1,    -1,    -1,    15,    -1,    17,   929,   815,   816,
    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,   951,
    -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   907,    -1,    -1,   910,    -1,   855,    -1,
    -1,    -1,   916,    -1,   861,    -1,   863,    -1,   865,    -1,
   982,    72,    73,    74,    -1,    -1,    -1,   989,    -1,   991,
     8,    -1,    -1,    -1,    85,    -1,    -1,    15,    -1,    -1,
    -1,  1003,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   112,   113,   114,   115,   116,   117,    -1,    46,    -1,
    -1,    -1,    -1,  1035,    -1,  1037,    -1,    -1,   982,   759,
    -1,   761,   762,    -1,   764,    -1,   766,   767,    -1,    -1,
    -1,   771,   772,    -1,    72,    -1,   776,    -1,   778,   779,
    -1,    -1,   782,   783,    -1,    -1,    -1,    85,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1077,    -1,    95,    96,    -1,
    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    -1,    -1,     7,     8,   112,    10,    11,   115,   116,   117,
    15,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    -1,    30,    31,    32,    -1,    34,
    35,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
     8,    46,    -1,    -1,    49,    -1,    -1,    15,    53,    -1,
    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     8,   876,    72,    73,    74,
   880,    -1,    15,   883,   884,    -1,    -1,    -1,    46,    -1,
    85,  1058,  1059,   893,    -1,    -1,  1063,  1064,    -1,    -1,
    95,    96,    -1,    -1,    99,    -1,   101,   102,   103,   104,
   105,   106,   107,    46,    72,    -1,    -1,   112,   113,   114,
   115,   116,   117,    -1,    -1,    -1,    -1,    85,    -1,    -1,
    -1,  1098,    -1,    -1,    -1,    -1,  1103,    95,    96,    72,
    -1,    99,  1109,  1110,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    85,    -1,   112,   113,    -1,   115,   116,   117,
    -1,    -1,    95,    96,   964,    -1,    99,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1143,    -1,    -1,   112,
    -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
     7,     8,    -1,    10,    11,    -1,  1006,    -1,    15,  1009,
    17,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    -1,    30,    31,    32,    -1,    34,    35,    -1,
    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
    -1,    -1,    49,    -1,    -1,    -1,    53,    -1,    -1,    -1,
    -1,    -1,  1052,    -1,  1054,    -1,  1056,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,
    -1,    -1,    99,    -1,   101,   102,   103,   104,   105,   106,
   107,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
   117,     3,    -1,    -1,    -1,     7,     8,    -1,    10,    11,
    -1,    -1,    -1,    15,    -1,    17,    -1,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
    32,    -1,    34,    35,    -1,    -1,    -1,    39,    40,    -1,
    42,    43,    44,    -1,    46,    -1,    -1,    49,    -1,    -1,
    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,   101,
   102,   103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,
   112,   113,   114,   115,   116,   117,     3,    -1,    -1,    -1,
     7,     8,    -1,    10,    11,    -1,    -1,    -1,    -1,    -1,
    17,    -1,    19,    20,    21,    22,    -1,    -1,    25,    26,
    27,    28,    -1,    30,    31,    32,    -1,    34,    35,    -1,
    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
    -1,    -1,    49,    -1,    -1,    -1,    53,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
    -1,    -1,    -1,    -1,   101,    -1,   103,   104,   105,   106,
   107,    -1,    -1,    -1,     3,   112,    -1,   114,     7,     8,
    -1,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
    19,    20,    21,    22,    -1,    -1,    25,    26,    27,    28,
    -1,    30,    31,    32,    -1,    34,    35,    -1,    -1,    -1,
    39,    40,    -1,    42,    43,    44,     8,    46,    -1,    -1,
    49,    -1,    -1,    15,    53,    17,    -1,    19,    20,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    -1,    39,    40,    -1,
    42,    43,    44,     8,    46,    -1,    -1,    -1,    -1,    -1,
    15,    -1,    17,    -1,    -1,    -1,    -1,    96,    23,    24,
    -1,    -1,   101,    -1,   103,   104,   105,   106,   107,    -1,
    72,    73,    74,   112,    39,   114,    -1,    42,    43,    44,
    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,   101,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
   112,    -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
    85,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,
    95,    96,    -1,    15,    99,    17,    -1,   102,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
   115,   116,   117,    -1,    -1,    -1,    -1,    39,    -1,    -1,
    42,    43,    44,     8,    46,    -1,    -1,    49,    -1,    51,
    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,
    -1,    46,    -1,    85,    49,    -1,    51,    -1,    -1,    -1,
    -1,     8,    -1,    95,    96,    -1,    -1,    99,    15,    -1,
    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
    85,    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,
    95,    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,
   115,   116,   117,    -1,    -1,    72,    73,    74,    -1,    39,
    -1,    -1,    42,    43,    44,    -1,    46,    -1,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,    96,
    -1,    -1,    99,    15,   101,    17,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,   112,    -1,   114,   115,   116,
   117,    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,
    42,    43,    44,     8,    46,    95,    96,    -1,    -1,    99,
    15,   101,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   112,    -1,   114,   115,   116,   117,    -1,    -1,
    72,    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,
    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    95,    96,    -1,    -1,    99,    15,    -1,
    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
   112,    -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
    85,    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,
    95,    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,
   115,   116,   117,    -1,    -1,    72,    73,    74,    -1,    39,
    -1,    -1,    42,    43,    44,    -1,    46,    -1,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,    96,
    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,   112,    -1,   114,   115,   116,
   117,    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,
    42,    43,    44,     8,    46,    95,    96,    -1,    -1,    99,
    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   112,    -1,   114,   115,   116,   117,    -1,    -1,
    72,    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,
    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    95,    96,    -1,    -1,    99,    15,    -1,
    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
   112,    -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
    85,    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,
    95,    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,
   115,   116,   117,    -1,    -1,    72,    73,    74,    -1,    39,
    -1,    -1,    42,    43,    44,    -1,    46,    -1,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,    96,
    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,   112,    -1,   114,   115,   116,
   117,    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,
    42,    43,    44,     8,    46,    95,    96,    -1,    -1,    99,
    15,    -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,
    -1,    -1,   112,    -1,   114,   115,   116,   117,    -1,    -1,
    72,    73,    74,    -1,    39,    40,    -1,    42,    43,    44,
    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    95,    96,    -1,    -1,    99,    15,     8,
    -1,    -1,    -1,    20,    -1,    -1,    15,    72,    73,    -1,
   112,    -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
    85,    -1,    39,    40,    -1,    42,    43,    44,     8,    46,
    95,    96,    -1,    -1,    99,    15,    -1,    46,    -1,    -1,
    49,    -1,    51,    -1,    15,    -1,    -1,   112,    -1,    -1,
   115,   116,   117,    -1,    -1,    72,    73,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    -1,    -1,    46,    -1,    85,    49,
    -1,    51,    -1,    -1,    -1,    46,    85,    -1,    95,    96,
    -1,    15,    99,    -1,    -1,    -1,    95,    96,    -1,    -1,
    99,    -1,    72,    -1,    -1,   112,    15,    -1,   115,   116,
   117,    72,    -1,   112,   113,    85,   115,   116,   117,    -1,
    -1,    -1,    46,    -1,    85,    95,    96,    -1,    -1,    99,
    -1,    -1,    -1,    -1,    95,    96,    -1,    46,    99,    15,
    -1,    -1,   112,   113,    -1,   115,   116,   117,    72,    -1,
    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,
    -1,    85,    -1,    72,    15,    -1,    -1,    -1,    -1,    -1,
    46,    95,    96,    15,    -1,    99,    85,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,   112,    -1,
    99,   115,   116,   117,    -1,    46,    72,    -1,    15,    -1,
    -1,    -1,    -1,   112,    46,    -1,   115,   116,   117,    85,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
    96,    72,    -1,    99,    -1,    -1,    -1,    15,    -1,    46,
    72,    -1,    -1,    -1,    85,    -1,   112,    -1,    -1,   115,
   116,   117,    -1,    85,    95,    96,    -1,    -1,    99,    -1,
    -1,    -1,    15,    95,    96,    72,    -1,    99,    46,    -1,
    15,   112,    -1,    -1,   115,   116,   117,    -1,    85,    -1,
   112,    -1,    -1,   115,   116,   117,    -1,    -1,    95,    96,
    -1,    -1,    99,    46,    72,    15,    -1,    -1,    -1,    -1,
    -1,    46,    -1,    -1,    15,   112,    -1,    85,   115,   116,
   117,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    72,
    -1,    99,    -1,    -1,    -1,    -1,    46,    72,    -1,    15,
    -1,    -1,    85,    -1,   112,    46,    -1,   115,   116,   117,
    85,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,
    95,    96,    72,    -1,    99,    -1,    -1,    -1,    15,   112,
    46,    72,   115,   116,   117,    85,    -1,   112,    -1,    -1,
   115,   116,   117,    -1,    85,    95,    96,    -1,    -1,    99,
    -1,    -1,    -1,    15,    95,    96,    72,    -1,    99,    46,
    -1,    15,   112,    -1,    -1,   115,   116,   117,    -1,    85,
    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,    95,
    96,    -1,    -1,    99,    46,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    46,    -1,    -1,    -1,   112,    -1,    85,   115,
   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,
    72,    -1,    99,    -1,    -1,    -1,    -1,    -1,    72,    -1,
    -1,    -1,    -1,    85,    -1,   112,    -1,    -1,   115,   116,
   117,    85,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,
    -1,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,    -1,
   112,    -1,    -1,   115,   116,   117,    -1,    -1,   112,    -1,
    -1,   115,   116,   117
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 147 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 177 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 178 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 182 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 183 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 187 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 191 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 192 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 210 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 213 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 215 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 220 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 225 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 228 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 233 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 243 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 348 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 349 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 351 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 352 "msv.y"
{yyval.tnode=new CSyntaxNode(RETURN_STA, yyvsp[0].cString,NULL,VOIDTYPE);;
    break;}
case 37:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 41:
#line 357 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 359 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 360 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 362 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 46:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 47:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 48:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 49:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 50:
#line 373 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 374 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 52:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 54:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 55:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 56:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 57:
#line 384 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 58:
#line 390 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 59:
#line 394 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 60:
#line 409 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 420 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 421 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 64:
#line 424 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 65:
#line 437 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 66:
#line 442 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 67:
#line 446 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 68:
#line 452 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 69:
#line 453 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 70:
#line 459 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-7].returntype);
	   ;
    break;}
case 71:
#line 464 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, POINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-8].returntype);
	   ;
    break;}
case 72:
#line 470 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, DOUBLEPOINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-9].returntype);
	   ;
    break;}
case 73:
#line 476 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-7].cString, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 74:
#line 482 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-8].cString, yyvsp[-4].tnode, POINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 75:
#line 488 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-9].cString, yyvsp[-4].tnode, DOUBLEPOINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 76:
#line 498 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 77:
#line 503 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 78:
#line 508 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 79:
#line 517 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 80:
#line 525 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 81:
#line 536 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 82:
#line 549 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 83:
#line 550 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 84:
#line 551 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 85:
#line 556 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 86:
#line 560 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 87:
#line 564 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 88:
#line 568 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 89:
#line 572 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 90:
#line 576 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 91:
#line 582 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 92:
#line 584 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 93:
#line 587 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 94:
#line 592 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 95:
#line 603 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 96:
#line 604 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 97:
#line 605 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 98:
#line 608 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 99:
#line 609 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 100:
#line 610 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 101:
#line 618 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 102:
#line 622 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 103:
#line 626 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 104:
#line 631 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 105:
#line 637 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 106:
#line 642 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 107:
#line 649 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 108:
#line 655 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 109:
#line 666 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 110:
#line 667 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 111:
#line 668 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 112:
#line 673 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 113:
#line 680 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 114:
#line 683 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 115:
#line 684 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 116:
#line 693 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 117:
#line 696 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 118:
#line 697 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 119:
#line 698 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 120:
#line 699 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 121:
#line 700 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 122:
#line 701 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 123:
#line 702 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 124:
#line 706 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 125:
#line 708 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 710 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 127:
#line 712 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 128:
#line 714 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 129:
#line 716 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 130:
#line 718 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 131:
#line 720 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 132:
#line 722 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 133:
#line 724 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 134:
#line 726 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 135:
#line 728 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 136:
#line 730 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 137:
#line 734 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 138:
#line 735 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 139:
#line 738 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 140:
#line 739 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 141:
#line 740 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 142:
#line 743 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 143:
#line 744 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 144:
#line 745 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 145:
#line 748 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 146:
#line 752 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 147:
#line 758 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 148:
#line 760 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 149:
#line 762 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 150:
#line 764 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 151:
#line 766 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 152:
#line 767 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 153:
#line 772 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 154:
#line 773 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 155:
#line 774 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 156:
#line 780 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 157:
#line 781 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 158:
#line 783 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 159:
#line 785 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 160:
#line 787 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 161:
#line 789 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 162:
#line 790 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 163:
#line 796 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 164:
#line 797 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 165:
#line 799 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 166:
#line 801 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 167:
#line 806 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 168:
#line 807 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 169:
#line 811 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 170:
#line 812 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 171:
#line 816 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 817 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 173:
#line 821 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 822 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 175:
#line 823 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 176:
#line 824 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 177:
#line 825 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 827 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 828 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 829 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 181:
#line 830 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 182:
#line 831 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 183:
#line 832 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 184:
#line 833 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 185:
#line 834 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 186:
#line 835 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 187:
#line 838 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 188:
#line 839 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 189:
#line 840 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 190:
#line 841 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 191:
#line 842 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 192:
#line 843 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 193:
#line 844 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 194:
#line 845 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 195:
#line 848 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 196:
#line 849 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 197:
#line 853 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 198:
#line 854 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 199:
#line 855 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 200:
#line 856 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 201:
#line 863 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 202:
#line 867 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 203:
#line 875 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 887 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 205:
#line 891 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 206:
#line 900 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 207:
#line 912 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 208:
#line 916 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 209:
#line 924 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 210:
#line 927 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 211:
#line 928 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 212:
#line 933 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 213:
#line 937 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 214:
#line 941 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 215:
#line 946 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 216:
#line 949 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 217:
#line 958 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 218:
#line 959 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 219:
#line 960 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 220:
#line 963 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 221:
#line 964 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 222:
#line 967 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 223:
#line 968 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 224:
#line 971 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 225:
#line 972 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 226:
#line 973 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 227:
#line 974 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 228:
#line 975 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 229:
#line 976 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 230:
#line 979 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 231:
#line 980 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 232:
#line 981 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 233:
#line 982 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 234:
#line 983 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 235:
#line 984 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 236:
#line 986 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 237:
#line 987 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 238:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 239:
#line 990 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 240:
#line 992 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 241:
#line 1000 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 242:
#line 1001 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 243:
#line 1002 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 244:
#line 1003 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 245:
#line 1004 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 246:
#line 1010 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 1012 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 248:
#line 1013 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 249:
#line 1016 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 250:
#line 1017 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 251:
#line 1018 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 1021 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 1022 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 254:
#line 1025 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 255:
#line 1026 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 256:
#line 1029 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 257:
#line 1030 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 258:
#line 1033 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 259:
#line 1034 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 260:
#line 1039 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 261:
#line 1040 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 262:
#line 1041 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 263:
#line 1042 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 264:
#line 1043 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 265:
#line 1044 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 266:
#line 1052 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 267:
#line 1053 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 268:
#line 1057 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 269:
#line 1058 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 270:
#line 1065 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 271:
#line 1069 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 272:
#line 1074 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 273:
#line 1080 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 274:
#line 1086 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 275:
#line 1092 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 276:
#line 1102 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 277:
#line 1108 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 278:
#line 1114 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 279:
#line 1120 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 280:
#line 1128 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 281:
#line 1132 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 282:
#line 1136 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 283:
#line 1142 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 284:
#line 1146 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 285:
#line 1150 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 286:
#line 1156 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 287:
#line 1162 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 288:
#line 1169 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 289:
#line 1175 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 290:
#line 1181 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 291:
#line 1185 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 292:
#line 1192 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 293:
#line 1197 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 294:
#line 1201 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 295:
#line 1205 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 296:
#line 1209 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 297:
#line 1215 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 298:
#line 1221 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 299:
#line 1227 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 300:
#line 1234 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 301:
#line 1242 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 302:
#line 1248 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 303:
#line 1263 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 304:
#line 1268 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 305:
#line 1273 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 306:
#line 1281 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 307:
#line 1288 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 308:
#line 1294 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 309:
#line 1300 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 310:
#line 1303 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1313 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 312:
#line 1317 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 313:
#line 1326 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 314:
#line 1327 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 315:
#line 1332 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 316:
#line 1336 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 317:
#line 1345 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 318:
#line 1346 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 319:
#line 1354 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 320:
#line 1356 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 321:
#line 1363 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 322:
#line 1365 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 323:
#line 1371 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 324:
#line 1372 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 325:
#line 1376 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 326:
#line 1381 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 327:
#line 1386 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 328:
#line 1391 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 329:
#line 1398 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 330:
#line 1401 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 331:
#line 1402 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 332:
#line 1408 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 333:
#line 1410 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 334:
#line 1430 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 335:
#line 1431 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 336:
#line 1433 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 337:
#line 1435 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 338:
#line 1436 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 339:
#line 1442 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 340:
#line 1449 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 341:
#line 1457 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 342:
#line 1465 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 343:
#line 1469 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 344:
#line 1473 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 345:
#line 1479 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 346:
#line 1483 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 347:
#line 1489 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 348:
#line 1493 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 349:
#line 1500 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 350:
#line 1504 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 351:
#line 1508 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 352:
#line 1515 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 353:
#line 1519 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 354:
#line 1522 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 355:
#line 1527 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 356:
#line 1536 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 357:
#line 1537 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 358:
#line 1543 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1544 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 360:
#line 1548 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 361:
#line 1549 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 362:
#line 1554 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 363:
#line 1555 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 364:
#line 1556 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 365:
#line 1557 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 366:
#line 1558 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 367:
#line 1561 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 368:
#line 1562 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 369:
#line 1563 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 370:
#line 1569 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1570 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1571 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1573 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1574 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1575 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1577 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1578 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1579 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1580 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 380:
#line 1582 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 381:
#line 1583 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 382:
#line 1584 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 383:
#line 1585 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 384:
#line 1586 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 385:
#line 1587 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 386:
#line 1588 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 387:
#line 1592 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 388:
#line 1593 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 389:
#line 1594 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 390:
#line 1595 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 391:
#line 1596 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 392:
#line 1597 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 393:
#line 1598 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1600 "msv.y"
