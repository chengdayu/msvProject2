
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IF	258
#define	ELSE	259
#define	EMPTY	260
#define	AWAIT	261
#define	PROJECTION	262
#define	PBEGIN	263
#define	PEND	264
#define	POINTERNULL	265
#define	ARRAY	266
#define	STRUCT	267
#define	DOT	268
#define	UNION	269
#define	FILEDECLARATION	270
#define	MORE	271
#define	DEFINE	272
#define	MY_TRUE	273
#define	MY_FALSE	274
#define	EXIST	275
#define	FRAME	276
#define	FOR	277
#define	WHILE	278
#define	DO	279
#define	TRUE	280
#define	FALSE	281
#define	REPEAT	282
#define	UNTIL	283
#define	DISPLAY	284
#define	SKIP	285
#define	THEN	286
#define	COMMA	287
#define	COLON	288
#define	INTDECLARATION	289
#define	STRDECLARATION	290
#define	POINTERDECLARATION	291
#define	CHARDECLARATION	292
#define	VOIDDECLARATION	293
#define	FLOATDECLARATION	294
#define	LISTDECLARATION	295
#define	OPEN_PAR	296
#define	CLOSE_PAR	297
#define	TIMES	298
#define	OPEN_BPAR	299
#define	CLOSE_BPAR	300
#define	OPEN_MPAR	301
#define	CLOSE_MPAR	302
#define	FUNCTION	303
#define	OVER	304
#define	CYLINDER	305
#define	OVEREP	306
#define	INTER_OR	307
#define	NON_DETERMINED	308
#define	SEND	309
#define	RECEIVE	310
#define	PROCESS	311
#define	CHANNEL	312
#define	PUT	313
#define	GET	314
#define	ERROR_TOKEN	315
#define	STRFUNCHEAD	316
#define	STRFUNCTAIL	317
#define	STRFUNCCAT	318
#define	STRFUNCCMP	319
#define	STRFUNCCPY	320
#define	STRFUNCLEN	321
#define	EXTERN	322
#define	UNSIGNED	323
#define	SIGNED	324
#define	CHOP	325
#define	IMPLY	326
#define	IFF	327
#define	PROPIMPLY	328
#define	OR	329
#define	PARALLEL	330
#define	AND	331
#define	ASS_P	332
#define	ASS_N	333
#define	CON	334
#define	ADDRESS	335
#define	NE	336
#define	EQ	337
#define	GE	338
#define	LE	339
#define	GT	340
#define	LT	341
#define	LST	342
#define	RST	343
#define	ADD	344
#define	SUB	345
#define	MUL	346
#define	DIV	347
#define	MOD	348
#define	BNE	349
#define	CHOPSTAR	350
#define	NEXT	351
#define	NEGATION	352
#define	LENGTH	353
#define	REQUEST	354
#define	FINAL	355
#define	KEEP	356
#define	ALWAYS	357
#define	HALT	358
#define	W_NEXT	359
#define	PREFIX	360
#define	SOMETIMES	361
#define	ID	362
#define	STRLITERAL	363
#define	STRUCT_TYPE	364
#define	INTLITERAL	365
#define	FLOATLITERAL	366
#define	CHARLITERAL	367

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1208
#define	YYFLAG		-32768
#define	YYNTBASE	113

#define YYTRANSLATE(x) ((unsigned)(x) <= 367 ? yytranslate[x] : 185)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   122,
   127,   132,   137,   146,   148,   150,   152,   157,   159,   161,
   163,   165,   170,   174,   182,   192,   199,   205,   215,   217,
   219,   221,   229,   233,   235,   239,   241,   242,   251,   261,
   272,   282,   293,   305,   310,   316,   321,   326,   329,   332,
   335,   338,   340,   343,   346,   350,   354,   358,   362,   370,
   379,   391,   405,   407,   409,   411,   413,   415,   417,   420,
   427,   432,   438,   444,   453,   462,   465,   468,   471,   472,
   479,   487,   488,   491,   495,   497,   499,   501,   503,   507,
   510,   512,   524,   537,   549,   561,   579,   598,   616,   635,
   655,   674,   692,   711,   729,   731,   733,   735,   737,   739,
   750,   754,   756,   761,   767,   779,   792,   804,   816,   829,
   833,   837,   840,   841,   844,   847,   850,   858,   865,   870,
   874,   876,   880,   884,   890,   892,   896,   899,   900,   902,
   906,   908,   911,   914,   916,   918,   920,   922,   924,   926,
   930,   932,   934,   936,   938,   940,   942,   944,   946,   948,
   950,   952,   954,   956,   958,   962,   964,   966,   970,   975,
   980,   985,   990,   995,  1000,  1004,  1008,  1012,  1013,  1016,
  1019,  1022,  1025,  1028,  1032,  1037,  1042,  1047,  1053,  1059,
  1065,  1071,  1077,  1084,  1090,  1096,  1103,  1109,  1116,  1124,
  1131,  1138,  1146,  1153,  1160,  1166,  1174,  1181,  1183,  1185,
  1188,  1192,  1196,  1200,  1204,  1206,  1208,  1210,  1214,  1218,
  1222,  1226,  1230,  1234,  1238,  1242,  1246,  1250,  1252,  1254,
  1256,  1258,  1260,  1262,  1265,  1268,  1270,  1272,  1276,  1279,
  1283,  1288,  1294,  1299,  1303,  1308,  1314,  1319,  1322,  1326,
  1331,  1334,  1338,  1343,  1348,  1354,  1361,  1370,  1378,  1383,
  1387,  1393,  1402,  1403,  1408,  1412,  1417,  1422,  1428,  1434,
  1440,  1446,  1453,  1463,  1464,  1472,  1482,  1491,  1497,  1502,
  1505,  1508,  1514,  1515,  1518,  1522,  1529,  1530,  1533,  1537,
  1540,  1544,  1547,  1549,  1553,  1555,  1557,  1559,  1561,  1565,
  1566,  1569,  1570,  1574,  1576,  1579,  1583,  1587,  1591,  1595,
  1601,  1611,  1613,  1615,  1616,  1618,  1619,  1621,  1622,  1628,
  1631,  1632,  1637,  1643,  1644,  1648,  1653,  1659,  1664,  1670,
  1675,  1676,  1680,  1684,  1689,  1694,  1699,  1704,  1709,  1714,
  1719,  1724,  1731,  1736,  1741,  1746,  1753,  1757,  1761,  1766,
  1770,  1771,  1775,  1779,  1783,  1787,  1790
};

static const short yyrhs[] = {   114,
   117,     0,     8,   115,     9,     0,     0,   115,    76,   115,
     0,   115,    74,   115,     0,   115,    72,   115,     0,   115,
    73,   115,     0,   115,    70,   115,     0,   102,   115,     0,
   101,   115,     0,   106,   115,     0,   104,   115,     0,    96,
   115,     0,    30,     0,    18,     0,    19,     0,    98,   138,
     0,     5,     0,    16,     0,   103,   115,     0,   100,   115,
     0,    97,   115,     0,    44,   115,   116,    45,     7,    44,
   115,    45,     0,   107,     0,    17,   107,    33,   153,     0,
   115,    95,     0,    41,   115,    42,     0,    32,   115,   116,
     0,     0,   117,    76,   117,     0,   117,    74,   117,     0,
   117,    70,   117,     0,   129,     0,   124,     0,   177,     0,
   171,     0,   172,     0,   173,     0,    96,    41,   117,    42,
     0,   101,    41,   117,    42,     0,   102,    41,   117,    42,
     0,     6,    41,   152,    42,     0,    27,    44,   117,    45,
    28,    41,   152,    42,     0,    30,     0,     5,     0,    16,
     0,    98,    41,   138,    42,     0,   181,     0,   179,     0,
    25,     0,    26,     0,   100,    41,   117,    42,     0,   117,
    75,   117,     0,    41,   170,    42,    71,    46,   117,    47,
     0,    21,    41,   163,   168,    42,    76,    41,   117,    42,
     0,    44,   117,   169,    45,     7,   161,     0,    44,   117,
    45,     7,   161,     0,    17,   107,    41,   157,    42,    77,
    44,   119,    45,     0,   122,     0,   120,     0,   121,     0,
    20,   163,   158,    33,    44,   117,    45,     0,    41,   117,
    42,     0,   124,     0,   124,    76,   118,     0,   117,     0,
     0,   156,   107,    41,   157,    42,    44,   117,    45,     0,
   156,    91,   107,    41,   157,    42,    44,   117,    45,     0,
   156,    91,    91,   107,    41,   157,    42,    44,   117,    45,
     0,    12,   109,   107,    41,   157,    42,    44,   117,    45,
     0,    12,   109,    91,   107,    41,   157,    42,    44,   117,
    45,     0,    12,   109,    91,    91,   107,    41,   157,    42,
    44,   117,    45,     0,   107,    41,   159,    42,     0,    67,
   107,    41,   159,    42,     0,   135,    41,   159,    42,     0,
   123,    44,   118,    45,     0,    12,   107,     0,    14,   107,
     0,    69,   125,     0,    68,   125,     0,   125,     0,   126,
   127,     0,   109,   127,     0,    12,   107,   127,     0,    14,
   107,   127,     0,    12,   109,   127,     0,    14,   109,   127,
     0,    41,    91,   163,    42,    41,   157,    42,     0,    41,
    91,    91,   163,    42,    41,   157,    42,     0,    41,    91,
   107,    46,   138,   136,    47,    42,    41,   157,    42,     0,
    41,    91,   107,    46,   138,   136,    47,    42,    41,   157,
    42,    77,   145,     0,    34,     0,    39,     0,    37,     0,
    35,     0,    38,     0,    15,     0,   163,   128,     0,   107,
    46,   138,   136,    47,   128,     0,   163,    77,   133,   128,
     0,   107,    11,    77,   145,   128,     0,   107,    11,    77,
   164,   128,     0,   107,    46,   138,   136,    47,    77,   145,
   128,     0,   107,    46,   138,   136,    47,    77,   164,   128,
     0,    91,   127,     0,    32,   127,     0,    32,     1,     0,
     0,   107,    46,   138,   136,    47,     0,     0,    32,   107,
    46,   138,   136,    47,     0,     0,     0,    32,     1,     0,
   130,   132,   133,     0,   163,     0,   183,     0,   135,     0,
   137,     0,    41,   130,    42,     0,    96,   130,     0,   131,
     0,    41,    41,    37,    91,    42,   110,    42,    46,   138,
   136,    47,     0,    41,    41,    68,    37,    91,    42,   110,
    42,    46,   138,   136,    47,     0,    41,    41,    34,    91,
    42,   110,    42,    46,   138,   136,    47,     0,    41,    41,
    39,    91,    42,   110,    42,    46,   138,   136,    47,     0,
    41,    41,    37,    91,    42,    41,    41,    37,    91,    42,
   110,    42,    42,    46,   138,   136,    47,     0,    41,    41,
    37,    91,    42,    41,    41,    68,    37,    91,    42,   110,
    42,    42,    46,   138,   136,    47,     0,    41,    41,    37,
    91,    42,    41,    41,    34,    91,    42,   110,    42,    42,
    46,   138,   136,    47,     0,    41,    41,    68,    37,    91,
    42,    41,    41,    37,    91,    42,   110,    42,    42,    46,
   138,   136,    47,     0,    41,    41,    68,    37,    91,    42,
    41,    41,    68,    37,    91,    42,   110,    42,    42,    46,
   138,   136,    47,     0,    41,    41,    68,    37,    91,    42,
    41,    41,    34,    91,    42,   110,    42,    42,    46,   138,
   136,    47,     0,    41,    41,    34,    91,    42,    41,    41,
    37,    91,    42,   110,    42,    42,    46,   138,   136,    47,
     0,    41,    41,    34,    91,    42,    41,    41,    68,    37,
    91,    42,   110,    42,    42,    46,   138,   136,    47,     0,
    41,    41,    34,    91,    42,    41,    41,    34,    91,    42,
   110,    42,    42,    46,   138,   136,    47,     0,    77,     0,
    78,     0,   138,     0,   145,     0,   164,     0,    41,   164,
    42,    41,   126,    42,    41,   157,    42,   121,     0,    41,
   133,    42,     0,   134,     0,    91,    41,   131,    42,     0,
   107,    46,   138,   136,    47,     0,    41,    41,    34,    91,
    42,   107,    42,    46,   138,   136,    47,     0,    41,    41,
    68,    34,    91,    42,   107,    42,    46,   138,   136,    47,
     0,    41,    41,    39,    91,    42,   107,    42,    46,   138,
   136,    47,     0,    41,    41,    37,    91,    42,   107,    42,
    46,   138,   136,    47,     0,    41,    41,    68,    37,    91,
    42,   107,    42,    46,   138,   136,    47,     0,    41,   135,
    42,     0,    32,   138,   136,     0,    32,     1,     0,     0,
    91,   163,     0,    91,   137,     0,    91,   135,     0,    41,
   137,    42,    46,   138,   136,    47,     0,    91,    41,   156,
    91,    42,   138,     0,    91,    41,   138,    42,     0,    41,
   137,    42,     0,   141,     0,   141,   154,   138,     0,   138,
   144,   141,     0,     3,   152,    31,   138,   140,     0,   141,
     0,   141,   144,   141,     0,     4,   138,     0,     0,   142,
     0,   141,   143,   142,     0,   165,     0,    90,   142,     0,
    94,   142,     0,    10,     0,   167,     0,   163,     0,   135,
     0,   137,     0,   121,     0,    41,   138,    42,     0,   166,
     0,   149,     0,   150,     0,   183,     0,    91,     0,    92,
     0,    93,     0,    87,     0,    88,     0,    80,     0,    52,
     0,    79,     0,    89,     0,    90,     0,   145,    79,   145,
     0,   146,     0,   147,     0,    41,   145,    42,     0,    46,
   138,   148,    47,     0,    46,   164,   148,    47,     0,    46,
   145,   148,    47,     0,    44,   138,   148,    45,     0,    44,
   164,   148,    45,     0,    44,   145,   148,    45,     0,    32,
   138,   148,     0,    32,   164,   148,     0,    32,   145,   148,
     0,     0,    32,     1,     0,    80,   163,     0,    80,   135,
     0,    80,   183,     0,    80,   149,     0,    41,   149,    42,
     0,    41,    34,    42,   139,     0,    41,    39,    42,   139,
     0,    41,    37,    42,   139,     0,    41,    69,    34,    42,
   139,     0,    41,    69,    37,    42,   139,     0,    41,    68,
    34,    42,   139,     0,    41,    68,    37,    42,   139,     0,
    41,    34,    91,    42,   151,     0,    41,    68,    34,    91,
    42,   151,     0,    41,    39,    91,    42,   151,     0,    41,
    37,    91,    42,   151,     0,    41,    68,    37,    91,    42,
   151,     0,    41,    38,    91,    42,   151,     0,    41,    34,
    91,    91,    42,   151,     0,    41,    68,    34,    91,    91,
    42,   151,     0,    41,    39,    91,    91,    42,   151,     0,
    41,    37,    91,    91,    42,   151,     0,    41,    68,    37,
    91,    91,    42,   151,     0,    41,    38,    91,    91,    42,
   151,     0,    41,    12,   109,    91,    42,   151,     0,    41,
   109,    91,    42,   151,     0,    41,    12,   109,    91,    91,
    42,   151,     0,    41,   109,    91,    91,    42,   151,     0,
   139,     0,   153,     0,    97,   152,     0,   152,    76,   152,
     0,   152,    74,   152,     0,    41,   152,    42,     0,   138,
   154,   138,     0,    18,     0,    19,     0,   138,     0,   138,
    82,   164,     0,   138,    81,   164,     0,   164,    82,   138,
     0,   164,    81,   138,     0,   138,    82,    10,     0,   138,
    81,    10,     0,    10,    82,   138,     0,    10,    81,   138,
     0,   138,    82,   166,     0,   138,    81,   166,     0,    83,
     0,    84,     0,    81,     0,    85,     0,    86,     0,    82,
     0,    68,    34,     0,    68,    37,     0,   155,     0,   126,
     0,   156,   163,   158,     0,   156,   158,     0,   109,   163,
   158,     0,   109,    91,   163,   158,     0,   109,    91,    91,
   163,   158,     0,   109,   163,    11,   158,     0,   107,   163,
   158,     0,   107,    91,   163,   158,     0,   107,    91,    91,
   163,   158,     0,   107,   163,    11,   158,     0,   109,   158,
     0,   109,    91,   158,     0,   109,    91,    91,   158,     0,
   107,   158,     0,   107,    91,   158,     0,   107,    91,    91,
   158,     0,   156,   163,    11,   158,     0,   156,    91,   163,
    11,   158,     0,   156,   163,    46,   138,    47,   158,     0,
   156,   163,    46,   138,    32,   138,    47,   158,     0,   156,
   163,    11,    46,   138,    47,   158,     0,   156,    91,   163,
   158,     0,   156,    91,   158,     0,   156,    91,    91,   163,
   158,     0,    41,    91,   163,    42,    41,   157,    42,   158,
     0,     0,    32,   156,   163,   158,     0,    32,   156,   158,
     0,    32,   107,   163,   158,     0,    32,   109,   163,   158,
     0,    32,   109,    91,   163,   158,     0,    32,   107,   163,
    11,   158,     0,    32,   109,   163,    11,   158,     0,    32,
   156,   163,    11,   158,     0,    32,   156,    91,   163,    11,
   158,     0,    32,    41,    91,   163,    42,    41,   157,    42,
   158,     0,     0,    32,   156,   163,    46,   138,    47,   158,
     0,    32,   156,   163,    46,   138,    32,   138,    47,   158,
     0,    32,   156,   163,    11,    46,   138,    47,   158,     0,
    32,   156,    91,   163,   158,     0,    32,   156,    91,   158,
     0,    32,     1,     0,   133,   160,     0,   107,    41,   159,
    42,   160,     0,     0,    80,     1,     0,    32,   133,   160,
     0,    32,   107,    41,   159,    42,   160,     0,     0,    32,
     1,     0,    44,   117,    45,     0,     1,    45,     0,    41,
   152,    42,     0,     1,    42,     0,   107,     0,    41,   163,
    42,     0,   108,     0,   110,     0,   112,     0,   111,     0,
    32,   163,   168,     0,     0,    32,     1,     0,     0,    32,
   117,   169,     0,   153,     0,    97,   170,     0,   170,    76,
   170,     0,   170,    74,   170,     0,    41,   170,    42,     0,
    23,   162,   161,     0,    22,   138,    43,    24,   161,     0,
    22,    41,   174,    32,   175,    32,   176,    42,   161,     0,
   129,     0,   125,     0,     0,   152,     0,     0,   129,     0,
     0,     3,   152,    31,   161,   178,     0,     4,   161,     0,
     0,    29,    41,   133,    42,     0,    29,    41,   133,   180,
    42,     0,     0,    32,   133,   180,     0,    99,    41,   163,
    42,     0,    99,    41,   163,   182,    42,     0,    99,    41,
   135,    42,     0,    99,    41,   135,   182,    42,     0,    99,
    41,   183,    42,     0,     0,    32,   163,   182,     0,    32,
   135,   182,     0,   163,    13,   163,   184,     0,   135,    13,
   163,   184,     0,   137,    13,   163,   184,     0,   163,    13,
   135,   184,     0,   135,    13,   135,   184,     0,   137,    13,
   135,   184,     0,   163,    71,   163,   184,     0,   135,    71,
   163,   184,     0,    41,   149,    42,    71,   163,   184,     0,
   137,    71,   163,   184,     0,   163,    71,   135,   184,     0,
   135,    71,   135,   184,     0,    41,   149,    42,    71,   135,
   184,     0,   163,    13,   121,     0,   163,    71,   121,     0,
   137,    71,   135,   184,     0,    41,   183,    42,     0,     0,
    13,   163,   184,     0,    13,   135,   184,     0,    71,   163,
   184,     0,    71,   135,   184,     0,    13,   121,     0,    71,
   121,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   131,   162,   163,   167,   168,   169,   170,   171,   176,   177,
   178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   194,   195,   200,   201,   205,   209,   214,
   216,   223,   328,   329,   332,   333,   334,   335,   336,   337,
   338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
   348,   349,   350,   352,   355,   359,   363,   372,   382,   384,
   385,   386,   398,   401,   405,   412,   413,   418,   423,   429,
   435,   441,   447,   457,   462,   467,   476,   484,   495,   509,
   510,   511,   515,   519,   523,   527,   531,   535,   541,   544,
   547,   552,   564,   565,   566,   567,   568,   569,   576,   580,
   584,   589,   595,   600,   607,   613,   623,   625,   626,   630,
   637,   641,   642,   647,   651,   652,   653,   654,   655,   656,
   657,   660,   662,   664,   666,   668,   670,   672,   674,   676,
   678,   680,   682,   684,   689,   690,   693,   694,   695,   696,
   698,   699,   702,   706,   707,   709,   711,   713,   715,   717,
   721,   723,   724,   730,   731,   732,   733,   735,   737,   739,
   744,   745,   747,   748,   754,   755,   759,   760,   764,   765,
   769,   770,   771,   772,   773,   775,   776,   777,   778,   779,
   780,   781,   782,   783,   786,   787,   788,   789,   790,   791,
   792,   793,   795,   797,   801,   802,   803,   804,   810,   814,
   822,   834,   838,   847,   859,   863,   871,   875,   876,   879,
   884,   888,   893,   897,   904,   907,   908,   911,   912,   915,
   916,   919,   920,   921,   922,   923,   924,   927,   928,   929,
   930,   931,   932,   934,   935,   937,   938,   940,   948,   949,
   950,   951,   952,   958,   960,   961,   964,   965,   966,   969,
   970,   973,   974,   977,   978,   981,   982,   987,   988,   989,
   990,   991,   992,   999,  1001,  1004,  1006,  1012,  1016,  1021,
  1027,  1033,  1039,  1048,  1054,  1060,  1066,  1075,  1079,  1083,
  1089,  1093,  1097,  1103,  1109,  1116,  1124,  1132,  1138,  1144,
  1148,  1155,  1161,  1164,  1168,  1172,  1178,  1184,  1190,  1197,
  1205,  1211,  1226,  1232,  1235,  1243,  1251,  1257,  1263,  1267,
  1276,  1280,  1290,  1291,  1295,  1299,  1309,  1310,  1318,  1320,
  1327,  1329,  1335,  1336,  1340,  1345,  1350,  1355,  1361,  1365,
  1366,  1372,  1373,  1384,  1395,  1396,  1398,  1400,  1406,  1412,
  1420,  1428,  1432,  1436,  1442,  1446,  1452,  1456,  1463,  1473,
  1474,  1480,  1481,  1485,  1486,  1491,  1492,  1493,  1494,  1495,
  1498,  1499,  1500,  1506,  1507,  1508,  1510,  1511,  1512,  1514,
  1515,  1516,  1517,  1519,  1520,  1521,  1522,  1523,  1524,  1525,
  1529,  1530,  1531,  1532,  1533,  1534,  1535
};

static const char * const yytname[] = {   "$","error","$undefined.","IF","ELSE",
"EMPTY","AWAIT","PROJECTION","PBEGIN","PEND","POINTERNULL","ARRAY","STRUCT",
"DOT","UNION","FILEDECLARATION","MORE","DEFINE","MY_TRUE","MY_FALSE","EXIST",
"FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT","UNTIL","DISPLAY","SKIP",
"THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION","POINTERDECLARATION",
"CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION","LISTDECLARATION","OPEN_PAR",
"CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR","CLOSE_MPAR","FUNCTION",
"OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED","SEND","RECEIVE","PROCESS",
"CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD","STRFUNCTAIL","STRFUNCCAT",
"STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED","SIGNED","CHOP","IMPLY",
"IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N","CON","ADDRESS","NE",
"EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL","DIV","MOD","BNE","CHOPSTAR",
"NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP","ALWAYS","HALT","W_NEXT",
"PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE","INTLITERAL","FLOATLITERAL",
"CHARLITERAL","program","gComplexProposition","complexProposition","poptional_projection",
"statement","option_struct_declaration","empty_statement","function_define",
"function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp","option_exp_else_statement",
"simple_ari_exp","member_in_exp","bi_operator","ari_operator","array_exp","option_list_value",
"option_struct_list_value","inner_option_list_value","address_exp","type_cast",
"casted_element","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"if_statement","option_else_statement","output_statement","option_output","input_statement",
"option_input","struct_member_exp","option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   113,   114,   114,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   116,   116,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   118,   118,   119,   119,   120,   120,   120,
   120,   120,   120,   121,   121,   121,   122,   123,   123,   124,
   124,   124,   125,   125,   125,   125,   125,   125,   125,   125,
   125,   125,   126,   126,   126,   126,   126,   126,   127,   127,
   127,   127,   127,   127,   127,   127,   128,   128,   128,    -1,
    -1,    -1,    -1,   129,   130,   130,   130,   130,   130,   130,
   130,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   132,   132,   133,   133,   133,   133,
   133,   133,   134,   135,   135,   135,   135,   135,   135,   135,
   136,   136,   136,   137,   137,   137,   137,   137,   137,   137,
   138,   138,   138,   138,   139,   139,   140,   140,   141,   141,
   142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   143,   143,   143,   143,   143,   143,
   143,   143,   144,   144,   145,   145,   145,   145,   146,   146,
   146,   147,   147,   147,   148,   148,   148,   148,   148,   149,
   149,   149,   149,   149,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   151,   152,   152,
   152,   152,   152,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   154,   154,   154,
   154,   154,   154,   155,   155,   156,   156,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
   159,   159,   159,   159,   160,   160,   160,   160,   161,   161,
   162,   162,   163,   163,   164,   165,   166,   167,   168,   168,
   168,   169,   169,   170,   170,   170,   170,   170,   171,   172,
   173,   174,   174,   174,   175,   175,   176,   176,   177,   178,
   178,   179,   179,   180,   180,   181,   181,   181,   181,   181,
   182,   182,   182,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   184,   184,   184,   184,   184,   184,   184
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     4,     4,
     4,     4,     8,     1,     1,     1,     4,     1,     1,     1,
     1,     4,     3,     7,     9,     6,     5,     9,     1,     1,
     1,     7,     3,     1,     3,     1,     0,     8,     9,    10,
     9,    10,    11,     4,     5,     4,     4,     2,     2,     2,
     2,     1,     2,     2,     3,     3,     3,     3,     7,     8,
    11,    13,     1,     1,     1,     1,     1,     1,     2,     6,
     4,     5,     5,     8,     8,     2,     2,     2,     0,     6,
     7,     0,     2,     3,     1,     1,     1,     1,     3,     2,
     1,    11,    12,    11,    11,    17,    18,    17,    18,    19,
    18,    17,    18,    17,     1,     1,     1,     1,     1,    10,
     3,     1,     4,     5,    11,    12,    11,    11,    12,     3,
     3,     2,     0,     2,     2,     2,     7,     6,     4,     3,
     1,     3,     3,     5,     1,     3,     2,     0,     1,     3,
     1,     2,     2,     1,     1,     1,     1,     1,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     3,     1,     1,     3,     4,     4,
     4,     4,     4,     4,     3,     3,     3,     0,     2,     2,
     2,     2,     2,     3,     4,     4,     4,     5,     5,     5,
     5,     5,     6,     5,     5,     6,     5,     6,     7,     6,
     6,     7,     6,     6,     5,     7,     6,     1,     1,     2,
     3,     3,     3,     3,     1,     1,     1,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
     1,     1,     1,     2,     2,     1,     1,     3,     2,     3,
     4,     5,     4,     3,     4,     5,     4,     2,     3,     4,
     2,     3,     4,     4,     5,     6,     8,     7,     4,     3,
     5,     8,     0,     4,     3,     4,     4,     5,     5,     5,
     5,     6,     9,     0,     7,     9,     8,     5,     4,     2,
     2,     5,     0,     2,     3,     6,     0,     2,     3,     2,
     3,     2,     1,     3,     1,     1,     1,     1,     3,     0,
     2,     0,     3,     1,     2,     3,     3,     3,     3,     5,
     9,     1,     1,     0,     1,     0,     1,     0,     5,     2,
     0,     4,     5,     0,     3,     4,     5,     4,     5,     4,
     0,     3,     3,     4,     4,     4,     4,     4,     4,     4,
     4,     6,     4,     4,     4,     6,     3,     3,     4,     3,
     0,     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,    45,     0,     0,     0,    98,    46,     0,     0,
     0,     0,     0,    50,    51,     0,     0,    44,    93,    96,
    95,    97,    94,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   323,     0,     1,    60,    61,
    59,     0,    34,    82,     0,    33,     0,   121,   117,   118,
   266,     0,   115,    36,    37,    38,    35,    49,    48,   116,
     0,     0,    29,    13,    22,     0,   174,     0,     0,     0,
     0,   326,   328,   327,   179,   177,   178,    17,   161,   169,
   182,   183,   176,   171,   181,   175,   184,    21,    10,     9,
    20,    12,    11,     2,     0,     0,     0,     0,     0,    26,
   174,   245,   246,     0,     0,   325,   247,     0,   239,     0,
     0,    78,     0,    79,     0,     0,     0,   323,   304,     0,
   344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   179,     0,   177,   178,   182,   334,   176,     0,
   184,     0,     0,     0,     0,    93,    95,     0,    81,     0,
    80,     0,   323,   156,   155,   154,     0,     0,   120,   117,
     0,     0,     0,     0,     0,   313,     0,     0,   323,    84,
   109,     0,     0,     0,     0,     0,    83,   135,   136,     0,
     0,   313,     0,     0,     0,     0,     0,     0,     0,     0,
    27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   177,   178,     0,   182,   176,   184,     0,
   211,     0,   213,   210,   212,   172,   173,   193,   194,     0,
   191,   192,   190,   260,   263,   258,   259,   261,   262,   188,
   189,   185,   186,   187,     0,     0,     8,     6,     7,     5,
     4,     0,     0,     0,   247,     0,   240,   260,   263,     0,
     0,     0,     0,     0,     0,     0,    85,     0,   323,    87,
    86,    88,   293,     0,     0,     0,   330,     0,    93,    95,
    97,    94,     0,     0,   343,   342,     0,     0,   322,     0,
     0,     0,   339,     0,     0,     0,     0,     0,     0,   142,
   137,   138,   196,   197,   139,     0,     0,    93,    95,    94,
     0,     0,     0,     0,   323,   154,     0,   335,    63,   119,
   150,   160,     0,   324,     0,     0,     0,   380,     0,     0,
     0,   313,     0,     0,     0,     0,     0,   267,     0,     0,
     0,     0,   117,   118,     0,   115,   116,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   323,   317,     0,
   153,   106,     0,     0,     0,     0,    99,    32,    31,    53,
    30,     0,     0,    64,   114,     0,   381,   381,     0,   381,
   381,   381,   381,   381,   381,     0,     0,   293,   377,   381,
   381,   378,   381,   381,    25,    29,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   180,   214,     0,     0,     0,
     0,     0,     0,   163,   170,   162,   255,   254,   243,   253,
   249,   257,   252,   248,   256,   244,   351,   242,   241,   251,
   250,    42,     0,   323,   293,     0,   304,   304,   304,     0,
   310,     0,     0,     0,   304,     0,     0,     0,     0,     0,
     0,     0,   346,     0,   321,   320,     0,     0,     0,     0,
     0,     0,     0,     0,   208,   208,   208,   208,   208,   208,
     0,     0,   352,     0,     0,     0,     0,     0,     0,     0,
    93,    95,    93,    95,   338,   154,     0,     0,     0,     0,
     0,     0,     0,   337,   336,   332,     0,     0,     0,     0,
   323,     0,   264,   265,   159,     0,    93,    95,    94,     0,
    39,     0,     0,    47,     0,   358,     0,   356,     0,   360,
    52,    40,    41,   314,   313,     0,   311,    74,     0,     0,
     0,   153,   108,   107,   109,    77,     0,     0,     0,     0,
     0,   368,   365,    76,   375,   371,   369,   366,   379,   373,
     0,   293,     0,   367,   364,   374,   370,    28,     0,   168,
     0,   215,   165,     0,     0,   217,     0,     0,     0,     0,
   216,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   349,   323,   293,     0,     0,   304,   281,   304,   304,
   278,   304,   304,   269,   304,     0,     0,   304,     0,   304,
   304,   295,   304,     0,   331,   330,     0,     0,     0,     0,
     0,     0,     0,   345,     0,   340,   319,     0,   141,   198,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   354,   353,     0,   195,     0,     0,     0,     0,
     0,     0,     0,   153,   293,   338,   153,   381,   381,     0,
   333,    57,     0,    75,     0,     0,     0,     0,     0,     0,
    93,    95,     0,     0,     0,     0,   361,   361,   359,   357,
     0,   318,   323,   317,   152,   153,   144,   109,   109,     0,
   101,    65,   386,   381,   381,   387,   381,   381,   293,     0,
     0,     0,     0,   164,     0,     0,     0,   238,   222,     0,
   225,     0,   227,     0,   224,     0,     0,     0,     0,     0,
   220,     0,     0,   221,     0,     0,   218,   219,   235,     0,
     0,     0,     0,     0,     0,   350,   293,     0,     0,     0,
   304,   282,   304,   304,   274,   304,   279,   304,   304,   270,
     0,   290,   304,   304,     0,   268,     0,     0,   304,   296,
   304,   304,   297,   309,   304,   304,     0,   294,     0,   329,
     0,     0,     0,   348,     0,     0,   209,   208,   208,   208,
   202,   204,   203,   199,   201,   200,     0,   143,   355,     0,
     0,   323,   326,     0,   323,   326,   323,   326,     0,     0,
   293,     0,     0,     0,   376,   372,     0,    56,   153,   158,
     0,     0,     0,     0,     0,     0,   363,   362,    74,   313,
   315,   151,   102,   103,   109,   383,   382,   385,   384,     0,
     0,     0,     0,   167,   234,     0,   166,   228,   231,   233,
   230,     0,   223,     0,   226,     0,   237,     0,     0,     0,
     0,     0,     0,     0,     0,   283,   304,   275,   277,   280,
   304,   271,   273,   304,   304,   289,     0,   284,     0,    67,
     0,   299,   298,   300,   304,   308,     0,   301,     0,    62,
     0,   347,     0,     0,     0,   205,   207,   206,     0,     0,
     0,     0,     0,     0,     0,     0,   323,     0,   323,   326,
     0,   144,    89,   157,    54,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   312,     0,     0,   100,
     0,     0,     0,    23,   236,   229,   232,     0,     0,     0,
     0,   293,   276,   272,   291,   285,     0,     0,   304,    66,
     0,   293,   302,     0,     0,   304,     0,     0,    43,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    90,     0,     0,     0,
     0,     0,     0,     0,     0,    74,   109,   109,     0,     0,
    68,     0,     0,    71,     0,   304,     0,   286,    58,     0,
   304,     0,   305,    55,   341,   293,     0,     0,     0,   153,
   153,     0,     0,     0,   153,   153,   153,   153,     0,     0,
     0,     0,     0,     0,   293,     0,     0,     0,     0,     0,
     0,     0,   316,   104,   105,     0,    69,     0,    72,   304,
   288,   304,   304,   307,   304,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   153,     0,
     0,     0,   153,   153,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    70,    73,   292,   287,   303,   306,
     0,   326,   326,     0,   145,   124,   326,   326,     0,   148,
   122,   147,   125,     0,     0,     0,     0,     0,     0,    91,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   140,     0,     0,     0,   326,     0,     0,   326,   146,
   326,   326,     0,   149,   123,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   326,    92,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   153,   153,     0,   153,   153,     0,     0,     0,
     0,     0,     0,   153,     0,     0,   153,   153,   153,     0,
   134,   132,     0,   128,   126,     0,     0,     0,   153,   133,
   127,   131,   129,     0,   130,     0,     0,     0
};

static const short yydefgoto[] = {  1206,
     2,    21,   213,   152,   383,   961,    59,    95,    61,    62,
    63,    64,    65,   372,   377,    66,    67,    68,   200,   369,
   310,    96,   550,    97,   127,   728,   724,    99,   100,   255,
   240,   312,   313,   314,   655,   101,   102,   729,   266,   129,
   270,    71,    72,   460,   286,   370,   547,   447,   145,   103,
   130,   104,   105,   106,   468,   341,   160,    74,    75,    76,
   297,   645,   903,    77,   612,    78,   494,    79,   537,   107,
   562
};

static const short yypact[] = {    43,
  2373,  3897,-32768,-32768,   -63,-32768,-32768,-32768,  2373,  2373,
  2373,  2373,  1521,  2373,  2373,  2373,  2373,  2373,  2373,-32768,
    22,  1890,-32768,    18,   813,   823,-32768,-32768,    31,    68,
    88,  1925,   126,-32768,-32768,   156,   165,-32768,-32768,-32768,
-32768,-32768,-32768,  2342,  3897,   105,   824,  1031,   336,   206,
   194,   203,   275,   292,   371,   -24,   452,  1094,-32768,-32768,
-32768,   421,-32768,-32768,   452,-32768,   626,-32768,   233,    41,
-32768,   217,    72,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   462,   968,   716,   426,   426,  1890,-32768,  3231,   401,  2308,
  2308,-32768,-32768,-32768,-32768,   233,    41,  1028,  2469,-32768,
-32768,-32768,    72,-32768,-32768,-32768,-32768,   426,   426,   426,
   426,   426,   426,-32768,  2373,  2373,  2373,  2373,  2373,-32768,
  1064,-32768,-32768,  2478,  1890,-32768,  2075,   345,-32768,  1076,
  1890,   452,   458,   452,   452,   487,    68,-32768,   502,    68,
  2738,   535,   568,  1890,   178,  3897,   509,  1890,  2591,   560,
  1993,  1073,  1085,   977,   952,   689,   581,-32768,   928,   761,
   980,  1015,   593,  1067,  1109,-32768,-32768,   506,-32768,   452,
-32768,  1583,   599,-32768,-32768,-32768,  3797,   479,-32768,   111,
  1521,   564,  3897,  3897,  3897,  2072,  1521,   452,   249,-32768,
    67,  3897,  3897,  3897,  3897,   880,-32768,-32768,-32768,   509,
    74,  2072,    74,    74,    74,   450,   677,    81,    81,  3687,
-32768,  2373,   700,   482,   660,   -17,     6,   713,   157,  3268,
   866,   997,   719,   404,    89,   650,   749,   418,   779,   511,
   817,    41,-32768,   837,-32768,-32768,-32768,-32768,-32768,  2308,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2308,  1521,  1257,   406,   406,   582,
   731,  1521,  1521,  2821,  1221,  1034,-32768,     2,    13,  1521,
   178,  1890,  1890,  1521,  1521,  1055,-32768,   592,   476,-32768,
-32768,-32768,   435,   818,   244,   831,   872,  1265,   -17,     6,
   713,   157,  3146,   616,-32768,-32768,   907,   926,-32768,  1171,
   910,  3897,-32768,  1372,  1757,  2202,  2202,   618,   259,-32768,
  1028,   884,-32768,-32768,-32768,   508,  1282,   263,   265,   301,
  1066,  1260,  1194,   336,   940,   932,  2858,-32768,-32768,-32768,
-32768,   944,   931,-32768,   943,  1993,  1993,-32768,  3897,  1010,
   992,  2072,   452,   452,   452,   625,  1166,-32768,   778,   958,
  2701,  1154,   404,    89,   581,   418,   779,   356,   870,   511,
   810,   856,  1011,  1245,  1274,  1305,     9,    35,  1080,  1045,
   539,-32768,  1019,  1521,    12,   509,-32768,  1202,  1052,  1052,
-32768,  1031,  1087,  1118,-32768,   117,   240,   240,  1136,   240,
   240,   240,   240,   240,   240,  1078,  1199,   435,-32768,   367,
   240,-32768,   367,   240,-32768,   716,  1200,  1521,  1144,  2308,
   337,  2308,   342,   349,  2308,   393,   414,   425,   444,  1175,
   446,   460,  1218,  1224,   473,-32768,   931,   572,   619,    89,
   749,   418,   779,  1100,-32768,  1028,  1028,  1028,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1028,  1263,  1207,-32768,  1028,
  1028,-32768,   628,   706,   435,  1193,    -3,   231,   232,  1247,
-32768,  1217,    68,   629,   243,  1249,    26,  1267,   631,  3183,
  1276,   130,  1890,   178,-32768,-32768,  1418,  1307,  2978,  1297,
   650,   258,  1316,  3061,   661,    -2,  1313,   661,    -2,  1313,
  3633,   509,-32768,  1323,   800,   705,   635,   556,   573,   636,
   682,   687,  1218,  1224,   943,  1326,  1521,  1330,  2941,  1197,
  1521,    74,  1332,  1308,-32768,  1050,   178,  1376,  1345,    68,
  1344,   932,-32768,-32768,-32768,  1354,  1312,  1319,  1320,  1446,
-32768,   546,   619,-32768,    74,-32768,  1357,-32768,  1380,-32768,
-32768,-32768,-32768,-32768,  2072,   799,-32768,-32768,   846,  1378,
    -7,   539,-32768,-32768,  1394,-32768,   880,    98,  1399,    81,
    81,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1395,   435,  1401,-32768,-32768,-32768,-32768,-32768,  1405,    16,
   692,-32768,  1661,  2308,  1403,-32768,  2308,  1413,  2308,  1417,
-32768,  2308,  1420,   715,   723,   733,   682,   742,  2308,   763,
  2308,   780,  2308,  2308,  2308,  1422,  1382,  1384,  1385,  1212,
   178,-32768,  1075,   435,  1427,    68,   303,-32768,   309,   346,
-32768,   726,   370,-32768,  1016,  1409,    68,   748,    68,   912,
    50,-32768,  1077,  3897,-32768,   872,  1402,   161,   263,   265,
   301,  1227,   483,  1358,  1483,-32768,-32768,  1448,-32768,-32768,
  1476,  3098,   258,  1360,  1477,  1480,  1481,  1485,  1487,  1490,
  3316,  1494,  1507,-32768,   800,-32768,   505,  2419,  3645,  3681,
   786,   787,  1501,   539,   435,-32768,   539,   240,   240,  3897,
-32768,-32768,   178,-32768,  1326,  1521,  1521,  1505,  1514,  1515,
  1468,  1473,  1312,  1319,  1320,  1280,  1533,  1533,-32768,-32768,
  1528,-32768,   951,  1080,-32768,   539,-32768,   160,  1394,  1529,
-32768,-32768,-32768,   367,   240,-32768,   367,   240,   435,  1535,
  1536,  2373,  1521,-32768,  2308,  1537,  2308,-32768,-32768,  2308,
-32768,  2308,-32768,  2308,-32768,  2308,  3749,  3866,  3920,   789,
-32768,  2308,  1540,-32768,  2308,  1541,-32768,-32768,-32768,  2308,
  1543,  1547,  1548,  1468,  1500,-32768,   435,  1550,  1553,  1557,
    50,-32768,   502,   502,-32768,    50,-32768,   502,   502,-32768,
    68,-32768,  1102,   343,  1521,-32768,  1556,  1560,   502,-32768,
   502,   502,-32768,-32768,  1124,   590,  1521,-32768,  1475,-32768,
  1563,   553,   687,   479,  1890,  1684,-32768,   661,    -2,  1313,
-32768,-32768,-32768,-32768,-32768,-32768,  3353,-32768,-32768,   589,
  3401,  1356,  1564,  3438,  1411,  1566,  1449,  1571,  3927,  3961,
   435,  1567,  1574,  1572,-32768,-32768,  1435,-32768,   539,  1028,
   -20,    39,   555,  1584,  1587,  1473,-32768,-32768,  1080,  2072,
-32768,-32768,-32768,-32768,   323,-32768,-32768,-32768,-32768,  1592,
  1581,  3897,   909,  1028,-32768,  2308,  1100,-32768,-32768,-32768,
-32768,  3995,-32768,  2308,-32768,  2308,-32768,  1520,  1532,  1534,
  1594,  1598,  1591,  3897,  1601,-32768,   502,-32768,-32768,-32768,
   502,-32768,-32768,   502,   502,-32768,  1521,-32768,   681,  3897,
  1603,-32768,-32768,-32768,   502,-32768,  1521,-32768,   729,-32768,
  3897,-32768,  1604,  1290,  1607,-32768,-32768,-32768,  3486,  1599,
  1611,  3523,  1612,  1616,  1621,  1622,  1455,  3571,  1457,  1628,
  1629,  1633,-32768,-32768,-32768,  1632,  1643,  1644,  1564,  1647,
  1649,  1566,  1654,  1571,  1582,   189,-32768,  1655,    -7,-32768,
  1641,  3897,  1478,-32768,-32768,-32768,-32768,  1595,  1656,  3897,
  1498,   435,-32768,-32768,-32768,-32768,   187,  1521,   502,  1094,
  1653,   435,-32768,   270,  1521,   502,  1363,   178,-32768,  1663,
   792,   806,  1289,  1521,  1521,   834,   843,  1303,  1521,  1521,
  1521,  1521,  1657,  3608,  1665,  1666,-32768,  1667,  1633,   386,
  1214,  1672,  1668,  1682,  1628,  1080,   160,  1394,  3897,  1578,
-32768,  3897,  1585,-32768,  1683,   502,   654,-32768,-32768,  1686,
   502,   674,-32768,-32768,-32768,   435,   886,   887,   889,   539,
   539,   896,   900,   904,   539,   539,   539,   539,  1521,   905,
   922,  1322,  1521,  1521,   435,  1635,  1639,  1694,  1642,  1652,
  1698,  1228,-32768,-32768,-32768,  1662,-32768,  1759,-32768,   502,
-32768,   502,   502,-32768,   502,  1702,  4002,  4036,   933,  1699,
  1700,  4043,  4077,   959,  1708,  1709,  1710,  1714,   539,   965,
   976,   983,   539,   539,  1720,  1730,  1731,  1688,  1732,  1738,
  1690,  1691,  1692,  1747,-32768,-32768,-32768,-32768,-32768,-32768,
   149,  1748,  1750,  4084,-32768,-32768,  1751,  1755,  4118,-32768,
-32768,-32768,-32768,  1742,  4125,  4159,   984,  1752,  1753,  1728,
  1704,  1706,  1766,  1707,  1711,  1776,  1777,  1780,  1736,   135,
   -24,-32768,  1787,  1788,  1789,  1790,  1794,  1796,  1797,-32768,
  1798,  1800,  4166,-32768,-32768,   800,  1748,  1750,  1734,  1751,
  1755,  1735,  1739,  1740,  1804,   470,   599,  1806,  1807,  1812,
  1809,  1815,  1816,  1820,  1829,  1830,   884,  1790,  1797,  1798,
  1800,  1763,  1521,  1521,  1828,  1521,  1521,  1832,  1833,  1835,
  1834,  1830,   539,   539,  1521,   539,   539,  1521,  1521,  1521,
  1836,  1837,  1838,   539,  1840,  1842,   539,   539,   539,  1521,
-32768,-32768,  1843,-32768,-32768,  1844,  1845,  1847,   539,-32768,
-32768,-32768,-32768,  1849,-32768,  1883,  1899,-32768
};

static const short yypgoto[] = {-32768,
-32768,    46,  1496,    34,  1346,-32768,-32768,     1,-32768,-32768,
  -188,   -33,    36,    21,  -539,  -140,   -26,  1414,-32768,  -107,
-32768,   221,   738,  1236,   -13,  -363,-32768,  1465,   -58,-32768,
  1327,  -264,-32768,-32768,  -417,   995,-32768,   472,   -18,    -9,
  1818,-32768,  -165,  -389,  1489,  -197,  -698,  -143,-32768,  1049,
   262,-32768,   987,-32768,  1270,  1408,  -123,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1255,-32768,  -351,  1593,
   294
};


#define	YYLAST		4278


static const short yytable[] = {    98,
   296,   303,    60,   128,   389,   841,   350,   384,   573,   544,
   539,   440,   553,   169,   171,   711,   186,   154,   142,   723,
   927,   187,   443,   179,   410,   323,   635,   328,   285,   654,
   114,   236,   237,   665,   158,    58,   306,   137,   307,   309,
   482,   486,   489,    81,   153,    60,   582,   412,   586,   230,
     1,   591,   137,   204,    82,    83,    84,    85,   131,   108,
   109,   110,   111,   112,   113,   615,   137,   214,   656,   657,
   658,   659,   660,   411,   226,   545,   495,   190,   162,   930,
   187,   285,   170,   170,   208,   197,   928,   617,    89,   929,
   137,   115,   385,   116,   117,   118,   413,   119,   375,    49,
   126,   204,   188,   138,   238,   239,   267,   295,   137,   126,
   265,   205,   276,    94,   386,   173,   120,   459,   189,   465,
   126,   386,   154,   201,    94,   300,   143,   226,   140,   316,
   332,   607,   138,   311,   608,   265,   609,   136,   558,   158,
   937,   158,   209,   376,   519,   931,    60,    46,   932,   153,
   154,   179,   277,   280,   281,   282,   138,   558,   349,   205,
   257,   258,   259,   260,   261,   610,   144,   359,   843,   844,
   137,   605,   311,   371,   138,  1146,   170,    60,   301,   304,
   173,   203,   720,    60,    60,    60,   311,    56,   311,  1120,
   197,   375,    60,    60,    60,    60,   435,   480,   415,   146,
   405,   137,   725,   510,   173,   147,   226,   348,   399,   402,
   352,   163,   514,   515,   482,    46,   364,   365,   366,   653,
   643,   302,    69,   173,   758,   378,   379,   380,   381,   993,
   666,   170,   459,  1006,   181,   741,   189,   744,   495,   747,
   748,  1147,   436,   182,   461,   201,   177,   416,   437,   438,
   265,   792,   560,   448,   449,  1121,   446,   406,    27,   373,
   450,   451,   285,   285,   155,    69,   471,   189,   555,   174,
   180,   137,   137,   202,   285,   238,   239,    39,    40,   226,
    41,    42,    43,   137,   462,   823,   708,   169,   171,   459,
   492,   481,   485,   488,   374,   994,    49,  1043,   995,   650,
   493,   178,    60,   203,   410,   940,   412,   206,   224,   231,
   561,   347,   173,   265,   190,   183,  1011,   158,   348,   764,
   348,   620,   623,   207,   154,   350,   158,   158,   311,   850,
   646,   471,   184,   631,   285,   477,   495,   138,   138,    60,
   285,   158,   415,   137,   224,   837,   838,   701,   169,   138,
   463,   153,   464,   498,   375,   499,   170,   170,   238,   239,
   552,   155,   311,   277,   280,   281,    69,   872,   384,   155,
   174,   480,   516,   682,   285,   271,   172,   285,   584,   560,
   906,   907,   908,   587,   663,   510,   137,   653,   887,   799,
   589,   500,   224,   761,   580,   554,   532,   353,   180,   939,
   653,   285,   361,    69,    69,    69,   459,   202,   315,   138,
   137,   185,    69,    69,    69,    69,   201,   170,   272,  1036,
   273,   387,  1037,   390,   392,   394,    49,   585,   400,   403,
   208,   921,   588,   348,   592,    89,   766,   561,   704,   590,
   224,   230,   173,   471,   202,   331,    49,   315,   459,    27,
   429,   178,   138,  1038,   644,   410,   226,  1044,  1045,   334,
   771,   315,   173,   315,   196,   481,   412,   756,    39,    40,
   226,    41,    42,    43,   203,   456,   138,   349,   311,   118,
    89,   119,   580,   593,   224,   415,   373,   599,   209,   280,
   348,    49,   137,   674,   210,   265,   169,   677,   137,   158,
   120,   601,   347,   607,   594,   471,   608,   173,   609,   459,
  1146,    86,   408,   155,   605,   595,   455,   280,    87,   358,
-32768,   374,    69,   137,   750,   224,   348,   283,   174,   441,
   444,   311,   311,   285,   596,   706,   600,   610,   496,   828,
   396,   457,   188,   458,   174,   137,   725,   224,   278,   305,
   602,   428,   306,   459,   307,   272,   397,   273,   189,    69,
   713,   716,  1005,   606,   279,   170,   483,   487,   490,    49,
   549,   155,  1010,   188,   178,    46,  1147,   298,   533,   693,
   429,   272,   694,   273,   695,   173,   532,   231,    89,   189,
    89,   459,   170,   137,   856,   810,   346,   668,    90,   308,
   172,    49,    91,   315,   360,   607,   559,   348,   608,   299,
   609,   454,   428,   696,   669,    56,   126,   173,    92,    93,
    94,   285,   333,   238,   239,    89,  1056,   238,   239,   137,
   856,   201,   137,   342,    60,   897,    49,   315,   226,   610,
   798,   178,   938,   188,   187,  1075,   585,   226,   429,   348,
   324,    89,   173,   902,    49,   459,   137,   119,   491,   189,
   331,   933,    49,   588,   934,   137,   325,   789,   137,   137,
   173,   137,   829,   830,   997,   137,   120,   670,   173,   188,
    60,   563,   453,   565,   566,   567,   568,   569,   570,   203,
   155,   426,   654,   574,   575,   613,   576,   577,   454,   224,
  1052,   204,   198,   199,   224,   301,   472,    86,    49,   854,
   348,   224,   958,   827,    87,   520,   373,   398,   188,   629,
  1055,   638,   189,   599,   173,   667,   593,   959,   601,   224,
   332,   521,   678,   725,   613,   138,   769,   189,   238,   239,
   483,   279,   238,   239,   407,    88,   614,   212,   302,   238,
   239,   374,   533,   315,   348,   697,   737,   285,   779,   205,
   965,   889,   238,   239,   738,  -118,  -118,   853,   409,   238,
   239,    46,   671,   899,   739,   966,   904,   672,   559,   285,
   714,   717,   726,   601,    89,   115,   459,   116,   117,   118,
   427,   119,   348,   226,    90,    49,   459,   226,    91,   702,
   226,    86,   335,   414,   742,   585,   315,   315,    87,   425,
   120,    56,   709,   588,    92,    93,    94,   238,   239,   525,
   338,   745,   201,   593,  1015,   120,   311,   819,   820,   201,
   862,   905,   740,   410,   336,   164,   337,   165,    27,   305,
   665,   535,   306,   306,   307,   307,   705,   412,    86,   208,
   459,   536,    60,   743,    69,    87,   348,   166,    40,   334,
   167,    42,    43,   466,   168,    46,   238,   239,   208,   459,
   746,  1157,   224,   957,    60,   410,   743,   746,    89,   746,
   203,   224,  1017,   964,   412,   943,    88,   535,    90,   308,
    60,   164,    91,   165,    27,   226,  1018,   538,   226,   421,
    69,    60,   422,   467,   226,   703,   126,   951,    92,    93,
    94,   534,    46,    39,    40,   800,    41,    42,    43,   132,
   168,   133,   782,   960,  1022,    89,   209,  1057,  1058,   134,
   601,   135,    57,  1023,   967,    90,    49,  1062,   473,    91,
   208,  1063,    60,   285,  1007,   601,   410,   382,    48,   474,
    60,  1012,    56,   944,   476,    92,    93,    94,   238,   239,
  1020,  1021,   495,   412,   201,  1025,  1026,  1027,  1028,   334,
   226,   825,   826,   508,  1094,  1000,   585,   588,   115,  1059,
   116,   117,   118,  1003,   119,   507,   585,   348,    57,   511,
   588,   840,   202,   331,  1064,  1070,   187,   348,   209,    60,
  1099,   512,    60,   120,  -115,  -115,  1105,   846,   847,   211,
   848,   849,  1071,   513,   180,  1069,   517,  1106,   330,  1073,
  1074,   338,   203,   746,   601,  1133,   774,   224,  -117,  -117,
   423,   224,  1046,   424,   224,  1048,   518,   115,   157,   116,
   117,   118,   164,   119,   165,    27,   339,   285,   526,   746,
    73,   348,   540,   198,   199,   585,  -116,  -116,   731,   340,
   733,   775,   120,   735,    39,    40,   588,    41,    42,    43,
   348,   168,    69,  1107,   746,   439,   749,   164,   139,   165,
    27,   339,   227,   233,   192,   373,   548,   786,   193,   194,
   195,  1122,   159,    73,    69,   551,   452,   176,    73,   501,
    40,   315,   502,    42,    43,   191,   168,   272,   285,   273,
    69,   546,   885,   191,   329,   757,   238,   239,   227,   192,
   374,    69,   787,   193,   194,   195,   -61,   195,   272,   224,
   273,   556,   224,   285,   895,   227,   228,   234,   224,    57,
   731,   735,   192,   227,   262,   263,   193,   194,   195,  1173,
  1174,   241,  1176,  1177,   -61,   285,   274,   275,   -61,   -61,
   -61,  1184,    69,   192,  1187,  1188,  1189,   193,   194,   195,
    69,   355,   228,   343,    57,   344,  1199,   564,   242,   243,
   191,   191,   191,   191,   571,   284,   250,   251,   287,   159,
   252,   253,   254,   557,    73,   531,   855,   159,   326,   523,
   998,   858,   524,   859,   224,   860,   579,   861,   597,   731,
   735,   598,   475,   863,   227,   345,   865,   135,   191,    69,
   228,   867,    69,   192,   431,   356,    73,   193,   194,   195,
   362,    73,    73,    73,   581,   505,   191,    70,   676,   572,
    73,    73,    73,    73,   272,   754,   273,  1039,   755,   388,
  1040,   391,   393,   395,   442,   445,   401,   404,   227,   603,
   597,  1082,   426,   793,  1083,   604,   611,   336,   228,   337,
   336,   164,   337,   165,    27,   193,   194,   195,   432,   156,
    70,  1041,   273,   616,   175,    70,   541,   227,   626,   710,
   863,   865,   634,   503,    40,  1084,   504,    42,    43,   227,
   168,   268,   269,   246,   247,   248,   249,   627,   637,   238,
   239,  1123,   228,   754,   192,   542,   836,   330,   193,   194,
   195,   227,   597,   225,   232,  1019,   191,   945,   116,   117,
   118,   969,   119,   865,   648,   946,   597,   947,   649,  1024,
   559,   159,   191,   192,   654,   227,   543,   193,   194,   195,
    73,   120,   355,   228,   355,   597,   176,   651,  1072,   225,
   797,   233,    86,   272,   664,   273,   559,   673,    57,    87,
   675,   343,   506,   469,   192,   228,   156,   680,   193,   194,
   195,    70,   683,   337,   156,   175,   684,    73,   132,   686,
   497,   191,   191,   191,   522,   687,   186,   910,   699,   159,
   484,   187,   688,   306,  1014,   307,   356,   225,   432,   689,
   690,   822,   354,    70,   824,   234,   478,   232,    70,    70,
    70,   700,   431,   191,   707,   375,    46,    70,    70,    70,
    70,   272,   192,   273,   284,   719,   193,   194,   195,    89,
   331,   192,   721,   842,   730,   193,   194,   195,   722,    90,
    49,   186,   913,    91,   732,   225,   187,   164,   734,   165,
    27,   736,   647,   750,   227,   430,    56,   126,   759,    92,
    93,    94,   751,   227,   752,   753,   432,   791,   227,   691,
    40,   925,   692,    42,    43,   777,   168,   192,   795,   186,
   915,   193,   194,   195,   187,   186,   983,   186,   985,   225,
   187,   191,   187,   227,   192,   619,   622,   625,   193,   194,
   195,   628,   630,   633,   794,   636,   796,   191,   159,   900,
   191,   801,  1001,    86,   802,   803,   431,   228,   156,   731,
    87,   804,   228,   805,   731,   808,   806,    70,   492,   228,
   225,   821,  1004,   175,   192,   191,   831,   192,   193,   194,
   195,   193,   194,   195,    57,   832,   833,   228,   834,   175,
   679,    88,   225,   835,   535,   865,   926,   192,   685,   839,
   865,   193,   194,   195,    70,   845,   851,   731,   856,   852,
   356,   864,   866,   698,   868,    86,   156,    46,   869,   870,
   871,   873,    87,   354,    80,   430,   874,    27,   875,   890,
    89,   891,   232,   901,   865,   911,   284,   914,   715,   718,
    90,    49,   916,   922,    91,   923,    39,    40,   924,    41,
    42,    43,  1047,   220,   942,   935,   928,    56,   936,  1049,
    92,    93,    94,   941,   950,   948,   161,    80,   931,   949,
   933,   952,    80,   962,   974,   968,   227,   192,   970,    46,
   347,   193,   194,   195,   192,   227,   975,   979,   193,   194,
   195,   980,    89,   430,   760,   763,   981,   982,   768,   986,
   987,   773,    90,    49,   988,   778,    91,   781,   989,   785,
   229,   235,    73,   990,   999,   910,   191,   991,   992,    56,
   913,   191,    92,    93,    94,   915,   996,  1009,    27,  1002,
   228,   994,  1029,  1016,   434,   156,  1085,  1035,  1042,   228,
  1033,  1034,   241,   983,   225,   191,   229,    39,    40,   225,
    41,    42,    43,   985,  1050,  1076,   225,  1053,    73,  1077,
  1078,   192,  1079,   161,  1081,   193,   194,   195,    80,   242,
   243,   161,  1080,  1091,   225,  1095,  1096,   250,   251,   238,
   239,   252,   253,   254,  1100,  1101,  1102,  1060,  1061,    86,
  1103,  1110,  1065,  1066,  1067,  1068,    87,   354,   215,   357,
    80,  1111,  1112,  1114,   363,    80,    80,    80,  1113,  1115,
  1116,  1117,  1118,  1119,    80,    80,    80,    80,  1130,  1124,
   216,  1125,  1127,   217,   218,   219,  1128,   479,  1134,  1135,
   306,   227,   307,  1086,  1136,   227,  1104,  1139,   227,   877,
  1108,  1109,   229,  1137,   881,  1138,  1140,  1142,  1143,   884,
  1141,  1144,   433,    46,   221,   222,  1145,   202,   192,  1148,
  1149,  1150,   193,   194,   195,  1151,    89,  1152,  1153,  1154,
   191,  1155,    73,  1158,  1159,  1162,    90,   308,  1160,  1161,
    91,  1163,  1164,  1165,  1166,   228,   229,  1168,   191,   228,
  1167,  1169,   228,    56,   126,   223,    92,    93,    94,    70,
  1170,  1171,  1172,  1175,   583,  1181,   583,  1178,  1179,   583,
  1180,  1190,  1207,  1191,  1192,   161,  1194,   225,  1195,  1200,
  1201,  1202,    86,  1203,    80,  1205,   225,   229,  1208,   121,
    73,   578,   712,   227,   662,   790,   227,   122,   123,   727,
  1182,  1183,   227,  1185,  1186,    70,   256,   809,     0,   229,
     0,  1193,    73,   681,  1196,  1197,  1198,    86,     0,     0,
   124,    80,     0,     0,    87,     0,  1204,     0,    73,     0,
     0,     0,     0,   161,     0,   618,   621,   624,     0,    73,
   357,     0,   433,   632,     0,     0,    46,   228,     0,   235,
   228,     0,     0,     0,     0,   141,   228,     0,     0,    89,
     0,     0,     0,     0,     0,     0,     0,     0,   227,    90,
    49,     0,     0,    91,     0,     0,   125,     0,     0,     0,
    73,    46,     0,     0,     0,    86,    56,   126,    73,    92,
    93,    94,   121,     0,    89,     0,     0,     0,     0,     0,
   122,   123,     0,     0,    90,    49,     0,     0,    91,     0,
   433,     0,     0,     0,     0,     0,     0,     0,     0,    70,
     0,    56,   228,   327,    92,    93,    94,     0,     0,     0,
     0,     0,   225,     0,     0,     0,   225,    73,   583,   225,
    73,   583,     0,   583,     0,     0,   583,     0,     0,    46,
     0,     0,   161,   583,     0,   583,     0,   583,   583,   583,
     0,   229,    89,     0,    86,     0,   229,     0,     0,     0,
     0,    87,    90,    49,     0,     0,    91,    70,     0,   151,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    56,
   126,   229,    92,    93,    94,   762,     0,   765,   767,    70,
   770,   772,   305,   776,     0,   306,   780,   307,   783,   784,
     0,   788,     0,     0,   357,    70,     0,     0,     0,     0,
     0,     0,   583,   583,   583,     0,    70,     0,    46,     0,
     0,     0,     0,     0,   225,     0,     0,   225,     0,     0,
     0,   367,     0,   225,     0,   268,   269,   246,   247,   248,
   249,    90,   308,   238,   239,    91,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    70,   368,   126,
     0,    92,    93,    94,     0,    70,     0,     0,     0,   583,
     0,   857,     0,     0,   583,     0,   583,     0,   583,     0,
   583,   583,   583,   583,    86,     0,   583,     0,     0,   583,
     0,    87,     0,     0,   583,     0,     0,     0,     0,   225,
     0,     0,     0,     0,     0,     0,    80,     0,     0,     0,
     0,     0,     0,     0,    70,     0,     0,    70,     0,     0,
     0,     0,   484,     0,   229,   306,     0,   307,     0,   876,
     0,   878,   879,   229,   880,     0,   882,   883,     0,     0,
     0,   886,   888,     0,     0,     0,     0,   892,    46,   893,
   894,     0,    80,   896,   898,     0,     0,     0,     0,     0,
     0,    89,     0,   583,   583,     0,     0,     0,     0,     0,
     0,    90,    49,     0,     0,    91,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    56,   126,
     0,    92,    93,    94,     0,     0,     0,    87,     0,     0,
   583,     0,     0,     0,     0,     0,   583,     0,   583,     0,
   583,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   148,     0,    23,    24,    88,     0,
     0,   121,     0,    25,     0,    26,    27,    28,    29,   122,
   123,    30,    31,    32,    33,   953,    34,    35,    36,   954,
    37,    38,   955,   956,    46,    39,    40,     3,    41,    42,
    43,     0,   149,   963,     0,    45,    80,    89,     4,     5,
     6,     7,     0,     0,     0,     0,     0,    90,    49,   229,
     0,    91,     8,   229,     0,     0,   229,     0,    46,    47,
    48,     0,     0,     9,    56,     0,    10,    92,    93,    94,
     0,    89,     0,     0,     0,     0,     0,     0,    87,     0,
     0,    90,   150,     0,     0,    91,     0,    50,   151,    51,
    52,    53,    54,    55,    80,     0,     0,  1008,    56,   126,
    57,    92,    93,    94,  1013,     0,     0,     0,     0,   811,
     0,     0,     0,     0,     0,     0,    80,     0,    11,    12,
    13,     0,    14,    15,    16,    17,    18,     0,    19,    20,
    86,     0,    80,     0,     0,    46,     0,   121,     0,   215,
     0,     0,     0,    80,  1051,   122,   123,     0,    89,  1054,
     0,   229,     0,     0,   229,     0,     0,     0,    90,    49,
   229,   216,    91,     0,   217,   218,   219,     0,   264,     0,
   241,   583,   583,     0,     0,   812,   583,   583,   813,    93,
    94,     0,     0,     0,    80,     0,     0,     0,  1087,     0,
  1088,  1089,    80,  1090,    46,   221,   222,   242,   243,   244,
   245,   246,   247,   248,   249,   250,   251,    89,   583,   252,
   253,   254,     0,   583,     0,     0,     0,    90,    49,   583,
   583,    91,     0,     0,   125,     0,   229,     0,     0,     0,
     0,     0,     0,     0,    56,   126,   223,    92,    93,    94,
     0,    80,     0,   148,    80,    23,    24,   583,     0,     0,
   121,     0,   317,     0,    26,    27,    28,    29,   122,   123,
    30,    31,    32,    33,     0,    34,    35,    36,     0,    37,
    38,     0,     0,     0,   318,    40,     0,   319,   291,   320,
     0,   149,     0,     0,    45,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    46,   321,   322,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    89,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    90,   150,     0,     0,    91,     0,    50,   151,    51,    52,
    53,    54,    55,     0,     0,     0,     0,    56,   126,   294,
    92,    93,    94,   148,     0,    23,    24,     0,     0,     0,
   121,     0,    25,     0,    26,    27,    28,    29,   122,   123,
    30,    31,    32,    33,     0,    34,    35,    36,     0,    37,
    38,     0,     0,     0,   527,    40,     0,   528,    42,   529,
    86,   149,     0,     0,    45,     0,     0,    87,     0,   288,
     0,   165,    27,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    46,   530,    48,
     0,   289,    40,     0,   290,   291,   292,     0,   293,     0,
    89,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    90,   150,     0,     0,    91,     0,    50,   151,    51,    52,
    53,    54,    55,     0,    46,   221,   222,    56,   126,    57,
    92,    93,    94,     0,     0,     0,     0,    89,     0,     0,
     0,     0,     0,    86,     0,     0,     0,    90,    49,     0,
   121,    91,   215,   178,     0,     0,     0,     0,   122,   123,
     0,     0,     0,     0,    56,     0,   294,    92,    93,    94,
     0,     0,     0,     0,   417,     0,     0,   418,   218,   419,
    86,   264,     0,     0,     0,     0,     0,   121,     0,   215,
     0,     0,     0,     0,     0,   122,   123,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    46,   420,   222,
     0,   216,     0,     0,   217,   218,   219,     0,   509,     0,
    89,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    90,    49,     0,     0,    91,     0,     0,   125,     0,     0,
     0,     0,     0,     0,    46,   221,   222,    56,   126,   223,
    92,    93,    94,     0,     0,     0,     0,    89,     0,     0,
     0,     0,     0,    86,     0,     0,     0,    90,    49,     0,
   121,    91,   215,     0,   151,     0,     0,     0,   122,   123,
     0,     0,     0,     0,    56,   126,   223,    92,    93,    94,
     0,     0,     0,     0,   417,     0,     0,   418,   218,   419,
    86,   509,     0,     0,     0,     0,     0,    87,     0,   215,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    46,   420,   222,
     0,   417,     0,     0,   418,   218,   419,     0,   479,     0,
    89,   306,     0,   307,     0,     0,     0,     0,     0,     0,
    90,    49,     0,     0,    91,     0,     0,   151,     0,     0,
     0,     0,     0,     0,    46,   420,   222,    56,   126,   223,
    92,    93,    94,     0,     0,     0,     0,    89,     0,     0,
     0,     0,     0,    86,     0,     0,     0,    90,   308,     0,
    87,    91,   215,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    56,   126,   223,    92,    93,    94,
     0,     0,     0,     0,   216,     0,     0,   217,   218,   219,
    86,   652,     0,     0,   306,     0,   307,    87,     0,   215,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    46,   221,   222,
     0,   417,     0,     0,   418,   218,   419,     0,   652,     0,
    89,   306,     0,   307,     0,     0,     0,     0,    86,     0,
    90,    49,     0,     0,    91,    87,     0,   215,     0,     0,
     0,     0,     0,     0,    46,   420,   222,    56,     0,   223,
    92,    93,    94,     0,     0,     0,     0,    89,     0,   417,
     0,     0,   418,   218,   419,    86,   470,    90,    49,     0,
     0,    91,    87,     0,   215,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    56,     0,   223,    92,    93,    94,
     0,     0,    46,   420,   222,     0,   639,     0,     0,   640,
   218,   641,     0,   470,     0,    89,     0,     0,     0,     0,
     0,     0,     0,    86,     0,    90,   150,     0,     0,    91,
    87,   178,   215,     0,     0,     0,     0,     0,     0,    46,
   642,   222,    56,     0,   223,    92,    93,    94,     0,     0,
     0,     0,    89,     0,   216,     0,     0,   217,   218,   219,
    86,   220,    90,    49,     0,     0,    91,    87,   178,   215,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    56,
     0,   223,    92,    93,    94,     0,     0,    46,   221,   222,
     0,   417,     0,     0,   418,   218,   419,     0,   220,     0,
    89,     0,     0,     0,     0,     0,     0,     0,    86,     0,
    90,    49,     0,     0,    91,    87,     0,   215,     0,     0,
     0,     0,     0,     0,    46,   420,   222,    56,     0,   223,
    92,    93,    94,     0,     0,     0,     0,    89,     0,   417,
     0,     0,   418,   218,   419,    86,   807,    90,    49,     0,
     0,    91,    87,     0,   215,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    56,     0,   223,    92,    93,    94,
     0,     0,    46,   420,   222,     0,   639,     0,     0,   640,
   218,   641,     0,   220,     0,    89,     0,     0,     0,     0,
     0,     0,     0,    86,     0,    90,    49,     0,     0,    91,
    87,     0,   215,     0,     0,     0,     0,     0,     0,    46,
   642,   222,    56,     0,   223,    92,    93,    94,     0,     0,
     0,     0,    89,     0,   216,     0,     0,   217,   218,   219,
    86,   909,    90,    49,     0,     0,    91,    87,     0,   215,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    56,
     0,   223,    92,    93,    94,     0,     0,    46,   221,   222,
     0,   216,     0,     0,   217,   218,   219,     0,   912,     0,
    89,     0,     0,     0,     0,     0,     0,     0,    86,     0,
    90,    49,     0,     0,    91,    87,     0,   215,     0,     0,
     0,     0,     0,     0,    46,   221,   222,    56,     0,   223,
    92,    93,    94,     0,     0,     0,     0,    89,     0,   971,
     0,     0,   972,   218,   419,    86,   220,    90,    49,     0,
     0,    91,    87,     0,   215,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    56,     0,   223,    92,    93,    94,
     0,     0,    46,   973,   222,     0,   976,     0,     0,   977,
   218,   419,     0,   220,     0,    89,     0,     0,     0,     0,
     0,     0,     0,    86,     0,    90,    49,     0,     0,    91,
    87,     0,   215,     0,     0,     0,     0,     0,     0,    46,
   978,   222,    56,     0,   223,    92,    93,    94,     0,     0,
     0,     0,    89,     0,   216,     0,     0,   217,   218,   219,
    86,   984,    90,    49,     0,     0,    91,    87,     0,   215,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    56,
     0,   223,    92,    93,    94,    86,     0,    46,   221,   222,
     0,  1030,    87,     0,  1031,   218,   419,    27,   220,     0,
    89,     0,     0,     0,    87,     0,     0,     0,     0,     0,
    90,    49,     0,     0,    91,     0,    39,    40,     0,    41,
    42,    43,     0,   661,    46,  1032,   222,    56,     0,   223,
    92,    93,    94,     0,     0,   814,     0,    89,     0,    86,
    87,     0,     0,     0,     0,     0,   121,    90,    49,    46,
   347,    91,     0,     0,   122,   123,     0,     0,     0,     0,
     0,    46,    89,     0,    56,     0,   223,    92,    93,    94,
     0,    88,    90,    49,    89,     0,    91,    88,     0,     0,
     0,     0,     0,     0,    90,    49,     0,     0,    91,    56,
     0,     0,    92,    93,    94,     0,     0,    46,     0,     0,
     0,   815,     0,    46,   816,    93,    94,     0,    87,     0,
    89,     0,     0,     0,     0,     0,    89,     0,     0,     0,
    90,    49,     0,     0,    91,     0,    90,    49,     0,     0,
    91,     0,     0,     0,     0,     0,     0,   817,     0,    88,
   818,    93,    94,    56,   126,     0,    92,    93,    94,    22,
     0,    23,    24,     0,     0,     0,     0,     0,    25,     0,
    26,    27,    28,    29,     0,    46,    30,    31,    32,    33,
     0,    34,    35,    36,     0,    37,    38,     0,    89,     0,
    39,    40,     0,    41,    42,    43,     0,   351,    90,    49,
    45,     0,    91,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   812,     0,     0,    92,    93,
    94,     0,     0,    46,    47,    48,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    87,    89,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    49,     0,     0,
     0,     0,    50,     0,    51,    52,    53,    54,    55,    22,
     0,    23,    24,    56,     0,    57,    88,     0,    25,     0,
    26,    27,    28,    29,     0,     0,    30,    31,    32,    33,
     0,    34,    35,    36,     0,    37,    38,     0,     0,    87,
    39,    40,    46,    41,    42,    43,    87,    44,     0,     0,
    45,     0,     0,     0,     0,    89,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    90,    49,     0,     0,    91,
    88,     0,     0,    46,    47,    48,     0,    88,     0,     0,
    87,     0,   815,     0,     0,    92,    93,    94,     0,     0,
     0,     0,     0,     0,     0,     0,    46,    49,     0,     0,
     0,     0,    50,    46,    51,    52,    53,    54,    55,    89,
     0,   918,     0,    56,    87,    57,    89,     0,     0,    90,
    49,    87,     0,    91,     0,     0,    90,    49,     0,     0,
    91,     0,     0,     0,     0,     0,   817,    46,     0,    92,
    93,    94,     0,   917,     0,    88,    92,    93,    94,     0,
    89,     0,    88,     0,     0,    87,     0,     0,     0,     0,
    90,    49,    87,     0,    91,     0,     0,     0,     0,     0,
     0,    46,     0,     0,     0,     0,     0,   919,    46,     0,
   920,    93,    94,     0,    89,     0,    88,     0,     0,     0,
     0,    89,     0,    88,    90,    49,    87,     0,    91,     0,
     0,    90,    49,    87,     0,    91,     0,     0,     0,     0,
     0,   919,    46,     0,    92,    93,    94,     0,   812,    46,
     0,  1092,    93,    94,     0,    89,     0,    88,     0,     0,
     0,     0,    89,     0,    88,    90,    49,    87,     0,    91,
     0,     0,    90,    49,    87,     0,    91,     0,     0,     0,
     0,     0,   815,    46,     0,  1093,    93,    94,     0,   812,
    46,     0,  1097,    93,    94,     0,    89,     0,    88,     0,
     0,     0,     0,    89,     0,    88,    90,    49,    87,     0,
    91,     0,     0,    90,    49,    87,     0,    91,     0,     0,
     0,     0,     0,   815,    46,     0,  1098,    93,    94,     0,
   919,    46,     0,  1126,    93,    94,     0,    89,     0,    88,
     0,     0,     0,     0,    89,     0,    88,    90,    49,     0,
     0,    91,     0,     0,    90,    49,     0,     0,    91,     0,
     0,     0,     0,     0,   919,    46,     0,  1129,    93,    94,
     0,   812,    46,     0,  1131,    93,    94,     0,    89,     0,
     0,     0,     0,     0,     0,    89,     0,     0,    90,    49,
     0,     0,    91,     0,     0,    90,    49,     0,     0,    91,
     0,     0,     0,     0,     0,   815,     0,     0,  1132,    93,
    94,     0,   919,     0,     0,  1156,    93,    94
};

static const short yycheck[] = {    13,
   141,   145,     2,    22,   202,   704,   172,   196,   398,     1,
   362,    10,     1,    47,    48,   555,    41,    44,    32,     4,
    41,    46,    10,    50,    42,   149,     1,   151,    32,    32,
     9,    90,    91,    41,    44,     2,    44,    41,    46,   147,
   305,   306,   307,   107,    44,    45,   410,    42,   412,    41,
     8,   415,    41,    13,     9,    10,    11,    12,    41,    14,
    15,    16,    17,    18,    19,   455,    41,    86,   486,   487,
   488,   489,   490,    91,    88,    41,    79,    57,    45,    41,
    46,    32,    47,    48,    13,    65,   107,    91,    80,   110,
    41,    70,   200,    72,    73,    74,    91,    76,    32,    91,
   108,    13,    91,   107,    89,    90,   125,   141,    41,   108,
   124,    71,   131,   112,    41,   107,    95,   283,   107,   285,
   108,    41,   149,    13,   112,   144,     1,   141,    41,   148,
    42,    34,   107,   147,    37,   149,    39,   107,    41,   149,
   839,   151,    71,    77,   342,   107,   146,    67,   110,   149,
   177,   178,   132,   133,   134,   135,   107,    41,   172,    71,
   115,   116,   117,   118,   119,    68,    41,   181,   708,   709,
    41,    42,   186,   187,   107,    41,   141,   177,     1,   146,
   107,    71,   572,   183,   184,   185,   200,   107,   202,    41,
   170,    32,   192,   193,   194,   195,   255,   305,    42,    44,
   210,    41,    42,   327,   107,    41,   220,   172,   208,   209,
   177,   107,   336,   337,   479,    67,   183,   184,   185,   484,
    91,    44,     2,   107,   614,   192,   193,   194,   195,    41,
   495,   196,   398,    47,    41,   599,   107,   601,    79,   603,
   604,   107,   256,    41,     1,    13,    41,    91,   262,   263,
   264,    91,    13,   272,   273,   107,   270,   212,    15,    11,
   274,   275,    32,    32,    44,    45,   293,   107,   376,    49,
    50,    41,    41,    41,    32,    89,    90,    34,    35,   293,
    37,    38,    39,    41,    41,   675,   551,   321,   322,   455,
    32,   305,   306,   307,    46,   107,    91,   996,   110,    42,
    42,    96,   302,    71,    42,   845,    42,    91,    88,    89,
    71,    68,   107,   327,   294,    41,    47,   327,   283,    11,
   285,    91,    91,   107,   351,   491,   336,   337,   342,   719,
   474,   358,    41,    91,    32,   302,    79,   107,   107,   339,
    32,   351,    42,    41,   124,   697,   698,   545,   382,   107,
   107,   351,   109,    91,    32,    91,   321,   322,    89,    90,
   374,   141,   376,   343,   344,   345,   146,   757,   557,   149,
   150,   479,   339,   517,    32,    31,    41,    32,    42,    13,
   798,   799,   800,    42,   492,   509,    41,   652,    46,   654,
    42,    91,   172,    91,   408,   375,    41,   177,   178,    77,
   665,    32,   182,   183,   184,   185,   572,    41,   147,   107,
    41,    41,   192,   193,   194,   195,    13,   382,    74,    34,
    76,   201,    37,   203,   204,   205,    91,    91,   208,   209,
    13,   821,    91,   398,    42,    80,    91,    71,   546,    91,
   220,    41,   107,   470,    41,    42,    91,   186,   614,    15,
   230,    96,   107,    68,   473,    42,   470,   997,   998,    42,
    91,   200,   107,   202,    44,   479,    42,   611,    34,    35,
   484,    37,    38,    39,    71,    41,   107,   491,   492,    74,
    80,    76,   496,    91,   264,    42,    11,    42,    71,   469,
   455,    91,    41,   507,    33,   509,   530,   511,    41,   509,
    95,    42,    68,    34,    91,   532,    37,   107,    39,   675,
    41,     3,    31,   293,    42,    91,    41,   497,    10,    41,
    95,    46,   302,    41,    42,   305,   491,    41,   308,   268,
   269,   545,   546,    32,    91,   549,    91,    68,    31,   683,
    91,   107,    91,   109,   324,    41,    42,   327,    91,    41,
    91,    41,    44,   719,    46,    74,   107,    76,   107,   339,
   560,   561,   952,    91,   107,   530,   305,   306,   307,    91,
    32,   351,   962,    91,    96,    67,   107,    43,   358,    34,
   360,    74,    37,    76,    39,   107,    41,   367,    80,   107,
    80,   757,   557,    41,    42,    91,    91,    42,    90,    91,
    41,    91,    94,   342,    41,    34,   386,   572,    37,    42,
    39,   107,    41,    68,    42,   107,   108,   107,   110,   111,
   112,    32,    42,    89,    90,    80,  1016,    89,    90,    41,
    42,    13,    41,    41,   634,    46,    91,   376,   652,    68,
   654,    96,   840,    91,    46,  1035,    91,   661,   428,   614,
    91,    80,   107,   794,    91,   821,    41,    76,    41,   107,
    42,   107,    91,    91,   110,    41,   107,   634,    41,    41,
   107,    41,   686,   687,   939,    41,    95,    42,   107,    91,
   680,   388,    91,   390,   391,   392,   393,   394,   395,    71,
   470,    42,    32,   400,   401,   107,   403,   404,   107,   479,
    47,    13,    77,    78,   484,     1,    91,     3,    91,   723,
   675,   491,    32,   680,    10,    91,    11,    41,    91,    91,
    47,    91,   107,    42,   107,    91,    91,    47,    42,   509,
    42,   107,   512,    42,   107,   107,    11,   107,    89,    90,
   479,   107,    89,    90,    45,    41,    41,    32,    44,    89,
    90,    46,   532,   492,   719,   535,    42,    32,    11,    71,
    32,   775,    89,    90,    42,    77,    78,   722,   109,    89,
    90,    67,    91,   787,    42,    47,   795,    91,   558,    32,
   560,   561,    91,    42,    80,    70,   952,    72,    73,    74,
    42,    76,   757,   807,    90,    91,   962,   811,    94,     1,
   814,     3,    42,    91,    42,    91,   545,   546,    10,    91,
    95,   107,   551,    91,   110,   111,   112,    89,    90,    42,
    42,    42,    13,    91,   968,    95,   840,    42,    42,    13,
    42,   796,    91,    42,    74,    12,    76,    14,    15,    41,
    41,    32,    44,    44,    46,    46,     1,    42,     3,    13,
  1016,    42,   852,    91,   634,    10,   821,    34,    35,    42,
    37,    38,    39,    33,    41,    67,    89,    90,    13,  1035,
    91,  1136,   652,   887,   874,    42,    91,    91,    80,    91,
    71,   661,    91,   897,    42,   852,    41,    32,    90,    91,
   890,    12,    94,    14,    15,   909,    91,    42,   912,    34,
   680,   901,    37,    32,   918,   107,   108,   874,   110,   111,
   112,    42,    67,    34,    35,   654,    37,    38,    39,   107,
    41,   109,    11,   890,    91,    80,    71,    42,    42,   107,
    42,   109,   109,    91,   901,    90,    91,    42,    32,    94,
    13,    42,   942,    32,   958,    42,    42,    68,    69,    24,
   950,   965,   107,    45,    45,   110,   111,   112,    89,    90,
   974,   975,    79,    42,    13,   979,   980,   981,   982,    42,
   984,   678,   679,    42,    42,   942,    91,    91,    70,    91,
    72,    73,    74,   950,    76,    46,    91,   952,   109,    46,
    91,    41,    41,    42,    91,    91,    46,   962,    71,   999,
    42,    71,  1002,    95,    77,    78,    42,   714,   715,    42,
   717,   718,    91,    71,   794,  1029,     7,    42,    42,  1033,
  1034,    42,    71,    91,    42,    42,    11,   807,    77,    78,
    34,   811,   999,    37,   814,  1002,    45,    70,    44,    72,
    73,    74,    12,    76,    14,    15,    32,    32,    91,    91,
     2,  1016,    42,    77,    78,    91,    77,    78,   587,    45,
   589,    46,    95,   592,    34,    35,    91,    37,    38,    39,
  1035,    41,   852,    91,    91,    42,   605,    12,    30,    14,
    15,    32,    88,    89,    70,    11,    42,    11,    74,    75,
    76,  1091,    44,    45,   874,    77,    42,    49,    50,    34,
    35,   840,    37,    38,    39,    57,    41,    74,    32,    76,
   890,    32,    11,    65,    42,    41,    89,    90,   124,    70,
    46,   901,    46,    74,    75,    76,    42,    76,    74,   909,
    76,    45,   912,    32,    11,   141,    88,    89,   918,   109,
   669,   670,    70,   149,    81,    82,    74,    75,    76,  1163,
  1164,    52,  1166,  1167,    70,    32,    81,    82,    74,    75,
    76,  1175,   942,    70,  1178,  1179,  1180,    74,    75,    76,
   950,   177,   124,   107,   109,   109,  1190,    42,    79,    80,
   132,   133,   134,   135,   107,   137,    87,    88,   140,   141,
    91,    92,    93,    76,   146,    42,   725,   149,   150,    34,
   939,   730,    37,   732,   984,   734,     7,   736,    34,   738,
   739,    37,    42,   742,   220,   107,   745,   109,   170,   999,
   172,   750,  1002,    70,   230,   177,   178,    74,    75,    76,
   182,   183,   184,   185,    91,    42,   188,     2,    42,    41,
   192,   193,   194,   195,    74,    34,    76,    34,    37,   201,
    37,   203,   204,   205,   268,   269,   208,   209,   264,    42,
    34,    34,    42,    37,    37,    42,     4,    74,   220,    76,
    74,    12,    76,    14,    15,    74,    75,    76,   230,    44,
    45,    68,    76,    91,    49,    50,    42,   293,    42,   552,
   819,   820,    44,    34,    35,    68,    37,    38,    39,   305,
    41,    81,    82,    83,    84,    85,    86,    91,    42,    89,
    90,  1091,   264,    34,    70,    42,    37,    42,    74,    75,
    76,   327,    34,    88,    89,    37,   278,   856,    72,    73,
    74,    42,    76,   862,    28,   864,    34,   866,    42,    37,
  1120,   293,   294,    70,    32,   351,    42,    74,    75,    76,
   302,    95,   358,   305,   360,    34,   308,    42,    37,   124,
     1,   367,     3,    74,    42,    76,  1146,    42,   109,    10,
    41,   107,   324,   109,    70,   327,   141,    46,    74,    75,
    76,   146,     7,    76,   149,   150,    42,   339,   107,    46,
   109,   343,   344,   345,   346,    42,    41,    42,    42,   351,
    41,    46,    91,    44,    42,    46,   358,   172,   360,    91,
    91,   674,   177,   178,   677,   367,    45,   182,   183,   184,
   185,    42,   428,   375,    47,    32,    67,   192,   193,   194,
   195,    74,    70,    76,   386,    41,    74,    75,    76,    80,
    42,    70,    42,   706,    42,    74,    75,    76,    44,    90,
    91,    41,    42,    94,    42,   220,    46,    12,    42,    14,
    15,    42,    45,    42,   470,   230,   107,   108,    42,   110,
   111,   112,    91,   479,    91,    91,   428,    76,   484,    34,
    35,    47,    37,    38,    39,    77,    41,    70,    41,    41,
    42,    74,    75,    76,    46,    41,    42,    41,    42,   264,
    46,   453,    46,   509,    70,   457,   458,   459,    74,    75,
    76,   463,   464,   465,    32,   467,    41,   469,   470,    45,
   472,    45,    45,     3,    45,    45,   532,   479,   293,  1058,
    10,    47,   484,    47,  1063,    42,    47,   302,    32,   491,
   305,    41,    45,   308,    70,   497,    42,    70,    74,    75,
    76,    74,    75,    76,   109,    42,    42,   509,    91,   324,
   512,    41,   327,    91,    32,  1094,   829,    70,   520,    42,
  1099,    74,    75,    76,   339,    47,    42,  1106,    42,    44,
   532,    42,    42,   535,    42,     3,   351,    67,    42,    42,
    91,    42,    10,   358,     2,   360,    44,    15,    42,    44,
    80,    42,   367,    41,  1133,    42,   558,    42,   560,   561,
    90,    91,    42,    47,    94,    42,    34,    35,    47,    37,
    38,    39,    45,    41,    44,    42,   107,   107,    42,    45,
   110,   111,   112,    42,    44,    42,    44,    45,   107,    42,
   107,    41,    50,    41,    46,    42,   652,    70,    42,    67,
    68,    74,    75,    76,    70,   661,    46,    46,    74,    75,
    76,    46,    80,   428,   616,   617,    46,    46,   620,    42,
    42,   623,    90,    91,    42,   627,    94,   629,    47,   631,
    88,    89,   634,    41,    44,    42,   638,    41,   107,   107,
    42,   643,   110,   111,   112,    42,    42,    45,    15,    44,
   652,   107,    46,    41,   240,   470,    45,    41,    41,   661,
    46,    46,    52,    42,   479,   667,   124,    34,    35,   484,
    37,    38,    39,    42,    42,    91,   491,    42,   680,    91,
    37,    70,    91,   141,    37,    74,    75,    76,   146,    79,
    80,   149,    91,    42,   509,    47,    47,    87,    88,    89,
    90,    91,    92,    93,    47,    47,    47,  1020,  1021,     3,
    47,    42,  1025,  1026,  1027,  1028,    10,   532,    12,   177,
   178,    42,    42,    42,   182,   183,   184,   185,    91,    42,
    91,    91,    91,    37,   192,   193,   194,   195,    47,    42,
    34,    42,    42,    37,    38,    39,    42,    41,    47,    47,
    44,   807,    46,    45,    77,   811,  1069,    42,   814,   761,
  1073,  1074,   220,   110,   766,   110,   110,    42,    42,   771,
   110,    42,   230,    67,    68,    69,    91,    41,    70,    42,
    42,    42,    74,    75,    76,    42,    80,    42,    42,    42,
   792,    42,   794,   110,   110,    42,    90,    91,   110,   110,
    94,    46,    46,    42,    46,   807,   264,    42,   810,   811,
    46,    42,   814,   107,   108,   109,   110,   111,   112,   634,
    42,    42,   110,    46,   410,    42,   412,    46,    46,   415,
    46,    46,     0,    47,    47,   293,    47,   652,    47,    47,
    47,    47,     3,    47,   302,    47,   661,   305,     0,    10,
   852,   406,   557,   909,   491,   636,   912,    18,    19,   583,
  1173,  1174,   918,  1176,  1177,   680,    99,   663,    -1,   327,
    -1,  1184,   874,   516,  1187,  1188,  1189,     3,    -1,    -1,
    41,   339,    -1,    -1,    10,    -1,  1199,    -1,   890,    -1,
    -1,    -1,    -1,   351,    -1,   457,   458,   459,    -1,   901,
   358,    -1,   360,   465,    -1,    -1,    67,   909,    -1,   367,
   912,    -1,    -1,    -1,    -1,    41,   918,    -1,    -1,    80,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   984,    90,
    91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
   942,    67,    -1,    -1,    -1,     3,   107,   108,   950,   110,
   111,   112,    10,    -1,    80,    -1,    -1,    -1,    -1,    -1,
    18,    19,    -1,    -1,    90,    91,    -1,    -1,    94,    -1,
   428,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   794,
    -1,   107,   984,    41,   110,   111,   112,    -1,    -1,    -1,
    -1,    -1,   807,    -1,    -1,    -1,   811,   999,   584,   814,
  1002,   587,    -1,   589,    -1,    -1,   592,    -1,    -1,    67,
    -1,    -1,   470,   599,    -1,   601,    -1,   603,   604,   605,
    -1,   479,    80,    -1,     3,    -1,   484,    -1,    -1,    -1,
    -1,    10,    90,    91,    -1,    -1,    94,   852,    -1,    97,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
   108,   509,   110,   111,   112,   617,    -1,   619,   620,   874,
   622,   623,    41,   625,    -1,    44,   628,    46,   630,   631,
    -1,   633,    -1,    -1,   532,   890,    -1,    -1,    -1,    -1,
    -1,    -1,   668,   669,   670,    -1,   901,    -1,    67,    -1,
    -1,    -1,    -1,    -1,   909,    -1,    -1,   912,    -1,    -1,
    -1,    80,    -1,   918,    -1,    81,    82,    83,    84,    85,
    86,    90,    91,    89,    90,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   942,   107,   108,
    -1,   110,   111,   112,    -1,   950,    -1,    -1,    -1,   725,
    -1,   727,    -1,    -1,   730,    -1,   732,    -1,   734,    -1,
   736,   737,   738,   739,     3,    -1,   742,    -1,    -1,   745,
    -1,    10,    -1,    -1,   750,    -1,    -1,    -1,    -1,   984,
    -1,    -1,    -1,    -1,    -1,    -1,   634,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   999,    -1,    -1,  1002,    -1,    -1,
    -1,    -1,    41,    -1,   652,    44,    -1,    46,    -1,   761,
    -1,   763,   764,   661,   766,    -1,   768,   769,    -1,    -1,
    -1,   773,   774,    -1,    -1,    -1,    -1,   779,    67,   781,
   782,    -1,   680,   785,   786,    -1,    -1,    -1,    -1,    -1,
    -1,    80,    -1,   819,   820,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    91,    -1,    -1,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
    -1,   110,   111,   112,    -1,    -1,    -1,    10,    -1,    -1,
   856,    -1,    -1,    -1,    -1,    -1,   862,    -1,   864,    -1,
   866,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,     5,     6,    41,    -1,
    -1,    10,    -1,    12,    -1,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,   877,    25,    26,    27,   881,
    29,    30,   884,   885,    67,    34,    35,     5,    37,    38,
    39,    -1,    41,   895,    -1,    44,   794,    80,    16,    17,
    18,    19,    -1,    -1,    -1,    -1,    -1,    90,    91,   807,
    -1,    94,    30,   811,    -1,    -1,   814,    -1,    67,    68,
    69,    -1,    -1,    41,   107,    -1,    44,   110,   111,   112,
    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    10,    -1,
    -1,    90,    91,    -1,    -1,    94,    -1,    96,    97,    98,
    99,   100,   101,   102,   852,    -1,    -1,   959,   107,   108,
   109,   110,   111,   112,   966,    -1,    -1,    -1,    -1,    41,
    -1,    -1,    -1,    -1,    -1,    -1,   874,    -1,    96,    97,
    98,    -1,   100,   101,   102,   103,   104,    -1,   106,   107,
     3,    -1,   890,    -1,    -1,    67,    -1,    10,    -1,    12,
    -1,    -1,    -1,   901,  1006,    18,    19,    -1,    80,  1011,
    -1,   909,    -1,    -1,   912,    -1,    -1,    -1,    90,    91,
   918,    34,    94,    -1,    37,    38,    39,    -1,    41,    -1,
    52,  1057,  1058,    -1,    -1,   107,  1062,  1063,   110,   111,
   112,    -1,    -1,    -1,   942,    -1,    -1,    -1,  1050,    -1,
  1052,  1053,   950,  1055,    67,    68,    69,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    80,  1094,    91,
    92,    93,    -1,  1099,    -1,    -1,    -1,    90,    91,  1105,
  1106,    94,    -1,    -1,    97,    -1,   984,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
    -1,   999,    -1,     3,  1002,     5,     6,  1133,    -1,    -1,
    10,    -1,    12,    -1,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    -1,    25,    26,    27,    -1,    29,
    30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    91,    -1,    -1,    94,    -1,    96,    97,    98,    99,
   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,   109,
   110,   111,   112,     3,    -1,     5,     6,    -1,    -1,    -1,
    10,    -1,    12,    -1,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    -1,    25,    26,    27,    -1,    29,
    30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
     3,    41,    -1,    -1,    44,    -1,    -1,    10,    -1,    12,
    -1,    14,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
    -1,    34,    35,    -1,    37,    38,    39,    -1,    41,    -1,
    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    91,    -1,    -1,    94,    -1,    96,    97,    98,    99,
   100,   101,   102,    -1,    67,    68,    69,   107,   108,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    80,    -1,    -1,
    -1,    -1,    -1,     3,    -1,    -1,    -1,    90,    91,    -1,
    10,    94,    12,    96,    -1,    -1,    -1,    -1,    18,    19,
    -1,    -1,    -1,    -1,   107,    -1,   109,   110,   111,   112,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    38,    39,
     3,    41,    -1,    -1,    -1,    -1,    -1,    10,    -1,    12,
    -1,    -1,    -1,    -1,    -1,    18,    19,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    -1,
    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,
    -1,    -1,    -1,    -1,    67,    68,    69,   107,   108,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    80,    -1,    -1,
    -1,    -1,    -1,     3,    -1,    -1,    -1,    90,    91,    -1,
    10,    94,    12,    -1,    97,    -1,    -1,    -1,    18,    19,
    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    38,    39,
     3,    41,    -1,    -1,    -1,    -1,    -1,    10,    -1,    12,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    -1,
    80,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
    90,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,
    -1,    -1,    -1,    -1,    67,    68,    69,   107,   108,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    80,    -1,    -1,
    -1,    -1,    -1,     3,    -1,    -1,    -1,    90,    91,    -1,
    10,    94,    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    38,    39,
     3,    41,    -1,    -1,    44,    -1,    46,    10,    -1,    12,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    -1,
    80,    44,    -1,    46,    -1,    -1,    -1,    -1,     3,    -1,
    90,    91,    -1,    -1,    94,    10,    -1,    12,    -1,    -1,
    -1,    -1,    -1,    -1,    67,    68,    69,   107,    -1,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    80,    -1,    34,
    -1,    -1,    37,    38,    39,     3,    41,    90,    91,    -1,
    -1,    94,    10,    -1,    12,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,    -1,   109,   110,   111,   112,
    -1,    -1,    67,    68,    69,    -1,    34,    -1,    -1,    37,
    38,    39,    -1,    41,    -1,    80,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     3,    -1,    90,    91,    -1,    -1,    94,
    10,    96,    12,    -1,    -1,    -1,    -1,    -1,    -1,    67,
    68,    69,   107,    -1,   109,   110,   111,   112,    -1,    -1,
    -1,    -1,    80,    -1,    34,    -1,    -1,    37,    38,    39,
     3,    41,    90,    91,    -1,    -1,    94,    10,    96,    12,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
    -1,   109,   110,   111,   112,    -1,    -1,    67,    68,    69,
    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    -1,
    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    90,    91,    -1,    -1,    94,    10,    -1,    12,    -1,    -1,
    -1,    -1,    -1,    -1,    67,    68,    69,   107,    -1,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    80,    -1,    34,
    -1,    -1,    37,    38,    39,     3,    41,    90,    91,    -1,
    -1,    94,    10,    -1,    12,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,    -1,   109,   110,   111,   112,
    -1,    -1,    67,    68,    69,    -1,    34,    -1,    -1,    37,
    38,    39,    -1,    41,    -1,    80,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     3,    -1,    90,    91,    -1,    -1,    94,
    10,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,    67,
    68,    69,   107,    -1,   109,   110,   111,   112,    -1,    -1,
    -1,    -1,    80,    -1,    34,    -1,    -1,    37,    38,    39,
     3,    41,    90,    91,    -1,    -1,    94,    10,    -1,    12,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
    -1,   109,   110,   111,   112,    -1,    -1,    67,    68,    69,
    -1,    34,    -1,    -1,    37,    38,    39,    -1,    41,    -1,
    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    90,    91,    -1,    -1,    94,    10,    -1,    12,    -1,    -1,
    -1,    -1,    -1,    -1,    67,    68,    69,   107,    -1,   109,
   110,   111,   112,    -1,    -1,    -1,    -1,    80,    -1,    34,
    -1,    -1,    37,    38,    39,     3,    41,    90,    91,    -1,
    -1,    94,    10,    -1,    12,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,    -1,   109,   110,   111,   112,
    -1,    -1,    67,    68,    69,    -1,    34,    -1,    -1,    37,
    38,    39,    -1,    41,    -1,    80,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     3,    -1,    90,    91,    -1,    -1,    94,
    10,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,    67,
    68,    69,   107,    -1,   109,   110,   111,   112,    -1,    -1,
    -1,    -1,    80,    -1,    34,    -1,    -1,    37,    38,    39,
     3,    41,    90,    91,    -1,    -1,    94,    10,    -1,    12,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
    -1,   109,   110,   111,   112,     3,    -1,    67,    68,    69,
    -1,    34,    10,    -1,    37,    38,    39,    15,    41,    -1,
    80,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,
    90,    91,    -1,    -1,    94,    -1,    34,    35,    -1,    37,
    38,    39,    -1,    41,    67,    68,    69,   107,    -1,   109,
   110,   111,   112,    -1,    -1,    41,    -1,    80,    -1,     3,
    10,    -1,    -1,    -1,    -1,    -1,    10,    90,    91,    67,
    68,    94,    -1,    -1,    18,    19,    -1,    -1,    -1,    -1,
    -1,    67,    80,    -1,   107,    -1,   109,   110,   111,   112,
    -1,    41,    90,    91,    80,    -1,    94,    41,    -1,    -1,
    -1,    -1,    -1,    -1,    90,    91,    -1,    -1,    94,   107,
    -1,    -1,   110,   111,   112,    -1,    -1,    67,    -1,    -1,
    -1,   107,    -1,    67,   110,   111,   112,    -1,    10,    -1,
    80,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
    90,    91,    -1,    -1,    94,    -1,    90,    91,    -1,    -1,
    94,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    41,
   110,   111,   112,   107,   108,    -1,   110,   111,   112,     3,
    -1,     5,     6,    -1,    -1,    -1,    -1,    -1,    12,    -1,
    14,    15,    16,    17,    -1,    67,    20,    21,    22,    23,
    -1,    25,    26,    27,    -1,    29,    30,    -1,    80,    -1,
    34,    35,    -1,    37,    38,    39,    -1,    41,    90,    91,
    44,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,   110,   111,
   112,    -1,    -1,    67,    68,    69,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    10,    80,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,
    -1,    -1,    96,    -1,    98,    99,   100,   101,   102,     3,
    -1,     5,     6,   107,    -1,   109,    41,    -1,    12,    -1,
    14,    15,    16,    17,    -1,    -1,    20,    21,    22,    23,
    -1,    25,    26,    27,    -1,    29,    30,    -1,    -1,    10,
    34,    35,    67,    37,    38,    39,    10,    41,    -1,    -1,
    44,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    90,    91,    -1,    -1,    94,
    41,    -1,    -1,    67,    68,    69,    -1,    41,    -1,    -1,
    10,    -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    67,    91,    -1,    -1,
    -1,    -1,    96,    67,    98,    99,   100,   101,   102,    80,
    -1,    41,    -1,   107,    10,   109,    80,    -1,    -1,    90,
    91,    10,    -1,    94,    -1,    -1,    90,    91,    -1,    -1,
    94,    -1,    -1,    -1,    -1,    -1,   107,    67,    -1,   110,
   111,   112,    -1,   107,    -1,    41,   110,   111,   112,    -1,
    80,    -1,    41,    -1,    -1,    10,    -1,    -1,    -1,    -1,
    90,    91,    10,    -1,    94,    -1,    -1,    -1,    -1,    -1,
    -1,    67,    -1,    -1,    -1,    -1,    -1,   107,    67,    -1,
   110,   111,   112,    -1,    80,    -1,    41,    -1,    -1,    -1,
    -1,    80,    -1,    41,    90,    91,    10,    -1,    94,    -1,
    -1,    90,    91,    10,    -1,    94,    -1,    -1,    -1,    -1,
    -1,   107,    67,    -1,   110,   111,   112,    -1,   107,    67,
    -1,   110,   111,   112,    -1,    80,    -1,    41,    -1,    -1,
    -1,    -1,    80,    -1,    41,    90,    91,    10,    -1,    94,
    -1,    -1,    90,    91,    10,    -1,    94,    -1,    -1,    -1,
    -1,    -1,   107,    67,    -1,   110,   111,   112,    -1,   107,
    67,    -1,   110,   111,   112,    -1,    80,    -1,    41,    -1,
    -1,    -1,    -1,    80,    -1,    41,    90,    91,    10,    -1,
    94,    -1,    -1,    90,    91,    10,    -1,    94,    -1,    -1,
    -1,    -1,    -1,   107,    67,    -1,   110,   111,   112,    -1,
   107,    67,    -1,   110,   111,   112,    -1,    80,    -1,    41,
    -1,    -1,    -1,    -1,    80,    -1,    41,    90,    91,    -1,
    -1,    94,    -1,    -1,    90,    91,    -1,    -1,    94,    -1,
    -1,    -1,    -1,    -1,   107,    67,    -1,   110,   111,   112,
    -1,   107,    67,    -1,   110,   111,   112,    -1,    80,    -1,
    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    90,    91,
    -1,    -1,    94,    -1,    -1,    90,    91,    -1,    -1,    94,
    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,   110,   111,
   112,    -1,   107,    -1,    -1,   110,   111,   112
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 132 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 162 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 163 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 167 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 168 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 169 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 170 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 172 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 176 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 177 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 178 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 179 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 180 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 181 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 182 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 183 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 186 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 187 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 188 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 189 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 191 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 196 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 200 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 201 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 206 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 209 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 214 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 216 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 224 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 328 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 329 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 332 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 333 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 334 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 335 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 336 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 40:
#line 337 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 338 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 339 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 340 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 341 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 45:
#line 342 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 46:
#line 343 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 47:
#line 344 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 48:
#line 345 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 49:
#line 346 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 347 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 51:
#line 348 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 349 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 53:
#line 350 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 54:
#line 353 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 55:
#line 356 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 56:
#line 360 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 57:
#line 364 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 58:
#line 373 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 384 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 61:
#line 385 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 62:
#line 387 "msv.y"
{
			CSyntaxNode * p;
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 63:
#line 398 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 64:
#line 402 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 65:
#line 406 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 66:
#line 412 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 67:
#line 413 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 68:
#line 419 "msv.y"
{
			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-7].returntype);
	   ;
    break;}
case 69:
#line 424 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, POINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-8].returntype);
	   ;
    break;}
case 70:
#line 430 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE,yyvsp[-4].tnode, DOUBLEPOINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,yyvsp[-9].returntype);
	   ;
    break;}
case 71:
#line 436 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-7].cString, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 72:
#line 442 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-8].cString, yyvsp[-4].tnode, POINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 73:
#line 448 "msv.y"
{

			CSyntaxNode* pChild0= new CSyntaxNode(FUNC_RETURN_TYPE, yyvsp[-9].cString, yyvsp[-4].tnode, DOUBLEPOINTERTYPE);
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, pChild0, yyvsp[-1].tnode, NULL,STRUCTTYPE);
	   ;
    break;}
case 74:
#line 458 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 75:
#line 463 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 76:
#line 468 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 77:
#line 477 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 78:
#line 485 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 79:
#line 496 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 80:
#line 509 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 81:
#line 510 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 82:
#line 511 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 83:
#line 516 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 84:
#line 520 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 85:
#line 524 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 86:
#line 528 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 87:
#line 532 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 88:
#line 536 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 89:
#line 541 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 90:
#line 544 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 91:
#line 548 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 92:
#line 553 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 93:
#line 564 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 94:
#line 565 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 95:
#line 566 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 96:
#line 567 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 97:
#line 568 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 98:
#line 569 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 99:
#line 577 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 100:
#line 581 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 101:
#line 585 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 102:
#line 590 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 103:
#line 596 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 104:
#line 601 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 105:
#line 608 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 106:
#line 614 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 107:
#line 624 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 108:
#line 625 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 626 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 110:
#line 631 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 111:
#line 638 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 112:
#line 641 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 113:
#line 642 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 114:
#line 648 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 115:
#line 651 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 116:
#line 652 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 117:
#line 653 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 118:
#line 654 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 119:
#line 655 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 120:
#line 656 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 121:
#line 657 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 122:
#line 661 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 663 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 124:
#line 665 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 125:
#line 667 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 126:
#line 669 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 127:
#line 671 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 128:
#line 673 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 129:
#line 675 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 130:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 131:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 132:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 133:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 134:
#line 685 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 135:
#line 689 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 136:
#line 690 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 137:
#line 693 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 138:
#line 694 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 139:
#line 695 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 140:
#line 697 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 141:
#line 698 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 142:
#line 699 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 143:
#line 702 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 144:
#line 706 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 145:
#line 708 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 146:
#line 710 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 147:
#line 712 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 148:
#line 714 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 149:
#line 716 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 150:
#line 717 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 151:
#line 722 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 152:
#line 723 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 153:
#line 724 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 154:
#line 730 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 155:
#line 731 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 156:
#line 732 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 157:
#line 734 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 158:
#line 736 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 159:
#line 738 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 160:
#line 739 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 161:
#line 744 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 162:
#line 745 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 163:
#line 747 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 164:
#line 749 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 165:
#line 754 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 166:
#line 755 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 167:
#line 759 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 168:
#line 760 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 169:
#line 764 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 170:
#line 765 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 171:
#line 769 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 770 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 173:
#line 771 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 174:
#line 772 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 175:
#line 773 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 775 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 776 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 777 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 778 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 779 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 181:
#line 780 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 182:
#line 781 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 183:
#line 782 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 184:
#line 783 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 185:
#line 786 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 186:
#line 787 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 187:
#line 788 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 188:
#line 789 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 189:
#line 790 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 190:
#line 791 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 191:
#line 792 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 192:
#line 793 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 193:
#line 796 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 194:
#line 797 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 195:
#line 801 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 196:
#line 802 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 197:
#line 803 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 198:
#line 804 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 199:
#line 811 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 200:
#line 815 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 201:
#line 823 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 202:
#line 835 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 203:
#line 839 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 848 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 205:
#line 860 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 206:
#line 864 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 207:
#line 872 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 208:
#line 875 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 209:
#line 876 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 210:
#line 881 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 211:
#line 885 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 212:
#line 889 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 213:
#line 894 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 214:
#line 897 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 215:
#line 906 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 216:
#line 907 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 217:
#line 908 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 218:
#line 911 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 219:
#line 912 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 220:
#line 915 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 221:
#line 916 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 222:
#line 919 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 223:
#line 920 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 224:
#line 921 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 225:
#line 922 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 226:
#line 923 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 227:
#line 924 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 228:
#line 927 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 229:
#line 928 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 230:
#line 929 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 231:
#line 930 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 232:
#line 931 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 233:
#line 932 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 234:
#line 934 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 235:
#line 935 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 236:
#line 937 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 237:
#line 938 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 238:
#line 940 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 239:
#line 948 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 240:
#line 949 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 241:
#line 950 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 242:
#line 951 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 243:
#line 952 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 244:
#line 958 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 245:
#line 960 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 246:
#line 961 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 247:
#line 964 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 248:
#line 965 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 249:
#line 966 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 250:
#line 969 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 251:
#line 970 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 973 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 253:
#line 974 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 254:
#line 977 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 255:
#line 978 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 256:
#line 981 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 257:
#line 982 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 258:
#line 987 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 259:
#line 988 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 260:
#line 989 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 261:
#line 990 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 262:
#line 991 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 263:
#line 992 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 264:
#line 1000 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 265:
#line 1001 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 266:
#line 1005 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 267:
#line 1006 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 268:
#line 1013 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 269:
#line 1017 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 270:
#line 1022 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 271:
#line 1028 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
	   ;
    break;}
case 272:
#line 1034 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
	   ;
    break;}
case 273:
#line 1040 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 274:
#line 1049 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 275:
#line 1055 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
	   ;
    break;}
case 276:
#line 1061 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
	   ;
    break;}
case 277:
#line 1067 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 278:
#line 1076 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 279:
#line 1080 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 280:
#line 1084 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 281:
#line 1090 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 282:
#line 1094 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 283:
#line 1098 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 284:
#line 1104 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 285:
#line 1110 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 286:
#line 1118 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 287:
#line 1126 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 288:
#line 1133 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 289:
#line 1139 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 290:
#line 1145 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 291:
#line 1149 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 292:
#line 1156 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 293:
#line 1161 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 294:
#line 1165 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 295:
#line 1169 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 296:
#line 1173 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 297:
#line 1179 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 298:
#line 1185 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 299:
#line 1191 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 300:
#line 1198 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 301:
#line 1206 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 302:
#line 1212 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 303:
#line 1227 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 304:
#line 1232 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 305:
#line 1237 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 306:
#line 1245 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 307:
#line 1252 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 308:
#line 1258 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 309:
#line 1264 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 310:
#line 1267 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1277 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 312:
#line 1281 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 313:
#line 1290 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 314:
#line 1291 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 315:
#line 1296 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 316:
#line 1300 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 317:
#line 1309 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 318:
#line 1310 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 319:
#line 1318 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 320:
#line 1320 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 321:
#line 1327 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 322:
#line 1329 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 323:
#line 1335 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 324:
#line 1336 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 325:
#line 1340 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 326:
#line 1345 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 327:
#line 1350 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 328:
#line 1355 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 329:
#line 1362 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 330:
#line 1365 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 331:
#line 1366 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 332:
#line 1372 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 333:
#line 1374 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 334:
#line 1394 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 335:
#line 1395 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 336:
#line 1397 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 337:
#line 1399 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 338:
#line 1400 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 339:
#line 1406 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 340:
#line 1413 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 341:
#line 1421 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 342:
#line 1429 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 343:
#line 1433 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 344:
#line 1437 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 345:
#line 1443 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 346:
#line 1447 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 347:
#line 1453 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 348:
#line 1457 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 349:
#line 1464 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 350:
#line 1473 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 351:
#line 1474 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 352:
#line 1480 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 353:
#line 1481 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 354:
#line 1485 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 355:
#line 1486 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 356:
#line 1491 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 357:
#line 1492 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 358:
#line 1493 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1494 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 360:
#line 1495 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 361:
#line 1498 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 362:
#line 1499 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 363:
#line 1500 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 364:
#line 1506 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 365:
#line 1507 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 366:
#line 1508 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1510 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1511 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1512 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1514 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1515 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1516 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1517 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1519 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1520 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1521 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1522 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1523 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1524 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 380:
#line 1525 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 381:
#line 1529 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 382:
#line 1530 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 383:
#line 1531 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 384:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 385:
#line 1533 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 386:
#line 1534 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 387:
#line 1535 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1537 "msv.y"
