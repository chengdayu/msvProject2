
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	IF	262
#define	ELSE	263
#define	EMPTY	264
#define	AWAIT	265
#define	PROJECTION	266
#define	PBEGIN	267
#define	PEND	268
#define	POINTERNULL	269
#define	ARRAY	270
#define	STRUCT	271
#define	DOT	272
#define	UNION	273
#define	FILEDECLARATION	274
#define	MORE	275
#define	DEFINE	276
#define	MY_TRUE	277
#define	MY_FALSE	278
#define	EXIST	279
#define	FRAME	280
#define	FOR	281
#define	WHILE	282
#define	DO	283
#define	TRUE	284
#define	FALSE	285
#define	REPEAT	286
#define	UNTIL	287
#define	DISPLAY	288
#define	SKIP	289
#define	THEN	290
#define	COMMA	291
#define	COLON	292
#define	INTDECLARATION	293
#define	STRDECLARATION	294
#define	POINTERDECLARATION	295
#define	CHARDECLARATION	296
#define	VOIDDECLARATION	297
#define	FLOATDECLARATION	298
#define	LISTDECLARATION	299
#define	OPEN_PAR	300
#define	CLOSE_PAR	301
#define	TIMES	302
#define	OPEN_BPAR	303
#define	CLOSE_BPAR	304
#define	OPEN_MPAR	305
#define	CLOSE_MPAR	306
#define	FUNCTION	307
#define	OVER	308
#define	CYLINDER	309
#define	OVEREP	310
#define	INTER_OR	311
#define	NON_DETERMINED	312
#define	SEND	313
#define	RECEIVE	314
#define	PROCESS	315
#define	CHANNEL	316
#define	PUT	317
#define	GET	318
#define	ERROR_TOKEN	319
#define	STRFUNCHEAD	320
#define	STRFUNCTAIL	321
#define	STRFUNCCAT	322
#define	STRFUNCCMP	323
#define	STRFUNCCPY	324
#define	STRFUNCLEN	325
#define	EXTERN	326
#define	UNSIGNED	327
#define	SIGNED	328
#define	CHOP	329
#define	IMPLY	330
#define	IFF	331
#define	PROPIMPLY	332
#define	OR	333
#define	PARALLEL	334
#define	AND	335
#define	ASS_P	336
#define	ASS_N	337
#define	CON	338
#define	ADDRESS	339
#define	NE	340
#define	EQ	341
#define	GE	342
#define	LE	343
#define	GT	344
#define	LT	345
#define	LST	346
#define	RST	347
#define	ADD	348
#define	SUB	349
#define	MUL	350
#define	DIV	351
#define	MOD	352
#define	BNE	353
#define	CHOPSTAR	354
#define	NEXT	355
#define	NEGATION	356
#define	LENGTH	357
#define	REQUEST	358
#define	FINAL	359
#define	KEEP	360
#define	ALWAYS	361
#define	HALT	362
#define	W_NEXT	363
#define	PREFIX	364
#define	SOMETIMES	365
#define	ID	366
#define	STRLITERAL	367
#define	STRUCT_TYPE	368
#define	INTLITERAL	369
#define	FLOATLITERAL	370
#define	CHARLITERAL	371

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1171
#define	YYFLAG		-32768
#define	YYNTBASE	117

#define YYTRANSLATE(x) ((unsigned)(x) <= 371 ? yytranslate[x] : 191)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   216,
   226,   228,   230,   238,   242,   244,   248,   250,   251,   256,
   262,   267,   272,   275,   278,   281,   284,   286,   289,   292,
   296,   300,   304,   308,   316,   325,   337,   351,   353,   355,
   357,   359,   361,   363,   366,   373,   378,   384,   390,   399,
   408,   411,   414,   417,   418,   425,   433,   434,   437,   441,
   443,   445,   447,   449,   453,   456,   458,   470,   483,   495,
   507,   525,   544,   562,   581,   601,   620,   638,   657,   675,
   677,   679,   681,   683,   685,   696,   700,   702,   707,   713,
   725,   738,   750,   762,   775,   779,   783,   786,   787,   790,
   793,   796,   804,   811,   816,   820,   822,   826,   830,   836,
   838,   842,   845,   846,   848,   852,   854,   857,   860,   862,
   864,   866,   868,   870,   872,   876,   878,   880,   882,   884,
   886,   888,   890,   892,   894,   896,   898,   900,   902,   904,
   908,   910,   912,   916,   921,   926,   931,   936,   941,   946,
   950,   954,   958,   959,   962,   965,   968,   971,   974,   978,
   983,   988,   993,   999,  1005,  1011,  1017,  1023,  1030,  1036,
  1042,  1049,  1055,  1062,  1070,  1077,  1084,  1092,  1099,  1106,
  1112,  1120,  1127,  1129,  1131,  1134,  1138,  1142,  1146,  1150,
  1152,  1154,  1156,  1160,  1164,  1168,  1172,  1176,  1180,  1184,
  1188,  1192,  1196,  1198,  1200,  1202,  1204,  1206,  1208,  1211,
  1214,  1216,  1218,  1222,  1225,  1229,  1234,  1240,  1245,  1249,
  1254,  1260,  1265,  1268,  1272,  1277,  1280,  1284,  1289,  1294,
  1300,  1308,  1313,  1317,  1323,  1332,  1333,  1338,  1342,  1347,
  1352,  1358,  1364,  1370,  1376,  1383,  1393,  1394,  1402,  1412,
  1421,  1427,  1432,  1435,  1438,  1440,  1441,  1444,  1448,  1455,
  1456,  1459,  1463,  1466,  1470,  1473,  1475,  1479,  1481,  1483,
  1485,  1487,  1491,  1492,  1495,  1496,  1500,  1502,  1505,  1509,
  1513,  1517,  1521,  1527,  1537,  1539,  1541,  1542,  1544,  1545,
  1547,  1548,  1556,  1564,  1570,  1573,  1575,  1576,  1582,  1585,
  1586,  1591,  1597,  1598,  1602,  1607,  1613,  1618,  1624,  1629,
  1630,  1634,  1638,  1643,  1648,  1653,  1658,  1663,  1668,  1673,
  1678,  1685,  1690,  1695,  1700,  1707,  1711,  1715,  1720,  1724,
  1725,  1729,  1733,  1737,  1741,  1744
};

static const short yyrhs[] = {   118,
   121,     0,    12,   119,    13,     0,     0,   119,    80,   119,
     0,   119,    78,   119,     0,   119,    76,   119,     0,   119,
    77,   119,     0,   119,    74,   119,     0,   106,   119,     0,
   105,   119,     0,   110,   119,     0,   108,   119,     0,   100,
   119,     0,    34,     0,    22,     0,    23,     0,   102,   141,
     0,     9,     0,    20,     0,   107,   119,     0,   104,   119,
     0,   101,   119,     0,    48,   119,   120,    49,    11,    48,
   119,    49,     0,   111,     0,    21,   111,    37,   156,     0,
   119,    99,     0,    45,   119,    46,     0,    36,   119,   120,
     0,     0,   121,    80,   121,     0,   121,    78,   121,     0,
   121,    74,   121,     0,   132,     0,   127,     0,   180,     0,
   183,     0,   174,     0,   175,     0,   176,     0,   100,    45,
   121,    46,     0,   105,    45,   121,    46,     0,   106,    45,
   121,    46,     0,    10,    45,   155,    46,     0,    31,    48,
   121,    49,    32,    45,   155,    46,     0,    34,     0,     9,
     0,    20,     0,   102,    45,   141,    46,     0,   187,     0,
   185,     0,    29,     0,    30,     0,   104,    45,   121,    46,
     0,   121,    79,   121,     0,    45,   173,    46,    75,    50,
   121,    51,     0,    25,    45,   166,   171,    46,    80,    45,
   121,    46,     0,    48,   121,   172,    49,    11,   164,     0,
    48,   121,    49,    11,   164,     0,    52,   111,    45,   160,
    46,    48,   121,    49,     0,    21,   111,    45,   160,    46,
    81,    48,   123,    49,     0,   125,     0,   124,     0,    24,
   166,   161,    37,    48,   121,    49,     0,    45,   121,    46,
     0,   127,     0,   127,    80,   122,     0,   121,     0,     0,
   111,    45,   162,    46,     0,    71,   111,    45,   162,    46,
     0,   138,    45,   162,    46,     0,   126,    48,   122,    49,
     0,    16,   111,     0,    18,   111,     0,    73,   128,     0,
    72,   128,     0,   128,     0,   129,   130,     0,   113,   130,
     0,    16,   111,   130,     0,    18,   111,   130,     0,    16,
   113,   130,     0,    18,   113,   130,     0,    45,    95,   166,
    46,    45,   160,    46,     0,    45,    95,    95,   166,    46,
    45,   160,    46,     0,    45,    95,   111,    50,   141,   139,
    51,    46,    45,   160,    46,     0,    45,    95,   111,    50,
   141,   139,    51,    46,    45,   160,    46,    81,   148,     0,
    38,     0,    43,     0,    41,     0,    39,     0,    42,     0,
    19,     0,   166,   131,     0,   111,    50,   141,   139,    51,
   131,     0,   166,    81,   136,   131,     0,   111,    15,    81,
   148,   131,     0,   111,    15,    81,   167,   131,     0,   111,
    50,   141,   139,    51,    81,   148,   131,     0,   111,    50,
   141,   139,    51,    81,   167,   131,     0,    95,   130,     0,
    36,   130,     0,    36,     1,     0,     0,   111,    50,   141,
   139,    51,     0,     0,    36,   111,    50,   141,   139,    51,
     0,     0,     0,    36,     1,     0,   133,   135,   136,     0,
   166,     0,   189,     0,   138,     0,   140,     0,    45,   133,
    46,     0,   100,   133,     0,   134,     0,    45,    45,    41,
    95,    46,   114,    46,    50,   141,   139,    51,     0,    45,
    45,    72,    41,    95,    46,   114,    46,    50,   141,   139,
    51,     0,    45,    45,    38,    95,    46,   114,    46,    50,
   141,   139,    51,     0,    45,    45,    43,    95,    46,   114,
    46,    50,   141,   139,    51,     0,    45,    45,    41,    95,
    46,    45,    45,    41,    95,    46,   114,    46,    46,    50,
   141,   139,    51,     0,    45,    45,    41,    95,    46,    45,
    45,    72,    41,    95,    46,   114,    46,    46,    50,   141,
   139,    51,     0,    45,    45,    41,    95,    46,    45,    45,
    38,    95,    46,   114,    46,    46,    50,   141,   139,    51,
     0,    45,    45,    72,    41,    95,    46,    45,    45,    41,
    95,    46,   114,    46,    46,    50,   141,   139,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    72,    41,
    95,    46,   114,    46,    46,    50,   141,   139,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    38,    95,
    46,   114,    46,    46,    50,   141,   139,    51,     0,    45,
    45,    38,    95,    46,    45,    45,    41,    95,    46,   114,
    46,    46,    50,   141,   139,    51,     0,    45,    45,    38,
    95,    46,    45,    45,    72,    41,    95,    46,   114,    46,
    46,    50,   141,   139,    51,     0,    45,    45,    38,    95,
    46,    45,    45,    38,    95,    46,   114,    46,    46,    50,
   141,   139,    51,     0,    81,     0,    82,     0,   141,     0,
   148,     0,   167,     0,    45,   167,    46,    45,   129,    46,
    45,   160,    46,   124,     0,    45,   136,    46,     0,   137,
     0,    95,    45,   134,    46,     0,   111,    50,   141,   139,
    51,     0,    45,    45,    38,    95,    46,   111,    46,    50,
   141,   139,    51,     0,    45,    45,    72,    38,    95,    46,
   111,    46,    50,   141,   139,    51,     0,    45,    45,    43,
    95,    46,   111,    46,    50,   141,   139,    51,     0,    45,
    45,    41,    95,    46,   111,    46,    50,   141,   139,    51,
     0,    45,    45,    72,    41,    95,    46,   111,    46,    50,
   141,   139,    51,     0,    45,   138,    46,     0,    36,   141,
   139,     0,    36,     1,     0,     0,    95,   166,     0,    95,
   140,     0,    95,   138,     0,    45,   140,    46,    50,   141,
   139,    51,     0,    95,    45,   159,    95,    46,   141,     0,
    95,    45,   141,    46,     0,    45,   140,    46,     0,   144,
     0,   144,   157,   141,     0,   141,   147,   144,     0,     7,
   155,    35,   141,   143,     0,   144,     0,   144,   147,   144,
     0,     8,   141,     0,     0,   145,     0,   144,   146,   145,
     0,   168,     0,    94,   145,     0,    98,   145,     0,    14,
     0,   170,     0,   166,     0,   138,     0,   140,     0,   124,
     0,    45,   141,    46,     0,   169,     0,   152,     0,   153,
     0,   189,     0,    95,     0,    96,     0,    97,     0,    91,
     0,    92,     0,    84,     0,    56,     0,    83,     0,    93,
     0,    94,     0,   148,    83,   148,     0,   149,     0,   150,
     0,    45,   148,    46,     0,    50,   141,   151,    51,     0,
    50,   167,   151,    51,     0,    50,   148,   151,    51,     0,
    48,   141,   151,    49,     0,    48,   167,   151,    49,     0,
    48,   148,   151,    49,     0,    36,   141,   151,     0,    36,
   167,   151,     0,    36,   148,   151,     0,     0,    36,     1,
     0,    84,   166,     0,    84,   138,     0,    84,   189,     0,
    84,   152,     0,    45,   152,    46,     0,    45,    38,    46,
   142,     0,    45,    43,    46,   142,     0,    45,    41,    46,
   142,     0,    45,    73,    38,    46,   142,     0,    45,    73,
    41,    46,   142,     0,    45,    72,    38,    46,   142,     0,
    45,    72,    41,    46,   142,     0,    45,    38,    95,    46,
   154,     0,    45,    72,    38,    95,    46,   154,     0,    45,
    43,    95,    46,   154,     0,    45,    41,    95,    46,   154,
     0,    45,    72,    41,    95,    46,   154,     0,    45,    42,
    95,    46,   154,     0,    45,    38,    95,    95,    46,   154,
     0,    45,    72,    38,    95,    95,    46,   154,     0,    45,
    43,    95,    95,    46,   154,     0,    45,    41,    95,    95,
    46,   154,     0,    45,    72,    41,    95,    95,    46,   154,
     0,    45,    42,    95,    95,    46,   154,     0,    45,    16,
   113,    95,    46,   154,     0,    45,   113,    95,    46,   154,
     0,    45,    16,   113,    95,    95,    46,   154,     0,    45,
   113,    95,    95,    46,   154,     0,   142,     0,   156,     0,
   101,   155,     0,   155,    80,   155,     0,   155,    78,   155,
     0,    45,   155,    46,     0,   141,   157,   141,     0,    22,
     0,    23,     0,   141,     0,   141,    86,   167,     0,   141,
    85,   167,     0,   167,    86,   141,     0,   167,    85,   141,
     0,   141,    86,    14,     0,   141,    85,    14,     0,    14,
    86,   141,     0,    14,    85,   141,     0,   141,    86,   169,
     0,   141,    85,   169,     0,    87,     0,    88,     0,    85,
     0,    89,     0,    90,     0,    86,     0,    72,    38,     0,
    72,    41,     0,   158,     0,   129,     0,   159,   166,   161,
     0,   159,   161,     0,   113,   166,   161,     0,   113,    95,
   166,   161,     0,   113,    95,    95,   166,   161,     0,   113,
   166,    15,   161,     0,   111,   166,   161,     0,   111,    95,
   166,   161,     0,   111,    95,    95,   166,   161,     0,   111,
   166,    15,   161,     0,   113,   161,     0,   113,    95,   161,
     0,   113,    95,    95,   161,     0,   111,   161,     0,   111,
    95,   161,     0,   111,    95,    95,   161,     0,   159,   166,
    15,   161,     0,   159,    95,   166,    15,   161,     0,   159,
   166,    15,    50,   141,    51,   161,     0,   159,    95,   166,
   161,     0,   159,    95,   161,     0,   159,    95,    95,   166,
   161,     0,    45,    95,   166,    46,    45,   160,    46,   161,
     0,     0,    36,   159,   166,   161,     0,    36,   159,   161,
     0,    36,   111,   166,   161,     0,    36,   113,   166,   161,
     0,    36,   113,    95,   166,   161,     0,    36,   111,   166,
    15,   161,     0,    36,   113,   166,    15,   161,     0,    36,
   159,   166,    15,   161,     0,    36,   159,    95,   166,    15,
   161,     0,    36,    45,    95,   166,    46,    45,   160,    46,
   161,     0,     0,    36,   159,   166,    50,   141,    51,   161,
     0,    36,   159,   166,    50,   141,    36,   141,    51,   161,
     0,    36,   159,   166,    15,    50,   141,    51,   161,     0,
    36,   159,    95,   166,   161,     0,    36,   159,    95,   161,
     0,    36,     1,     0,   136,   163,     0,   159,     0,     0,
    84,     1,     0,    36,   136,   163,     0,    36,   111,    45,
   162,    46,   163,     0,     0,    36,     1,     0,    48,   121,
    49,     0,     1,    49,     0,    45,   155,    46,     0,     1,
    46,     0,   111,     0,    45,   166,    46,     0,   112,     0,
   114,     0,   116,     0,   115,     0,    36,   166,   171,     0,
     0,    36,     1,     0,     0,    36,   121,   172,     0,   156,
     0,   101,   173,     0,   173,    80,   173,     0,   173,    78,
   173,     0,    45,   173,    46,     0,    27,   165,   164,     0,
    26,   141,    47,    28,   164,     0,    26,    45,   177,    36,
   178,    36,   179,    46,   164,     0,   132,     0,   128,     0,
     0,   155,     0,     0,   132,     0,     0,     3,    45,   145,
    46,    48,   181,    49,     0,     4,   145,    37,    45,   121,
    46,   182,     0,     6,    37,    45,   121,    46,     0,     5,
   181,     0,   181,     0,     0,     7,   155,    35,   164,   184,
     0,     8,   164,     0,     0,    33,    45,   136,    46,     0,
    33,    45,   136,   186,    46,     0,     0,    36,   136,   186,
     0,   103,    45,   166,    46,     0,   103,    45,   166,   188,
    46,     0,   103,    45,   138,    46,     0,   103,    45,   138,
   188,    46,     0,   103,    45,   189,    46,     0,     0,    36,
   166,   188,     0,    36,   138,   188,     0,   166,    17,   166,
   190,     0,   138,    17,   166,   190,     0,   140,    17,   166,
   190,     0,   166,    17,   138,   190,     0,   138,    17,   138,
   190,     0,   140,    17,   138,   190,     0,   166,    75,   166,
   190,     0,   138,    75,   166,   190,     0,    45,   152,    46,
    75,   166,   190,     0,   140,    75,   166,   190,     0,   166,
    75,   138,   190,     0,   138,    75,   138,   190,     0,    45,
   152,    46,    75,   138,   190,     0,   166,    17,   124,     0,
   166,    75,   124,     0,   140,    75,   138,   190,     0,    45,
   189,    46,     0,     0,    17,   166,   190,     0,    17,   138,
   190,     0,    75,   166,   190,     0,    75,   138,   190,     0,
    17,   124,     0,    75,   124,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   177,   178,   182,   183,   184,   185,   186,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   204,   205,   206,
   207,   208,   209,   213,   214,   219,   220,   224,   228,   233,
   235,   242,   348,   349,   351,   352,   353,   354,   355,   356,
   358,   359,   361,   362,   363,   364,   365,   366,   372,   373,
   374,   375,   376,   377,   379,   382,   388,   392,   397,   405,
   415,   417,   419,   433,   437,   441,   448,   449,   454,   459,
   464,   473,   481,   492,   506,   507,   508,   512,   516,   520,
   524,   528,   532,   539,   541,   543,   548,   560,   561,   562,
   565,   566,   567,   574,   578,   582,   587,   593,   598,   605,
   611,   622,   624,   625,   629,   636,   640,   641,   649,   653,
   654,   655,   656,   657,   658,   659,   662,   664,   666,   668,
   670,   672,   674,   676,   678,   680,   682,   684,   686,   691,
   692,   695,   696,   697,   700,   701,   702,   705,   709,   714,
   716,   718,   720,   722,   724,   728,   730,   731,   737,   738,
   739,   741,   743,   745,   747,   753,   754,   756,   757,   763,
   764,   768,   769,   773,   774,   778,   779,   780,   781,   782,
   784,   785,   786,   787,   788,   789,   790,   791,   792,   795,
   796,   797,   798,   799,   800,   801,   802,   804,   806,   810,
   811,   812,   813,   819,   823,   831,   843,   847,   856,   868,
   872,   880,   884,   885,   888,   893,   897,   902,   906,   913,
   916,   917,   920,   921,   924,   925,   928,   929,   930,   931,
   932,   933,   936,   937,   938,   939,   940,   941,   943,   944,
   946,   947,   949,   957,   958,   959,   960,   961,   967,   969,
   970,   973,   974,   975,   978,   979,   982,   983,   986,   987,
   990,   991,   996,   997,   998,   999,  1000,  1001,  1008,  1010,
  1013,  1015,  1021,  1025,  1030,  1036,  1042,  1048,  1058,  1064,
  1070,  1076,  1084,  1088,  1092,  1098,  1102,  1106,  1112,  1118,
  1125,  1131,  1137,  1141,  1149,  1155,  1158,  1162,  1166,  1172,
  1178,  1184,  1191,  1199,  1205,  1220,  1226,  1229,  1237,  1245,
  1251,  1257,  1261,  1270,  1281,  1285,  1286,  1290,  1294,  1304,
  1305,  1313,  1315,  1322,  1324,  1330,  1331,  1335,  1340,  1345,
  1350,  1356,  1360,  1361,  1367,  1368,  1379,  1390,  1391,  1393,
  1395,  1401,  1407,  1415,  1423,  1427,  1431,  1437,  1441,  1447,
  1451,  1458,  1462,  1466,  1473,  1477,  1481,  1485,  1495,  1496,
  1502,  1503,  1507,  1508,  1513,  1514,  1515,  1516,  1517,  1520,
  1521,  1522,  1528,  1529,  1530,  1532,  1533,  1534,  1536,  1537,
  1538,  1539,  1541,  1542,  1543,  1544,  1545,  1546,  1547,  1551,
  1552,  1553,  1554,  1555,  1556,  1557
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND",
"POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE","DEFINE",
"MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT",
"UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N",
"CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp","option_exp_else_statement",
"simple_ari_exp","member_in_exp","bi_operator","ari_operator","array_exp","option_list_value",
"option_struct_list_value","inner_option_list_value","address_exp","type_cast",
"casted_element","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   117,   118,   118,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   120,   120,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   122,   122,   123,   123,   124,   124,
   124,   125,   126,   126,   127,   127,   127,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   129,   129,   129,
   129,   129,   129,   130,   130,   130,   130,   130,   130,   130,
   130,   131,   131,   131,    -1,    -1,    -1,    -1,   132,   133,
   133,   133,   133,   133,   133,   133,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,   135,
   135,   136,   136,   136,   136,   136,   136,   137,   138,   138,
   138,   138,   138,   138,   138,   139,   139,   139,   140,   140,
   140,   140,   140,   140,   140,   141,   141,   141,   141,   142,
   142,   143,   143,   144,   144,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,   146,
   146,   146,   146,   146,   146,   146,   146,   147,   147,   148,
   148,   148,   148,   149,   149,   149,   150,   150,   150,   151,
   151,   151,   151,   151,   152,   152,   152,   152,   152,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   154,   155,   155,   155,   155,   155,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   157,   157,   157,   157,   157,   157,   158,   158,
   159,   159,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   162,   162,   162,   162,   163,   163,   163,
   163,   164,   164,   165,   165,   166,   166,   167,   168,   169,
   170,   171,   171,   171,   172,   172,   173,   173,   173,   173,
   173,   174,   175,   176,   177,   177,   177,   178,   178,   179,
   179,   180,   181,   181,   182,   182,   182,   183,   184,   184,
   185,   185,   186,   186,   187,   187,   187,   187,   187,   188,
   188,   188,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   189,   189,   189,   189,   190,
   190,   190,   190,   190,   190,   190
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     8,     9,
     1,     1,     7,     3,     1,     3,     1,     0,     4,     5,
     4,     4,     2,     2,     2,     2,     1,     2,     2,     3,
     3,     3,     3,     7,     8,    11,    13,     1,     1,     1,
     1,     1,     1,     2,     6,     4,     5,     5,     8,     8,
     2,     2,     2,     0,     6,     7,     0,     2,     3,     1,
     1,     1,     1,     3,     2,     1,    11,    12,    11,    11,
    17,    18,    17,    18,    19,    18,    17,    18,    17,     1,
     1,     1,     1,     1,    10,     3,     1,     4,     5,    11,
    12,    11,    11,    12,     3,     3,     2,     0,     2,     2,
     2,     7,     6,     4,     3,     1,     3,     3,     5,     1,
     3,     2,     0,     1,     3,     1,     2,     2,     1,     1,
     1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
     1,     1,     3,     4,     4,     4,     4,     4,     4,     3,
     3,     3,     0,     2,     2,     2,     2,     2,     3,     4,
     4,     4,     5,     5,     5,     5,     5,     6,     5,     5,
     6,     5,     6,     7,     6,     6,     7,     6,     6,     5,
     7,     6,     1,     1,     2,     3,     3,     3,     3,     1,
     1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     2,     2,
     1,     1,     3,     2,     3,     4,     5,     4,     3,     4,
     5,     4,     2,     3,     4,     2,     3,     4,     4,     5,
     7,     4,     3,     5,     8,     0,     4,     3,     4,     4,
     5,     5,     5,     5,     6,     9,     0,     7,     9,     8,
     5,     4,     2,     2,     1,     0,     2,     3,     6,     0,
     2,     3,     2,     3,     2,     1,     3,     1,     1,     1,
     1,     3,     0,     2,     0,     3,     1,     2,     3,     3,
     3,     3,     5,     9,     1,     1,     0,     1,     0,     1,
     0,     7,     7,     5,     2,     1,     0,     5,     2,     0,
     4,     5,     0,     3,     4,     5,     4,     5,     4,     0,
     3,     3,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     6,     3,     3,     4,     3,     0,
     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,    93,    47,     0,
     0,     0,     0,     0,    51,    52,     0,     0,    45,    88,
    91,    90,    92,    89,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   316,     0,     1,
    62,    61,     0,    34,    77,     0,    33,     0,   116,   112,
   113,   110,    37,    38,    39,    35,    36,    50,    49,   111,
     0,     0,    29,    13,    22,     0,   169,     0,     0,     0,
     0,   319,   321,   320,   174,   172,   173,    17,   156,   164,
   177,   178,   171,   166,   176,   170,   179,    21,    10,     9,
    20,    12,    11,     2,     0,     0,     0,     0,     0,    26,
     0,   169,   240,   241,     0,     0,   318,   242,     0,   234,
     0,     0,    73,     0,    74,     0,     0,     0,   316,   297,
     0,   337,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   174,     0,   172,   173,   177,   327,   171,
     0,   179,     0,     0,     0,     0,     0,     0,    76,    75,
     0,   316,   151,   150,   149,     0,     0,   115,   112,     0,
     0,     0,     0,     0,   306,     0,     0,   316,    79,   104,
     0,     0,     0,     0,     0,    78,   130,   131,     0,     0,
   306,     0,     0,     0,     0,     0,     0,    27,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   172,   173,     0,   177,   171,   179,     0,   206,     0,   208,
   205,   207,   167,   168,   188,   189,     0,   186,   187,   185,
   255,   258,   253,   254,   256,   257,   183,   184,   180,   181,
   182,     0,     0,     8,     6,     7,     5,     4,     0,     0,
     0,     0,   242,     0,   235,   255,   258,     0,     0,     0,
     0,     0,     0,     0,    80,    82,    81,    83,   286,     0,
     0,     0,   323,     0,    88,    90,    92,    89,     0,     0,
   336,   335,     0,     0,   315,     0,     0,     0,   332,     0,
     0,     0,     0,     0,     0,   137,   132,   133,   191,   192,
   134,     0,     0,    88,    90,    89,     0,     0,     0,     0,
   316,   149,     0,   328,    64,   114,   145,   155,     0,   317,
     0,     0,     0,   379,     0,     0,     0,   286,   306,     0,
     0,     0,     0,   262,     0,   261,     0,     0,     0,   112,
   113,     0,   110,   111,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   310,   305,     0,   148,   101,     0,
     0,     0,     0,    94,    32,    31,    54,    30,     0,    65,
   109,     0,   380,   380,     0,   380,   380,   380,   380,   380,
   380,   376,   380,   380,   377,   380,   380,    25,    29,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   175,   209,
     0,     0,     0,     0,     0,     0,   158,   165,   157,     0,
   250,   249,   238,   248,   244,   252,   247,   243,   251,   239,
   350,   237,   236,   246,   245,    43,     0,   297,   297,   297,
     0,   303,     0,     0,     0,   297,     0,     0,     0,     0,
     0,     0,     0,   339,     0,   314,   313,     0,     0,     0,
     0,     0,     0,     0,     0,   203,   203,   203,   203,   203,
   203,     0,     0,   351,     0,     0,     0,     0,     0,     0,
    88,    90,    88,    90,   331,   149,     0,     0,     0,     0,
     0,     0,     0,   330,   329,   325,     0,     0,     0,     0,
     0,   316,     0,   259,   260,   154,     0,    88,    90,    89,
     0,    40,     0,     0,    48,     0,   357,     0,   355,     0,
   359,    53,    41,    42,   307,     0,   304,    69,     0,     0,
     0,   148,   103,   102,   104,    72,     0,     0,     0,     0,
     0,   367,   364,    71,   374,   370,   368,   365,   378,   372,
   366,   363,   373,   369,    28,     0,   163,     0,   210,   160,
     0,     0,   212,     0,     0,     0,     0,   211,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     0,   297,   276,   297,   297,   273,   297,   297,   264,   297,
     0,     0,   297,     0,   297,   297,   288,   297,     0,   324,
   323,     0,     0,     0,     0,     0,     0,     0,   338,     0,
   333,   312,     0,   136,   193,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   353,   352,     0,
   190,     0,     0,     0,     0,     0,     0,   148,   286,   331,
   148,   380,   380,     0,   326,    58,     0,     0,    70,     0,
     0,     0,     0,     0,     0,    88,    90,     0,     0,     0,
     0,   360,   360,   358,   356,   311,   316,   310,   147,   148,
   139,   104,   104,     0,    96,    66,   385,   380,   380,   386,
   380,   380,     0,     0,   159,     0,     0,     0,   233,   217,
     0,   220,     0,   222,     0,   219,     0,     0,     0,     0,
     0,   215,     0,     0,   216,     0,     0,   213,   214,   230,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     0,   297,   277,   297,   297,   269,   297,   274,   297,   297,
   265,     0,   283,   297,   297,   263,     0,     0,   297,   289,
   297,   297,   290,   302,   297,   297,     0,   287,     0,   322,
     0,     0,     0,   341,     0,     0,   204,   203,   203,   203,
   197,   199,   198,   194,   196,   195,     0,   138,   354,     0,
   316,   319,     0,   316,   319,   316,   319,     0,     0,   286,
     0,     0,     0,   375,   371,     0,    57,     0,   148,   153,
     0,     0,     0,     0,     0,     0,   362,   361,   306,   308,
   146,    97,    98,   104,   382,   381,   384,   383,     0,   162,
   229,     0,   161,   223,   226,   228,   225,     0,   218,     0,
   221,     0,   232,     0,     0,     0,     0,     0,     0,   342,
     0,   278,   297,   270,   272,   275,   297,   266,   268,   297,
   297,   282,     0,   279,    68,     0,   292,   291,   293,   297,
   301,     0,   294,     0,    63,     0,   340,     0,     0,     0,
   200,   202,   201,     0,     0,     0,     0,     0,     0,     0,
     0,   316,     0,   316,   319,     0,   139,    84,   152,    55,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    95,    23,   231,   224,   227,     0,
     0,     0,   286,   271,   267,   284,   280,     0,    67,     0,
   286,   295,     0,     0,   297,     0,     0,    44,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    85,     0,    59,     0,     0,
     0,     0,     0,     0,     0,    69,   104,   104,     0,     0,
     0,   297,    60,     0,   297,     0,   298,    56,   334,   286,
     0,     0,     0,   148,   148,     0,     0,     0,   148,   148,
   148,   148,     0,     0,     0,     0,     0,     0,   286,     0,
     0,     0,     0,     0,     0,     0,   309,    99,   100,     0,
   344,   297,   281,   297,   300,   297,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   148,
     0,     0,     0,   148,   148,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   347,   285,   296,   299,     0,
   319,   319,     0,   140,   119,   319,   319,     0,   143,   117,
   142,   120,     0,     0,     0,     0,     0,     0,    86,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
   343,     0,     0,   135,     0,     0,     0,   319,     0,     0,
   319,   141,   319,   319,     0,   144,   118,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   345,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   319,    87,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   148,   148,     0,   148,   148,
     0,     0,     0,     0,     0,     0,   148,     0,     0,   148,
   148,   148,     0,   129,   127,     0,   123,   121,     0,     0,
     0,   148,   128,   122,   126,   124,     0,   125,     0,     0,
     0
};

static const short yydefgoto[] = {  1169,
     2,    21,   210,   153,   379,   930,    95,    62,    63,    64,
    65,    66,   369,   374,    67,    68,    69,   199,   365,   306,
    96,   540,    97,   128,   709,   705,    99,   100,   252,   237,
   308,   309,   310,   640,   101,   102,   710,   264,   130,   268,
   346,   450,   451,   282,   367,   537,   441,   146,   103,   131,
   104,   105,   106,   459,   337,   161,    73,    74,    75,   293,
   630,   878,    76,   739,  1081,    77,   600,    78,   485,    79,
   528,   107,   552
};

static const short yypact[] = {    26,
  3956,  2814,-32768,-32768,    42,-32768,-32768,-32768,  3956,  3956,
  3956,  3956,  1406,  3956,  3956,  3956,  3956,  3956,  3956,-32768,
   207,    80,   982,-32768,   135,   -51,   294,-32768,-32768,    84,
    32,   168,  3877,   272,-32768,-32768,   177,   200,-32768,-32768,
-32768,-32768,-32768,-32768,  2234,  2814,   147,   159,   476,   476,
    19,   268,   248,   255,   259,   266,   288,   452,   169,  1538,
-32768,-32768,   295,-32768,-32768,   169,-32768,   499,-32768,   291,
    20,    61,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   339,   682,   827,   321,   321,   982,-32768,  3452,   237,   603,
   603,-32768,-32768,-32768,-32768,   291,    20,   966,  1761,-32768,
-32768,-32768,    61,-32768,-32768,-32768,-32768,   321,   321,   321,
   321,   321,   321,-32768,  3956,  3956,  3956,  3956,  3956,-32768,
   603,  1143,-32768,-32768,  1587,   982,-32768,  1629,   928,-32768,
  1235,   982,   169,   169,   169,   169,   342,    32,-32768,   358,
    32,  2851,   510,   400,   982,    53,  2814,  1873,   982,  2481,
   354,  1452,  1085,  1107,   757,   541,   459,   464,-32768,   579,
   338,   785,   876,   492,   518,   832,   860,   520,-32768,-32768,
  1797,   577,-32768,-32768,-32768,  2709,   282,-32768,   234,  1406,
   380,  2814,  2814,  2814,  3210,  1406,   169,   160,-32768,     5,
  2814,  2814,  2814,  2814,   748,-32768,-32768,-32768,  1873,    70,
  3210,    70,    70,    70,   152,   152,  2039,-32768,  3956,   582,
   948,   522,   -16,   -14,   567,    62,  3500,   550,   686,   605,
   363,   447,   -10,   667,   536,   676,   258,   720,    20,-32768,
   733,-32768,-32768,-32768,-32768,-32768,   603,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   603,  1406,  1566,   664,   664,   734,   728,   782,  1406,
  1406,  2888,  1015,   677,-32768,    -6,    11,  1406,    53,   982,
   982,  1406,  1406,  1008,-32768,-32768,-32768,-32768,  1635,   816,
   523,   896,   845,   960,   -16,   -14,   567,    62,  3367,   392,
-32768,-32768,   924,   936,-32768,  1077,   967,  2814,-32768,  1431,
  3091,  3848,  3848,   433,    17,-32768,   966,   940,-32768,-32768,
-32768,   977,  1078,   132,   324,   352,   976,  1274,  1110,    19,
   992,  1001,  2971,-32768,-32768,-32768,-32768,  1037,  1016,-32768,
  1020,  1452,  1452,-32768,  2814,  1130,  1069,  1635,  3210,   169,
   169,   435,   784,-32768,   572,-32768,  1051,  2595,  1133,   363,
   447,   464,   536,   676,   223,   957,   258,   533,   566,  1081,
  1177,  1231,  1283,    21,  1157,-32768,  1106,   -22,-32768,  1153,
  1406,    23,  1873,-32768,  1032,  1117,  1117,-32768,  1205,  1179,
-32768,   125,   240,   240,  1218,   240,   240,   240,   240,   240,
   240,-32768,   515,   240,-32768,   515,   240,-32768,   827,  1295,
  1406,  1183,   603,   371,   603,   497,   547,   603,   574,   598,
   610,   617,  1097,   644,   646,  1252,  1262,   648,-32768,  1016,
   556,   635,   447,   667,   536,   676,  1287,-32768,   966,  1270,
   966,   966,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   966,
  1318,  1247,-32768,   966,   966,-32768,  1238,    29,    31,    49,
  1284,-32768,  1240,    32,   436,    51,  1290,    28,  1296,   461,
  3415,  1301,   311,   982,    53,-32768,-32768,  1450,  1316,  3128,
  1303,   -10,   563,  1304,  3247,     4,   462,  1315,     4,   462,
  1315,  2362,  1873,-32768,  1306,   659,  1147,   653,   670,   675,
   680,   683,  1252,  1262,  1020,  1308,  1406,  1310,  3008,  1116,
  1406,    70,  1314,  1280,-32768,  1071,    53,  1347,  1319,  1323,
    32,  1322,  1001,-32768,-32768,-32768,  1331,  1285,  1291,  1297,
  1500,-32768,   340,   635,-32768,    70,-32768,  1339,-32768,  1348,
-32768,-32768,-32768,-32768,-32768,   804,-32768,-32768,   701,  1344,
   249,   -22,-32768,-32768,  1360,-32768,   748,   181,  1353,   152,
   152,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1355,    27,   684,-32768,  1648,
   603,  1358,-32768,   603,  1361,   603,  1363,-32768,   603,  1365,
   687,   688,   689,   680,   699,   603,   742,   603,   746,   603,
   603,   603,  1368,  1326,  1335,  1336,  1098,  1278,    53,-32768,
    32,    68,-32768,   484,   151,-32768,   632,   229,-32768,   794,
  1357,    32,   811,    32,   819,   166,-32768,   950,  2814,-32768,
   845,  1346,   328,   132,   324,   352,  1161,   350,  1128,  1400,
-32768,-32768,  1394,-32768,-32768,  1395,  3330,   563,   863,  1392,
  1397,  1398,  1399,  1401,  1402,  3537,  1403,  1412,-32768,   659,
-32768,   954,  1230,  2116,   756,   761,  1410,   -22,  1635,-32768,
   -22,   240,   240,  2814,-32768,-32768,    53,  1408,-32768,  1308,
  1406,  1406,  1414,  1418,  1421,  1377,  1378,  1285,  1291,  1297,
  1227,  1422,  1422,-32768,-32768,-32768,   790,  1157,-32768,   -22,
-32768,   493,  1360,  1425,-32768,-32768,-32768,   515,   240,-32768,
   515,   240,  3956,  1406,-32768,   603,  1433,   603,-32768,-32768,
   603,-32768,   603,-32768,   603,-32768,   603,  2371,  3902,  3935,
   773,-32768,   603,  1438,-32768,   603,  1439,-32768,-32768,-32768,
   603,  1440,  1446,  1449,  1377,  1407,   603,  1461,  1457,-32768,
  1466,   166,-32768,   358,   358,-32768,   166,-32768,   358,   358,
-32768,    32,-32768,   821,   305,-32768,  1459,  1468,   358,-32768,
   358,   358,-32768,-32768,   926,   986,  1406,-32768,  1499,-32768,
  1480,   368,   683,   282,   982,  1581,-32768,     4,   462,  1315,
-32768,-32768,-32768,-32768,-32768,-32768,  3585,-32768,-32768,  3622,
  1017,  1481,  3670,  1074,  1485,  1132,  1487,  3981,  4009,  1635,
  1475,  1488,  1486,-32768,-32768,  1338,-32768,  2814,   -22,   966,
   -12,   158,  1129,  1505,  1508,  1378,-32768,-32768,  3210,-32768,
-32768,-32768,-32768,    57,-32768,-32768,-32768,-32768,   933,   966,
-32768,   603,  1287,-32768,-32768,-32768,-32768,  4045,-32768,   603,
-32768,   603,-32768,  1447,  1451,  1454,  1515,  1520,  1524,-32768,
  1525,-32768,   358,-32768,-32768,-32768,   358,-32768,-32768,   358,
   358,-32768,  1406,-32768,  2814,  1527,-32768,-32768,-32768,   358,
-32768,  1406,-32768,   602,-32768,  2814,-32768,  1529,  1152,  1530,
-32768,-32768,-32768,  3707,  1532,  1543,  3755,  1545,  1547,  1548,
  1552,  1155,  3792,  1202,  1534,  1542,  1558,-32768,-32768,-32768,
  1511,  1554,  1569,  1565,  1481,  1582,  1585,  1485,  1590,  1487,
  1526,   205,  1593,   249,-32768,-32768,-32768,-32768,-32768,  1537,
  1595,  2814,  1635,-32768,-32768,-32768,-32768,   407,  1538,  1604,
  1635,-32768,   988,  1406,   358,  1345,    53,-32768,  1610,   777,
   778,  1228,  1406,  1406,   796,   797,  1248,  1406,  1406,  1406,
  1406,  1612,  3840,  1614,  1616,-32768,  1622,-32768,  1558,   929,
  1034,  1623,  1630,  1637,  1534,  1157,   493,  1360,  2814,  1383,
  1638,   358,-32768,  1640,   358,  1039,-32768,-32768,-32768,  1635,
   799,   802,   814,   -22,   -22,   844,   847,   849,   -22,   -22,
   -22,   -22,  1406,   864,   871,  1266,  1406,  1406,  1635,  1573,
  1592,  1649,  1594,  1596,  1651,  1208,-32768,-32768,-32768,  1391,
-32768,   358,-32768,   358,-32768,   358,  1650,  4057,  4086,   877,
  1644,  1654,  4092,  4120,   881,  1655,  1657,  1658,  1659,   -22,
   886,   902,   903,   -22,   -22,  1665,  1667,  1674,  1632,  1678,
  1679,  1633,  1634,  1639,  1694,  1267,-32768,-32768,-32768,   300,
  1690,  1691,  4148,-32768,-32768,  1692,  1703,  4181,-32768,-32768,
-32768,-32768,  1700,  4196,  4233,   907,  1702,  1705,  1673,  1643,
  1645,  1712,  1646,  1647,  1717,  1719,  1720,  1675,  1278,-32768,
-32768,   164,   452,-32768,  1723,  1725,  1726,  1727,  1730,  1731,
  1732,-32768,  1733,  1737,  4242,-32768,-32768,   659,  1690,  1691,
  1670,  1692,  1703,  1676,  1677,  1680,  1746,-32768,   466,   577,
  1743,  1745,  1754,  1751,  1752,  1757,  1760,  1762,  1763,   940,
  1727,  1732,  1733,  1737,  1696,  1406,  1406,  1764,  1406,  1406,
  1765,  1768,  1769,  1766,  1763,   -22,   -22,  1406,   -22,   -22,
  1406,  1406,  1406,  1771,  1718,  1773,   -22,  1774,  1776,   -22,
   -22,   -22,  1406,-32768,-32768,  1777,-32768,-32768,  1778,  1779,
  1780,   -22,-32768,-32768,-32768,-32768,  1782,-32768,  1813,  1834,
-32768
};

static const short yypgoto[] = {-32768,
-32768,    33,  1444,     0,  1307,-32768,    24,-32768,-32768,  -183,
   -39,  -170,   195,  -538,  -137,    55,  1373,-32768,    13,-32768,
   250,  -106,  1251,   -13,  -347,-32768,  1359,   -87,-32768,  1289,
  -285,-32768,-32768,  -389,   383,-32768,   568,    -4,    14,  1738,
-32768,  -162,  -310,  1427,  -180,  -675,  -140,-32768,  1033,   -68,
-32768,   502,-32768,  1239,  1356,   -95,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -890,-32768,-32768,-32768,-32768,  1213,-32768,
  -332,  1605,   289
};


#define	YYLAST		4358


static const short yytable[] = {    98,
   344,    60,   233,   234,   292,   299,   695,   434,   347,   169,
   170,   380,   820,   539,   344,   473,   477,   480,   129,   143,
   385,   535,   366,   543,   437,    61,   530,   509,   620,   403,
   344,   405,   903,   259,   704,   419,   203,     1,   366,   639,
   372,    82,    83,    84,    85,   163,   108,   109,   110,   111,
   112,   113,   483,   297,   319,   569,   324,   573,   159,   133,
   578,   134,   484,   171,   281,   227,   281,   138,   154,    61,
   235,   236,   138,   138,   223,   138,   138,   205,   404,   311,
   406,   211,   235,   236,   281,   373,   281,   641,   642,   643,
   644,   645,   372,   138,   204,   138,   235,   236,   904,   155,
   298,   905,   291,   281,    89,   127,   178,   408,   344,    94,
   344,   263,   138,    51,   382,    51,   311,   187,   456,   235,
   236,   265,   127,   602,   121,   605,    94,   274,   223,   172,
   311,   172,   311,   188,   307,   206,   263,   914,   139,   139,
   296,   139,   139,   608,   312,   616,   300,   254,   255,   256,
   257,   258,    81,   822,   823,  1080,   409,   345,   510,   139,
   305,   139,   742,   159,   428,   159,   356,   344,   344,   548,
    61,   307,   368,   154,   370,   349,   366,   403,   139,   132,
   172,   361,   362,   363,   473,   307,   281,   307,  1108,   638,
   375,   376,   377,   378,   137,   138,   382,   435,   438,    61,
   651,   281,   906,   223,   155,    61,    61,    61,  1109,   371,
   138,   381,   141,   138,    61,    61,    61,    61,   594,   114,
   398,   595,    48,   596,   147,   548,   488,   500,   392,   395,
   155,   178,   474,   478,   481,   172,   504,   505,   722,   429,
   725,   399,   728,   729,   148,   747,   431,   432,   263,   963,
   200,    70,   597,   189,   440,   692,   550,   164,   444,   445,
   196,   139,    58,   187,   281,   442,   443,   523,   907,   165,
   311,   908,   144,   138,  1110,   223,   139,   169,   170,   188,
   115,   227,   116,   117,   118,   915,   119,   472,   476,   479,
  1007,   172,   180,   650,   156,    70,   302,   468,   303,   181,
   173,   179,   421,   182,   311,   120,    89,   200,   202,   263,
   183,   344,   176,   471,   551,   964,   145,    51,   965,   347,
    89,    61,   177,   752,   631,   307,   355,   275,   276,   277,
   278,    51,   184,   172,   506,   201,   159,   221,   228,   139,
   281,    89,   195,   462,  1082,   159,   159,   172,   802,   817,
   818,   638,    51,   779,   863,   138,   592,   542,    61,   307,
   127,   159,    51,   380,   638,   202,   666,   177,   172,   405,
    48,   154,   138,   706,   221,   207,    51,   678,   172,   200,
   679,   177,   680,   331,   523,   545,   279,   567,   881,   882,
   883,   156,   172,   281,   138,   731,    70,   408,   171,   156,
   173,   474,   155,   500,   135,   628,   136,   201,   327,   462,
  1083,   681,   138,   832,   311,   332,   571,   333,   489,-32768,
   221,   188,   772,    89,   357,   350,   179,   158,  1008,  1009,
   358,    70,    70,    70,    51,   694,   138,   202,   188,   177,
    70,    70,    70,    70,   187,   295,   490,   223,   320,   383,
   172,   386,   388,   390,   393,   396,   472,   972,   740,   629,
   188,   223,   187,   203,   321,   572,   221,   311,   345,   307,
   224,   230,   693,   567,    51,   203,   422,   482,   188,   138,
   138,   169,   471,   658,   189,   263,   463,   661,   344,   896,
   172,   166,   328,   167,    28,   648,   185,   639,   745,   235,
   236,   186,   188,   594,   328,   138,   595,   224,   596,   329,
  1109,   221,   159,    40,    41,   462,    42,    43,    44,   281,
   168,   204,   307,   452,   224,   690,   807,    51,   372,   511,
   614,   550,   224,   204,   275,   277,   338,   597,   156,  -113,
  -113,    28,   574,   172,   486,   512,   139,    70,   688,   200,
   221,   801,   205,   173,   803,   623,   294,   200,   352,   201,
    40,    41,   339,    42,    43,    44,   544,   453,   526,   173,
   780,   188,   221,   697,   700,   486,  1110,   462,   527,   197,
   198,   330,   205,   821,    70,   201,   327,   414,    59,   551,
   415,   575,   576,   594,   343,   205,   595,   156,   596,   224,
   421,   526,   235,   236,   524,   880,   422,   202,   635,   424,
   206,   529,   971,   228,   342,   202,    87,   516,   769,   579,
   974,  -112,  -112,   223,   330,   778,   186,   597,   967,   344,
   400,   549,   223,   454,   402,   455,   877,   934,   913,    89,
   206,   577,    61,   403,   224,   486,   750,    88,   344,   848,
    51,   200,   935,   206,   276,   405,   366,   809,   810,  -110,
  -110,   407,   408,   806,   235,   236,   172,   281,   580,  1017,
   422,   224,   553,    48,   555,   556,   557,   558,   559,   560,
   327,   561,   562,   224,   563,   564,    89,    61,  1036,   586,
   830,   588,   581,   592,   235,   236,    90,    51,   652,   418,
    91,   689,   902,   650,   582,   224,   302,    86,   303,   202,
   156,   583,   420,    58,    87,   653,    92,    93,    94,   221,
   654,   334,   433,   416,   221,   586,   417,   208,   588,   706,
   224,   221,   718,   719,   720,   829,   200,   352,   587,   352,
   589,   118,   593,   119,   588,    88,   230,   572,   221,   205,
   311,   662,   344,   874,   270,   115,   271,   116,   117,   118,
   344,   119,   120,   166,   575,   167,    28,   436,   439,   580,
   879,    48,   524,   223,   655,   682,   223,   656,   707,   223,
   120,   572,   575,   580,    89,    40,    41,   723,    42,    43,
    44,   726,   168,   721,    90,    51,   979,   549,    91,   698,
   701,   798,   326,   424,   686,   307,   799,   901,   755,   344,
    86,    58,  1120,   119,    92,    93,    94,    87,   838,    49,
    50,   514,   403,   405,   515,   759,   120,   430,   344,   281,
   334,    61,   120,   762,   819,   861,   724,   197,   198,   186,
   727,   403,   405,   224,  1018,   968,   281,  1019,   301,   928,
   724,   302,   224,   303,   281,   727,   281,   224,   933,   588,
    59,   330,   209,   777,   929,  -111,  -111,   727,    70,    86,
   223,   981,   982,   223,    48,   936,    87,  1021,  1022,   223,
   458,   224,  1026,  1027,  1028,  1029,   221,    89,    61,  1023,
   986,   987,  1024,   572,   588,   221,   575,    90,   304,    61,
   115,    91,   116,   117,   118,   424,   119,   475,  1020,   403,
   302,   335,   303,    70,   687,   127,   405,    92,    93,    94,
   976,   970,  1053,  1063,   336,   120,  1058,  1067,  1068,   984,
   985,  1064,   457,    48,   989,   990,   991,   992,   572,   223,
   870,   575,   340,  1025,   134,    61,    89,  1065,   588,   191,
   804,   805,  1095,   192,   193,   194,    90,    51,  1031,   464,
    91,   281,   269,   465,   766,  1032,  1000,    87,  1010,  1001,
   341,   727,   136,    58,   127,   727,    92,    93,    94,  1030,
   572,   916,   401,  1034,  1035,   281,   825,   826,    86,   827,
   828,   166,    61,   167,    28,   122,   575,  1066,   790,   767,
  1002,   727,   525,   123,   124,   270,   115,   271,   116,   117,
   118,   487,   119,   491,    41,   467,   492,    43,    44,   224,
   168,   281,   486,   179,    48,   270,   125,   271,   224,  1145,
  1146,   120,  1148,  1149,    72,   872,   221,    89,   975,   221,
  1156,   497,   221,  1159,  1160,  1161,   498,    90,    51,   235,
   236,    91,    48,   446,   270,  1167,   271,    70,   235,   236,
   419,   185,   885,   140,   791,    89,   186,   792,    93,    94,
   340,  1003,   460,  1084,  1004,    90,    51,   160,    72,    91,
   235,   236,   126,   175,    72,   270,   501,   271,    59,  1016,
   502,   190,    58,   127,   503,    92,    93,    94,   190,   266,
   267,   243,   244,   245,   246,  1005,   335,   235,   236,   192,
   193,   194,  1136,  1137,    70,  1139,  1140,   508,   185,   888,
   225,   231,   466,   186,  1147,    70,   531,  1150,  1151,  1152,
   325,   235,   236,   221,   584,   735,   221,   585,   736,  1162,
   507,   712,   221,   714,   191,   517,   716,   297,   192,   193,
   194,   538,   -62,    86,   270,   495,   271,   225,   191,   730,
    87,   660,   192,   193,   194,   190,   190,   190,   190,   224,
   280,    70,   224,   283,   160,   224,   185,   890,   522,    72,
   -62,   186,   160,   322,   -62,   -62,   -62,   332,   133,   333,
   460,    88,   536,   332,   298,   333,   194,   938,   584,   185,
   952,   773,   221,   225,   186,   270,   191,   271,   353,    72,
   192,   193,   194,   359,    72,    72,    72,    48,    70,   190,
   712,   716,   532,    72,    72,    72,    72,   260,   261,   270,
    89,   271,   384,   541,   387,   389,   391,   394,   397,   909,
    90,    51,   910,    87,    91,  1043,   185,   954,  1044,   225,
   191,   186,    71,   546,   192,   193,   194,    58,   547,   425,
    92,    93,    94,   554,   735,   584,   224,   816,   983,   224,
   737,  1079,   738,   831,   793,   224,   533,   568,   834,  1045,
   835,   737,   836,   738,   837,   584,   712,   716,   988,   166,
   839,   167,    28,   841,   225,   157,    71,   590,   843,  1085,
    48,   174,    71,   584,   191,   566,  1033,   591,   192,   193,
   194,   493,    41,    89,   494,    43,    44,   598,   168,   272,
   273,   160,   190,    90,    51,   599,   271,    91,   534,   611,
    72,   549,   601,   225,   612,   224,   175,   619,   222,   229,
   794,   622,   238,   795,    93,    94,   326,   633,   634,   636,
   639,   649,   496,   657,   659,   225,   191,   667,   549,   333,
   192,   193,   194,   664,   668,   839,   841,    72,   669,   239,
   240,   671,   190,   190,   513,   222,   672,   247,   248,   673,
   160,   249,   250,   251,   684,   674,    59,   353,   900,   425,
   978,   675,   157,   685,   691,   372,   231,    71,   327,   917,
   157,   174,   703,   711,   190,   841,   713,   918,   715,   919,
   717,   191,    86,   731,   280,   192,   193,   194,   191,    87,
   732,   222,   192,   193,   194,   771,   351,    71,  1011,   733,
   734,   229,    71,    71,    71,   774,  1046,   757,   775,   776,
   781,    71,    71,    71,    71,   782,   783,   483,   788,   784,
    88,   785,   786,   425,   800,   808,   191,   526,    86,   811,
   192,   193,   194,   812,   191,   122,   813,   222,   192,   193,
   194,   814,   815,   123,   124,   824,    48,   423,   832,   469,
   604,   607,   610,   840,   842,   844,   613,   615,   618,    89,
   621,   845,   190,   160,   846,   190,   323,   849,   632,    90,
    51,   847,   225,    91,   191,   850,   865,   225,   192,   193,
   194,   851,   222,   866,   225,   166,    58,   167,    28,    92,
    93,    94,    48,   191,   876,   897,   886,   192,   193,   194,
   889,   225,   891,   898,   663,    89,   899,   676,    41,   157,
   677,    43,    44,   670,   168,    90,    51,   875,    71,    91,
   911,   222,   152,   912,   174,   353,   921,   904,   683,   958,
   920,   907,    58,   127,   909,    92,    93,    94,   922,   923,
   174,   931,   191,   222,   937,   939,   192,   193,   194,   955,
   280,   943,   699,   702,   191,    71,   712,   956,   192,   193,
   194,   712,   944,    86,   948,   427,   949,   950,   157,    28,
   122,   951,   212,   957,   959,   351,    80,   423,   123,   124,
   885,   191,    59,   960,   229,   192,   193,   194,    40,    41,
   841,    42,    43,    44,   213,   841,   961,   214,   215,   216,
   888,   262,   712,   741,   744,   890,   962,   749,   966,   969,
   754,   116,   117,   118,   758,   119,   761,   964,   765,   162,
    80,    72,   973,    28,   980,   190,    80,    48,   218,   219,
   190,   993,   841,   997,   120,   998,   999,  1037,   952,   225,
    89,   423,    40,    41,  1006,    42,    43,    44,   225,   447,
    90,    51,   954,  1012,    91,  1014,  1038,   126,  1040,  1039,
  1041,  1042,   226,   232,  1054,  1050,    72,    58,   127,   220,
    92,    93,    94,   238,  1055,  1059,   343,  1060,  1061,  1062,
  1069,   157,  1070,   266,   267,   243,   244,   245,   246,  1071,
   222,   235,   236,  1073,  1074,   222,  1072,  1075,  1076,   226,
   239,   240,   222,  1077,  1078,  1086,  1087,  1089,   247,   248,
   235,   236,   249,   250,   251,   448,   162,   449,  1090,   222,
  1092,    80,  1096,  1098,   162,  1097,  1099,  1101,  1100,  1102,
  1103,   570,  1104,   570,  1105,  1106,   570,   201,  1154,  1107,
  1111,  1112,  1113,   351,   853,  1114,  1115,  1116,  1117,   857,
   354,    80,  1118,  1121,   860,   360,    80,    80,    80,  1122,
  1123,  1125,  1126,  1124,  1127,    80,    80,    80,    80,  1128,
  1129,  1130,  1131,    86,   190,  1132,    72,  1133,  1134,  1135,
    87,  1144,  1170,  1138,  1141,    28,   238,  1142,  1143,   225,
  1153,   226,   225,  1155,  1157,   225,  1158,  1163,  1164,  1165,
  1166,   426,  1168,  1171,    40,    41,   253,    42,    43,    44,
    72,   217,   565,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   696,   647,   249,   250,   251,   708,   770,
   789,   665,     0,     0,     0,     0,   226,    48,   343,    71,
     0,     0,     0,     0,   603,   606,   609,     0,     0,    86,
    89,     0,   617,     0,     0,     0,    87,   222,     0,     0,
    90,    51,     0,   162,    91,     0,   222,    72,     0,     0,
     0,     0,    80,     0,     0,   226,     0,    58,    72,     0,
    92,    93,    94,     0,    71,     0,   225,   301,     0,   225,
   302,     0,   303,     0,     0,   225,     0,   226,     0,   570,
     0,     0,   570,     0,   570,     0,     0,   570,     0,    80,
     0,     0,     0,    48,   570,     0,   570,     0,   570,   570,
   570,     0,   162,     0,    72,     0,    89,     0,     0,   354,
     0,   426,     0,     0,     0,     0,    90,   304,   232,     0,
    91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    58,   127,   225,    92,    93,    94,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    72,     0,     0,     0,     0,     0,     0,     0,     0,
   570,   570,   570,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    71,   426,     0,     0,   743,     0,
   746,   748,     0,   751,   753,     0,   756,   222,     0,   760,
   222,   763,   764,   222,   768,    86,     0,     0,     0,     0,
     0,     0,   122,     0,     0,     0,     0,     0,    71,     0,
   123,   124,     0,     0,   570,   162,   833,     0,     0,   570,
     0,   570,     0,   570,   226,   570,   570,   570,   570,   226,
     0,   570,     0,    88,   570,     0,     0,     0,     0,   570,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   226,     0,     0,     0,     0,     0,    48,
     0,     0,     0,     0,     0,    71,     0,     0,     0,     0,
     0,     0,    89,     0,     0,     0,    71,   354,     0,    87,
     0,     0,    90,    51,   222,     0,    91,   222,     0,     0,
     0,     0,     0,   222,     0,     0,     0,     0,     0,    58,
   127,     0,    92,    93,    94,     0,   570,   570,     0,     0,
    88,     0,     0,     0,     0,     0,     0,     0,   852,     0,
   854,   855,    71,   856,     0,   858,   859,     0,     0,     0,
   862,   864,     0,     0,     0,   867,    48,   868,   869,     0,
   570,   871,   873,     0,     0,     0,   570,     0,   570,    89,
   570,     0,     0,   222,     0,     0,     0,     0,     0,    90,
    51,     0,     0,    91,     0,     0,     0,     0,     0,    71,
     0,     0,     0,    80,     0,     0,   796,     0,     0,   797,
    93,    94,     0,     0,     0,     0,    22,     0,     0,     0,
   149,   226,    24,    25,     0,     0,     0,   122,     0,    26,
   226,    27,    28,    29,    30,   123,   124,    31,    32,    33,
    34,     0,    35,    36,    37,     0,    38,    39,    80,     0,
     0,    40,    41,     0,    42,    43,    44,     0,   150,   924,
     0,    46,     0,   925,     0,    47,   926,   927,     0,     0,
     0,     0,     0,     0,     0,     0,   932,     0,     0,     0,
     0,     0,     0,     0,    48,    49,    50,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    89,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    90,   151,     0,
     0,    91,     0,    52,   152,    53,    54,    55,    56,    57,
     0,     0,     0,     0,    58,   127,    59,    92,    93,    94,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   977,     0,     0,     0,     0,     0,     0,    86,     0,
     0,     0,     0,     0,     0,    87,   570,   570,    80,     0,
    28,   570,   570,     0,    87,     0,     0,     0,     0,     0,
     0,   226,     0,     0,   226,     0,     0,   226,  1013,    40,
    41,  1015,    42,    43,    44,     0,   646,     0,     0,     0,
     0,   570,    80,     0,     0,    88,   570,     0,     0,     0,
     0,     0,   570,   570,     0,     0,     0,     0,     0,     0,
     0,     0,    48,   343,     0,     0,     0,     0,  1047,     0,
  1048,    48,  1049,     0,     0,    89,     0,     0,     0,     0,
     0,     0,     0,   570,    89,    90,    51,     0,     0,    91,
     0,     0,     0,     0,    90,    51,     0,     0,    91,    80,
     0,     0,    58,     0,     0,    92,    93,    94,     0,     0,
    80,   791,     0,    22,    92,    93,    94,   149,   226,    24,
    25,   226,     0,     0,   122,     0,   313,   226,    27,    28,
    29,    30,   123,   124,    31,    32,    33,    34,     0,    35,
    36,    37,     0,    38,    39,     0,     0,     0,   314,    41,
     0,   315,   287,   316,     0,   150,    80,     0,    46,     0,
     0,     0,    47,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   317,   318,     0,     0,     0,   226,     0,     0,
     0,     0,     0,     0,    89,     0,     0,     0,     0,     0,
     0,     0,     0,    80,    90,   151,     0,     0,    91,     0,
    52,   152,    53,    54,    55,    56,    57,     0,     0,     0,
     0,    58,   127,   290,    92,    93,    94,    22,     0,     0,
     0,   149,     0,    24,    25,     0,     0,     0,   122,     0,
    26,     0,    27,    28,    29,    30,   123,   124,    31,    32,
    33,    34,     0,    35,    36,    37,     0,    38,    39,     0,
     0,     0,   518,    41,     0,   519,    43,   520,     0,   150,
     0,     0,    46,     0,     0,     0,    47,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,   521,    50,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    89,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    90,   151,
     0,     0,    91,     0,    52,   152,    53,    54,    55,    56,
    57,     0,     0,     0,     0,    58,   127,    59,    92,    93,
    94,    22,     0,     0,     0,    23,     0,    24,    25,     0,
     0,     0,     0,     0,    26,     0,    27,    28,    29,    30,
     0,     0,    31,    32,    33,    34,     0,    35,    36,    37,
     0,    38,    39,     0,     0,     0,    40,    41,     0,    42,
    43,    44,     0,   348,     0,     0,    46,     0,     0,     0,
    47,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    48,
    49,    50,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    89,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    51,     0,     0,     0,     0,    52,     0,
    53,    54,    55,    56,    57,     0,    22,     0,     0,    58,
    23,    59,    24,    25,     0,     0,     0,     0,     0,    26,
     0,    27,    28,    29,    30,     0,     0,    31,    32,    33,
    34,     0,    35,    36,    37,     0,    38,    39,     0,     0,
     0,    40,    41,     0,    42,    43,    44,    86,    45,     0,
     0,    46,     0,     0,    87,    47,   284,     0,   167,    28,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    48,    49,    50,     0,   285,    41,
     0,   286,   287,   288,    86,   289,     0,     0,     0,     0,
     0,   122,     0,   212,     0,     0,     0,     0,    51,   123,
   124,     0,     0,    52,     0,    53,    54,    55,    56,    57,
     0,    48,   218,   219,    58,   410,    59,     0,   411,   215,
   412,     0,   262,     0,    89,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    90,    51,     0,     0,    91,     0,
   177,     0,     0,     0,     0,     0,     0,     0,    48,   413,
   219,    58,     0,   290,    92,    93,    94,     0,     0,     0,
     0,    89,     0,     0,     0,     0,     0,    86,     0,     0,
     0,    90,    51,     0,   122,    91,   212,     0,   126,     0,
     0,     0,   123,   124,     0,     0,     0,     0,    58,   127,
   220,    92,    93,    94,     0,     0,     0,     0,   213,     0,
     0,   214,   215,   216,    86,   499,     0,     0,     0,     0,
     0,   122,     0,   212,     0,     0,     0,     0,     0,   123,
   124,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   218,   219,     0,   410,     0,     0,   411,   215,
   412,     0,   499,     0,    89,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    90,    51,     0,     0,    91,     0,
     0,   152,     0,     0,     0,     0,     0,     0,    48,   413,
   219,    58,   127,   220,    92,    93,    94,     0,     0,     0,
     0,    89,     0,     0,     0,     0,     0,    86,     0,     0,
     0,    90,    51,     0,    87,    91,   212,     0,   152,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    58,   127,
   220,    92,    93,    94,     0,     0,     0,     0,   213,     0,
     0,   214,   215,   216,    86,   470,     0,     0,   302,     0,
   303,    87,     0,   212,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   218,   219,     0,   410,     0,     0,   411,   215,
   412,     0,   470,     0,    89,   302,     0,   303,     0,     0,
     0,     0,     0,     0,    90,   304,     0,     0,    91,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    48,   413,
   219,    58,   127,   220,    92,    93,    94,     0,     0,     0,
     0,    89,     0,     0,     0,     0,    86,     0,     0,     0,
     0,    90,   304,    87,     0,    91,     0,     0,    28,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    58,   127,
   220,    92,    93,    94,     0,     0,     0,    40,    41,     0,
    42,    43,    44,    86,   301,     0,     0,   302,     0,   303,
    87,     0,   212,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    48,   343,     0,     0,   213,     0,     0,   214,   215,   216,
     0,   637,     0,   364,   302,     0,   303,     0,     0,     0,
     0,     0,     0,    90,   304,     0,     0,    91,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    48,   218,   219,
    58,   127,     0,    92,    93,    94,     0,     0,     0,     0,
    89,     0,     0,     0,     0,     0,    86,     0,     0,     0,
    90,    51,     0,    87,    91,   212,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    58,     0,   220,
    92,    93,    94,     0,     0,     0,     0,   410,     0,     0,
   411,   215,   412,    86,   637,     0,     0,   302,     0,   303,
    87,     0,   212,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    48,   413,   219,     0,   410,     0,     0,   411,   215,   412,
     0,   461,     0,    89,     0,     0,     0,     0,     0,     0,
     0,    86,     0,    90,    51,     0,     0,    91,    87,     0,
   212,     0,     0,     0,     0,     0,     0,    48,   413,   219,
    58,     0,   220,    92,    93,    94,     0,     0,     0,     0,
    89,     0,   624,     0,     0,   625,   215,   626,    86,   461,
    90,   151,     0,     0,    91,    87,   177,   212,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    58,     0,   220,
    92,    93,    94,     0,     0,    48,   627,   219,     0,   213,
     0,     0,   214,   215,   216,     0,   217,     0,    89,     0,
     0,     0,     0,     0,     0,     0,    86,     0,    90,    51,
     0,     0,    91,    87,   177,   212,     0,     0,     0,     0,
     0,     0,    48,   218,   219,    58,     0,   220,    92,    93,
    94,     0,     0,     0,     0,    89,     0,   410,     0,     0,
   411,   215,   412,    86,   217,    90,    51,     0,     0,    91,
    87,     0,   212,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    58,     0,   220,    92,    93,    94,     0,     0,
    48,   413,   219,     0,   410,     0,     0,   411,   215,   412,
     0,   787,     0,    89,     0,     0,     0,     0,     0,     0,
     0,    86,     0,    90,    51,     0,     0,    91,    87,     0,
   212,     0,     0,     0,     0,     0,     0,    48,   413,   219,
    58,     0,   220,    92,    93,    94,     0,     0,     0,     0,
    89,     0,   624,     0,     0,   625,   215,   626,    86,   217,
    90,    51,     0,     0,    91,    87,     0,   212,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    58,     0,   220,
    92,    93,    94,     0,     0,    48,   627,   219,     0,   213,
     0,     0,   214,   215,   216,     0,   884,     0,    89,     0,
     0,     0,     0,     0,     0,     0,    86,     0,    90,    51,
     0,     0,    91,    87,     0,   212,     0,     0,     0,     0,
     0,     0,    48,   218,   219,    58,     0,   220,    92,    93,
    94,     0,     0,     0,     0,    89,     0,   213,     0,     0,
   214,   215,   216,    86,   887,    90,    51,     0,     0,    91,
    87,     0,   212,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    58,     0,   220,    92,    93,    94,     0,     0,
    48,   218,   219,     0,   940,     0,     0,   941,   215,   412,
     0,   217,     0,    89,     0,     0,     0,     0,     0,     0,
     0,    86,     0,    90,    51,     0,     0,    91,    87,     0,
   212,     0,     0,     0,     0,     0,     0,    48,   942,   219,
    58,     0,   220,    92,    93,    94,     0,     0,     0,     0,
    89,     0,   945,     0,     0,   946,   215,   412,    86,   217,
    90,    51,     0,     0,    91,    87,     0,   212,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    58,     0,   220,
    92,    93,    94,     0,     0,    48,   947,   219,     0,   213,
     0,     0,   214,   215,   216,     0,   953,     0,    89,     0,
     0,     0,     0,     0,     0,     0,    86,     0,    90,    51,
     0,     0,    91,    87,    86,   212,     0,     0,     0,     0,
     0,    87,    48,   218,   219,    58,     0,   220,    92,    93,
    94,     0,     0,     0,     0,    89,     0,   994,     0,     0,
   995,   215,   412,    86,   217,    90,    51,     0,     0,    91,
    87,     0,   475,     0,     0,   302,     0,   303,     0,     0,
     0,     0,    58,     0,   220,    92,    93,    94,     0,     0,
    48,   996,   219,     0,     0,    87,     0,     0,    48,     0,
     0,   142,     0,    89,     0,     0,     0,     0,     0,     0,
     0,    89,     0,    90,    51,     0,     0,    91,     0,     0,
     0,    90,    51,     0,     0,    91,    88,    48,    87,     0,
    58,     0,   220,    92,    93,    94,     0,     0,    58,   127,
    89,    92,    93,    94,     3,     0,     0,     0,     0,     0,
    90,    51,    48,     0,    91,     4,     5,     6,     7,    88,
     0,     0,     0,     0,     0,    89,     0,    58,     0,     8,
    92,    93,    94,     0,    87,    90,    51,     0,     0,    91,
     9,     0,     0,    10,     0,    48,     0,     0,     0,     0,
     0,     0,   794,     0,     0,    92,    93,    94,    89,     0,
     0,     0,    87,     0,     0,    88,     0,     0,    90,    51,
     0,     0,    91,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   796,     0,     0,    92,    93,
    94,    48,     0,   893,     0,    11,    12,    13,    87,    14,
    15,    16,    17,    18,    89,    19,    20,     0,     0,     0,
    87,     0,     0,     0,    90,    51,     0,     0,    91,    48,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    88,
     0,   892,    89,     0,    92,    93,    94,     0,     0,    87,
     0,    88,    90,    51,     0,    87,    91,     0,     0,     0,
     0,     0,     0,     0,     0,    48,     0,     0,     0,   894,
     0,     0,   895,    93,    94,     0,     0,    48,    89,     0,
    88,     0,     0,    87,     0,     0,    88,     0,    90,    51,
    89,     0,    91,     0,     0,     0,     0,     0,     0,     0,
    90,    51,     0,     0,    91,   894,    48,     0,    92,    93,
    94,    87,    48,     0,    88,     0,     0,   791,     0,    89,
  1051,    93,    94,     0,     0,    89,     0,     0,     0,    90,
    51,     0,     0,    91,     0,    90,    51,     0,     0,    91,
    48,     0,    88,     0,    87,     0,   794,     0,     0,  1052,
    93,    94,   791,    89,     0,  1056,    93,    94,     0,    87,
     0,     0,     0,    90,    51,     0,     0,    91,    48,     0,
     0,     0,     0,     0,     0,    88,     0,     0,     0,     0,
   794,    89,     0,  1057,    93,    94,     0,     0,     0,     0,
    88,    90,    51,     0,     0,    91,    87,     0,     0,     0,
     0,    48,     0,     0,     0,    87,     0,     0,   894,     0,
     0,  1088,    93,    94,    89,     0,    48,     0,     0,     0,
     0,     0,     0,     0,    90,    51,     0,    88,    91,    89,
     0,     0,     0,     0,     0,     0,    88,     0,     0,    90,
    51,   894,     0,    91,  1091,    93,    94,     0,     0,     0,
     0,     0,     0,    48,     0,     0,   791,     0,     0,  1093,
    93,    94,    48,     0,     0,     0,    89,     0,     0,     0,
     0,     0,     0,     0,     0,    89,    90,    51,     0,     0,
    91,     0,     0,     0,     0,    90,    51,     0,     0,    91,
     0,     0,     0,   794,     0,     0,  1094,    93,    94,     0,
     0,     0,   894,     0,     0,  1119,    93,    94
};

static const short yycheck[] = {    13,
   171,     2,    90,    91,   142,   146,   545,    14,   171,    49,
    50,   195,   688,    36,   185,   301,   302,   303,    23,    33,
   201,     1,   185,     1,    14,     2,   359,   338,     1,    46,
   201,    46,    45,   121,     8,    46,    17,    12,   201,    36,
    36,     9,    10,    11,    12,    46,    14,    15,    16,    17,
    18,    19,    36,     1,   150,   403,   152,   405,    45,   111,
   408,   113,    46,    45,    36,    45,    36,    45,    45,    46,
    93,    94,    45,    45,    88,    45,    45,    17,    95,   148,
    95,    86,    93,    94,    36,    81,    36,   477,   478,   479,
   480,   481,    36,    45,    75,    45,    93,    94,   111,    45,
    48,   114,   142,    36,    84,   112,    52,    46,   279,   116,
   281,   125,    45,    95,    45,    95,   185,    95,   281,    93,
    94,   126,   112,    95,    45,    95,   116,   132,   142,   111,
   199,   111,   201,   111,   148,    75,   150,    81,   111,   111,
   145,   111,   111,    95,   149,    95,   147,   115,   116,   117,
   118,   119,   111,   692,   693,  1046,    95,   171,   339,   111,
   148,   111,    95,   150,   252,   152,   180,   338,   339,    45,
   147,   185,   186,   150,    15,   176,   339,    46,   111,    45,
   111,   182,   183,   184,   470,   199,    36,   201,  1079,   475,
   191,   192,   193,   194,   111,    45,    45,   266,   267,   176,
   486,    36,    45,   217,   150,   182,   183,   184,    45,    50,
    45,   199,    45,    45,   191,   192,   193,   194,    38,    13,
   207,    41,    71,    43,    48,    45,    95,   323,   205,   206,
   176,   177,   301,   302,   303,   111,   332,   333,   586,   253,
   588,   209,   590,   591,    45,    95,   260,   261,   262,    45,
    17,     2,    72,    59,   268,   541,    17,   111,   272,   273,
    66,   111,   111,    95,    36,   270,   271,    45,   111,   111,
   339,   114,     1,    45,   111,   289,   111,   317,   318,   111,
    74,    45,    76,    77,    78,   824,    80,   301,   302,   303,
   966,   111,    45,    45,    45,    46,    48,   298,    50,    45,
    51,    52,    45,    45,   373,    99,    84,    17,    75,   323,
    45,   482,    45,   301,    75,   111,    45,    95,   114,   482,
    84,   298,   100,    95,   465,   339,    45,   133,   134,   135,
   136,    95,    45,   111,   335,    45,   323,    88,    89,   111,
    36,    84,    48,   289,    45,   332,   333,   111,   659,   682,
   683,   637,    95,   639,    50,    45,    46,   371,   335,   373,
   112,   348,    95,   547,   650,    75,   507,   100,   111,    46,
    71,   348,    45,    46,   125,    37,    95,    38,   111,    17,
    41,   100,    43,    46,    45,   373,    45,   401,   778,   779,
   780,   142,   111,    36,    45,    46,   147,    46,    45,   150,
   151,   470,   348,   499,   111,    95,   113,    45,    46,   355,
   111,    72,    45,    46,   483,    78,    46,    80,    95,    99,
   171,   111,    95,    84,    45,   176,   177,    45,   967,   968,
   181,   182,   183,   184,    95,   542,    45,    75,   111,   100,
   191,   192,   193,   194,    95,    46,    95,   461,    95,   200,
   111,   202,   203,   204,   205,   206,   470,    51,   599,   464,
   111,   475,    95,    17,   111,    95,   217,   536,   482,   483,
    88,    89,   541,   487,    95,    17,   227,    45,   111,    45,
    45,   521,   470,   497,   290,   499,    95,   501,   659,   800,
   111,    16,    46,    18,    19,   483,    45,    36,    15,    93,
    94,    50,   111,    38,    46,    45,    41,   125,    43,    46,
    45,   262,   499,    38,    39,   461,    41,    42,    43,    36,
    45,    75,   536,     1,   142,   539,   667,    95,    36,    95,
    95,    17,   150,    75,   340,   341,    45,    72,   289,    81,
    82,    19,    46,   111,    83,   111,   111,   298,   536,    17,
   301,   658,    17,   304,   661,    95,    47,    17,   176,    45,
    38,    39,    45,    41,    42,    43,   372,    45,    36,   320,
   639,   111,   323,   550,   551,    83,   111,   523,    46,    81,
    82,    46,    17,   690,   335,    45,    46,    38,   113,    75,
    41,    95,    46,    38,    72,    17,    41,   348,    43,   217,
    45,    36,    93,    94,   355,   776,   357,    75,    46,   227,
    75,    46,   923,   364,    95,    75,    14,    46,   619,    46,
   931,    81,    82,   637,    46,   639,    50,    72,   914,   800,
    49,   382,   646,   111,   113,   113,   774,    36,   819,    84,
    75,    95,   619,    46,   262,    83,    15,    45,   819,   737,
    95,    17,    51,    75,   460,    46,   819,   671,   672,    81,
    82,    95,    46,   664,    93,    94,   111,    36,    95,   980,
   421,   289,   384,    71,   386,   387,   388,   389,   390,   391,
    46,   393,   394,   301,   396,   397,    84,   664,   999,    46,
   704,    46,    95,    46,    93,    94,    94,    95,    46,    95,
    98,     1,   809,    45,    95,   323,    48,     7,    50,    75,
   461,    95,    46,   111,    14,    46,   114,   115,   116,   470,
    46,    46,    46,    38,   475,    46,    41,    46,    46,    46,
   348,   482,    46,    46,    46,   703,    17,   355,    95,   357,
    95,    78,    95,    80,    46,    45,   364,    95,   499,    17,
   819,   502,   923,   767,    78,    74,    80,    76,    77,    78,
   931,    80,    99,    16,    95,    18,    19,   266,   267,    95,
   775,    71,   523,   787,    95,   526,   790,    95,    95,   793,
    99,    95,    95,    95,    84,    38,    39,    46,    41,    42,
    43,    46,    45,    95,    94,    95,   937,   548,    98,   550,
   551,    46,    46,   421,     1,   819,    46,   808,    15,   980,
     7,   111,  1098,    80,   114,   115,   116,    14,    46,    72,
    73,    38,    46,    46,    41,    15,    99,    46,   999,    36,
    46,   808,    99,    15,    45,    15,    95,    81,    82,    50,
    95,    46,    46,   461,    46,   914,    36,    46,    45,   863,
    95,    48,   470,    50,    36,    95,    36,   475,   872,    46,
   113,    46,    36,     1,   865,    81,    82,    95,   619,     7,
   884,    95,    95,   887,    71,   876,    14,   984,   985,   893,
    36,   499,   989,   990,   991,   992,   637,    84,   865,    46,
    95,    95,    46,    95,    46,   646,    95,    94,    95,   876,
    74,    98,    76,    77,    78,   523,    80,    45,    95,    46,
    48,    36,    50,   664,   111,   112,    46,   114,   115,   116,
   934,   922,    46,  1030,    49,    99,    46,  1034,  1035,   943,
   944,    46,    37,    71,   948,   949,   950,   951,    95,   953,
    15,    95,   111,    95,   113,   922,    84,    46,    46,    74,
   662,   663,    46,    78,    79,    80,    94,    95,    95,    36,
    98,    36,    35,    28,    15,    95,    38,    14,   969,    41,
   111,    95,   113,   111,   112,    95,   114,   115,   116,   993,
    95,    49,    35,   997,   998,    36,   698,   699,     7,   701,
   702,    16,   969,    18,    19,    14,    95,    95,    45,    50,
    72,    95,    46,    22,    23,    78,    74,    80,    76,    77,
    78,    35,    80,    38,    39,    49,    41,    42,    43,   637,
    45,    36,    83,   774,    71,    78,    45,    80,   646,  1136,
  1137,    99,  1139,  1140,     2,    50,   787,    84,    51,   790,
  1147,    50,   793,  1150,  1151,  1152,    46,    94,    95,    93,
    94,    98,    71,    46,    78,  1162,    80,   808,    93,    94,
    46,    45,    46,    31,   111,    84,    50,   114,   115,   116,
   111,    38,   113,  1050,    41,    94,    95,    45,    46,    98,
    93,    94,   101,    51,    52,    78,    50,    80,   113,    51,
    75,    59,   111,   112,    75,   114,   115,   116,    66,    85,
    86,    87,    88,    89,    90,    72,    36,    93,    94,    78,
    79,    80,  1126,  1127,   865,  1129,  1130,    49,    45,    46,
    88,    89,    46,    50,  1138,   876,    46,  1141,  1142,  1143,
    46,    93,    94,   884,    38,    38,   887,    41,    41,  1153,
    11,   574,   893,   576,    74,    95,   579,     1,    78,    79,
    80,    46,    46,     7,    78,    46,    80,   125,    74,   592,
    14,    46,    78,    79,    80,   133,   134,   135,   136,   787,
   138,   922,   790,   141,   142,   793,    45,    46,    46,   147,
    74,    50,   150,   151,    78,    79,    80,    78,   111,    80,
   113,    45,    36,    78,    48,    80,    80,    46,    38,    45,
    46,    41,   953,   171,    50,    78,    74,    80,   176,   177,
    78,    79,    80,   181,   182,   183,   184,    71,   969,   187,
   653,   654,    46,   191,   192,   193,   194,    85,    86,    78,
    84,    80,   200,    81,   202,   203,   204,   205,   206,   111,
    94,    95,   114,    14,    98,    38,    45,    46,    41,   217,
    74,    50,     2,    49,    78,    79,    80,   111,    80,   227,
   114,   115,   116,    46,    38,    38,   884,    41,    41,   887,
     4,     5,     6,   706,    45,   893,    46,    95,   711,    72,
   713,     4,   715,     6,   717,    38,   719,   720,    41,    16,
   723,    18,    19,   726,   262,    45,    46,    46,   731,  1050,
    71,    51,    52,    38,    74,    11,    41,    46,    78,    79,
    80,    38,    39,    84,    41,    42,    43,    48,    45,    85,
    86,   289,   290,    94,    95,     8,    80,    98,    46,    46,
   298,  1082,    95,   301,    95,   953,   304,    48,    88,    89,
   111,    46,    56,   114,   115,   116,    46,    32,    46,    46,
    36,    46,   320,    46,    45,   323,    74,    11,  1109,    80,
    78,    79,    80,    50,    46,   798,   799,   335,    46,    83,
    84,    50,   340,   341,   342,   125,    46,    91,    92,    95,
   348,    95,    96,    97,    46,    95,   113,   355,    51,   357,
    46,    95,   142,    46,    51,    36,   364,   147,    46,   832,
   150,   151,    48,    46,   372,   838,    46,   840,    46,   842,
    46,    74,     7,    46,   382,    78,    79,    80,    74,    14,
    95,   171,    78,    79,    80,    80,   176,   177,    46,    95,
    95,   181,   182,   183,   184,    36,    46,    81,    45,    45,
    49,   191,   192,   193,   194,    49,    49,    36,    46,    51,
    45,    51,    51,   421,    45,    48,    74,    36,     7,    46,
    78,    79,    80,    46,    74,    14,    46,   217,    78,    79,
    80,    95,    95,    22,    23,    51,    71,   227,    46,    49,
   448,   449,   450,    46,    46,    46,   454,   455,   456,    84,
   458,    46,   460,   461,    46,   463,    45,    37,    49,    94,
    95,    95,   470,    98,    74,    49,    48,   475,    78,    79,
    80,    46,   262,    46,   482,    16,   111,    18,    19,   114,
   115,   116,    71,    74,    45,    51,    46,    78,    79,    80,
    46,   499,    46,    46,   502,    84,    51,    38,    39,   289,
    41,    42,    43,   511,    45,    94,    95,    49,   298,    98,
    46,   301,   101,    46,   304,   523,    37,   111,   526,    49,
    46,   111,   111,   112,   111,   114,   115,   116,    45,    45,
   320,    45,    74,   323,    46,    46,    78,    79,    80,    46,
   548,    50,   550,   551,    74,   335,  1019,    46,    78,    79,
    80,  1024,    50,     7,    50,   237,    50,    50,   348,    19,
    14,    50,    16,    46,    51,   355,     2,   357,    22,    23,
    46,    74,   113,    45,   364,    78,    79,    80,    38,    39,
  1053,    41,    42,    43,    38,  1058,    45,    41,    42,    43,
    46,    45,  1065,   601,   602,    46,   111,   605,    46,    45,
   608,    76,    77,    78,   612,    80,   614,   111,   616,    45,
    46,   619,    49,    19,    45,   623,    52,    71,    72,    73,
   628,    50,  1095,    50,    99,    50,    45,    95,    46,   637,
    84,   421,    38,    39,    45,    41,    42,    43,   646,    45,
    94,    95,    46,    46,    98,    46,    95,   101,    95,    41,
    95,    41,    88,    89,    51,    46,   664,   111,   112,   113,
   114,   115,   116,    56,    51,    51,    72,    51,    51,    51,
    46,   461,    46,    85,    86,    87,    88,    89,    90,    46,
   470,    93,    94,    46,    46,   475,    95,    95,    95,   125,
    83,    84,   482,    95,    41,    46,    46,    46,    91,    92,
    93,    94,    95,    96,    97,   111,   142,   113,    46,   499,
    51,   147,    51,    81,   150,    51,   114,    46,   114,   114,
   114,   403,    46,   405,    46,    46,   408,    45,    51,    95,
    46,    46,    46,   523,   742,    46,    46,    46,    46,   747,
   176,   177,    46,   114,   752,   181,   182,   183,   184,   114,
   114,    46,    50,   114,    50,   191,   192,   193,   194,    46,
    50,    50,    46,     7,   772,    46,   774,    46,    46,   114,
    14,    46,     0,    50,    50,    19,    56,    50,    50,   787,
    50,   217,   790,    51,    51,   793,    51,    51,    51,    51,
    51,   227,    51,     0,    38,    39,    99,    41,    42,    43,
   808,    45,   399,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,   547,   482,    95,    96,    97,   570,   621,
   648,   506,    -1,    -1,    -1,    -1,   262,    71,    72,   619,
    -1,    -1,    -1,    -1,   448,   449,   450,    -1,    -1,     7,
    84,    -1,   456,    -1,    -1,    -1,    14,   637,    -1,    -1,
    94,    95,    -1,   289,    98,    -1,   646,   865,    -1,    -1,
    -1,    -1,   298,    -1,    -1,   301,    -1,   111,   876,    -1,
   114,   115,   116,    -1,   664,    -1,   884,    45,    -1,   887,
    48,    -1,    50,    -1,    -1,   893,    -1,   323,    -1,   571,
    -1,    -1,   574,    -1,   576,    -1,    -1,   579,    -1,   335,
    -1,    -1,    -1,    71,   586,    -1,   588,    -1,   590,   591,
   592,    -1,   348,    -1,   922,    -1,    84,    -1,    -1,   355,
    -1,   357,    -1,    -1,    -1,    -1,    94,    95,   364,    -1,
    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   111,   112,   953,   114,   115,   116,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   969,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   652,   653,   654,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   774,   421,    -1,    -1,   602,    -1,
   604,   605,    -1,   607,   608,    -1,   610,   787,    -1,   613,
   790,   615,   616,   793,   618,     7,    -1,    -1,    -1,    -1,
    -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,   808,    -1,
    22,    23,    -1,    -1,   706,   461,   708,    -1,    -1,   711,
    -1,   713,    -1,   715,   470,   717,   718,   719,   720,   475,
    -1,   723,    -1,    45,   726,    -1,    -1,    -1,    -1,   731,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,    71,
    -1,    -1,    -1,    -1,    -1,   865,    -1,    -1,    -1,    -1,
    -1,    -1,    84,    -1,    -1,    -1,   876,   523,    -1,    14,
    -1,    -1,    94,    95,   884,    -1,    98,   887,    -1,    -1,
    -1,    -1,    -1,   893,    -1,    -1,    -1,    -1,    -1,   111,
   112,    -1,   114,   115,   116,    -1,   798,   799,    -1,    -1,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   742,    -1,
   744,   745,   922,   747,    -1,   749,   750,    -1,    -1,    -1,
   754,   755,    -1,    -1,    -1,   759,    71,   761,   762,    -1,
   832,   765,   766,    -1,    -1,    -1,   838,    -1,   840,    84,
   842,    -1,    -1,   953,    -1,    -1,    -1,    -1,    -1,    94,
    95,    -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,   969,
    -1,    -1,    -1,   619,    -1,    -1,   111,    -1,    -1,   114,
   115,   116,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
     7,   637,     9,    10,    -1,    -1,    -1,    14,    -1,    16,
   646,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    -1,    29,    30,    31,    -1,    33,    34,   664,    -1,
    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,   853,
    -1,    48,    -1,   857,    -1,    52,   860,   861,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   870,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,
    -1,    98,    -1,   100,   101,   102,   103,   104,   105,   106,
    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   935,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,
    -1,    -1,    -1,    -1,    -1,    14,  1018,  1019,   774,    -1,
    19,  1023,  1024,    -1,    14,    -1,    -1,    -1,    -1,    -1,
    -1,   787,    -1,    -1,   790,    -1,    -1,   793,   972,    38,
    39,   975,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
    -1,  1053,   808,    -1,    -1,    45,  1058,    -1,    -1,    -1,
    -1,    -1,  1064,  1065,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,  1012,    -1,
  1014,    71,  1016,    -1,    -1,    84,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1095,    84,    94,    95,    -1,    -1,    98,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,   865,
    -1,    -1,   111,    -1,    -1,   114,   115,   116,    -1,    -1,
   876,   111,    -1,     3,   114,   115,   116,     7,   884,     9,
    10,   887,    -1,    -1,    14,    -1,    16,   893,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
    30,    31,    -1,    33,    34,    -1,    -1,    -1,    38,    39,
    -1,    41,    42,    43,    -1,    45,   922,    -1,    48,    -1,
    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    72,    73,    -1,    -1,    -1,   953,    -1,    -1,
    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   969,    94,    95,    -1,    -1,    98,    -1,
   100,   101,   102,   103,   104,   105,   106,    -1,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   116,     3,    -1,    -1,
    -1,     7,    -1,     9,    10,    -1,    -1,    -1,    14,    -1,
    16,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    -1,    29,    30,    31,    -1,    33,    34,    -1,
    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    -1,    -1,    98,    -1,   100,   101,   102,   103,   104,   105,
   106,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
   116,     3,    -1,    -1,    -1,     7,    -1,     9,    10,    -1,
    -1,    -1,    -1,    -1,    16,    -1,    18,    19,    20,    21,
    -1,    -1,    24,    25,    26,    27,    -1,    29,    30,    31,
    -1,    33,    34,    -1,    -1,    -1,    38,    39,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,
    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    -1,    -1,    -1,    -1,   100,    -1,
   102,   103,   104,   105,   106,    -1,     3,    -1,    -1,   111,
     7,   113,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,
    -1,    18,    19,    20,    21,    -1,    -1,    24,    25,    26,
    27,    -1,    29,    30,    31,    -1,    33,    34,    -1,    -1,
    -1,    38,    39,    -1,    41,    42,    43,     7,    45,    -1,
    -1,    48,    -1,    -1,    14,    52,    16,    -1,    18,    19,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    38,    39,
    -1,    41,    42,    43,     7,    45,    -1,    -1,    -1,    -1,
    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,    95,    22,
    23,    -1,    -1,   100,    -1,   102,   103,   104,   105,   106,
    -1,    71,    72,    73,   111,    38,   113,    -1,    41,    42,
    43,    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,
    -1,    84,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,
    -1,    94,    95,    -1,    14,    98,    16,    -1,   101,    -1,
    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,   115,   116,    -1,    -1,    -1,    -1,    38,    -1,
    -1,    41,    42,    43,     7,    45,    -1,    -1,    -1,    -1,
    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    22,
    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,
    43,    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
    -1,    84,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,
    -1,    94,    95,    -1,    14,    98,    16,    -1,   101,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,   115,   116,    -1,    -1,    -1,    -1,    38,    -1,
    -1,    41,    42,    43,     7,    45,    -1,    -1,    48,    -1,
    50,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,
    43,    -1,    45,    -1,    84,    48,    -1,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
    -1,    84,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,
    -1,    94,    95,    14,    -1,    98,    -1,    -1,    19,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,   115,   116,    -1,    -1,    -1,    38,    39,    -1,
    41,    42,    43,     7,    45,    -1,    -1,    48,    -1,    50,
    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,    -1,    84,    48,    -1,    50,    -1,    -1,    -1,
    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
   111,   112,    -1,   114,   115,   116,    -1,    -1,    -1,    -1,
    84,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,
    94,    95,    -1,    14,    98,    16,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,   113,
   114,   115,   116,    -1,    -1,    -1,    -1,    38,    -1,    -1,
    41,    42,    43,     7,    45,    -1,    -1,    48,    -1,    50,
    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    94,    95,    -1,    -1,    98,    14,    -1,
    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,    -1,
    84,    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,
    94,    95,    -1,    -1,    98,    14,   100,    16,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,   113,
   114,   115,   116,    -1,    -1,    71,    72,    73,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    94,    95,
    -1,    -1,    98,    14,   100,    16,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,   111,    -1,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    38,    -1,    -1,
    41,    42,    43,     7,    45,    94,    95,    -1,    -1,    98,
    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,    -1,   113,   114,   115,   116,    -1,    -1,
    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    94,    95,    -1,    -1,    98,    14,    -1,
    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,    -1,
    84,    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,
    94,    95,    -1,    -1,    98,    14,    -1,    16,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,   113,
   114,   115,   116,    -1,    -1,    71,    72,    73,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    94,    95,
    -1,    -1,    98,    14,    -1,    16,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,   111,    -1,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    38,    -1,    -1,
    41,    42,    43,     7,    45,    94,    95,    -1,    -1,    98,
    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,    -1,   113,   114,   115,   116,    -1,    -1,
    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    94,    95,    -1,    -1,    98,    14,    -1,
    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,    -1,
    84,    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,
    94,    95,    -1,    -1,    98,    14,    -1,    16,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,   113,
   114,   115,   116,    -1,    -1,    71,    72,    73,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    94,    95,
    -1,    -1,    98,    14,     7,    16,    -1,    -1,    -1,    -1,
    -1,    14,    71,    72,    73,   111,    -1,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    38,    -1,    -1,
    41,    42,    43,     7,    45,    94,    95,    -1,    -1,    98,
    14,    -1,    45,    -1,    -1,    48,    -1,    50,    -1,    -1,
    -1,    -1,   111,    -1,   113,   114,   115,   116,    -1,    -1,
    71,    72,    73,    -1,    -1,    14,    -1,    -1,    71,    -1,
    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    84,    -1,    94,    95,    -1,    -1,    98,    -1,    -1,
    -1,    94,    95,    -1,    -1,    98,    45,    71,    14,    -1,
   111,    -1,   113,   114,   115,   116,    -1,    -1,   111,   112,
    84,   114,   115,   116,     9,    -1,    -1,    -1,    -1,    -1,
    94,    95,    71,    -1,    98,    20,    21,    22,    23,    45,
    -1,    -1,    -1,    -1,    -1,    84,    -1,   111,    -1,    34,
   114,   115,   116,    -1,    14,    94,    95,    -1,    -1,    98,
    45,    -1,    -1,    48,    -1,    71,    -1,    -1,    -1,    -1,
    -1,    -1,   111,    -1,    -1,   114,   115,   116,    84,    -1,
    -1,    -1,    14,    -1,    -1,    45,    -1,    -1,    94,    95,
    -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,   114,   115,
   116,    71,    -1,    45,    -1,   100,   101,   102,    14,   104,
   105,   106,   107,   108,    84,   110,   111,    -1,    -1,    -1,
    14,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    71,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,
    -1,   111,    84,    -1,   114,   115,   116,    -1,    -1,    14,
    -1,    45,    94,    95,    -1,    14,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,   111,
    -1,    -1,   114,   115,   116,    -1,    -1,    71,    84,    -1,
    45,    -1,    -1,    14,    -1,    -1,    45,    -1,    94,    95,
    84,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    -1,    -1,    98,   111,    71,    -1,   114,   115,
   116,    14,    71,    -1,    45,    -1,    -1,   111,    -1,    84,
   114,   115,   116,    -1,    -1,    84,    -1,    -1,    -1,    94,
    95,    -1,    -1,    98,    -1,    94,    95,    -1,    -1,    98,
    71,    -1,    45,    -1,    14,    -1,   111,    -1,    -1,   114,
   115,   116,   111,    84,    -1,   114,   115,   116,    -1,    14,
    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,
   111,    84,    -1,   114,   115,   116,    -1,    -1,    -1,    -1,
    45,    94,    95,    -1,    -1,    98,    14,    -1,    -1,    -1,
    -1,    71,    -1,    -1,    -1,    14,    -1,    -1,   111,    -1,
    -1,   114,   115,   116,    84,    -1,    71,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    45,    98,    84,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    94,
    95,   111,    -1,    98,   114,   115,   116,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    -1,    -1,   111,    -1,    -1,   114,
   115,   116,    71,    -1,    -1,    -1,    84,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    84,    94,    95,    -1,    -1,
    98,    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,
    -1,    -1,    -1,   111,    -1,    -1,   114,   115,   116,    -1,
    -1,    -1,   111,    -1,    -1,   114,   115,   116
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 147 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 177 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 178 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 182 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 183 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 187 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 191 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 192 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 210 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 213 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 215 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 220 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 225 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 228 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 233 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 243 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 348 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 349 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 351 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 352 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 356 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 358 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 359 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 361 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 362 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 372 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 373 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 374 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 380 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 383 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 389 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 393 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 398 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 406 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 417 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 420 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 64:
#line 433 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 65:
#line 438 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 66:
#line 442 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 67:
#line 448 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 68:
#line 449 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 69:
#line 455 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 70:
#line 460 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 71:
#line 465 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 72:
#line 474 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 73:
#line 482 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 74:
#line 493 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 75:
#line 506 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 76:
#line 507 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 77:
#line 508 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 513 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 79:
#line 517 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 80:
#line 521 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 81:
#line 525 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 82:
#line 529 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 533 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 539 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 85:
#line 541 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 86:
#line 544 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 87:
#line 549 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 88:
#line 560 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 89:
#line 561 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 90:
#line 562 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 91:
#line 565 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 92:
#line 566 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 93:
#line 567 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 94:
#line 575 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 95:
#line 579 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 96:
#line 583 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 588 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 594 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 599 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 100:
#line 606 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 101:
#line 612 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 102:
#line 623 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 103:
#line 624 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 104:
#line 625 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 105:
#line 630 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 106:
#line 637 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 107:
#line 640 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 108:
#line 641 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 650 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 110:
#line 653 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 111:
#line 654 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 112:
#line 655 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 656 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 657 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 115:
#line 658 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 116:
#line 659 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 117:
#line 663 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 118:
#line 665 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 119:
#line 667 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 120:
#line 669 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 121:
#line 671 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 122:
#line 673 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 675 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 125:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 128:
#line 685 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 129:
#line 687 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 691 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 131:
#line 692 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 132:
#line 695 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 133:
#line 696 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 134:
#line 697 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 135:
#line 700 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 136:
#line 701 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 137:
#line 702 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 138:
#line 705 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 139:
#line 709 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 140:
#line 715 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 141:
#line 717 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 142:
#line 719 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 143:
#line 721 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 144:
#line 723 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 145:
#line 724 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 146:
#line 729 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 147:
#line 730 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 148:
#line 731 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 149:
#line 737 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 150:
#line 738 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 151:
#line 740 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 152:
#line 742 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 153:
#line 744 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 154:
#line 746 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 155:
#line 747 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 156:
#line 753 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 157:
#line 754 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 158:
#line 756 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 159:
#line 758 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 160:
#line 763 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 161:
#line 764 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 162:
#line 768 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 163:
#line 769 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 164:
#line 773 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 165:
#line 774 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 166:
#line 778 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 167:
#line 779 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 168:
#line 780 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 169:
#line 781 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 170:
#line 782 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 171:
#line 784 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 785 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 786 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 787 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 788 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 176:
#line 789 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 790 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 791 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 792 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 795 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 181:
#line 796 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 182:
#line 797 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 183:
#line 798 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 184:
#line 799 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 185:
#line 800 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 186:
#line 801 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 187:
#line 802 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 188:
#line 805 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 189:
#line 806 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 190:
#line 810 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 191:
#line 811 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 192:
#line 812 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 193:
#line 813 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 194:
#line 820 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 195:
#line 824 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 196:
#line 832 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 197:
#line 844 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 198:
#line 848 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 199:
#line 857 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 200:
#line 869 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 201:
#line 873 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 202:
#line 881 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 203:
#line 884 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 204:
#line 885 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 205:
#line 890 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 206:
#line 894 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 207:
#line 898 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 208:
#line 903 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 209:
#line 906 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 210:
#line 915 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 211:
#line 916 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 212:
#line 917 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 213:
#line 920 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 214:
#line 921 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 215:
#line 924 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 216:
#line 925 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 217:
#line 928 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 218:
#line 929 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 219:
#line 930 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 220:
#line 931 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 221:
#line 932 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 222:
#line 933 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 223:
#line 936 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 224:
#line 937 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 225:
#line 938 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 226:
#line 939 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 227:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 228:
#line 941 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 229:
#line 943 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 230:
#line 944 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 231:
#line 946 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 232:
#line 947 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 233:
#line 949 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 234:
#line 957 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 235:
#line 958 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 236:
#line 959 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 237:
#line 960 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 238:
#line 961 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 239:
#line 967 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 240:
#line 969 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 241:
#line 970 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 242:
#line 973 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 243:
#line 974 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 244:
#line 975 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 245:
#line 978 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 246:
#line 979 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 982 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 248:
#line 983 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 249:
#line 986 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 250:
#line 987 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 251:
#line 990 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 991 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 996 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 254:
#line 997 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 255:
#line 998 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 256:
#line 999 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 257:
#line 1000 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 258:
#line 1001 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 259:
#line 1009 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 260:
#line 1010 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 261:
#line 1014 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 262:
#line 1015 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 263:
#line 1022 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 264:
#line 1026 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 265:
#line 1031 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 266:
#line 1037 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 267:
#line 1043 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 268:
#line 1049 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 269:
#line 1059 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 270:
#line 1065 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 271:
#line 1071 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 272:
#line 1077 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 273:
#line 1085 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 274:
#line 1089 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 275:
#line 1093 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 276:
#line 1099 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 277:
#line 1103 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 278:
#line 1107 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 279:
#line 1113 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 280:
#line 1119 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 281:
#line 1126 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 282:
#line 1132 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 283:
#line 1138 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 284:
#line 1142 "msv.y"
{
		  CSyntaxNode* pChild00=new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
		  CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, pChild00, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 285:
#line 1150 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 286:
#line 1155 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 287:
#line 1159 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 288:
#line 1163 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 289:
#line 1167 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 290:
#line 1173 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 291:
#line 1179 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 292:
#line 1185 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 293:
#line 1192 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 294:
#line 1200 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 295:
#line 1206 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 296:
#line 1221 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 297:
#line 1226 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 298:
#line 1231 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 299:
#line 1239 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 300:
#line 1246 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 301:
#line 1252 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 302:
#line 1258 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 303:
#line 1261 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 304:
#line 1271 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 305:
#line 1282 "msv.y"
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
case 306:
#line 1285 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 307:
#line 1286 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 308:
#line 1291 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 309:
#line 1295 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(ACTUAL_PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 310:
#line 1304 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1305 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 312:
#line 1313 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 313:
#line 1315 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 314:
#line 1322 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 315:
#line 1324 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 316:
#line 1330 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 317:
#line 1331 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 318:
#line 1335 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 319:
#line 1340 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 320:
#line 1345 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 321:
#line 1350 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 322:
#line 1357 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 323:
#line 1360 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 324:
#line 1361 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 325:
#line 1367 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 326:
#line 1369 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 327:
#line 1389 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 328:
#line 1390 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 329:
#line 1392 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 330:
#line 1394 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 331:
#line 1395 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 332:
#line 1401 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 333:
#line 1408 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 334:
#line 1416 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 335:
#line 1424 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 336:
#line 1428 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 337:
#line 1432 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 338:
#line 1438 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 339:
#line 1442 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 340:
#line 1448 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 341:
#line 1452 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 342:
#line 1459 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 343:
#line 1463 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 344:
#line 1467 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 345:
#line 1474 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 346:
#line 1478 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 347:
#line 1481 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 348:
#line 1486 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 349:
#line 1495 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 350:
#line 1496 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 351:
#line 1502 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 352:
#line 1503 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 353:
#line 1507 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 354:
#line 1508 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 355:
#line 1513 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 356:
#line 1514 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 357:
#line 1515 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 358:
#line 1516 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1517 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 360:
#line 1520 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 361:
#line 1521 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 362:
#line 1522 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 363:
#line 1528 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 364:
#line 1529 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 365:
#line 1530 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 366:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1533 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1534 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1536 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1537 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1538 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1539 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1541 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1542 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1543 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1544 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1545 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1546 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1547 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 380:
#line 1551 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 381:
#line 1552 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 382:
#line 1553 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 383:
#line 1554 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 384:
#line 1555 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 385:
#line 1556 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 386:
#line 1557 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1559 "msv.y"
