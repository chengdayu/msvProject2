
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	IF	262
#define	ELSE	263
#define	EMPTY	264
#define	AWAIT	265
#define	PROJECTION	266
#define	PBEGIN	267
#define	PEND	268
#define	POINTERNULL	269
#define	ARRAY	270
#define	STRUCT	271
#define	DOT	272
#define	UNION	273
#define	FILEDECLARATION	274
#define	MORE	275
#define	DEFINE	276
#define	MY_TRUE	277
#define	MY_FALSE	278
#define	EXIST	279
#define	FRAME	280
#define	FOR	281
#define	WHILE	282
#define	DO	283
#define	TRUE	284
#define	FALSE	285
#define	REPEAT	286
#define	UNTIL	287
#define	DISPLAY	288
#define	SKIP	289
#define	THEN	290
#define	COMMA	291
#define	COLON	292
#define	INTDECLARATION	293
#define	STRDECLARATION	294
#define	POINTERDECLARATION	295
#define	CHARDECLARATION	296
#define	VOIDDECLARATION	297
#define	FLOATDECLARATION	298
#define	LISTDECLARATION	299
#define	OPEN_PAR	300
#define	CLOSE_PAR	301
#define	TIMES	302
#define	OPEN_BPAR	303
#define	CLOSE_BPAR	304
#define	OPEN_MPAR	305
#define	CLOSE_MPAR	306
#define	FUNCTION	307
#define	OVER	308
#define	CYLINDER	309
#define	OVEREP	310
#define	INTER_OR	311
#define	NON_DETERMINED	312
#define	SEND	313
#define	RECEIVE	314
#define	PROCESS	315
#define	CHANNEL	316
#define	PUT	317
#define	GET	318
#define	ERROR_TOKEN	319
#define	STRFUNCHEAD	320
#define	STRFUNCTAIL	321
#define	STRFUNCCAT	322
#define	STRFUNCCMP	323
#define	STRFUNCCPY	324
#define	STRFUNCLEN	325
#define	EXTERN	326
#define	UNSIGNED	327
#define	SIGNED	328
#define	CHOP	329
#define	IMPLY	330
#define	IFF	331
#define	PROPIMPLY	332
#define	OR	333
#define	PARALLEL	334
#define	AND	335
#define	ASS_P	336
#define	ASS_N	337
#define	CON	338
#define	ADDRESS	339
#define	NE	340
#define	EQ	341
#define	GE	342
#define	LE	343
#define	GT	344
#define	LT	345
#define	LST	346
#define	RST	347
#define	ADD	348
#define	SUB	349
#define	MUL	350
#define	DIV	351
#define	MOD	352
#define	BNE	353
#define	CHOPSTAR	354
#define	NEXT	355
#define	NEGATION	356
#define	LENGTH	357
#define	REQUEST	358
#define	FINAL	359
#define	KEEP	360
#define	ALWAYS	361
#define	HALT	362
#define	W_NEXT	363
#define	PREFIX	364
#define	SOMETIMES	365
#define	ID	366
#define	STRLITERAL	367
#define	STRUCT_TYPE	368
#define	INTLITERAL	369
#define	FLOATLITERAL	370
#define	CHARLITERAL	371

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1160
#define	YYFLAG		-32768
#define	YYNTBASE	117

#define YYTRANSLATE(x) ((unsigned)(x) <= 371 ? yytranslate[x] : 192)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   216,
   226,   228,   230,   238,   242,   244,   248,   250,   251,   256,
   262,   267,   272,   275,   278,   281,   284,   286,   289,   292,
   296,   300,   304,   308,   316,   325,   337,   351,   353,   355,
   357,   359,   361,   363,   366,   373,   378,   384,   390,   399,
   408,   411,   414,   417,   418,   425,   433,   434,   437,   441,
   443,   445,   447,   449,   453,   456,   458,   470,   483,   495,
   507,   525,   544,   562,   581,   601,   620,   638,   657,   675,
   677,   679,   681,   683,   685,   696,   700,   702,   707,   713,
   717,   729,   742,   754,   766,   779,   783,   787,   790,   791,
   794,   797,   800,   808,   815,   820,   824,   826,   830,   834,
   840,   842,   846,   849,   850,   852,   856,   858,   861,   864,
   866,   868,   870,   872,   874,   876,   880,   882,   884,   886,
   888,   890,   892,   894,   896,   898,   900,   902,   904,   906,
   908,   910,   914,   916,   918,   922,   927,   932,   937,   942,
   947,   952,   956,   960,   964,   965,   968,   971,   974,   977,
   980,   984,   989,   994,   999,  1005,  1011,  1017,  1023,  1029,
  1036,  1042,  1048,  1055,  1061,  1068,  1076,  1083,  1090,  1098,
  1105,  1112,  1118,  1126,  1133,  1135,  1137,  1140,  1144,  1148,
  1152,  1156,  1158,  1160,  1162,  1166,  1170,  1174,  1178,  1182,
  1186,  1190,  1194,  1198,  1202,  1204,  1206,  1208,  1210,  1212,
  1214,  1217,  1220,  1222,  1224,  1228,  1231,  1235,  1240,  1246,
  1251,  1255,  1260,  1266,  1271,  1274,  1278,  1283,  1286,  1290,
  1295,  1300,  1306,  1314,  1319,  1323,  1329,  1338,  1339,  1344,
  1348,  1353,  1358,  1364,  1370,  1376,  1382,  1389,  1399,  1400,
  1408,  1418,  1427,  1433,  1438,  1441,  1444,  1446,  1448,  1449,
  1452,  1456,  1457,  1460,  1464,  1467,  1471,  1474,  1476,  1480,
  1482,  1484,  1486,  1488,  1492,  1493,  1496,  1497,  1501,  1503,
  1506,  1510,  1514,  1518,  1522,  1528,  1538,  1540,  1542,  1543,
  1545,  1546,  1548,  1549,  1557,  1565,  1571,  1574,  1576,  1577,
  1583,  1586,  1587,  1592,  1598,  1599,  1603,  1608,  1614,  1619,
  1625,  1630,  1631,  1635,  1639,  1644,  1649,  1654,  1659,  1664,
  1669,  1674,  1679,  1686,  1691,  1696,  1701,  1708,  1712,  1716,
  1721,  1725,  1726,  1730,  1734,  1738,  1742,  1745
};

static const short yyrhs[] = {   118,
   121,     0,    12,   119,    13,     0,     0,   119,    80,   119,
     0,   119,    78,   119,     0,   119,    76,   119,     0,   119,
    77,   119,     0,   119,    74,   119,     0,   106,   119,     0,
   105,   119,     0,   110,   119,     0,   108,   119,     0,   100,
   119,     0,    34,     0,    22,     0,    23,     0,   102,   142,
     0,     9,     0,    20,     0,   107,   119,     0,   104,   119,
     0,   101,   119,     0,    48,   119,   120,    49,    11,    48,
   119,    49,     0,   111,     0,    21,   111,    37,   157,     0,
   119,    99,     0,    45,   119,    46,     0,    36,   119,   120,
     0,     0,   121,    80,   121,     0,   121,    78,   121,     0,
   121,    74,   121,     0,   132,     0,   127,     0,   181,     0,
   184,     0,   175,     0,   176,     0,   177,     0,   100,    45,
   121,    46,     0,   105,    45,   121,    46,     0,   106,    45,
   121,    46,     0,    10,    45,   156,    46,     0,    31,    48,
   121,    49,    32,    45,   156,    46,     0,    34,     0,     9,
     0,    20,     0,   102,    45,   142,    46,     0,   188,     0,
   186,     0,    29,     0,    30,     0,   104,    45,   121,    46,
     0,   121,    79,   121,     0,    45,   174,    46,    75,    50,
   121,    51,     0,    25,    45,   167,   172,    46,    80,    45,
   121,    46,     0,    48,   121,   173,    49,    11,   165,     0,
    48,   121,    49,    11,   165,     0,    52,   111,    45,   161,
    46,    48,   121,    49,     0,    21,   111,    45,   161,    46,
    81,    48,   123,    49,     0,   125,     0,   124,     0,    24,
   167,   162,    37,    48,   121,    49,     0,    45,   121,    46,
     0,   127,     0,   127,    80,   122,     0,   121,     0,     0,
   111,    45,   163,    46,     0,    71,   111,    45,   163,    46,
     0,   138,    45,   163,    46,     0,   126,    48,   122,    49,
     0,    16,   111,     0,    18,   111,     0,    73,   128,     0,
    72,   128,     0,   128,     0,   129,   130,     0,   113,   130,
     0,    16,   111,   130,     0,    18,   111,   130,     0,    16,
   113,   130,     0,    18,   113,   130,     0,    45,    95,   167,
    46,    45,   161,    46,     0,    45,    95,    95,   167,    46,
    45,   161,    46,     0,    45,    95,   111,    50,   142,   140,
    51,    46,    45,   161,    46,     0,    45,    95,   111,    50,
   142,   140,    51,    46,    45,   161,    46,    81,   149,     0,
    38,     0,    43,     0,    41,     0,    39,     0,    42,     0,
    19,     0,   167,   131,     0,   111,    50,   142,   140,    51,
   131,     0,   167,    81,   136,   131,     0,   111,    15,    81,
   149,   131,     0,   111,    15,    81,   168,   131,     0,   111,
    50,   142,   140,    51,    81,   149,   131,     0,   111,    50,
   142,   140,    51,    81,   168,   131,     0,    95,   130,     0,
    36,   130,     0,    36,     1,     0,     0,   111,    50,   142,
   140,    51,     0,     0,    36,   111,    50,   142,   140,    51,
     0,     0,     0,    36,     1,     0,   133,   135,   136,     0,
   167,     0,   190,     0,   138,     0,   141,     0,    45,   133,
    46,     0,   100,   133,     0,   134,     0,    45,    45,    41,
    95,    46,   114,    46,    50,   142,   140,    51,     0,    45,
    45,    72,    41,    95,    46,   114,    46,    50,   142,   140,
    51,     0,    45,    45,    38,    95,    46,   114,    46,    50,
   142,   140,    51,     0,    45,    45,    43,    95,    46,   114,
    46,    50,   142,   140,    51,     0,    45,    45,    41,    95,
    46,    45,    45,    41,    95,    46,   114,    46,    46,    50,
   142,   140,    51,     0,    45,    45,    41,    95,    46,    45,
    45,    72,    41,    95,    46,   114,    46,    46,    50,   142,
   140,    51,     0,    45,    45,    41,    95,    46,    45,    45,
    38,    95,    46,   114,    46,    46,    50,   142,   140,    51,
     0,    45,    45,    72,    41,    95,    46,    45,    45,    41,
    95,    46,   114,    46,    46,    50,   142,   140,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    72,    41,
    95,    46,   114,    46,    46,    50,   142,   140,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    38,    95,
    46,   114,    46,    46,    50,   142,   140,    51,     0,    45,
    45,    38,    95,    46,    45,    45,    41,    95,    46,   114,
    46,    46,    50,   142,   140,    51,     0,    45,    45,    38,
    95,    46,    45,    45,    72,    41,    95,    46,   114,    46,
    46,    50,   142,   140,    51,     0,    45,    45,    38,    95,
    46,    45,    45,    38,    95,    46,   114,    46,    46,    50,
   142,   140,    51,     0,    81,     0,    82,     0,   142,     0,
   149,     0,   168,     0,    45,   168,    46,    45,   129,    46,
    45,   161,    46,   124,     0,    45,   136,    46,     0,   137,
     0,    95,    45,   134,    46,     0,   111,    50,   142,   140,
    51,     0,    45,   138,    46,     0,    45,    45,    38,    95,
    46,   167,    46,    50,   142,   140,    51,     0,    45,    45,
    72,    38,    95,    46,   167,    46,    50,   142,   140,    51,
     0,    45,    45,    43,    95,    46,   167,    46,    50,   142,
   140,    51,     0,    45,    45,    41,    95,    46,   167,    46,
    50,   142,   140,    51,     0,    45,    45,    72,    41,    95,
    46,   167,    46,    50,   142,   140,    51,     0,    45,   139,
    46,     0,    36,   142,   140,     0,    36,     1,     0,     0,
    95,   167,     0,    95,   141,     0,    95,   138,     0,    45,
   141,    46,    50,   142,   140,    51,     0,    95,    45,   160,
    95,    46,   142,     0,    95,    45,   142,    46,     0,    45,
   141,    46,     0,   145,     0,   145,   158,   142,     0,   142,
   148,   145,     0,     7,   156,    35,   142,   144,     0,   145,
     0,   145,   148,   145,     0,     8,   142,     0,     0,   146,
     0,   145,   147,   146,     0,   169,     0,    94,   146,     0,
    98,   146,     0,    14,     0,   171,     0,   167,     0,   138,
     0,   141,     0,   124,     0,    45,   142,    46,     0,   170,
     0,   153,     0,   154,     0,   190,     0,   139,     0,    95,
     0,    96,     0,    97,     0,    91,     0,    92,     0,    84,
     0,    56,     0,    83,     0,    93,     0,    94,     0,   149,
    83,   149,     0,   150,     0,   151,     0,    45,   149,    46,
     0,    50,   142,   152,    51,     0,    50,   168,   152,    51,
     0,    50,   149,   152,    51,     0,    48,   142,   152,    49,
     0,    48,   168,   152,    49,     0,    48,   149,   152,    49,
     0,    36,   142,   152,     0,    36,   168,   152,     0,    36,
   149,   152,     0,     0,    36,     1,     0,    84,   167,     0,
    84,   138,     0,    84,   190,     0,    84,   153,     0,    45,
   153,    46,     0,    45,    38,    46,   143,     0,    45,    43,
    46,   143,     0,    45,    41,    46,   143,     0,    45,    73,
    38,    46,   143,     0,    45,    73,    41,    46,   143,     0,
    45,    72,    38,    46,   143,     0,    45,    72,    41,    46,
   143,     0,    45,    38,    95,    46,   155,     0,    45,    72,
    38,    95,    46,   155,     0,    45,    43,    95,    46,   155,
     0,    45,    41,    95,    46,   155,     0,    45,    72,    41,
    95,    46,   155,     0,    45,    42,    95,    46,   155,     0,
    45,    38,    95,    95,    46,   155,     0,    45,    72,    38,
    95,    95,    46,   155,     0,    45,    43,    95,    95,    46,
   155,     0,    45,    41,    95,    95,    46,   155,     0,    45,
    72,    41,    95,    95,    46,   155,     0,    45,    42,    95,
    95,    46,   155,     0,    45,    16,   113,    95,    46,   155,
     0,    45,   113,    95,    46,   155,     0,    45,    16,   113,
    95,    95,    46,   155,     0,    45,   113,    95,    95,    46,
   155,     0,   143,     0,   157,     0,   101,   156,     0,   156,
    80,   156,     0,   156,    78,   156,     0,    45,   156,    46,
     0,   142,   158,   142,     0,    22,     0,    23,     0,   142,
     0,   142,    86,   168,     0,   142,    85,   168,     0,   168,
    86,   142,     0,   168,    85,   142,     0,   142,    86,    14,
     0,   142,    85,    14,     0,    14,    86,   142,     0,    14,
    85,   142,     0,   142,    86,   170,     0,   142,    85,   170,
     0,    87,     0,    88,     0,    85,     0,    89,     0,    90,
     0,    86,     0,    72,    38,     0,    72,    41,     0,   159,
     0,   129,     0,   160,   167,   162,     0,   160,   162,     0,
   113,   167,   162,     0,   113,    95,   167,   162,     0,   113,
    95,    95,   167,   162,     0,   113,   167,    15,   162,     0,
   111,   167,   162,     0,   111,    95,   167,   162,     0,   111,
    95,    95,   167,   162,     0,   111,   167,    15,   162,     0,
   113,   162,     0,   113,    95,   162,     0,   113,    95,    95,
   162,     0,   111,   162,     0,   111,    95,   162,     0,   111,
    95,    95,   162,     0,   160,   167,    15,   162,     0,   160,
    95,   167,    15,   162,     0,   160,   167,    15,    50,   142,
    51,   162,     0,   160,    95,   167,   162,     0,   160,    95,
   162,     0,   160,    95,    95,   167,   162,     0,    45,    95,
   167,    46,    45,   161,    46,   162,     0,     0,    36,   160,
   167,   162,     0,    36,   160,   162,     0,    36,   111,   167,
   162,     0,    36,   113,   167,   162,     0,    36,   113,    95,
   167,   162,     0,    36,   111,   167,    15,   162,     0,    36,
   113,   167,    15,   162,     0,    36,   160,   167,    15,   162,
     0,    36,   160,    95,   167,    15,   162,     0,    36,    45,
    95,   167,    46,    45,   161,    46,   162,     0,     0,    36,
   160,   167,    50,   142,    51,   162,     0,    36,   160,   167,
    50,   142,    36,   142,    51,   162,     0,    36,   160,   167,
    15,    50,   142,    51,   162,     0,    36,   160,    95,   167,
   162,     0,    36,   160,    95,   162,     0,    36,     1,     0,
   136,   164,     0,   160,     0,   113,     0,     0,    84,     1,
     0,    36,   136,   164,     0,     0,    36,     1,     0,    48,
   121,    49,     0,     1,    49,     0,    45,   156,    46,     0,
     1,    46,     0,   111,     0,    45,   167,    46,     0,   112,
     0,   114,     0,   116,     0,   115,     0,    36,   167,   172,
     0,     0,    36,     1,     0,     0,    36,   121,   173,     0,
   157,     0,   101,   174,     0,   174,    80,   174,     0,   174,
    78,   174,     0,    45,   174,    46,     0,    27,   166,   165,
     0,    26,   142,    47,    28,   165,     0,    26,    45,   178,
    36,   179,    36,   180,    46,   165,     0,   132,     0,   128,
     0,     0,   156,     0,     0,   132,     0,     0,     3,    45,
   146,    46,    48,   182,    49,     0,     4,   146,    37,    45,
   121,    46,   183,     0,     6,    37,    45,   121,    46,     0,
     5,   182,     0,   182,     0,     0,     7,   156,    35,   165,
   185,     0,     8,   165,     0,     0,    33,    45,   136,    46,
     0,    33,    45,   136,   187,    46,     0,     0,    36,   136,
   187,     0,   103,    45,   167,    46,     0,   103,    45,   167,
   189,    46,     0,   103,    45,   138,    46,     0,   103,    45,
   138,   189,    46,     0,   103,    45,   190,    46,     0,     0,
    36,   167,   189,     0,    36,   138,   189,     0,   167,    17,
   167,   191,     0,   138,    17,   167,   191,     0,   141,    17,
   167,   191,     0,   167,    17,   138,   191,     0,   138,    17,
   138,   191,     0,   141,    17,   138,   191,     0,   167,    75,
   167,   191,     0,   138,    75,   167,   191,     0,    45,   153,
    46,    75,   167,   191,     0,   141,    75,   167,   191,     0,
   167,    75,   138,   191,     0,   138,    75,   138,   191,     0,
    45,   153,    46,    75,   138,   191,     0,   167,    17,   124,
     0,   167,    75,   124,     0,   141,    75,   138,   191,     0,
    45,   190,    46,     0,     0,    17,   167,   191,     0,    17,
   138,   191,     0,    75,   167,   191,     0,    75,   138,   191,
     0,    17,   124,     0,    75,   124,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   147,   178,   179,   183,   184,   185,   186,   187,   192,   193,
   194,   195,   196,   197,   198,   199,   200,   205,   206,   207,
   208,   209,   210,   214,   215,   220,   221,   225,   229,   234,
   236,   243,   349,   350,   352,   353,   354,   355,   356,   357,
   359,   360,   362,   363,   364,   365,   366,   367,   373,   374,
   375,   376,   377,   378,   380,   383,   389,   393,   399,   407,
   417,   419,   421,   435,   439,   443,   450,   451,   456,   461,
   466,   475,   483,   494,   508,   509,   510,   514,   518,   522,
   526,   530,   534,   541,   543,   545,   550,   562,   563,   564,
   567,   568,   569,   576,   580,   584,   589,   595,   600,   607,
   613,   624,   626,   627,   631,   638,   642,   643,   651,   655,
   656,   657,   658,   659,   660,   661,   664,   666,   668,   670,
   672,   674,   676,   678,   680,   682,   684,   686,   688,   693,
   694,   697,   698,   699,   702,   703,   704,   707,   711,   712,
   716,   721,   726,   731,   736,   741,   747,   749,   750,   756,
   757,   758,   760,   762,   764,   766,   772,   773,   775,   776,
   782,   783,   787,   788,   792,   793,   797,   798,   799,   800,
   801,   803,   804,   805,   806,   807,   808,   809,   810,   811,
   812,   815,   816,   817,   818,   819,   820,   821,   822,   824,
   826,   830,   831,   832,   833,   839,   843,   851,   863,   867,
   876,   888,   892,   900,   904,   905,   908,   913,   917,   922,
   926,   933,   936,   937,   940,   941,   944,   945,   948,   949,
   950,   951,   952,   953,   956,   957,   958,   959,   960,   961,
   963,   964,   966,   967,   969,   977,   978,   979,   980,   981,
   987,   989,   990,   993,   994,   995,   998,   999,  1002,  1003,
  1006,  1007,  1010,  1011,  1016,  1017,  1018,  1019,  1020,  1021,
  1028,  1030,  1033,  1035,  1041,  1045,  1050,  1056,  1062,  1068,
  1078,  1084,  1090,  1096,  1104,  1108,  1112,  1118,  1122,  1126,
  1132,  1138,  1145,  1151,  1157,  1161,  1169,  1175,  1178,  1182,
  1186,  1192,  1198,  1204,  1211,  1219,  1225,  1240,  1246,  1249,
  1257,  1265,  1271,  1277,  1281,  1290,  1301,  1305,  1309,  1310,
  1314,  1328,  1329,  1337,  1339,  1346,  1348,  1354,  1355,  1359,
  1364,  1369,  1374,  1380,  1384,  1385,  1391,  1392,  1403,  1414,
  1415,  1417,  1419,  1425,  1431,  1439,  1447,  1451,  1455,  1461,
  1465,  1471,  1475,  1482,  1486,  1490,  1497,  1501,  1505,  1509,
  1519,  1520,  1526,  1527,  1531,  1532,  1537,  1538,  1539,  1540,
  1541,  1544,  1545,  1546,  1552,  1553,  1554,  1556,  1557,  1558,
  1560,  1561,  1562,  1563,  1565,  1566,  1567,  1568,  1569,  1570,
  1571,  1575,  1576,  1577,  1578,  1579,  1580,  1581
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND",
"POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE","DEFINE",
"MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT",
"UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N",
"CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","array_cast_exp","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp",
"option_exp_else_statement","simple_ari_exp","member_in_exp","bi_operator","ari_operator",
"array_exp","option_list_value","option_struct_list_value","inner_option_list_value",
"address_exp","type_cast","casted_element","bool_exp","prime_bool_exp","relation_operator",
"sign_type_define","all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   117,   118,   118,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   120,   120,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   122,   122,   123,   123,   124,   124,
   124,   125,   126,   126,   127,   127,   127,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   129,   129,   129,
   129,   129,   129,   130,   130,   130,   130,   130,   130,   130,
   130,   131,   131,   131,    -1,    -1,    -1,    -1,   132,   133,
   133,   133,   133,   133,   133,   133,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,   135,
   135,   136,   136,   136,   136,   136,   136,   137,   138,   138,
   139,   139,   139,   139,   139,   139,   140,   140,   140,   141,
   141,   141,   141,   141,   141,   141,   142,   142,   142,   142,
   143,   143,   144,   144,   145,   145,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   147,   147,   147,   147,   147,   147,   147,   147,   148,
   148,   149,   149,   149,   149,   150,   150,   150,   151,   151,
   151,   152,   152,   152,   152,   152,   153,   153,   153,   153,
   153,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   155,   156,   156,   156,   156,   156,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   158,   158,   158,   158,   158,   158,
   159,   159,   160,   160,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   163,   163,   163,   163,   163,
   164,   164,   164,   165,   165,   166,   166,   167,   167,   168,
   169,   170,   171,   172,   172,   172,   173,   173,   174,   174,
   174,   174,   174,   175,   176,   177,   178,   178,   178,   179,
   179,   180,   180,   181,   182,   182,   183,   183,   183,   184,
   185,   185,   186,   186,   187,   187,   188,   188,   188,   188,
   188,   189,   189,   189,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   191,   191,   191,   191,   191,   191,   191
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     8,     9,
     1,     1,     7,     3,     1,     3,     1,     0,     4,     5,
     4,     4,     2,     2,     2,     2,     1,     2,     2,     3,
     3,     3,     3,     7,     8,    11,    13,     1,     1,     1,
     1,     1,     1,     2,     6,     4,     5,     5,     8,     8,
     2,     2,     2,     0,     6,     7,     0,     2,     3,     1,
     1,     1,     1,     3,     2,     1,    11,    12,    11,    11,
    17,    18,    17,    18,    19,    18,    17,    18,    17,     1,
     1,     1,     1,     1,    10,     3,     1,     4,     5,     3,
    11,    12,    11,    11,    12,     3,     3,     2,     0,     2,
     2,     2,     7,     6,     4,     3,     1,     3,     3,     5,
     1,     3,     2,     0,     1,     3,     1,     2,     2,     1,
     1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     1,     3,     4,     4,     4,     4,     4,
     4,     3,     3,     3,     0,     2,     2,     2,     2,     2,
     3,     4,     4,     4,     5,     5,     5,     5,     5,     6,
     5,     5,     6,     5,     6,     7,     6,     6,     7,     6,
     6,     5,     7,     6,     1,     1,     2,     3,     3,     3,
     3,     1,     1,     1,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
     2,     2,     1,     1,     3,     2,     3,     4,     5,     4,
     3,     4,     5,     4,     2,     3,     4,     2,     3,     4,
     4,     5,     7,     4,     3,     5,     8,     0,     4,     3,
     4,     4,     5,     5,     5,     5,     6,     9,     0,     7,
     9,     8,     5,     4,     2,     2,     1,     1,     0,     2,
     3,     0,     2,     3,     2,     3,     2,     1,     3,     1,
     1,     1,     1,     3,     0,     2,     0,     3,     1,     2,
     3,     3,     3,     3,     5,     9,     1,     1,     0,     1,
     0,     1,     0,     7,     7,     5,     2,     1,     0,     5,
     2,     0,     4,     5,     0,     3,     4,     5,     4,     5,
     4,     0,     3,     3,     4,     4,     4,     4,     4,     4,
     4,     4,     6,     4,     4,     4,     6,     3,     3,     4,
     3,     0,     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,    93,    47,     0,
     0,     0,     0,     0,    51,    52,     0,     0,    45,    88,
    91,    90,    92,    89,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   318,     0,     1,
    62,    61,     0,    34,    77,     0,    33,     0,   116,   112,
   113,   110,    37,    38,    39,    35,    36,    50,    49,   111,
     0,     0,    29,    13,    22,     0,   170,     0,     0,     0,
     0,   321,   323,   322,   175,   173,   181,   174,    17,   157,
   165,   178,   179,   172,   167,   177,   171,   180,    21,    10,
     9,    20,    12,    11,     2,     0,     0,     0,     0,     0,
    26,     0,   170,   242,   243,     0,     0,   320,   244,     0,
   236,     0,     0,    73,     0,    74,     0,     0,     0,   318,
   299,     0,   339,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   175,     0,   173,   174,   178,   329,
   172,     0,   180,     0,     0,     0,     0,     0,     0,    76,
    75,     0,   318,   152,   151,   150,     0,     0,   115,   112,
     0,     0,     0,     0,     0,   309,     0,     0,   318,    79,
   104,     0,     0,     0,     0,     0,    78,   130,   131,     0,
     0,   309,     0,     0,     0,     0,     0,     0,    27,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   173,   181,   174,     0,   178,   172,   180,     0,   208,
     0,   210,   207,   209,   168,   169,   190,   191,     0,   188,
   189,   187,   257,   260,   255,   256,   258,   259,   185,   186,
   182,   183,   184,     0,     0,     8,     6,     7,     5,     4,
     0,     0,     0,     0,   244,     0,   237,   257,   260,     0,
     0,     0,     0,     0,     0,     0,    80,    82,    81,    83,
   288,     0,     0,     0,   325,     0,    88,    90,    92,    89,
     0,     0,   338,   337,     0,     0,   317,     0,     0,     0,
   334,     0,     0,     0,     0,     0,     0,   137,   132,   133,
   193,   194,   134,     0,     0,    88,    90,    89,     0,     0,
     0,     0,     0,   318,   150,     0,   330,    64,   114,   140,
   156,     0,   319,     0,     0,     0,   381,     0,     0,     0,
   288,   309,     0,     0,     0,     0,   264,     0,   263,     0,
     0,     0,   112,   113,     0,   110,   111,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   308,   312,   307,
     0,   149,   101,     0,     0,     0,     0,    94,    32,    31,
    54,    30,     0,    65,   109,     0,   382,   382,     0,   382,
   382,   382,   382,   382,   382,   378,   382,   382,   379,   382,
   382,    25,    29,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   146,   176,   211,     0,     0,     0,     0,     0,
   159,   166,   158,     0,   252,   251,   240,   250,   246,   254,
   249,   245,   253,   241,   352,   239,   238,   248,   247,    43,
     0,   299,   299,   299,     0,   305,     0,     0,     0,   299,
     0,     0,     0,     0,     0,     0,     0,   341,     0,   316,
   315,     0,     0,     0,     0,     0,     0,     0,     0,   205,
   205,   205,   205,   205,   205,     0,     0,   353,     0,     0,
     0,     0,     0,     0,    88,    90,    89,     0,    88,    90,
    88,    90,   333,   150,     0,     0,     0,     0,     0,     0,
     0,   332,   331,   327,     0,     0,     0,     0,     0,   318,
     0,   261,   262,   155,     0,    88,    90,    89,     0,    40,
     0,     0,    48,     0,   359,     0,   357,     0,   361,    53,
    41,    42,   310,     0,   306,    69,     0,     0,     0,   149,
   103,   102,   104,    72,     0,     0,     0,     0,   369,   366,
    71,   376,   372,   370,   367,   380,   374,   368,   365,   375,
   371,    28,     0,   164,     0,   212,   161,     0,     0,   214,
     0,     0,     0,     0,   213,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   350,     0,   299,   278,   299,   299,   275,   299,
   299,   266,   299,     0,     0,   299,     0,   299,   299,   290,
   299,     0,   326,   325,     0,     0,     0,     0,     0,     0,
     0,   340,     0,   335,   314,     0,   136,   195,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   355,   354,     0,   192,     0,     0,     0,     0,     0,     0,
    88,    90,     0,     0,   149,   288,   333,   149,   382,   382,
     0,   328,    58,     0,     0,    70,     0,     0,     0,     0,
     0,     0,    90,     0,     0,     0,     0,   362,   362,   360,
   358,   313,   312,   148,   149,   139,   104,   104,     0,    96,
    66,   387,   382,   382,   388,   382,   382,     0,     0,   160,
     0,     0,     0,   235,   219,     0,   222,     0,   224,     0,
   221,     0,     0,     0,     0,     0,     0,   217,     0,     0,
   218,     0,     0,   215,   216,   232,     0,     0,     0,     0,
   351,     0,   299,   279,   299,   299,   271,   299,   276,   299,
   299,   267,     0,   285,   299,   299,   265,     0,     0,   299,
   291,   299,   299,   292,   304,   299,   299,     0,   289,     0,
   324,     0,     0,     0,   343,     0,     0,   206,   205,   205,
   205,   199,   201,   200,   196,   198,   197,     0,   138,   356,
     0,   321,     0,   321,   321,     0,     0,     0,     0,     0,
   288,     0,     0,     0,   377,   373,     0,    57,     0,   149,
   154,     0,     0,     0,     0,     0,   364,   363,   311,   147,
    97,    98,   104,   384,   383,   386,   385,     0,   163,   231,
     0,   162,   225,   228,   230,   227,   172,   172,   172,     0,
     0,   220,     0,   223,     0,   234,     0,     0,   344,     0,
   280,   299,   272,   274,   277,   299,   268,   270,   299,   299,
   284,     0,   281,    68,     0,   294,   293,   295,   299,   303,
     0,   296,     0,    63,     0,   342,     0,     0,     0,   202,
   204,   203,     0,     0,     0,     0,     0,     0,     0,   321,
     0,   139,    84,   153,    55,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    95,    23,   233,     0,     0,     0,
   172,   172,   226,   229,     0,     0,   288,   273,   269,   286,
   282,     0,    67,     0,   288,   297,     0,     0,   299,     0,
     0,    44,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    85,     0,    59,     0,     0,     0,
     0,     0,   104,   104,     0,     0,     0,     0,     0,     0,
     0,     0,   299,    60,     0,   299,     0,   300,    56,   336,
   288,     0,     0,     0,   149,     0,     0,     0,   149,   149,
     0,     0,     0,     0,   288,     0,     0,     0,     0,     0,
     0,     0,    99,   100,   149,   149,   149,     0,     0,     0,
   346,   299,   283,   299,   302,   299,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   149,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   149,   149,   349,   287,   298,   301,     0,
   321,   321,     0,   119,   321,   321,     0,   117,   120,     0,
     0,     0,     0,    86,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   141,   144,   143,     0,     0,     0,   348,
   345,     0,     0,   135,     0,     0,     0,   321,     0,     0,
   321,   321,   321,     0,   118,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   142,   145,   347,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   321,    87,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   149,   149,     0,   149,   149,     0,
     0,     0,     0,     0,     0,   149,     0,     0,   149,   149,
   149,     0,   129,   127,     0,   123,   121,     0,     0,     0,
   149,   128,   122,   126,   124,     0,   125,     0,     0,     0
};

static const short yydefgoto[] = {  1158,
     2,    21,   211,   154,   383,   924,    95,    62,    63,    64,
    65,    66,   373,   378,    67,    68,    69,   200,   369,   308,
    96,    97,   548,    98,   129,   714,   710,   100,   101,   254,
   239,   310,   311,   312,   643,   102,   103,   715,   266,   131,
   270,   349,   454,   455,   284,   371,   545,   445,   147,   104,
   132,   105,   106,   107,   463,   340,   162,    73,    74,    75,
   295,   633,   877,    76,   740,  1071,    77,   603,    78,   489,
    79,   536,   108,   559
};

static const short yypact[] = {    11,
  1838,  3018,-32768,-32768,   -72,-32768,-32768,-32768,  1838,  1838,
  1838,  1838,  1371,  1838,  1838,  1838,  1838,  1838,  1838,-32768,
    15,   -10,  1474,-32768,    92,   967,  1002,-32768,-32768,   129,
    -8,   207,  1672,   405,-32768,-32768,   215,   240,-32768,-32768,
-32768,-32768,-32768,-32768,  2457,  3018,   197,   214,   682,   682,
   191,    95,   338,   360,   443,   448,   460,   -14,   282,  1578,
-32768,-32768,   471,-32768,-32768,   282,-32768,   332,-32768,   267,
    10,    48,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   522,   859,  1054,   521,   521,  1474,-32768,  3657,   328,   553,
   553,-32768,-32768,-32768,-32768,   267,-32768,    10,   915,  1818,
-32768,-32768,-32768,    48,-32768,-32768,-32768,-32768,   521,   521,
   521,   521,   521,   521,-32768,  1838,  1838,  1838,  1838,  1838,
-32768,   553,   335,-32768,-32768,  2331,  1474,-32768,  1836,   838,
-32768,  1036,  1474,   282,   282,   282,   282,   637,    -8,-32768,
   606,    -8,  3055,   919,   610,  1474,   156,  3018,  1062,  1474,
  2571,   327,  1754,  1254,  1269,  1007,   718,   730,   643,-32768,
   809,   329,  1013,  1136,   652,   664,  1056,  1089,   620,-32768,
-32768,  1266,   690,-32768,-32768,-32768,  2913,   265,-32768,   160,
  1371,   406,  3018,  3018,  3018,  3295,  1371,   282,   232,-32768,
    17,  3018,  3018,  3018,  3018,  1211,-32768,-32768,-32768,  1062,
    81,  3295,    81,    81,    81,    49,    49,  4119,-32768,  1838,
   673,   999,   655,    12,   186,   689,   193,  3705,   611,   691,
   692,   270,   756,    35,   452,   797,   491,   815,   328,   820,
    10,-32768,   862,-32768,-32768,-32768,-32768,-32768,   553,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   553,  1371,  1159,   168,   168,   -54,   769,
   843,  1371,  1371,  3092,  1103,   829,-32768,    -4,    -1,  1371,
   156,  1474,  1474,  1371,  1371,   834,-32768,-32768,-32768,-32768,
  1229,   848,   461,   882,   863,  1096,    12,   186,   689,   193,
  3572,   431,-32768,-32768,   891,   921,-32768,   964,   929,  3018,
-32768,  1277,  3332,  1970,  1970,   445,   397,-32768,   915,   874,
-32768,-32768,-32768,  1021,  1100,   199,   225,   313,  2685,   922,
  1278,   990,   191,   920,   970,  3175,-32768,-32768,-32768,-32768,
   976,   945,-32768,   985,  1754,  1754,-32768,  3018,  1028,  1033,
  1229,  3295,   282,   282,   504,   707,-32768,   852,-32768,  1001,
  2799,  1366,   270,    35,   643,   491,   815,   107,   961,   328,
    73,   224,  1079,  1369,  1383,  1393,    21,-32768,  1072,-32768,
  1092,   303,-32768,  1061,  1371,   101,  1062,-32768,  1210,  1095,
  1095,-32768,  1116,  1099,-32768,    81,   205,   205,  1106,   205,
   205,   205,   205,   205,   205,-32768,   556,   205,-32768,   556,
   205,-32768,  1054,  1148,  1371,  1124,   553,   315,   553,   324,
   333,   553,   402,   429,   440,   441,   941,   481,   492,  1141,
  1177,   516,-32768,-32768,   945,   534,    35,   797,   491,   815,
  1312,-32768,   915,  1180,   915,   915,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   915,  1226,  1182,-32768,   915,   915,-32768,
  1162,    61,    86,   164,  1217,-32768,  1174,    -8,   505,   198,
  1227,    39,  1236,   512,  3620,  1245,   396,  1474,   156,-32768,
-32768,  1415,  1246,  3415,  1252,   452,    75,  1260,  3452,   322,
   175,  1282,   322,   175,  1282,  4082,  1062,-32768,  1267,   480,
   546,   523,   537,   560,   576,   580,   600,  1575,   481,   608,
  1141,  1177,   985,  1276,  1371,  1280,  3212,  1065,  1371,    81,
  1285,  1247,-32768,  1084,   156,  1330,  1298,  1300,    -8,  1302,
   970,-32768,-32768,-32768,  1307,  1263,  1268,  1274,  1693,-32768,
   713,   534,-32768,    81,-32768,  1316,-32768,  1325,-32768,-32768,
-32768,-32768,-32768,   470,-32768,-32768,   736,  1321,   153,   303,
-32768,-32768,  1343,-32768,  1211,  1337,    49,    49,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1338,     7,   639,-32768,  1871,   553,  1342,-32768,
   553,  1348,   553,  1351,-32768,   553,  1352,   647,   662,   672,
   684,   687,   553,   693,   553,   703,   553,   553,   553,  1353,
  1275,   156,-32768,    -8,   260,-32768,   307,   290,-32768,   366,
   354,-32768,   755,  1320,    -8,   791,    -8,   799,     6,-32768,
   589,  3018,-32768,   863,  1322,   437,   576,   580,   600,  1000,
   466,  1232,  1374,-32768,-32768,  1360,-32768,-32768,  1375,  3535,
    75,   903,  1372,  1373,  1378,  1377,  1379,  1380,  3742,  1386,
  1405,-32768,   480,-32768,  1110,  1512,  2124,   706,   726,   727,
   684,   728,   746,  1406,   303,  1229,-32768,   303,   205,   205,
  3018,-32768,-32768,   156,  1402,-32768,  1276,  1371,  1371,  1407,
  1408,  1412,  1365,  1263,  1268,  1274,  1427,  1439,  1439,-32768,
-32768,-32768,  1072,-32768,   303,-32768,   487,  1343,  1423,-32768,
-32768,-32768,   556,   205,-32768,   556,   205,  1838,  1371,-32768,
   553,  1431,   553,-32768,-32768,   553,-32768,   553,-32768,   553,
-32768,   553,   553,   553,   553,   770,   782,-32768,   553,  1432,
-32768,   553,  1434,-32768,-32768,-32768,   553,   553,  1446,  1441,
-32768,  1452,     6,-32768,   606,   606,-32768,     6,-32768,   606,
   606,-32768,    -8,-32768,   810,   283,-32768,  1444,  1455,   606,
-32768,   606,   606,-32768,-32768,   851,   381,  1371,-32768,  1555,
-32768,  1466,   468,   728,   265,  1474,  1203,-32768,   322,   175,
  1282,-32768,-32768,-32768,-32768,-32768,-32768,  3790,-32768,-32768,
  3827,  1467,  3875,  1476,  1477,  1110,  1512,  2124,   786,  2178,
  1229,  1473,  1479,  1482,-32768,-32768,  1613,-32768,  3018,   303,
   915,   -28,   -26,  1413,  1484,  1365,-32768,-32768,-32768,-32768,
-32768,-32768,    99,-32768,-32768,-32768,-32768,   614,   915,-32768,
   553,  1312,-32768,-32768,-32768,-32768,   597,   653,   719,   553,
   553,-32768,   553,-32768,   553,-32768,  1491,  1489,-32768,  1493,
-32768,   606,-32768,-32768,-32768,   606,-32768,-32768,   606,   606,
-32768,  1371,-32768,  3018,  1504,-32768,-32768,-32768,   606,-32768,
  1371,-32768,   428,-32768,  3018,-32768,  1506,  1104,  1507,-32768,
-32768,-32768,  3912,  1500,  3960,  1509,  1511,  2178,  3997,  1508,
  1510,  1516,-32768,-32768,-32768,  1596,  1514,  1518,  1467,  1521,
  1476,  1477,     4,   153,-32768,-32768,-32768,  1520,  1523,  1524,
   743,   787,-32768,-32768,  1526,  3018,  1229,-32768,-32768,-32768,
-32768,   541,  1578,  1527,  1229,-32768,   953,  1371,   606,  1430,
   156,-32768,  1532,   793,   798,  1059,  1371,   802,   807,  1085,
  1371,  1371,  4045,  1528,-32768,  1536,-32768,  1516,  1098,  1160,
  1537,  1508,   487,  1343,  1371,  1371,  1371,  1534,  1545,  3018,
  1438,  1541,   606,-32768,  1552,   606,   973,-32768,-32768,-32768,
  1229,   808,   813,   818,   303,   888,   904,   908,   303,   303,
   916,   926,  1113,  1371,  1229,  1505,  1517,  1562,  1529,  1530,
  1568,  1179,-32768,-32768,   303,   303,   303,  1371,  1371,  1457,
-32768,   606,-32768,   606,-32768,   606,  1565,  2322,  4091,   927,
  1564,  4154,  4187,   934,  1570,  1571,   935,   938,   942,   303,
  1573,  1584,  1594,  1546,  1597,  1598,  1547,  1556,  1559,  1609,
  1608,  1610,  1612,   303,   303,  1370,-32768,-32768,-32768,   122,
  1614,  1619,  4195,-32768,  1620,  1623,  4202,-32768,-32768,  4243,
  4249,   956,  1626,  1600,  1576,  1580,  1632,  1582,  1583,  1636,
  1652,  1653,  1621,-32768,-32768,-32768,  1654,  1656,  1275,-32768,
-32768,    88,   -14,-32768,  1658,  1668,  1675,  1676,  1677,  1678,
  1680,  1682,  1683,  4277,-32768,   480,  1614,  1619,  1590,  1620,
  1623,  1616,  1627,  1628,  1687,-32768,-32768,-32768,   690,  1696,
  1697,  1691,  1699,  1700,  1705,  1706,  1707,  1712,   874,  1676,
  1680,  1682,  1683,  1645,  1371,  1371,  1710,  1371,  1371,  1714,
  1721,  1724,  1716,  1712,   303,   303,  1371,   303,   303,  1371,
  1371,  1371,  1725,  1727,  1728,   303,  1730,  1731,   303,   303,
   303,  1371,-32768,-32768,  1733,-32768,-32768,  1734,  1738,  1739,
   303,-32768,-32768,-32768,-32768,  1740,-32768,  1793,  1794,-32768
};

static const short yypgoto[] = {-32768,
-32768,    45,  1392,    36,  1242,-32768,    31,-32768,-32768,  -192,
   -44,  -156,     8,  -528,  -142,    -2,  1314,-32768,   -76,-32768,
   880,   -47,   705,  1241,   -13,  -329,-32768,  1301,   -88,-32768,
  1221,  -296,-32768,-32768,  -413,  1188,-32768,  1480,     1,     2,
  1701,-32768,  -154,  -312,  1540,  -188,  1109,  -135,-32768,   252,
   617,-32768,   879,-32768,  1183,  1289,   -12,-32768,-32768,-32768,
-32768,-32768,-32768,-32768, -1025,-32768,-32768,-32768,-32768,  1153,
-32768,  -341,  1454,   286
};


#define	YYLAST		4393


static const short yytable[] = {    99,
   294,   235,   236,   384,   170,   171,   477,   481,   484,   438,
  1070,   301,   441,   389,   709,   347,   898,   350,   900,   144,
   538,   543,     1,   130,   700,   120,   204,   115,   517,   347,
   186,   370,    61,   261,   122,   187,   139,    60,    81,   623,
   223,   283,   156,  1098,   121,   347,   160,   370,   951,   179,
   139,   204,   376,    82,    83,    84,    85,   407,   109,   110,
   111,   112,   113,   114,   206,   229,   190,   644,   645,   646,
   647,   648,   307,   197,   225,   155,    61,   576,   223,   580,
   331,   164,   585,   139,   205,   899,   212,   901,   116,   201,
   117,   118,   119,   386,   120,   223,   283,   377,   293,   237,
   238,   551,   140,   223,    89,   139,   408,   128,   534,   205,
   128,    94,   265,   121,    94,    51,   140,   952,   535,    48,
   638,   283,   207,   385,   347,   386,   347,   267,   460,   225,
   139,   173,  1072,   276,   376,   309,   133,   265,   322,   177,
   327,   277,   278,   279,   280,   139,   298,   203,   156,   140,
   314,   531,   160,   518,   160,   605,   299,   490,   348,    58,
   256,   257,   258,   259,   260,   432,  1072,   359,   821,   822,
   223,   140,   309,   372,   156,   179,   201,   477,    61,   904,
   608,   155,   641,   302,   347,   347,   309,   370,   309,    51,
    89,   173,    48,   654,   178,   188,   140,   653,  1099,   283,
   304,    51,   305,   300,   225,   173,   178,    61,   139,   402,
   642,   189,   352,    61,    61,    61,   223,   173,   364,   365,
   366,   557,    61,    61,    61,    61,   475,   379,   380,   381,
   382,   409,  1073,   283,   203,   172,   396,   399,   412,   138,
   206,   433,   139,   223,   407,   119,   374,   120,   435,   436,
   265,   142,   697,    72,   403,   223,   444,   490,   611,   534,
   448,   449,   148,   728,   128,   731,   121,   734,   735,   537,
   409,   223,   446,   447,   140,   170,   171,   225,   223,   558,
   410,   375,   141,   201,   149,    51,   201,   413,   466,   476,
   480,   483,   619,   492,   905,   283,   161,    72,   207,   190,
   553,   173,   176,    72,   139,   265,   322,   165,   140,   358,
   191,   202,   265,   508,   202,   330,   156,   191,   283,   493,
   160,   746,   512,   513,   166,   283,   139,   160,   309,   347,
    61,   350,   862,   634,   139,   472,   160,   160,   547,   227,
   233,   203,   283,   641,   203,   780,   817,   818,   156,   155,
   277,   279,   160,   803,   743,   466,   641,   642,   412,    51,
   578,   550,   384,   309,   178,   880,   881,   882,    61,   581,
   140,   172,   229,   514,   334,   173,   188,   227,   583,   673,
   751,   155,   181,   552,   748,   191,   191,   191,   191,   283,
   282,   574,   189,   285,   161,   237,   238,   475,   139,    72,
   140,   283,   161,   325,   182,   145,   335,   494,   336,   579,
   651,    89,   198,   199,   237,   238,   283,   223,   582,   262,
   263,   323,    51,   227,   993,   994,   223,   584,   356,    72,
   871,   223,   487,   362,    72,    72,    72,   324,   173,   191,
   139,   599,   488,    72,    72,    72,    72,   586,   753,   146,
   360,   225,   388,   170,   391,   393,   395,   398,   401,   223,
   476,   456,   466,   928,   140,   225,   741,   693,   632,   227,
   692,   278,   348,   309,   407,   139,    86,   574,   929,    28,
   429,   139,   711,    87,   170,   409,   412,   183,   891,   486,
   631,   665,   184,   265,   508,   668,   587,   424,    40,    41,
    51,    42,    43,    44,   185,   457,   189,   206,   160,   347,
   139,   737,   139,   831,   303,   227,   173,   304,   196,   305,
   237,   238,   376,   588,   653,   467,   593,   304,   466,   305,
   309,   773,   346,   695,   589,   590,   333,   595,   808,    51,
    48,   189,   161,   191,   237,   238,   299,   189,   139,   139,
   201,    72,    86,    89,   227,   173,   139,   176,   208,    87,
   188,   599,   188,    90,   306,   207,    87,    91,   655,   490,
   161,   458,   557,   459,   504,   594,   189,   227,   189,   330,
    58,   128,   656,    92,    93,    94,   596,   702,   705,    72,
    88,   963,   223,   300,   191,   191,   521,    88,   519,   617,
   202,   223,   161,   767,   962,   657,   626,   953,   203,   356,
   600,   429,   965,   206,   520,   140,    48,   579,   233,-32768,
   879,   407,   189,    48,   283,   409,   225,   191,   779,    89,
   558,   582,   876,   237,   238,   225,    89,   282,   768,    90,
    51,   283,   908,    91,   347,   412,    90,    51,   418,   847,
    91,   419,    61,   595,   587,   297,    58,   770,  1007,    92,
    93,    94,   906,    58,   810,   811,    92,    93,    94,   206,
   658,   207,  1021,   560,   659,   562,   563,   564,   565,   566,
   567,   281,   568,   569,   711,   570,   571,   116,   332,   117,
   118,   119,   723,   120,   660,   829,   341,   167,   909,   168,
    28,    61,   663,   607,   610,   613,   807,   724,   342,   616,
   618,   621,   121,   624,   345,   191,   161,   725,   191,    40,
    41,   404,    42,    43,    44,   227,   169,   207,   420,   593,
   227,   421,   595,   712,   201,   206,   694,   227,   729,   187,
   223,   579,    86,   223,   522,   223,   204,   523,   732,    87,
   684,   796,   828,   685,   873,   686,   582,   531,   227,   206,
   347,   670,   202,   330,   910,   313,   587,   406,   347,   756,
   677,   797,   798,   595,   225,   331,   878,   225,   726,   225,
    88,   727,   356,   411,   687,   689,   422,   730,   958,  1109,
   283,   800,   203,   207,    59,   970,    89,   733,  -112,  -112,
   579,   423,   313,   206,   205,   760,    48,    51,   704,   707,
  -113,  -113,   178,   763,   347,   840,   313,   207,   313,    89,
   582,   587,   799,   173,   860,   206,   283,   841,   347,    90,
    51,   888,   959,    91,   283,   223,   201,   223,   407,    61,
   733,   223,   425,   409,   896,   283,    58,   407,   922,    92,
    93,    94,   409,  1008,   333,   742,   745,   927,  1009,   750,
   337,   207,   755,   595,   730,   869,   759,   121,   762,   225,
   766,   225,   271,    72,   437,   225,   733,   191,   206,   450,
   733,    70,   191,   207,   439,   442,   283,   972,   434,  -110,
  -110,   227,   973,   333,    61,   223,   976,   524,   462,   923,
   227,   977,   579,   778,   209,    61,   272,   582,   273,    86,
   930,   272,  1010,   273,   967,   272,    87,   273,   461,   478,
   482,   485,    72,   975,   157,    70,   468,   979,   980,   225,
   174,   180,   116,  1012,   117,   118,   119,   167,   120,   168,
    28,   995,   996,   997,   237,   238,    61,   479,   469,  1013,
   304,   961,   305,   595,   805,   806,   490,   121,   313,   499,
    41,   407,   500,    43,    44,   296,   169,   222,   230,   505,
  1020,   409,  1043,    48,   837,   838,   839,   471,   591,  1047,
  1050,   592,   579,  1051,  1034,  1035,    89,   595,   824,   825,
    61,   826,   827,   313,   852,  1000,    90,    51,   582,   856,
    91,  1084,  1014,   966,   859,   222,   533,   237,   238,   470,
  1017,   237,   238,    58,   128,   506,    92,    93,    94,   510,
  1018,   733,   157,  1006,   191,   509,    72,    70,   733,   579,
   157,   174,   582,   405,    59,   503,  1052,   591,   515,   227,
   774,   272,   227,   273,   227,   237,   238,   837,   838,   839,
   733,   222,   329,   237,   238,   491,   353,   180,   337,   511,
    72,   361,    70,    70,    70,   237,   238,   335,    86,   336,
  1074,    70,    70,    70,    70,    87,   272,   134,   273,   135,
   387,   516,   390,   392,   394,   397,   400,   198,   199,   210,
   478,   911,   912,  -111,  -111,   525,   591,   222,   272,   974,
   273,  1125,  1126,   313,  1128,  1129,   303,   544,   426,   304,
   667,   305,   136,  1136,   137,    72,  1139,  1140,  1141,   338,
   274,   275,   591,    87,   539,   978,    72,   116,  1151,   117,
   118,   119,    48,   120,   227,   986,   227,   546,   987,   912,
   227,   549,   335,   222,   336,    89,   440,   443,   424,   932,
   591,   561,   121,  1019,   791,    90,   306,   192,   573,    91,
   313,   193,   194,   195,   554,   698,   343,    72,   135,   988,
   157,   338,    58,   128,   195,    92,    93,    94,   555,    70,
    48,   272,   222,   273,   339,   174,   597,   268,   269,   245,
   246,   247,   248,    89,   227,   237,   238,   989,   157,   344,
   990,   137,   174,    90,    51,   222,   343,    91,   464,   192,
   134,    72,   464,   193,   194,   195,  1028,    70,   575,  1029,
    58,    28,   598,   792,    93,    94,   167,   601,   168,    28,
   157,   991,   159,   602,   117,   118,   119,   532,   120,   426,
    40,    41,    71,    42,    43,    44,   230,    28,    40,    41,
  1030,    42,    43,    44,   699,   169,   604,   121,   781,   837,
   838,   273,   614,   837,   838,   556,    40,    41,   615,    42,
    43,    44,    86,   451,   622,   226,   232,   636,   738,    87,
   739,   625,    49,    50,    28,   158,    71,   193,   194,   195,
   329,   175,    71,   167,   912,   168,    28,   637,   912,   328,
   346,   837,   838,    40,    41,   639,    42,    43,    44,   272,
    88,   273,   652,   226,   -62,   501,    41,   642,   502,    43,
    44,   664,   169,    59,   666,   473,   336,   192,   224,   231,
   226,   193,   194,   195,   671,   912,    48,   346,   226,   452,
   674,   453,   -62,   675,   157,   676,   -62,   -62,   -62,    89,
   192,   678,   679,   222,   193,   194,   195,   680,   222,    90,
    51,   690,   681,    91,   355,   222,   224,   240,   682,   802,
   691,   696,   804,   738,  1069,   739,    58,    86,   376,    92,
    93,    94,   330,   158,    87,   708,   222,   716,    71,   669,
    59,   158,   175,   718,   241,   242,   720,   722,   737,   820,
   758,   772,   249,   250,   776,   226,   251,   252,   253,   775,
   532,   530,   224,   688,   540,    88,   428,   354,    71,   777,
   782,   783,   231,    71,    71,    71,   784,   785,   541,   786,
   787,   789,    71,    71,    71,    71,   703,   706,   542,   192,
   487,    48,   192,   193,   194,   195,   193,   194,   195,   809,
   801,   226,   812,   813,    89,    80,   192,   814,   224,   815,
   193,   194,   195,   635,    90,    51,   192,   816,    91,   427,
   193,   194,   195,   823,   534,   969,   831,   843,   226,   845,
    86,    58,   848,  1001,    92,    93,    94,   123,   192,   849,
   226,   864,   193,   194,   195,   124,   125,   850,   163,    80,
   865,    70,  1036,   192,   224,    80,   226,   193,   194,   195,
   875,   192,   884,   226,   897,   193,   194,   195,   126,   222,
   954,   886,   887,   892,   893,    87,   902,   915,   222,   903,
   192,   158,   894,   916,   193,   194,   195,   917,   226,   431,
    71,   228,   234,   224,    48,   355,   175,   355,   925,   937,
    70,   931,   933,   944,   232,   945,   793,    89,   941,   158,
   942,   946,   949,   175,   948,   950,   224,    90,    51,   955,
   960,    91,   956,   957,   127,   964,   971,   984,    71,   228,
   985,   992,    48,   998,    58,   128,  1002,    92,    93,    94,
   167,   158,   168,    28,   999,    89,   163,  1004,   354,  1022,
   427,    80,  1024,   874,   163,    90,    51,   231,  1027,    91,
  1040,  1023,   661,    41,  1044,   662,    43,    44,  1054,   169,
  1048,  1049,    58,  1025,  1026,   794,    93,    94,   192,  1055,
   357,    80,   193,   194,   195,   363,    80,    80,    80,  1056,
  1057,  1060,  1058,  1059,   947,    80,    80,    80,    80,  1063,
  1061,   192,   226,  1062,   180,   193,   194,   195,  1064,  1076,
  1065,   226,  1066,   895,  1077,  1079,   226,   222,  1080,   192,
   222,   228,   222,   193,   194,   195,  1085,  1089,    86,  1011,
  1086,  1092,   430,  1015,  1016,    87,   192,    59,    70,  1087,
   193,   194,   195,  1088,   226,  1090,  1091,  1093,  1094,  1031,
  1032,  1033,   202,  1110,  1096,   158,  1097,   577,   167,   577,
   168,    28,   577,  1100,   224,  1095,   143,   228,   428,   224,
  1101,  1102,  1103,  1104,  1053,  1105,   224,  1106,  1107,  1111,
    40,    41,  1114,   683,    43,    44,  1117,   169,  1067,  1068,
  1112,  1113,    48,    70,   163,  1115,  1116,   224,  1118,  1119,
  1120,  1121,  1122,    80,    70,    89,   228,  1123,  1124,  1127,
    86,  1133,   222,  1130,   222,    90,    51,   123,   222,    91,
  1131,   354,   163,  1132,  1142,   124,   125,  1143,  1144,   228,
  1146,  1147,    58,  1152,  1153,    92,    93,    94,  1154,  1155,
  1157,    80,  1159,  1160,   572,    70,   701,   713,   326,   650,
   255,   819,   672,   790,   163,    59,   771,     0,     0,     0,
     0,   357,     0,   430,     0,     0,     0,     0,     0,     0,
   234,     0,   222,     0,    48,     0,     0,   226,     0,  1134,
  1135,     0,  1137,  1138,     0,     0,   226,    89,     0,    70,
  1145,     0,     0,  1148,  1149,  1150,     3,    90,    51,     0,
     0,    91,     0,     0,   153,  1156,     0,     4,     5,     6,
     7,     0,    71,     0,    58,   128,     0,    92,    93,    94,
     0,     8,     0,   240,     0,     0,     0,     0,   577,     0,
   224,   577,     9,   577,     0,    10,   577,     0,     0,   224,
     0,     0,     0,   577,     0,   577,     0,   577,   577,   577,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     0,    71,   251,   252,   253,     0,     0,     0,   163,  1075,
   268,   269,   245,   246,   247,   248,   240,   228,   237,   238,
     0,     0,   228,     0,     0,     0,     0,    11,    12,    13,
     0,    14,    15,    16,    17,    18,     0,    19,    20,     0,
     0,   556,     0,   241,   242,   577,   577,   577,     0,     0,
   228,   249,   250,   237,   238,   251,   252,   253,     0,     0,
     0,     0,     0,     0,     0,   226,    86,     0,   226,     0,
   226,     0,     0,    87,   357,     0,     0,     0,     0,     0,
     0,   606,   609,   612,     0,     0,     0,     0,     0,   620,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   577,     0,   832,   479,    71,   577,   304,   577,   305,
   577,     0,   577,   577,   577,   577,     0,     0,   224,   577,
     0,   224,   577,   224,     0,     0,     0,   577,     0,     0,
    48,     0,     0,     0,     0,     0,     0,     0,     0,    71,
     0,     0,     0,    89,     0,     0,     0,     0,     0,     0,
   717,     0,   719,    90,    51,   721,     0,    91,     0,     0,
   226,     0,   226,     0,     0,    80,   226,     0,   736,     0,
    58,   128,     0,    92,    93,    94,     0,     0,     0,     0,
     0,     0,     0,   228,     0,     0,   577,   577,   577,     0,
   577,     0,   228,     0,    71,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    71,     0,     0,     0,     0,
     0,     0,     0,   224,    80,   224,     0,     0,     0,   224,
   226,   577,     0,     0,     0,   717,   721,    87,     0,     0,
   577,   577,     0,   577,   744,   577,   747,   749,     0,   752,
   754,     0,   757,     0,     0,   761,    71,   764,   765,     0,
   769,     0,     0,     0,     0,     0,     0,     0,    88,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   224,     0,     0,     0,     0,   577,     0,
   830,    87,     0,     0,    48,   833,     0,   834,     0,   835,
    71,   836,     0,   717,   721,     0,     0,    89,   842,     0,
     0,   844,     0,     0,     0,     0,   846,    90,    51,     0,
     0,    91,   889,     0,     0,     0,     0,     0,    80,     0,
     0,     0,     0,     0,    58,     0,     0,   795,    93,    94,
     0,   228,     0,     0,   228,     0,   228,     0,    48,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    89,    80,     0,     0,     0,     0,     0,     0,     0,
     0,    90,    51,     0,     0,    91,   717,   721,     0,   844,
     0,     0,   851,     0,   853,   854,     0,   855,    58,   857,
   858,   890,    93,    94,   861,   863,     0,     0,     0,   866,
     0,   867,   868,     0,     0,   870,   872,     0,   577,   577,
   907,     0,   577,   577,     0,     0,     0,    80,     0,   842,
   844,     0,   913,     0,   914,     0,     0,     0,    80,     0,
     0,     0,     0,     0,     0,    87,   228,    86,   228,     0,
     0,     0,   228,   577,   123,     0,   213,   577,     0,     0,
   577,   577,   124,   125,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    88,   844,   214,    80,
     0,   215,   216,   217,     0,   264,     0,     0,     0,     0,
     0,     0,     0,     0,   577,     0,     0,     0,     0,     0,
     0,   918,    48,     0,     0,   919,   228,     0,   920,   921,
     0,    48,   219,   220,     0,    89,     0,     0,   926,     0,
     0,     0,     0,    80,    89,    90,    51,     0,     0,    91,
     0,     0,     0,     0,    90,    51,     0,     0,    91,     0,
     0,   127,    58,     0,     0,  1041,    93,    94,     0,     0,
     0,    58,   128,   221,    92,    93,    94,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    22,
     0,     0,     0,   150,     0,    24,    25,     0,   968,     0,
   123,     0,    26,     0,    27,    28,    29,    30,   124,   125,
    31,    32,    33,    34,     0,    35,    36,    37,   717,    38,
    39,     0,   717,     0,    40,    41,     0,    42,    43,    44,
     0,   151,  1003,     0,    46,  1005,     0,     0,    47,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   844,     0,     0,     0,   844,    48,    49,    50,
   717,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    89,  1037,     0,  1038,     0,  1039,     0,     0,     0,     0,
    90,   152,     0,     0,    91,     0,    52,   153,    53,    54,
    55,    56,    57,   844,     0,     0,     0,    58,   128,    59,
    92,    93,    94,    22,     0,     0,     0,   150,     0,    24,
    25,     0,     0,     0,   123,     0,   315,     0,    27,    28,
    29,    30,   124,   125,    31,    32,    33,    34,     0,    35,
    36,    37,     0,    38,    39,     0,     0,     0,   316,    41,
     0,   317,   289,   318,     0,   319,     0,     0,    46,     0,
     0,     0,    47,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   320,   321,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    89,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    90,   152,     0,     0,    91,     0,
    52,   153,    53,    54,    55,    56,    57,     0,     0,     0,
     0,    58,   128,   292,    92,    93,    94,    22,     0,     0,
     0,   150,     0,    24,    25,     0,     0,     0,   123,     0,
   315,     0,    27,    28,    29,    30,   124,   125,    31,    32,
    33,    34,     0,    35,    36,    37,     0,    38,    39,     0,
     0,     0,   495,    41,     0,   496,   289,   497,     0,   319,
     0,     0,    46,     0,     0,     0,    47,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,   498,   321,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    89,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    90,   152,
     0,     0,    91,     0,    52,   153,    53,    54,    55,    56,
    57,     0,     0,     0,     0,    58,   128,   292,    92,    93,
    94,    22,     0,     0,     0,   150,     0,    24,    25,     0,
     0,     0,   123,     0,    26,     0,    27,    28,    29,    30,
   124,   125,    31,    32,    33,    34,     0,    35,    36,    37,
     0,    38,    39,     0,     0,     0,   526,    41,     0,   527,
    43,   528,     0,   151,     0,     0,    46,     0,     0,     0,
    47,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    48,
   529,    50,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    89,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    90,   152,     0,     0,    91,     0,    52,   153,
    53,    54,    55,    56,    57,     0,     0,     0,     0,    58,
   128,    59,    92,    93,    94,    22,     0,     0,     0,    23,
     0,    24,    25,     0,     0,     0,     0,     0,    26,     0,
    27,    28,    29,    30,     0,     0,    31,    32,    33,    34,
     0,    35,    36,    37,     0,    38,    39,     0,     0,     0,
    40,    41,     0,    42,    43,    44,     0,   351,     0,     0,
    46,     0,     0,     0,    47,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    48,    49,    50,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    89,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    51,     0,     0,
     0,     0,    52,     0,    53,    54,    55,    56,    57,     0,
    22,     0,     0,    58,    23,    59,    24,    25,     0,     0,
     0,     0,     0,    26,     0,    27,    28,    29,    30,     0,
     0,    31,    32,    33,    34,     0,    35,    36,    37,     0,
    38,    39,     0,     0,     0,    40,    41,     0,    42,    43,
    44,    86,    45,     0,     0,    46,     0,     0,    87,    47,
   286,     0,   168,    28,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    48,    49,
    50,     0,   287,    41,     0,   288,   289,   290,    86,   291,
     0,     0,     0,     0,     0,   123,     0,   213,     0,     0,
     0,     0,    51,   124,   125,     0,     0,    52,     0,    53,
    54,    55,    56,    57,     0,    48,   219,   220,    58,   414,
    59,     0,   415,   216,   416,     0,   264,     0,    89,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    90,    51,
     0,     0,    91,     0,   178,     0,     0,     0,     0,     0,
     0,     0,    48,   417,   220,    58,     0,   292,    92,    93,
    94,     0,     0,     0,     0,    89,     0,     0,     0,     0,
     0,    86,     0,     0,     0,    90,    51,     0,   123,    91,
   213,     0,   127,     0,     0,     0,   124,   125,     0,     0,
     0,     0,    58,   128,   221,    92,    93,    94,     0,     0,
     0,     0,   214,     0,     0,   215,   216,   217,    86,   507,
     0,     0,     0,     0,     0,   123,     0,   213,     0,     0,
     0,     0,     0,   124,   125,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,   219,   220,     0,   414,
     0,     0,   415,   216,   416,     0,   507,     0,    89,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    90,    51,
     0,     0,    91,     0,     0,   153,     0,     0,     0,     0,
     0,     0,    48,   417,   220,    58,   128,   221,    92,    93,
    94,     0,     0,     0,     0,    89,     0,     0,     0,     0,
     0,    86,     0,     0,     0,    90,    51,     0,    87,    91,
     0,     0,   153,    28,     0,     0,     0,     0,     0,     0,
     0,     0,    58,   128,   221,    92,    93,    94,     0,     0,
     0,     0,    40,    41,     0,    42,    43,    44,    86,   303,
     0,     0,   304,     0,   305,    87,     0,   213,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,   346,     0,     0,   214,
     0,     0,   215,   216,   217,     0,   474,     0,   367,   304,
     0,   305,     0,     0,     0,     0,     0,     0,    90,   306,
     0,     0,    91,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    48,   219,   220,    58,   128,   368,    92,    93,
    94,     0,     0,     0,     0,    89,     0,     0,     0,     0,
     0,    86,     0,     0,     0,    90,   306,     0,    87,    91,
   213,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    58,   128,   221,    92,    93,    94,     0,     0,
     0,     0,   414,     0,     0,   415,   216,   416,    86,   474,
     0,     0,   304,     0,   305,    87,     0,   213,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,   417,   220,     0,   214,
     0,     0,   215,   216,   217,     0,   640,     0,    89,   304,
     0,   305,     0,     0,     0,     0,     0,     0,    90,   306,
     0,     0,    91,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    48,   219,   220,    58,   128,   221,    92,    93,
    94,     0,     0,     0,     0,    89,     0,     0,     0,     0,
     0,    86,     0,     0,     0,    90,    51,     0,    87,    91,
   213,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    58,     0,   221,    92,    93,    94,     0,     0,
     0,     0,   414,     0,     0,   415,   216,   416,    86,   640,
     0,     0,   304,     0,   305,    87,     0,   213,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,   417,   220,     0,   414,
     0,     0,   415,   216,   416,     0,   465,     0,    89,     0,
     0,     0,     0,     0,     0,     0,    86,     0,    90,    51,
     0,     0,    91,    87,     0,   213,     0,     0,     0,     0,
     0,     0,    48,   417,   220,    58,     0,   221,    92,    93,
    94,     0,     0,     0,     0,    89,     0,   627,     0,     0,
   628,   216,   629,    86,   465,    90,   152,     0,     0,    91,
    87,   178,   213,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    58,     0,   221,    92,    93,    94,     0,     0,
    48,   630,   220,     0,   214,     0,     0,   215,   216,   217,
     0,   218,     0,    89,     0,     0,     0,     0,     0,     0,
     0,    86,     0,    90,    51,     0,     0,    91,    87,   178,
   213,     0,     0,     0,     0,     0,     0,    48,   219,   220,
    58,     0,   221,    92,    93,    94,     0,     0,     0,     0,
    89,     0,   414,     0,     0,   415,   216,   416,    86,   218,
    90,    51,     0,     0,    91,    87,     0,   213,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    58,     0,   221,
    92,    93,    94,     0,     0,    48,   417,   220,     0,   214,
     0,     0,   215,   216,   217,     0,   788,     0,    89,     0,
     0,     0,     0,     0,     0,     0,    86,     0,    90,    51,
     0,     0,    91,    87,     0,   213,     0,     0,     0,     0,
     0,     0,    48,   219,   220,    58,     0,   221,    92,    93,
    94,     0,     0,     0,     0,    89,     0,   627,     0,     0,
   628,   216,   629,    86,   218,    90,    51,     0,     0,    91,
    87,     0,   213,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    58,     0,   221,    92,    93,    94,     0,     0,
    48,   630,   220,     0,   214,     0,     0,   215,   216,   217,
     0,   883,     0,    89,     0,     0,     0,     0,     0,     0,
     0,    86,     0,    90,    51,     0,     0,    91,    87,     0,
   213,     0,     0,     0,     0,     0,     0,    48,   219,   220,
    58,     0,   221,    92,    93,    94,     0,     0,     0,     0,
    89,     0,   214,     0,     0,   215,   216,   217,    86,   885,
    90,    51,     0,     0,    91,    87,     0,   213,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    58,     0,   221,
    92,    93,    94,     0,     0,    48,   219,   220,     0,   934,
     0,     0,   935,   216,   416,     0,   218,     0,    89,     0,
     0,     0,     0,     0,     0,     0,    86,     0,    90,    51,
     0,     0,    91,    87,     0,   213,     0,     0,     0,     0,
     0,     0,    48,   936,   220,    58,     0,   221,    92,    93,
    94,     0,     0,     0,     0,    89,     0,   938,     0,     0,
   939,   216,   416,    86,   218,    90,    51,     0,     0,    91,
    87,     0,   213,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    58,     0,   221,    92,    93,    94,     0,     0,
    48,   940,   220,     0,   214,     0,     0,   215,   216,   217,
     0,   943,     0,    89,     0,     0,     0,     0,     0,     0,
     0,    86,     0,    90,    51,     0,     0,    91,    87,     0,
   213,     0,     0,     0,     0,     0,     0,    48,   219,   220,
    58,     0,   221,    92,    93,    94,     0,     0,     0,     0,
    89,     0,   981,     0,     0,   982,   216,   416,    86,   218,
    90,    51,     0,     0,    91,    87,     0,     0,     0,     0,
    28,     0,     0,     0,    87,     0,     0,    58,     0,   221,
    92,    93,    94,     0,     0,    48,   983,   220,     0,    40,
    41,     0,    42,    43,    44,    86,   649,     0,    89,     0,
     0,     0,   123,     0,     0,    88,     0,     0,    90,    51,
   124,   125,    91,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    48,   346,     0,    58,     0,   221,    92,    93,
    94,    48,     0,    88,     0,    89,     0,    87,     0,     0,
     0,     0,     0,     0,    89,    90,    51,     0,     0,    91,
     0,     0,     0,     0,    90,    51,     0,     0,    91,    48,
     0,     0,    58,     0,     0,    92,    93,    94,    88,     0,
    87,    58,    89,     0,  1042,    93,    94,     0,    87,     0,
     0,     0,    90,    51,     0,    87,    91,     0,     0,     0,
     0,     0,     0,     0,    48,     0,     0,     0,     0,    58,
   128,    88,    92,    93,    94,     0,     0,    89,     0,    88,
     0,     0,     0,     0,     0,     0,    88,    90,    51,     0,
     0,    91,     0,     0,     0,     0,    87,    48,     0,     0,
     0,     0,    87,     0,    58,    48,     0,  1045,    93,    94,
    89,     0,    48,     0,     0,     0,     0,     0,    89,     0,
    90,    51,     0,     0,    91,    89,     0,    88,    90,    51,
    87,     0,    91,    88,     0,    90,    51,    58,     0,    91,
  1046,    93,    94,     0,     0,    58,     0,     0,  1078,    93,
    94,     0,    58,    48,     0,  1081,    93,    94,     0,    48,
     0,    88,     0,     0,     0,     0,    89,     0,     0,     0,
     0,     0,    89,     0,     0,     0,    90,    51,     0,     0,
    91,     0,    90,    51,     0,     0,    91,    48,     0,     0,
     0,     0,     0,    58,     0,     0,  1082,    93,    94,    58,
    89,     0,  1083,    93,    94,     0,     0,     0,     0,     0,
    90,    51,     0,     0,    91,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    58,     0,     0,
  1108,    93,    94
};

static const short yycheck[] = {    13,
   143,    90,    91,   196,    49,    50,   303,   304,   305,    14,
  1036,   147,    14,   202,     8,   172,    45,   172,    45,    33,
   362,     1,    12,    23,   553,    80,    17,    13,   341,   186,
    45,   186,     2,   122,    45,    50,    45,     2,   111,     1,
    88,    36,    45,  1069,    99,   202,    45,   202,    45,    52,
    45,    17,    36,     9,    10,    11,    12,    46,    14,    15,
    16,    17,    18,    19,    17,    45,    59,   481,   482,   483,
   484,   485,   149,    66,    88,    45,    46,   407,   126,   409,
    46,    46,   412,    45,    75,   114,    86,   114,    74,    17,
    76,    77,    78,    45,    80,   143,    36,    81,   143,    93,
    94,     1,   111,   151,    84,    45,    95,   112,    36,    75,
   112,   116,   126,    99,   116,    95,   111,   114,    46,    71,
    46,    36,    75,   200,   281,    45,   283,   127,   283,   143,
    45,   111,    45,   133,    36,   149,    45,   151,   151,    45,
   153,   134,   135,   136,   137,    45,   146,    75,   151,   111,
   150,    45,   151,   342,   153,    95,     1,    83,   172,   111,
   116,   117,   118,   119,   120,   254,    45,   181,   697,   698,
   218,   111,   186,   187,   177,   178,    17,   474,   148,    81,
    95,   151,   479,   148,   341,   342,   200,   342,   202,    95,
    84,   111,    71,   490,   100,    95,   111,    45,   111,    36,
    48,    95,    50,    48,   218,   111,   100,   177,    45,   208,
    36,   111,   177,   183,   184,   185,   264,   111,   183,   184,
   185,    17,   192,   193,   194,   195,   303,   192,   193,   194,
   195,    46,   111,    36,    75,    45,   206,   207,    46,   111,
    17,   255,    45,   291,    46,    78,    15,    80,   262,   263,
   264,    45,   549,     2,   210,   303,   270,    83,    95,    36,
   274,   275,    48,   593,   112,   595,    99,   597,   598,    46,
    46,   319,   272,   273,   111,   320,   321,   291,   326,    75,
    95,    50,    31,    17,    45,    95,    17,    95,   291,   303,
   304,   305,    95,    95,   823,    36,    45,    46,    75,   292,
   377,   111,    51,    52,    45,   319,   319,   111,   111,    45,
    59,    45,   326,   326,    45,    46,   319,    66,    36,    95,
   319,    15,   335,   336,   111,    36,    45,   326,   342,   486,
   300,   486,    50,   469,    45,   300,   335,   336,    36,    88,
    89,    75,    36,   640,    75,   642,   688,   689,   351,   319,
   343,   344,   351,   666,    95,   358,   653,    36,    46,    95,
    46,   375,   555,   377,   100,   779,   780,   781,   338,    46,
   111,    45,    45,   338,    46,   111,    95,   126,    46,   515,
    15,   351,    45,   376,    95,   134,   135,   136,   137,    36,
   139,   405,   111,   142,   143,    93,    94,   474,    45,   148,
   111,    36,   151,   152,    45,     1,    78,    95,    80,    95,
   487,    84,    81,    82,    93,    94,    36,   465,    95,    85,
    86,    95,    95,   172,   953,   954,   474,    95,   177,   178,
    50,   479,    36,   182,   183,   184,   185,   111,   111,   188,
    45,    46,    46,   192,   193,   194,   195,    46,    95,    45,
    45,   465,   201,   498,   203,   204,   205,   206,   207,   507,
   474,     1,   465,    36,   111,   479,   602,   544,   468,   218,
     1,   464,   486,   487,    46,    45,     7,   491,    51,    19,
   229,    45,    46,    14,   529,    46,    46,    45,   801,    45,
    95,   505,    45,   507,   507,   509,    95,    46,    38,    39,
    95,    41,    42,    43,    45,    45,   111,    17,   507,   666,
    45,    46,    45,    46,    45,   264,   111,    48,    48,    50,
    93,    94,    36,    95,    45,    95,    46,    48,   531,    50,
   544,    95,    72,   547,    95,    95,    46,    46,   674,    95,
    71,   111,   291,   292,    93,    94,     1,   111,    45,    45,
    17,   300,     7,    84,   303,   111,    45,   306,    37,    14,
    95,    46,    95,    94,    95,    75,    14,    98,    46,    83,
   319,   111,    17,   113,   323,    95,   111,   326,   111,    46,
   111,   112,    46,   114,   115,   116,    95,   557,   558,   338,
    45,    51,   640,    48,   343,   344,   345,    45,    95,    95,
    45,   649,   351,    15,   917,    46,    95,   904,    75,   358,
    95,   360,   925,    17,   111,   111,    71,    95,   367,    99,
   777,    46,   111,    71,    36,    46,   640,   376,   642,    84,
    75,    95,   775,    93,    94,   649,    84,   386,    50,    94,
    95,    36,    46,    98,   801,    46,    94,    95,    38,   738,
    98,    41,   622,    46,    95,    46,   111,   622,   971,   114,
   115,   116,    49,   111,   678,   679,   114,   115,   116,    17,
    95,    75,   985,   388,    95,   390,   391,   392,   393,   394,
   395,    45,   397,   398,    46,   400,   401,    74,    46,    76,
    77,    78,    46,    80,    95,   709,    45,    16,    46,    18,
    19,   671,    95,   452,   453,   454,   671,    46,    45,   458,
   459,   460,    99,   462,    95,   464,   465,    46,   467,    38,
    39,    49,    41,    42,    43,   474,    45,    75,    38,    46,
   479,    41,    46,    95,    17,    17,     1,   486,    46,    50,
   788,    95,     7,   791,    38,   793,    17,    41,    46,    14,
    38,    46,   708,    41,   768,    43,    95,    45,   507,    17,
   917,   510,    45,    46,    46,   149,    95,   113,   925,    15,
   519,    46,    46,    46,   788,    46,   776,   791,    95,   793,
    45,    95,   531,    95,    72,   534,    95,    95,    46,  1086,
    36,    46,    75,    75,   113,   931,    84,    95,    81,    82,
    95,    46,   186,    17,    75,    15,    71,    95,   557,   558,
    81,    82,   100,    15,   971,    46,   200,    75,   202,    84,
    95,    95,    95,   111,    15,    17,    36,    46,   985,    94,
    95,    46,    46,    98,    36,   883,    17,   885,    46,   809,
    95,   889,    46,    46,   809,    36,   111,    46,   862,   114,
   115,   116,    46,    46,    46,   604,   605,   871,    46,   608,
    46,    75,   611,    46,    95,    15,   615,    99,   617,   883,
   619,   885,    35,   622,    46,   889,    95,   626,    17,    46,
    95,     2,   631,    75,   268,   269,    36,    95,    46,    81,
    82,   640,    95,    46,   864,   943,    95,    46,    36,   864,
   649,    95,    95,     1,    46,   875,    78,    95,    80,     7,
   875,    78,    95,    80,   928,    78,    14,    80,    37,   303,
   304,   305,   671,   937,    45,    46,    36,   941,   942,   943,
    51,    52,    74,    46,    76,    77,    78,    16,    80,    18,
    19,   955,   956,   957,    93,    94,   916,    45,    28,    46,
    48,   916,    50,    46,   669,   670,    83,    99,   342,    38,
    39,    46,    41,    42,    43,    47,    45,    88,    89,    50,
   984,    46,    46,    71,   723,   724,   725,    49,    38,    46,
    46,    41,    95,    46,   998,   999,    84,    46,   703,   704,
   960,   706,   707,   377,   743,   960,    94,    95,    95,   748,
    98,    46,    95,    51,   753,   126,    46,    93,    94,    46,
    95,    93,    94,   111,   112,    46,   114,   115,   116,    75,
    95,    95,   143,    51,   773,    50,   775,   148,    95,    95,
   151,   152,    95,    35,   113,    46,    95,    38,    11,   788,
    41,    78,   791,    80,   793,    93,    94,   796,   797,   798,
    95,   172,    46,    93,    94,    35,   177,   178,    46,    75,
   809,   182,   183,   184,   185,    93,    94,    78,     7,    80,
  1040,   192,   193,   194,   195,    14,    78,   111,    80,   113,
   201,    49,   203,   204,   205,   206,   207,    81,    82,    36,
   474,   840,   841,    81,    82,    95,    38,   218,    78,    41,
    80,  1115,  1116,   487,  1118,  1119,    45,    36,   229,    48,
    46,    50,   111,  1127,   113,   864,  1130,  1131,  1132,    36,
    85,    86,    38,    14,    46,    41,   875,    74,  1142,    76,
    77,    78,    71,    80,   883,    38,   885,    46,    41,   888,
   889,    81,    78,   264,    80,    84,   268,   269,    46,    46,
    38,    46,    99,    41,    45,    94,    95,    74,    11,    98,
   544,    78,    79,    80,    49,   549,   111,   916,   113,    72,
   291,    36,   111,   112,    80,   114,   115,   116,    80,   300,
    71,    78,   303,    80,    49,   306,    46,    85,    86,    87,
    88,    89,    90,    84,   943,    93,    94,    38,   319,   111,
    41,   113,   323,    94,    95,   326,   111,    98,   113,    74,
   111,   960,   113,    78,    79,    80,    38,   338,    95,    41,
   111,    19,    46,   114,   115,   116,    16,    48,    18,    19,
   351,    72,    45,     8,    76,    77,    78,   358,    80,   360,
    38,    39,     2,    41,    42,    43,   367,    19,    38,    39,
    72,    41,    42,    43,   550,    45,    95,    99,   642,  1008,
  1009,    80,    46,  1012,  1013,   386,    38,    39,    95,    41,
    42,    43,     7,    45,    48,    88,    89,    32,     4,    14,
     6,    46,    72,    73,    19,    45,    46,    78,    79,    80,
    46,    51,    52,    16,  1043,    18,    19,    46,  1047,    46,
    72,  1050,  1051,    38,    39,    46,    41,    42,    43,    78,
    45,    80,    46,   126,    46,    38,    39,    36,    41,    42,
    43,    46,    45,   113,    45,    49,    80,    74,    88,    89,
   143,    78,    79,    80,    50,  1084,    71,    72,   151,   111,
    11,   113,    74,    46,   465,    46,    78,    79,    80,    84,
    74,    50,    46,   474,    78,    79,    80,    95,   479,    94,
    95,    46,    95,    98,   177,   486,   126,    56,    95,   665,
    46,    51,   668,     4,     5,     6,   111,     7,    36,   114,
   115,   116,    46,   143,    14,    48,   507,    46,   148,   510,
   113,   151,   152,    46,    83,    84,    46,    46,    46,   695,
    81,    80,    91,    92,    45,   218,    95,    96,    97,    36,
   531,    46,   172,   534,    46,    45,   229,   177,   178,    45,
    49,    49,   182,   183,   184,   185,    49,    51,    46,    51,
    51,    46,   192,   193,   194,   195,   557,   558,    46,    74,
    36,    71,    74,    78,    79,    80,    78,    79,    80,    48,
    45,   264,    46,    46,    84,     2,    74,    46,   218,    95,
    78,    79,    80,    49,    94,    95,    74,    41,    98,   229,
    78,    79,    80,    51,    36,    46,    46,    46,   291,    46,
     7,   111,    37,    46,   114,   115,   116,    14,    74,    49,
   303,    48,    78,    79,    80,    22,    23,    46,    45,    46,
    46,   622,    46,    74,   264,    52,   319,    78,    79,    80,
    45,    74,    46,   326,   810,    78,    79,    80,    45,   640,
   904,    46,    46,    51,    46,    14,   114,    37,   649,    46,
    74,   291,    51,    45,    78,    79,    80,    45,   351,   239,
   300,    88,    89,   303,    71,   358,   306,   360,    45,    50,
   671,    46,    46,    46,   367,    46,    45,    84,    50,   319,
    50,    46,    45,   323,    51,    45,   326,    94,    95,    50,
    45,    98,    50,    50,   101,    49,    45,    50,   338,   126,
    45,    45,    71,    50,   111,   112,    46,   114,   115,   116,
    16,   351,    18,    19,    50,    84,   143,    46,   358,    95,
   360,   148,    41,    49,   151,    94,    95,   367,    41,    98,
    46,    95,    38,    39,    51,    41,    42,    43,    46,    45,
    51,    51,   111,    95,    95,   114,   115,   116,    74,    46,
   177,   178,    78,    79,    80,   182,   183,   184,   185,    46,
    95,    95,    46,    46,    49,   192,   193,   194,   195,    41,
    95,    74,   465,    95,   775,    78,    79,    80,    51,    46,
    51,   474,    51,    51,    46,    46,   479,   788,    46,    74,
   791,   218,   793,    78,    79,    80,    51,    46,     7,   975,
    81,    46,   229,   979,   980,    14,    74,   113,   809,   114,
    78,    79,    80,   114,   507,   114,   114,    46,    46,   995,
   996,   997,    45,   114,    51,   465,    51,   407,    16,   409,
    18,    19,   412,    46,   474,    95,    45,   264,   531,   479,
    46,    46,    46,    46,  1020,    46,   486,    46,    46,   114,
    38,    39,    46,    41,    42,    43,    46,    45,  1034,  1035,
   114,   114,    71,   864,   291,    50,    50,   507,    50,    50,
    46,    46,    46,   300,   875,    84,   303,    46,   114,    50,
     7,    46,   883,    50,   885,    94,    95,    14,   889,    98,
    50,   531,   319,    50,    50,    22,    23,    51,    51,   326,
    51,    51,   111,    51,    51,   114,   115,   116,    51,    51,
    51,   338,     0,     0,   403,   916,   555,   577,    45,   486,
   100,   693,   514,   651,   351,   113,   624,    -1,    -1,    -1,
    -1,   358,    -1,   360,    -1,    -1,    -1,    -1,    -1,    -1,
   367,    -1,   943,    -1,    71,    -1,    -1,   640,    -1,  1125,
  1126,    -1,  1128,  1129,    -1,    -1,   649,    84,    -1,   960,
  1136,    -1,    -1,  1139,  1140,  1141,     9,    94,    95,    -1,
    -1,    98,    -1,    -1,   101,  1151,    -1,    20,    21,    22,
    23,    -1,   622,    -1,   111,   112,    -1,   114,   115,   116,
    -1,    34,    -1,    56,    -1,    -1,    -1,    -1,   578,    -1,
   640,   581,    45,   583,    -1,    48,   586,    -1,    -1,   649,
    -1,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    -1,   671,    95,    96,    97,    -1,    -1,    -1,   465,  1040,
    85,    86,    87,    88,    89,    90,    56,   474,    93,    94,
    -1,    -1,   479,    -1,    -1,    -1,    -1,   100,   101,   102,
    -1,   104,   105,   106,   107,   108,    -1,   110,   111,    -1,
    -1,  1072,    -1,    83,    84,   655,   656,   657,    -1,    -1,
   507,    91,    92,    93,    94,    95,    96,    97,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   788,     7,    -1,   791,    -1,
   793,    -1,    -1,    14,   531,    -1,    -1,    -1,    -1,    -1,
    -1,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,   460,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   711,    -1,   713,    45,   775,   716,    48,   718,    50,
   720,    -1,   722,   723,   724,   725,    -1,    -1,   788,   729,
    -1,   791,   732,   793,    -1,    -1,    -1,   737,    -1,    -1,
    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   809,
    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
   581,    -1,   583,    94,    95,   586,    -1,    98,    -1,    -1,
   883,    -1,   885,    -1,    -1,   622,   889,    -1,   599,    -1,
   111,   112,    -1,   114,   115,   116,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   640,    -1,    -1,   796,   797,   798,    -1,
   800,    -1,   649,    -1,   864,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   875,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   883,   671,   885,    -1,    -1,    -1,   889,
   943,   831,    -1,    -1,    -1,   656,   657,    14,    -1,    -1,
   840,   841,    -1,   843,   605,   845,   607,   608,    -1,   610,
   611,    -1,   613,    -1,    -1,   616,   916,   618,   619,    -1,
   621,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   943,    -1,    -1,    -1,    -1,   888,    -1,
   711,    14,    -1,    -1,    71,   716,    -1,   718,    -1,   720,
   960,   722,    -1,   724,   725,    -1,    -1,    84,   729,    -1,
    -1,   732,    -1,    -1,    -1,    -1,   737,    94,    95,    -1,
    -1,    98,    45,    -1,    -1,    -1,    -1,    -1,   775,    -1,
    -1,    -1,    -1,    -1,   111,    -1,    -1,   114,   115,   116,
    -1,   788,    -1,    -1,   791,    -1,   793,    -1,    71,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    84,   809,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    94,    95,    -1,    -1,    98,   797,   798,    -1,   800,
    -1,    -1,   743,    -1,   745,   746,    -1,   748,   111,   750,
   751,   114,   115,   116,   755,   756,    -1,    -1,    -1,   760,
    -1,   762,   763,    -1,    -1,   766,   767,    -1,  1008,  1009,
   831,    -1,  1012,  1013,    -1,    -1,    -1,   864,    -1,   840,
   841,    -1,   843,    -1,   845,    -1,    -1,    -1,   875,    -1,
    -1,    -1,    -1,    -1,    -1,    14,   883,     7,   885,    -1,
    -1,    -1,   889,  1043,    14,    -1,    16,  1047,    -1,    -1,
  1050,  1051,    22,    23,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,   888,    38,   916,
    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1084,    -1,    -1,    -1,    -1,    -1,
    -1,   852,    71,    -1,    -1,   856,   943,    -1,   859,   860,
    -1,    71,    72,    73,    -1,    84,    -1,    -1,   869,    -1,
    -1,    -1,    -1,   960,    84,    94,    95,    -1,    -1,    98,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
    -1,   101,   111,    -1,    -1,   114,   115,   116,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
    -1,    -1,    -1,     7,    -1,     9,    10,    -1,   929,    -1,
    14,    -1,    16,    -1,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    -1,    29,    30,    31,  1009,    33,
    34,    -1,  1013,    -1,    38,    39,    -1,    41,    42,    43,
    -1,    45,   963,    -1,    48,   966,    -1,    -1,    52,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1043,    -1,    -1,    -1,  1047,    71,    72,    73,
  1051,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    84,  1002,    -1,  1004,    -1,  1006,    -1,    -1,    -1,    -1,
    94,    95,    -1,    -1,    98,    -1,   100,   101,   102,   103,
   104,   105,   106,  1084,    -1,    -1,    -1,   111,   112,   113,
   114,   115,   116,     3,    -1,    -1,    -1,     7,    -1,     9,
    10,    -1,    -1,    -1,    14,    -1,    16,    -1,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
    30,    31,    -1,    33,    34,    -1,    -1,    -1,    38,    39,
    -1,    41,    42,    43,    -1,    45,    -1,    -1,    48,    -1,
    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
   100,   101,   102,   103,   104,   105,   106,    -1,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   116,     3,    -1,    -1,
    -1,     7,    -1,     9,    10,    -1,    -1,    -1,    14,    -1,
    16,    -1,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    -1,    29,    30,    31,    -1,    33,    34,    -1,
    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    -1,    -1,    98,    -1,   100,   101,   102,   103,   104,   105,
   106,    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,
   116,     3,    -1,    -1,    -1,     7,    -1,     9,    10,    -1,
    -1,    -1,    14,    -1,    16,    -1,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
    -1,    33,    34,    -1,    -1,    -1,    38,    39,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,
    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    -1,    -1,    98,    -1,   100,   101,
   102,   103,   104,   105,   106,    -1,    -1,    -1,    -1,   111,
   112,   113,   114,   115,   116,     3,    -1,    -1,    -1,     7,
    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,    -1,
    18,    19,    20,    21,    -1,    -1,    24,    25,    26,    27,
    -1,    29,    30,    31,    -1,    33,    34,    -1,    -1,    -1,
    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
    48,    -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,
    -1,    -1,   100,    -1,   102,   103,   104,   105,   106,    -1,
     3,    -1,    -1,   111,     7,   113,     9,    10,    -1,    -1,
    -1,    -1,    -1,    16,    -1,    18,    19,    20,    21,    -1,
    -1,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
    33,    34,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
    43,     7,    45,    -1,    -1,    48,    -1,    -1,    14,    52,
    16,    -1,    18,    19,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,    -1,    38,    39,    -1,    41,    42,    43,     7,    45,
    -1,    -1,    -1,    -1,    -1,    14,    -1,    16,    -1,    -1,
    -1,    -1,    95,    22,    23,    -1,    -1,   100,    -1,   102,
   103,   104,   105,   106,    -1,    71,    72,    73,   111,    38,
   113,    -1,    41,    42,    43,    -1,    45,    -1,    84,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    -1,    -1,    98,    -1,   100,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,   111,    -1,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    -1,    -1,    94,    95,    -1,    14,    98,
    16,    -1,   101,    -1,    -1,    -1,    22,    23,    -1,    -1,
    -1,    -1,   111,   112,   113,   114,   115,   116,    -1,    -1,
    -1,    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,
    -1,    -1,    -1,    -1,    -1,    14,    -1,    16,    -1,    -1,
    -1,    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    -1,    -1,    98,    -1,    -1,   101,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,   111,   112,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    -1,    -1,    94,    95,    -1,    14,    98,
    -1,    -1,   101,    19,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,   112,   113,   114,   115,   116,    -1,    -1,
    -1,    -1,    38,    39,    -1,    41,    42,    43,     7,    45,
    -1,    -1,    48,    -1,    50,    14,    -1,    16,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,    48,
    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,   111,   112,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    -1,    -1,    94,    95,    -1,    14,    98,
    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,   112,   113,   114,   115,   116,    -1,    -1,
    -1,    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,
    -1,    -1,    48,    -1,    50,    14,    -1,    16,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,    48,
    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,   111,   112,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    -1,    -1,    94,    95,    -1,    14,    98,
    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,    -1,   113,   114,   115,   116,    -1,    -1,
    -1,    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,
    -1,    -1,    48,    -1,    50,    14,    -1,    16,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    94,    95,
    -1,    -1,    98,    14,    -1,    16,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,   111,    -1,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    38,    -1,    -1,
    41,    42,    43,     7,    45,    94,    95,    -1,    -1,    98,
    14,   100,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,    -1,   113,   114,   115,   116,    -1,    -1,
    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    94,    95,    -1,    -1,    98,    14,   100,
    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,    -1,
    84,    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,
    94,    95,    -1,    -1,    98,    14,    -1,    16,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,   113,
   114,   115,   116,    -1,    -1,    71,    72,    73,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    94,    95,
    -1,    -1,    98,    14,    -1,    16,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,   111,    -1,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    38,    -1,    -1,
    41,    42,    43,     7,    45,    94,    95,    -1,    -1,    98,
    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,    -1,   113,   114,   115,   116,    -1,    -1,
    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    94,    95,    -1,    -1,    98,    14,    -1,
    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,    -1,
    84,    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,
    94,    95,    -1,    -1,    98,    14,    -1,    16,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,   113,
   114,   115,   116,    -1,    -1,    71,    72,    73,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    -1,    84,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    94,    95,
    -1,    -1,    98,    14,    -1,    16,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    73,   111,    -1,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    38,    -1,    -1,
    41,    42,    43,     7,    45,    94,    95,    -1,    -1,    98,
    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   111,    -1,   113,   114,   115,   116,    -1,    -1,
    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    94,    95,    -1,    -1,    98,    14,    -1,
    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
   111,    -1,   113,   114,   115,   116,    -1,    -1,    -1,    -1,
    84,    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,
    94,    95,    -1,    -1,    98,    14,    -1,    -1,    -1,    -1,
    19,    -1,    -1,    -1,    14,    -1,    -1,   111,    -1,   113,
   114,   115,   116,    -1,    -1,    71,    72,    73,    -1,    38,
    39,    -1,    41,    42,    43,     7,    45,    -1,    84,    -1,
    -1,    -1,    14,    -1,    -1,    45,    -1,    -1,    94,    95,
    22,    23,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    71,    72,    -1,   111,    -1,   113,   114,   115,
   116,    71,    -1,    45,    -1,    84,    -1,    14,    -1,    -1,
    -1,    -1,    -1,    -1,    84,    94,    95,    -1,    -1,    98,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    71,
    -1,    -1,   111,    -1,    -1,   114,   115,   116,    45,    -1,
    14,   111,    84,    -1,   114,   115,   116,    -1,    14,    -1,
    -1,    -1,    94,    95,    -1,    14,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,   111,
   112,    45,   114,   115,   116,    -1,    -1,    84,    -1,    45,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    94,    95,    -1,
    -1,    98,    -1,    -1,    -1,    -1,    14,    71,    -1,    -1,
    -1,    -1,    14,    -1,   111,    71,    -1,   114,   115,   116,
    84,    -1,    71,    -1,    -1,    -1,    -1,    -1,    84,    -1,
    94,    95,    -1,    -1,    98,    84,    -1,    45,    94,    95,
    14,    -1,    98,    45,    -1,    94,    95,   111,    -1,    98,
   114,   115,   116,    -1,    -1,   111,    -1,    -1,   114,   115,
   116,    -1,   111,    71,    -1,   114,   115,   116,    -1,    71,
    -1,    45,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
    -1,    -1,    84,    -1,    -1,    -1,    94,    95,    -1,    -1,
    98,    -1,    94,    95,    -1,    -1,    98,    71,    -1,    -1,
    -1,    -1,    -1,   111,    -1,    -1,   114,   115,   116,   111,
    84,    -1,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,
    94,    95,    -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,
   114,   115,   116
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 148 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 178 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 179 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 183 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 186 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 188 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 192 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 200 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 209 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 211 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 214 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 216 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 220 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 221 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 226 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 229 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 234 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 236 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 244 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 349 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 350 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 352 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 357 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 359 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 360 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 362 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 373 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 374 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 384 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 390 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 394 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 400 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 408 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 419 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 422 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 64:
#line 435 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 65:
#line 440 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 66:
#line 444 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 67:
#line 450 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 68:
#line 451 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 69:
#line 457 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 70:
#line 462 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 71:
#line 467 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 72:
#line 476 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 73:
#line 484 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 74:
#line 495 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 75:
#line 508 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 76:
#line 509 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 77:
#line 510 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 515 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 79:
#line 519 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 80:
#line 523 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 81:
#line 527 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 82:
#line 531 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 535 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 541 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 85:
#line 543 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 86:
#line 546 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 87:
#line 551 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 88:
#line 562 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 89:
#line 563 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 90:
#line 564 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 91:
#line 567 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 92:
#line 568 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 93:
#line 569 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 94:
#line 577 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 95:
#line 581 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 96:
#line 585 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 590 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 596 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 601 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 100:
#line 608 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 101:
#line 614 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 102:
#line 625 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 103:
#line 626 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 104:
#line 627 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 105:
#line 632 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 106:
#line 639 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 107:
#line 642 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 108:
#line 643 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 652 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 110:
#line 655 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 111:
#line 656 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 112:
#line 657 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 658 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 659 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 115:
#line 660 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 116:
#line 661 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 117:
#line 665 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 118:
#line 667 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 119:
#line 669 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 120:
#line 671 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 121:
#line 673 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 122:
#line 675 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 125:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 685 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 128:
#line 687 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 129:
#line 689 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 693 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 131:
#line 694 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 132:
#line 697 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 133:
#line 698 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 134:
#line 699 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 135:
#line 702 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 136:
#line 703 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 137:
#line 704 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 138:
#line 707 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 139:
#line 711 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 140:
#line 712 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 141:
#line 717 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, INTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 142:
#line 722 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, UINTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 143:
#line 727 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,FLOATPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 144:
#line 732 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,CHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 145:
#line 737 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, UCHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 146:
#line 742 "msv.y"
{ 
	      yyval.tnode=yyvsp[-1].tnode
	   ;
    break;}
case 147:
#line 748 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 148:
#line 749 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 149:
#line 750 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 150:
#line 756 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 151:
#line 757 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 152:
#line 759 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 153:
#line 761 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 154:
#line 763 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 155:
#line 765 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 156:
#line 766 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 157:
#line 772 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 158:
#line 773 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 159:
#line 775 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 160:
#line 777 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 161:
#line 782 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 162:
#line 783 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 163:
#line 787 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 164:
#line 788 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 165:
#line 792 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 166:
#line 793 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 167:
#line 797 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 168:
#line 798 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 169:
#line 799 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 170:
#line 800 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 171:
#line 801 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 803 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 804 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 805 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 806 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 807 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 177:
#line 808 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 809 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 810 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 811 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 181:
#line 812 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 182:
#line 815 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 183:
#line 816 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 184:
#line 817 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 185:
#line 818 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 186:
#line 819 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 187:
#line 820 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 188:
#line 821 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 189:
#line 822 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 190:
#line 825 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 191:
#line 826 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 192:
#line 830 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 193:
#line 831 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 194:
#line 832 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 195:
#line 833 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 196:
#line 840 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 197:
#line 844 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 198:
#line 852 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 199:
#line 864 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 200:
#line 868 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 201:
#line 877 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 202:
#line 889 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 203:
#line 893 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 901 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 205:
#line 904 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 206:
#line 905 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 207:
#line 910 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 208:
#line 914 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 209:
#line 918 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 210:
#line 923 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 211:
#line 926 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 212:
#line 935 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 213:
#line 936 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 214:
#line 937 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 215:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 216:
#line 941 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 217:
#line 944 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 218:
#line 945 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 219:
#line 948 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 220:
#line 949 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 221:
#line 950 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 222:
#line 951 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 223:
#line 952 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 224:
#line 953 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 225:
#line 956 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 226:
#line 957 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 227:
#line 958 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 228:
#line 959 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 229:
#line 960 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 230:
#line 961 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 231:
#line 963 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 232:
#line 964 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 233:
#line 966 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 234:
#line 967 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 235:
#line 969 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 236:
#line 977 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 237:
#line 978 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 238:
#line 979 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 239:
#line 980 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 240:
#line 981 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 241:
#line 987 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 242:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 243:
#line 990 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 244:
#line 993 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 245:
#line 994 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 246:
#line 995 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 998 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 248:
#line 999 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 249:
#line 1002 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 250:
#line 1003 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 251:
#line 1006 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 1007 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 1010 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 254:
#line 1011 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 255:
#line 1016 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 256:
#line 1017 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 257:
#line 1018 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 258:
#line 1019 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 259:
#line 1020 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 260:
#line 1021 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 261:
#line 1029 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 262:
#line 1030 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 263:
#line 1034 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 264:
#line 1035 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 265:
#line 1042 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 266:
#line 1046 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 267:
#line 1051 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 268:
#line 1057 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 269:
#line 1063 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 270:
#line 1069 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 271:
#line 1079 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 272:
#line 1085 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 273:
#line 1091 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 274:
#line 1097 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 275:
#line 1105 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 276:
#line 1109 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 277:
#line 1113 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 278:
#line 1119 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 279:
#line 1123 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 280:
#line 1127 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 281:
#line 1133 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 282:
#line 1139 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 283:
#line 1146 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 284:
#line 1152 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 285:
#line 1158 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 286:
#line 1162 "msv.y"
{
		  CSyntaxNode* pChild00=new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
		  CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, pChild00, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 287:
#line 1170 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 288:
#line 1175 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 289:
#line 1179 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 290:
#line 1183 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 291:
#line 1187 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 292:
#line 1193 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 293:
#line 1199 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 294:
#line 1205 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 295:
#line 1212 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 296:
#line 1220 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 297:
#line 1226 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 298:
#line 1241 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 299:
#line 1246 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 300:
#line 1251 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 301:
#line 1259 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 302:
#line 1266 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 303:
#line 1272 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 304:
#line 1278 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 305:
#line 1281 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 306:
#line 1291 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 307:
#line 1302 "msv.y"
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
case 308:
#line 1306 "msv.y"
{
	      yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].cString, NULL, STRUCTTYPE);
	   ;
    break;}
case 309:
#line 1309 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 310:
#line 1310 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1315 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 312:
#line 1328 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 313:
#line 1329 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 314:
#line 1337 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 315:
#line 1339 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 316:
#line 1346 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 317:
#line 1348 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 318:
#line 1354 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 319:
#line 1355 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 320:
#line 1359 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 321:
#line 1364 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 322:
#line 1369 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 323:
#line 1374 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 324:
#line 1381 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 325:
#line 1384 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 326:
#line 1385 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 327:
#line 1391 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 328:
#line 1393 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 329:
#line 1413 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 330:
#line 1414 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 331:
#line 1416 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 332:
#line 1418 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 333:
#line 1419 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 334:
#line 1425 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 335:
#line 1432 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 336:
#line 1440 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 337:
#line 1448 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 338:
#line 1452 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 339:
#line 1456 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 340:
#line 1462 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 341:
#line 1466 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 342:
#line 1472 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 343:
#line 1476 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 344:
#line 1483 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 345:
#line 1487 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 346:
#line 1491 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 347:
#line 1498 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 348:
#line 1502 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 349:
#line 1505 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 350:
#line 1510 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 351:
#line 1519 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 352:
#line 1520 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 353:
#line 1526 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 354:
#line 1527 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 355:
#line 1531 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 356:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 357:
#line 1537 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 358:
#line 1538 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1539 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 360:
#line 1540 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 361:
#line 1541 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 362:
#line 1544 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 363:
#line 1545 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 364:
#line 1546 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 365:
#line 1552 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 366:
#line 1553 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1554 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1556 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1557 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1558 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1560 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1561 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1562 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1563 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1565 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1566 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1567 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1568 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1569 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 380:
#line 1570 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 381:
#line 1571 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 382:
#line 1575 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 383:
#line 1576 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 384:
#line 1577 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 385:
#line 1578 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 386:
#line 1579 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 387:
#line 1580 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 388:
#line 1581 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1583 "msv.y"
