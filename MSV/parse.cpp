
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	IF	262
#define	ELSE	263
#define	EMPTY	264
#define	AWAIT	265
#define	PROJECTION	266
#define	PBEGIN	267
#define	PEND	268
#define	POINTERNULL	269
#define	ARRAY	270
#define	STRUCT	271
#define	DOT	272
#define	UNION	273
#define	FILEDECLARATION	274
#define	MORE	275
#define	DEFINE	276
#define	MY_TRUE	277
#define	MY_FALSE	278
#define	EXIST	279
#define	FRAME	280
#define	FOR	281
#define	WHILE	282
#define	DO	283
#define	TRUE	284
#define	FALSE	285
#define	REPEAT	286
#define	UNTIL	287
#define	DISPLAY	288
#define	SKIP	289
#define	THEN	290
#define	COMMA	291
#define	COLON	292
#define	INTDECLARATION	293
#define	STRDECLARATION	294
#define	POINTERDECLARATION	295
#define	CHARDECLARATION	296
#define	VOIDDECLARATION	297
#define	FLOATDECLARATION	298
#define	LISTDECLARATION	299
#define	OPEN_PAR	300
#define	CLOSE_PAR	301
#define	TIMES	302
#define	OPEN_BPAR	303
#define	CLOSE_BPAR	304
#define	OPEN_MPAR	305
#define	CLOSE_MPAR	306
#define	FUNCTION	307
#define	OVER	308
#define	CYLINDER	309
#define	OVEREP	310
#define	INTER_OR	311
#define	NON_DETERMINED	312
#define	SEND	313
#define	RECEIVE	314
#define	PROCESS	315
#define	CHANNEL	316
#define	PUT	317
#define	GET	318
#define	ERROR_TOKEN	319
#define	EXTERN	320
#define	UNSIGNED	321
#define	SIGNED	322
#define	CHOP	323
#define	OR	324
#define	PARALLEL	325
#define	AND	326
#define	ASS_P	327
#define	ASS_N	328
#define	CON	329
#define	ADDRESS	330
#define	BOOL_AND	331
#define	IMPLY	332
#define	IFF	333
#define	PROPIMPLY	334
#define	NE	335
#define	EQ	336
#define	GE	337
#define	LE	338
#define	GT	339
#define	LT	340
#define	LST	341
#define	RST	342
#define	ADD	343
#define	SUB	344
#define	MUL	345
#define	DIV	346
#define	MOD	347
#define	BNE	348
#define	BOOL_OR	349
#define	CHOPSTAR	350
#define	NEXT	351
#define	NEGATION	352
#define	LENGTH	353
#define	REQUEST	354
#define	FINAL	355
#define	KEEP	356
#define	ALWAYS	357
#define	HALT	358
#define	W_NEXT	359
#define	PREFIX	360
#define	SOMETIMES	361
#define	ID	362
#define	STRLITERAL	363
#define	STRUCT_TYPE	364
#define	INTLITERAL	365
#define	FLOATLITERAL	366
#define	CHARLITERAL	367

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1094
#define	YYFLAG		-32768
#define	YYNTBASE	113

#define YYTRANSLATE(x) ((unsigned)(x) <= 367 ? yytranslate[x] : 185)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   216,
   226,   228,   230,   238,   242,   244,   248,   250,   251,   256,
   262,   267,   272,   275,   278,   281,   284,   286,   289,   292,
   296,   300,   304,   308,   316,   325,   337,   351,   353,   355,
   357,   359,   361,   363,   366,   373,   378,   384,   390,   399,
   408,   411,   414,   417,   418,   425,   433,   434,   437,   441,
   443,   445,   447,   449,   453,   456,   458,   470,   483,   495,
   507,   525,   544,   562,   581,   601,   620,   638,   657,   675,
   677,   679,   681,   683,   694,   698,   700,   705,   711,   715,
   727,   740,   752,   764,   777,   781,   785,   788,   789,   792,
   795,   798,   806,   813,   818,   822,   824,   828,   832,   836,
   839,   845,   847,   850,   851,   853,   857,   859,   861,   863,
   865,   867,   869,   871,   873,   875,   877,   879,   881,   884,
   887,   889,   891,   893,   897,   899,   901,   903,   905,   907,
   909,   911,   913,   915,   917,   921,   923,   925,   929,   934,
   939,   944,   949,   954,   958,   962,   966,   967,   970,   973,
   976,   979,   982,   986,   991,   996,  1001,  1007,  1013,  1019,
  1025,  1031,  1038,  1044,  1050,  1057,  1063,  1070,  1078,  1085,
  1092,  1100,  1107,  1114,  1120,  1128,  1135,  1137,  1139,  1141,
  1143,  1145,  1147,  1149,  1152,  1155,  1157,  1159,  1163,  1166,
  1170,  1175,  1181,  1186,  1190,  1195,  1201,  1206,  1209,  1213,
  1218,  1221,  1225,  1230,  1235,  1241,  1249,  1254,  1258,  1264,
  1273,  1274,  1279,  1283,  1288,  1293,  1299,  1305,  1311,  1317,
  1324,  1334,  1335,  1343,  1353,  1362,  1368,  1373,  1376,  1379,
  1381,  1383,  1384,  1387,  1391,  1392,  1395,  1399,  1402,  1406,
  1409,  1411,  1415,  1417,  1419,  1421,  1423,  1427,  1428,  1431,
  1432,  1436,  1437,  1440,  1444,  1448,  1452,  1456,  1462,  1472,
  1474,  1476,  1477,  1479,  1480,  1482,  1483,  1491,  1499,  1505,
  1508,  1510,  1511,  1517,  1520,  1521,  1526,  1532,  1533,  1537,
  1542,  1548,  1553,  1559,  1564,  1565,  1569,  1573,  1578,  1583,
  1588,  1593,  1598,  1603,  1608,  1613,  1620,  1625,  1630,  1635,
  1642,  1646,  1650,  1655,  1659,  1660,  1664,  1668,  1672,  1676,
  1679
};

static const short yyrhs[] = {   114,
   117,     0,    12,   115,    13,     0,     0,   115,    71,   115,
     0,   115,    69,   115,     0,   115,    78,   115,     0,   115,
    79,   115,     0,   115,    68,   115,     0,   102,   115,     0,
   101,   115,     0,   106,   115,     0,   104,   115,     0,    96,
   115,     0,    34,     0,    22,     0,    23,     0,    98,   138,
     0,     9,     0,    20,     0,   103,   115,     0,   100,   115,
     0,    97,   115,     0,    48,   115,   116,    49,    11,    48,
   115,    49,     0,   107,     0,    21,   107,    37,   138,     0,
   115,    95,     0,    45,   115,    46,     0,    36,   115,   116,
     0,     0,   117,    71,   117,     0,   117,    69,   117,     0,
   117,    68,   117,     0,   128,     0,   123,     0,   174,     0,
   177,     0,   168,     0,   169,     0,   170,     0,    96,    45,
   117,    46,     0,   101,    45,   117,    46,     0,   102,    45,
   117,    46,     0,    10,    45,   138,    46,     0,    31,    48,
   117,    49,    32,    45,   138,    46,     0,    34,     0,     9,
     0,    20,     0,    98,    45,   138,    46,     0,   181,     0,
   179,     0,    29,     0,    30,     0,   100,    45,   117,    46,
     0,   117,    70,   117,     0,    45,   167,    46,    77,    50,
   117,    51,     0,    25,    45,   160,   165,    46,    71,    45,
   117,    46,     0,    48,   117,   166,    49,    11,   158,     0,
    48,   117,    49,    11,   158,     0,    52,   107,    45,   154,
    46,    48,   117,    49,     0,    21,   107,    45,   154,    46,
    72,    48,   119,    49,     0,   121,     0,   120,     0,    24,
   160,   155,    37,    48,   117,    49,     0,    45,   117,    46,
     0,   123,     0,   123,    71,   118,     0,   117,     0,     0,
   107,    45,   156,    46,     0,    65,   107,    45,   156,    46,
     0,   134,    45,   156,    46,     0,   122,    48,   118,    49,
     0,    16,   107,     0,    18,   107,     0,    67,   124,     0,
    66,   124,     0,   124,     0,   125,   126,     0,   109,   126,
     0,    16,   107,   126,     0,    18,   107,   126,     0,    16,
   109,   126,     0,    18,   109,   126,     0,    45,    90,   160,
    46,    45,   154,    46,     0,    45,    90,    90,   160,    46,
    45,   154,    46,     0,    45,    90,   107,    50,   138,   136,
    51,    46,    45,   154,    46,     0,    45,    90,   107,    50,
   138,   136,    51,    46,    45,   154,    46,    72,   144,     0,
    38,     0,    43,     0,    41,     0,    39,     0,    42,     0,
<<<<<<< HEAD
    19,     0,   166,   131,     0,   111,    50,   141,   139,    51,
   131,     0,   166,    81,   136,   131,     0,   111,    15,    81,
   148,   131,     0,   111,    15,    81,   167,   131,     0,   111,
    50,   141,   139,    51,    81,   148,   131,     0,   111,    50,
   141,   139,    51,    81,   167,   131,     0,    95,   130,     0,
    36,   130,     0,    36,     1,     0,     0,   111,    50,   141,
   139,    51,     0,     0,    36,   111,    50,   141,   139,    51,
     0,     0,     0,    36,     1,     0,   133,   135,   136,     0,
   166,     0,   189,     0,   138,     0,   140,     0,    45,   133,
    46,     0,   100,   133,     0,   134,     0,    45,    45,    41,
    95,    46,   114,    46,    50,   141,   139,    51,     0,    45,
    45,    72,    41,    95,    46,   114,    46,    50,   141,   139,
    51,     0,    45,    45,    38,    95,    46,   114,    46,    50,
   141,   139,    51,     0,    45,    45,    43,    95,    46,   114,
    46,    50,   141,   139,    51,     0,    45,    45,    41,    95,
    46,    45,    45,    41,    95,    46,   114,    46,    46,    50,
   141,   139,    51,     0,    45,    45,    41,    95,    46,    45,
    45,    72,    41,    95,    46,   114,    46,    46,    50,   141,
   139,    51,     0,    45,    45,    41,    95,    46,    45,    45,
    38,    95,    46,   114,    46,    46,    50,   141,   139,    51,
     0,    45,    45,    72,    41,    95,    46,    45,    45,    41,
    95,    46,   114,    46,    46,    50,   141,   139,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    72,    41,
    95,    46,   114,    46,    46,    50,   141,   139,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    38,    95,
    46,   114,    46,    46,    50,   141,   139,    51,     0,    45,
    45,    38,    95,    46,    45,    45,    41,    95,    46,   114,
    46,    46,    50,   141,   139,    51,     0,    45,    45,    38,
    95,    46,    45,    45,    72,    41,    95,    46,   114,    46,
    46,    50,   141,   139,    51,     0,    45,    45,    38,    95,
    46,    45,    45,    38,    95,    46,   114,    46,    46,    50,
   141,   139,    51,     0,    81,     0,    82,     0,   141,     0,
   148,     0,   167,     0,    45,   167,    46,    45,   129,    46,
    45,   160,    46,   124,     0,    45,   136,    46,     0,   137,
     0,    95,    45,   134,    46,     0,   111,    50,   141,   139,
    51,     0,    45,    45,    38,    95,    46,   111,    46,    50,
   141,   139,    51,     0,    45,    45,    72,    38,    95,    46,
   111,    46,    50,   141,   139,    51,     0,    45,    45,    43,
    95,    46,   111,    46,    50,   141,   139,    51,     0,    45,
    45,    41,    95,    46,   111,    46,    50,   141,   139,    51,
     0,    45,    45,    72,    41,    95,    46,   111,    46,    50,
   141,   139,    51,     0,    45,   138,    46,     0,    36,   141,
   139,     0,    36,     1,     0,     0,    95,   166,     0,    95,
   140,     0,    95,   138,     0,    45,   140,    46,    50,   141,
   139,    51,     0,    95,    45,   159,    95,    46,   141,     0,
    95,    45,   141,    46,     0,    45,   140,    46,     0,   144,
     0,   144,   157,   141,     0,   141,   147,   144,     0,     7,
   155,    35,   141,   143,     0,   144,     0,   144,   147,   144,
     0,     8,   141,     0,     0,   145,     0,   144,   146,   145,
     0,   168,     0,    94,   145,     0,    98,   145,     0,    14,
     0,   170,     0,   166,     0,   138,     0,   140,     0,   124,
     0,    45,   141,    46,     0,   169,     0,   152,     0,   153,
     0,   189,     0,    95,     0,    96,     0,    97,     0,    91,
     0,    92,     0,    84,     0,    56,     0,    83,     0,    93,
     0,    94,     0,   148,    83,   148,     0,   149,     0,   150,
     0,    45,   148,    46,     0,    50,   141,   151,    51,     0,
    50,   167,   151,    51,     0,    50,   148,   151,    51,     0,
    48,   141,   151,    49,     0,    48,   167,   151,    49,     0,
    48,   148,   151,    49,     0,    36,   141,   151,     0,    36,
   167,   151,     0,    36,   148,   151,     0,     0,    36,     1,
     0,    84,   166,     0,    84,   138,     0,    84,   189,     0,
    84,   152,     0,    45,   152,    46,     0,    45,    38,    46,
   142,     0,    45,    43,    46,   142,     0,    45,    41,    46,
   142,     0,    45,    73,    38,    46,   142,     0,    45,    73,
    41,    46,   142,     0,    45,    72,    38,    46,   142,     0,
    45,    72,    41,    46,   142,     0,    45,    38,    95,    46,
   154,     0,    45,    72,    38,    95,    46,   154,     0,    45,
    43,    95,    46,   154,     0,    45,    41,    95,    46,   154,
     0,    45,    72,    41,    95,    46,   154,     0,    45,    42,
    95,    46,   154,     0,    45,    38,    95,    95,    46,   154,
     0,    45,    72,    38,    95,    95,    46,   154,     0,    45,
    43,    95,    95,    46,   154,     0,    45,    41,    95,    95,
    46,   154,     0,    45,    72,    41,    95,    95,    46,   154,
     0,    45,    42,    95,    95,    46,   154,     0,    45,    16,
   113,    95,    46,   154,     0,    45,   113,    95,    46,   154,
     0,    45,    16,   113,    95,    95,    46,   154,     0,    45,
   113,    95,    95,    46,   154,     0,   142,     0,   156,     0,
   101,   155,     0,   155,    80,   155,     0,   155,    78,   155,
     0,    45,   155,    46,     0,   141,   157,   141,     0,    22,
     0,    23,     0,   141,     0,   141,    86,   167,     0,   141,
    85,   167,     0,   167,    86,   141,     0,   167,    85,   141,
     0,   141,    86,    14,     0,   141,    85,    14,     0,    14,
    86,   141,     0,    14,    85,   141,     0,   141,    86,   169,
     0,   141,    85,   169,     0,    87,     0,    88,     0,    85,
     0,    89,     0,    90,     0,    86,     0,    72,    38,     0,
    72,    41,     0,   158,     0,   129,     0,   159,   166,   161,
     0,   159,   161,     0,   113,   166,   161,     0,   113,    95,
   166,   161,     0,   113,    95,    95,   166,   161,     0,   113,
   166,    15,   161,     0,   111,   166,   161,     0,   111,    95,
   166,   161,     0,   111,    95,    95,   166,   161,     0,   111,
   166,    15,   161,     0,   113,   161,     0,   113,    95,   161,
     0,   113,    95,    95,   161,     0,   111,   161,     0,   111,
    95,   161,     0,   111,    95,    95,   161,     0,   159,   166,
    15,   161,     0,   159,    95,   166,    15,   161,     0,   159,
   166,    15,    50,   141,    51,   161,     0,   159,    95,   166,
   161,     0,   159,    95,   161,     0,   159,    95,    95,   166,
   161,     0,    45,    95,   111,    46,    45,   160,    46,   161,
     0,     0,    36,   159,   166,   161,     0,    36,   159,   161,
     0,    36,   111,   166,   161,     0,    36,   113,   166,   161,
     0,    36,   113,    95,   166,   161,     0,    36,   111,   166,
    15,   161,     0,    36,   113,   166,    15,   161,     0,    36,
   159,   166,    15,   161,     0,    36,   159,    95,   166,    15,
   161,     0,    36,    45,    95,   111,    46,    45,   160,    46,
   161,     0,     0,    36,   159,   166,    50,   141,    51,   161,
     0,    36,   159,   166,    50,   141,    36,   141,    51,   161,
     0,    36,   159,   166,    15,    50,   141,    51,   161,     0,
    36,   159,    95,   166,   161,     0,    36,   159,    95,   161,
     0,    36,     1,     0,   136,   163,     0,   159,     0,     0,
    84,     1,     0,    36,   136,   163,     0,     0,    36,     1,
     0,    48,   121,    49,     0,     1,    49,     0,    45,   155,
    46,     0,     1,    46,     0,   111,     0,    45,   166,    46,
     0,   112,     0,   114,     0,   116,     0,   115,     0,    36,
   166,   171,     0,     0,    36,     1,     0,     0,    36,   121,
   172,     0,   156,     0,   101,   173,     0,   173,    80,   173,
     0,   173,    78,   173,     0,    45,   173,    46,     0,    27,
   165,   164,     0,    26,   141,    47,    28,   164,     0,    26,
    45,   177,    36,   178,    36,   179,    46,   164,     0,   132,
     0,   128,     0,     0,   155,     0,     0,   132,     0,     0,
     3,    45,   145,    46,    48,   181,    49,     0,     4,   145,
    37,    45,   121,    46,   182,     0,     6,    37,    45,   121,
    46,     0,     5,   181,     0,   181,     0,     0,     7,   155,
    35,   164,   184,     0,     8,   164,     0,     0,    33,    45,
   136,    46,     0,    33,    45,   136,   186,    46,     0,     0,
    36,   136,   186,     0,   103,    45,   166,    46,     0,   103,
    45,   166,   188,    46,     0,   103,    45,   138,    46,     0,
   103,    45,   138,   188,    46,     0,   103,    45,   189,    46,
     0,     0,    36,   166,   188,     0,    36,   138,   188,     0,
   166,    17,   166,   190,     0,   138,    17,   166,   190,     0,
   140,    17,   166,   190,     0,   166,    17,   138,   190,     0,
   138,    17,   138,   190,     0,   140,    17,   138,   190,     0,
   166,    75,   166,   190,     0,   138,    75,   166,   190,     0,
    45,   152,    46,    75,   166,   190,     0,   140,    75,   166,
   190,     0,   166,    75,   138,   190,     0,   138,    75,   138,
   190,     0,    45,   152,    46,    75,   138,   190,     0,   166,
    17,   124,     0,   166,    75,   124,     0,   140,    75,   138,
   190,     0,    45,   189,    46,     0,     0,    17,   166,   190,
     0,    17,   138,   190,     0,    75,   166,   190,     0,    75,
   138,   190,     0,    17,   124,     0,    75,   124,     0
=======
    19,     0,   160,   127,     0,   107,    50,   138,   136,    51,
   127,     0,   160,    72,   132,   127,     0,   107,    15,    72,
   144,   127,     0,   107,    15,    72,   161,   127,     0,   107,
    50,   138,   136,    51,    72,   144,   127,     0,   107,    50,
   138,   136,    51,    72,   161,   127,     0,    90,   126,     0,
    36,   126,     0,    36,     1,     0,     0,   107,    50,   138,
   136,    51,     0,     0,    36,   107,    50,   138,   136,    51,
     0,     0,     0,    36,     1,     0,   129,   131,   132,     0,
   160,     0,   183,     0,   134,     0,   137,     0,    45,   129,
    46,     0,    96,   129,     0,   130,     0,    45,    45,    41,
    90,    46,   110,    46,    50,   138,   136,    51,     0,    45,
    45,    66,    41,    90,    46,   110,    46,    50,   138,   136,
    51,     0,    45,    45,    38,    90,    46,   110,    46,    50,
   138,   136,    51,     0,    45,    45,    43,    90,    46,   110,
    46,    50,   138,   136,    51,     0,    45,    45,    41,    90,
    46,    45,    45,    41,    90,    46,   110,    46,    46,    50,
   138,   136,    51,     0,    45,    45,    41,    90,    46,    45,
    45,    66,    41,    90,    46,   110,    46,    46,    50,   138,
   136,    51,     0,    45,    45,    41,    90,    46,    45,    45,
    38,    90,    46,   110,    46,    46,    50,   138,   136,    51,
     0,    45,    45,    66,    41,    90,    46,    45,    45,    41,
    90,    46,   110,    46,    46,    50,   138,   136,    51,     0,
    45,    45,    66,    41,    90,    46,    45,    45,    66,    41,
    90,    46,   110,    46,    46,    50,   138,   136,    51,     0,
    45,    45,    66,    41,    90,    46,    45,    45,    38,    90,
    46,   110,    46,    46,    50,   138,   136,    51,     0,    45,
    45,    38,    90,    46,    45,    45,    41,    90,    46,   110,
    46,    46,    50,   138,   136,    51,     0,    45,    45,    38,
    90,    46,    45,    45,    66,    41,    90,    46,   110,    46,
    46,    50,   138,   136,    51,     0,    45,    45,    38,    90,
    46,    45,    45,    38,    90,    46,   110,    46,    46,    50,
   138,   136,    51,     0,    72,     0,    73,     0,   138,     0,
   144,     0,    45,   161,    46,    45,   125,    46,    45,   154,
    46,   120,     0,    45,   132,    46,     0,   133,     0,    90,
    45,   130,    46,     0,   107,    50,   138,   136,    51,     0,
    45,   134,    46,     0,    45,    45,    38,    90,    46,   160,
    46,    50,   138,   136,    51,     0,    45,    45,    66,    38,
    90,    46,   160,    46,    50,   138,   136,    51,     0,    45,
    45,    43,    90,    46,   160,    46,    50,   138,   136,    51,
     0,    45,    45,    41,    90,    46,   160,    46,    50,   138,
   136,    51,     0,    45,    45,    66,    41,    90,    46,   160,
    46,    50,   138,   136,    51,     0,    45,   135,    46,     0,
    36,   138,   136,     0,    36,     1,     0,     0,    90,   160,
     0,    90,   137,     0,    90,   134,     0,    45,   137,    46,
    50,   138,   136,    51,     0,    90,    45,   153,    90,    46,
   138,     0,    90,    45,   138,    46,     0,    45,   137,    46,
     0,   141,     0,   141,   151,   138,     0,   141,    76,   138,
     0,   141,    94,   138,     0,    97,   138,     0,     7,   138,
    35,   138,   140,     0,   141,     0,     8,   138,     0,     0,
   142,     0,   141,   143,   142,     0,   162,     0,   163,     0,
   164,     0,   161,     0,   160,     0,   134,     0,   137,     0,
   120,     0,   148,     0,   149,     0,   183,     0,   135,     0,
    89,   142,     0,    93,   142,     0,    14,     0,    22,     0,
    23,     0,    45,   138,    46,     0,    88,     0,    89,     0,
    90,     0,    91,     0,    92,     0,    86,     0,    87,     0,
    75,     0,    56,     0,    74,     0,   144,    74,   144,     0,
   145,     0,   146,     0,    45,   144,    46,     0,    50,   138,
   147,    51,     0,    50,   161,   147,    51,     0,    50,   144,
   147,    51,     0,    48,   138,   147,    49,     0,    48,   144,
   147,    49,     0,    36,   138,   147,     0,    36,   161,   147,
     0,    36,   144,   147,     0,     0,    36,     1,     0,    75,
   160,     0,    75,   134,     0,    75,   183,     0,    75,   148,
     0,    45,   148,    46,     0,    45,    38,    46,   139,     0,
    45,    43,    46,   139,     0,    45,    41,    46,   139,     0,
    45,    67,    38,    46,   139,     0,    45,    67,    41,    46,
   139,     0,    45,    66,    38,    46,   139,     0,    45,    66,
    41,    46,   139,     0,    45,    38,    90,    46,   150,     0,
    45,    66,    38,    90,    46,   150,     0,    45,    43,    90,
    46,   150,     0,    45,    41,    90,    46,   150,     0,    45,
    66,    41,    90,    46,   150,     0,    45,    42,    90,    46,
   150,     0,    45,    38,    90,    90,    46,   150,     0,    45,
    66,    38,    90,    90,    46,   150,     0,    45,    43,    90,
    90,    46,   150,     0,    45,    41,    90,    90,    46,   150,
     0,    45,    66,    41,    90,    90,    46,   150,     0,    45,
    42,    90,    90,    46,   150,     0,    45,    16,   109,    90,
    46,   150,     0,    45,   109,    90,    46,   150,     0,    45,
    16,   109,    90,    90,    46,   150,     0,    45,   109,    90,
    90,    46,   150,     0,   139,     0,    82,     0,    83,     0,
    80,     0,    84,     0,    85,     0,    81,     0,    66,    38,
     0,    66,    41,     0,   152,     0,   125,     0,   153,   160,
   155,     0,   153,   155,     0,   109,   160,   155,     0,   109,
    90,   160,   155,     0,   109,    90,    90,   160,   155,     0,
   109,   160,    15,   155,     0,   107,   160,   155,     0,   107,
    90,   160,   155,     0,   107,    90,    90,   160,   155,     0,
   107,   160,    15,   155,     0,   109,   155,     0,   109,    90,
   155,     0,   109,    90,    90,   155,     0,   107,   155,     0,
   107,    90,   155,     0,   107,    90,    90,   155,     0,   153,
   160,    15,   155,     0,   153,    90,   160,    15,   155,     0,
   153,   160,    15,    50,   138,    51,   155,     0,   153,    90,
   160,   155,     0,   153,    90,   155,     0,   153,    90,    90,
   160,   155,     0,    45,    90,   160,    46,    45,   154,    46,
   155,     0,     0,    36,   153,   160,   155,     0,    36,   153,
   155,     0,    36,   107,   160,   155,     0,    36,   109,   160,
   155,     0,    36,   109,    90,   160,   155,     0,    36,   107,
   160,    15,   155,     0,    36,   109,   160,    15,   155,     0,
    36,   153,   160,    15,   155,     0,    36,   153,    90,   160,
    15,   155,     0,    36,    45,    90,   160,    46,    45,   154,
    46,   155,     0,     0,    36,   153,   160,    50,   138,    51,
   155,     0,    36,   153,   160,    50,   138,    36,   138,    51,
   155,     0,    36,   153,   160,    15,    50,   138,    51,   155,
     0,    36,   153,    90,   160,   155,     0,    36,   153,    90,
   155,     0,    36,     1,     0,   132,   157,     0,   153,     0,
   109,     0,     0,    75,     1,     0,    36,   132,   157,     0,
     0,    36,     1,     0,    48,   117,    49,     0,     1,    49,
     0,    45,   138,    46,     0,     1,    46,     0,   107,     0,
    45,   160,    46,     0,   108,     0,   110,     0,   112,     0,
   111,     0,    36,   160,   165,     0,     0,    36,     1,     0,
     0,    36,   117,   166,     0,     0,    97,   167,     0,   167,
    71,   167,     0,   167,    69,   167,     0,    45,   167,    46,
     0,    27,   159,   158,     0,    26,   138,    47,    28,   158,
     0,    26,    45,   171,    36,   172,    36,   173,    46,   158,
     0,   128,     0,   124,     0,     0,   138,     0,     0,   128,
     0,     0,     3,    45,   142,    46,    48,   175,    49,     0,
     4,   142,    37,    45,   117,    46,   176,     0,     6,    37,
    45,   117,    46,     0,     5,   175,     0,   175,     0,     0,
     7,   138,    35,   158,   178,     0,     8,   158,     0,     0,
    33,    45,   132,    46,     0,    33,    45,   132,   180,    46,
     0,     0,    36,   132,   180,     0,    99,    45,   160,    46,
     0,    99,    45,   160,   182,    46,     0,    99,    45,   134,
    46,     0,    99,    45,   134,   182,    46,     0,    99,    45,
   183,    46,     0,     0,    36,   160,   182,     0,    36,   134,
   182,     0,   160,    17,   160,   184,     0,   134,    17,   160,
   184,     0,   137,    17,   160,   184,     0,   160,    17,   134,
   184,     0,   134,    17,   134,   184,     0,   137,    17,   134,
   184,     0,   160,    77,   160,   184,     0,   134,    77,   160,
   184,     0,    45,   148,    46,    77,   160,   184,     0,   137,
    77,   160,   184,     0,   160,    77,   134,   184,     0,   134,
    77,   134,   184,     0,    45,   148,    46,    77,   134,   184,
     0,   160,    17,   120,     0,   160,    77,   120,     0,   137,
    77,   134,   184,     0,    45,   183,    46,     0,     0,    17,
   160,   184,     0,    17,   134,   184,     0,    77,   160,   184,
     0,    77,   134,   184,     0,    17,   120,     0,    77,   120,
     0
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
<<<<<<< HEAD
   146,   177,   178,   182,   183,   184,   185,   186,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   204,   205,   206,
   207,   208,   209,   213,   214,   219,   220,   224,   228,   233,
   235,   242,   348,   349,   351,   352,   353,   354,   355,   356,
   358,   359,   361,   362,   363,   364,   365,   366,   372,   373,
   374,   375,   376,   377,   379,   382,   388,   392,   398,   406,
   416,   418,   420,   434,   438,   442,   449,   450,   455,   460,
   465,   474,   482,   493,   507,   508,   509,   513,   517,   521,
   525,   529,   533,   540,   542,   544,   549,   561,   562,   563,
   566,   567,   568,   575,   579,   583,   588,   594,   599,   606,
   612,   623,   625,   626,   630,   637,   641,   642,   650,   654,
   655,   656,   657,   658,   659,   660,   663,   665,   667,   669,
   671,   673,   675,   677,   679,   681,   683,   685,   687,   692,
   693,   696,   697,   698,   701,   702,   703,   706,   710,   715,
   717,   719,   721,   723,   725,   729,   731,   732,   738,   739,
   740,   742,   744,   746,   748,   754,   755,   757,   758,   764,
   765,   769,   770,   774,   775,   779,   780,   781,   782,   783,
   785,   786,   787,   788,   789,   790,   791,   792,   793,   796,
   797,   798,   799,   800,   801,   802,   803,   805,   807,   811,
   812,   813,   814,   820,   824,   832,   844,   848,   857,   869,
   873,   881,   885,   886,   889,   894,   898,   903,   907,   914,
   917,   918,   921,   922,   925,   926,   929,   930,   931,   932,
   933,   934,   937,   938,   939,   940,   941,   942,   944,   945,
   947,   948,   950,   958,   959,   960,   961,   962,   968,   970,
   971,   974,   975,   976,   979,   980,   983,   984,   987,   988,
   991,   992,   997,   998,   999,  1000,  1001,  1002,  1009,  1011,
  1014,  1016,  1022,  1026,  1031,  1037,  1043,  1049,  1059,  1065,
  1071,  1077,  1085,  1089,  1093,  1099,  1103,  1107,  1113,  1119,
  1126,  1132,  1138,  1142,  1150,  1156,  1159,  1163,  1167,  1173,
  1179,  1185,  1192,  1200,  1206,  1221,  1228,  1231,  1239,  1247,
  1253,  1259,  1263,  1272,  1283,  1287,  1288,  1292,  1306,  1307,
  1315,  1317,  1324,  1326,  1332,  1333,  1337,  1342,  1347,  1352,
  1358,  1362,  1363,  1369,  1370,  1381,  1392,  1393,  1395,  1397,
  1403,  1409,  1417,  1425,  1429,  1433,  1439,  1443,  1449,  1453,
  1460,  1464,  1468,  1475,  1479,  1483,  1487,  1497,  1498,  1504,
  1505,  1509,  1510,  1515,  1516,  1517,  1518,  1519,  1522,  1523,
  1524,  1530,  1531,  1532,  1534,  1535,  1536,  1538,  1539,  1540,
  1541,  1543,  1544,  1545,  1546,  1547,  1548,  1549,  1553,  1554,
  1555,  1556,  1557,  1558,  1559
=======
   148,   179,   180,   184,   185,   186,   187,   188,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   206,   207,   208,
   209,   210,   211,   215,   216,   221,   222,   226,   230,   235,
   237,   244,   353,   354,   356,   357,   358,   359,   360,   361,
   363,   364,   366,   367,   368,   369,   370,   371,   377,   378,
   379,   380,   381,   382,   384,   387,   393,   397,   403,   411,
   421,   423,   425,   439,   443,   447,   454,   455,   460,   465,
   470,   479,   487,   498,   512,   513,   514,   518,   522,   526,
   530,   534,   538,   545,   547,   549,   554,   566,   567,   568,
   571,   572,   573,   580,   584,   588,   593,   599,   604,   611,
   617,   628,   630,   631,   635,   642,   646,   647,   655,   659,
   660,   661,   662,   663,   664,   665,   668,   670,   672,   674,
   676,   678,   680,   682,   684,   686,   688,   690,   692,   697,
   698,   701,   702,   703,   704,   705,   708,   712,   713,   717,
   722,   727,   732,   737,   742,   748,   750,   751,   757,   758,
   759,   761,   763,   765,   767,   773,   774,   775,   776,   777,
   778,   782,   786,   787,   791,   792,   796,   797,   798,   799,
   800,   801,   802,   803,   804,   805,   806,   807,   808,   809,
   810,   811,   812,   813,   816,   817,   818,   819,   820,   821,
   822,   823,   824,   825,   830,   831,   832,   833,   839,   843,
   851,   863,   876,   888,   892,   900,   904,   905,   908,   913,
   917,   922,   926,   933,   936,   937,   940,   941,   944,   945,
   948,   949,   950,   951,   952,   953,   956,   957,   958,   959,
   960,   961,   963,   964,   966,   967,   969,   980,   981,   982,
   983,   984,   985,   992,   994,   997,   999,  1005,  1009,  1014,
  1020,  1026,  1032,  1042,  1048,  1054,  1060,  1068,  1072,  1076,
  1082,  1086,  1090,  1096,  1102,  1109,  1115,  1121,  1125,  1133,
  1139,  1142,  1146,  1150,  1156,  1162,  1168,  1175,  1183,  1189,
  1204,  1210,  1213,  1221,  1229,  1235,  1241,  1245,  1254,  1265,
  1269,  1273,  1274,  1278,  1292,  1293,  1301,  1303,  1310,  1312,
  1318,  1319,  1323,  1328,  1333,  1338,  1344,  1348,  1349,  1355,
  1356,  1367,  1377,  1378,  1380,  1382,  1388,  1394,  1402,  1410,
  1414,  1418,  1424,  1428,  1434,  1438,  1445,  1449,  1453,  1460,
  1464,  1468,  1472,  1482,  1483,  1489,  1490,  1494,  1495,  1500,
  1501,  1502,  1503,  1504,  1507,  1508,  1509,  1515,  1516,  1517,
  1519,  1520,  1521,  1523,  1524,  1525,  1526,  1528,  1529,  1530,
  1531,  1532,  1533,  1534,  1538,  1539,  1540,  1541,  1542,  1543,
  1544
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND",
"POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE","DEFINE",
"MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT",
"UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","OR","PARALLEL","AND","ASS_P","ASS_N","CON","ADDRESS","BOOL_AND",
"IMPLY","IFF","PROPIMPLY","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB",
"MUL","DIV","MOD","BNE","BOOL_OR","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST",
"FINAL","KEEP","ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL",
"STRUCT_TYPE","INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition",
"complexProposition","poptional_projection","statement","option_struct_declaration",
"empty_statement","function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","array_cast_exp","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp",
"option_exp_else_statement","simple_ari_exp","member_in_exp","arith_operator",
"array_exp","option_list_value","option_struct_list_value","inner_option_list_value",
"address_exp","type_cast","casted_element","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   113,   114,   114,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   116,   116,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   118,   118,   119,   119,   120,   120,
   120,   121,   122,   122,   123,   123,   123,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   125,   125,   125,
   125,   125,   125,   126,   126,   126,   126,   126,   126,   126,
   126,   127,   127,   127,    -1,    -1,    -1,    -1,   128,   129,
   129,   129,   129,   129,   129,   129,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   131,
   131,   132,   132,   132,   132,   132,   133,   134,   134,   135,
   135,   135,   135,   135,   135,   136,   136,   136,   137,   137,
   137,   137,   137,   137,   137,   138,   138,   138,   138,   138,
   138,   139,   140,   140,   141,   141,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   144,   144,   144,   144,   145,   145,
   145,   146,   146,   147,   147,   147,   147,   147,   148,   148,
   148,   148,   148,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   150,   151,   151,   151,
   151,   151,   151,   152,   152,   153,   153,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   156,   156,
   156,   156,   156,   157,   157,   157,   158,   158,   159,   159,
   160,   160,   161,   162,   163,   164,   165,   165,   165,   166,
   166,   167,   167,   167,   167,   167,   168,   169,   170,   171,
   171,   171,   172,   172,   173,   173,   174,   175,   175,   176,
   176,   176,   177,   178,   178,   179,   179,   180,   180,   181,
   181,   181,   181,   181,   182,   182,   182,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   184,   184,   184,   184,   184,   184,
   184
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     8,     9,
     1,     1,     7,     3,     1,     3,     1,     0,     4,     5,
     4,     4,     2,     2,     2,     2,     1,     2,     2,     3,
     3,     3,     3,     7,     8,    11,    13,     1,     1,     1,
     1,     1,     1,     2,     6,     4,     5,     5,     8,     8,
     2,     2,     2,     0,     6,     7,     0,     2,     3,     1,
     1,     1,     1,     3,     2,     1,    11,    12,    11,    11,
    17,    18,    17,    18,    19,    18,    17,    18,    17,     1,
     1,     1,     1,    10,     3,     1,     4,     5,     3,    11,
    12,    11,    11,    12,     3,     3,     2,     0,     2,     2,
     2,     7,     6,     4,     3,     1,     3,     3,     3,     2,
     5,     1,     2,     0,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
     1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     3,     1,     1,     3,     4,     4,
     4,     4,     4,     3,     3,     3,     0,     2,     2,     2,
     2,     2,     3,     4,     4,     4,     5,     5,     5,     5,
     5,     6,     5,     5,     6,     5,     6,     7,     6,     6,
     7,     6,     6,     5,     7,     6,     1,     1,     1,     1,
     1,     1,     1,     2,     2,     1,     1,     3,     2,     3,
     4,     5,     4,     3,     4,     5,     4,     2,     3,     4,
     2,     3,     4,     4,     5,     7,     4,     3,     5,     8,
     0,     4,     3,     4,     4,     5,     5,     5,     5,     6,
     9,     0,     7,     9,     8,     5,     4,     2,     2,     1,
     1,     0,     2,     3,     0,     2,     3,     2,     3,     2,
     1,     3,     1,     1,     1,     1,     3,     0,     2,     0,
     3,     0,     2,     3,     3,     3,     3,     5,     9,     1,
     1,     0,     1,     0,     1,     0,     7,     7,     5,     2,
     1,     0,     5,     2,     0,     4,     5,     0,     3,     4,
     5,     4,     5,     4,     0,     3,     3,     4,     4,     4,
     4,     4,     4,     4,     4,     6,     4,     4,     4,     6,
     3,     3,     4,     3,     0,     3,     3,     3,     3,     2,
     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,    93,    47,     0,
     0,     0,     0,     0,    51,    52,     0,     0,    45,    88,
    91,    90,    92,    89,   312,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   301,     0,     1,
    62,    61,     0,    34,    77,     0,    33,     0,   116,   112,
   113,   110,    37,    38,    39,    35,    36,    50,    49,   111,
     0,     0,    29,    13,    22,     0,   181,   182,   183,     0,
     0,     0,     0,     0,   303,   304,   306,   305,   174,   172,
   178,   173,    17,   156,   165,   175,   176,   171,   170,   167,
   168,   169,   177,    21,    10,     9,    20,    12,    11,     2,
     0,     0,     0,     0,     0,    26,     0,     0,     0,    73,
     0,    74,     0,     0,     0,   301,   282,     0,   322,     0,
     0,     0,     0,     0,     0,   312,     0,   312,     0,     0,
   112,   113,     0,   110,     0,   111,     0,     0,     0,     0,
     0,     0,    76,    75,     0,   301,   151,   150,   149,     0,
     0,   115,   112,     0,     0,     0,     0,     0,   292,     0,
     0,   301,    79,   104,     0,     0,     0,     0,     0,    78,
   130,   131,     0,     0,   292,     0,     0,     0,     0,     0,
     0,    27,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   172,   178,   173,     0,   175,   171,
   177,     0,   210,     0,   212,   209,   211,   179,   180,   160,
   193,   194,   192,     0,   240,   243,   238,   239,   241,   242,
   190,   191,   185,   186,   187,   188,   189,     0,     0,     0,
     8,     5,     4,     6,     7,     0,     0,     0,    80,    82,
    81,    83,   271,     0,     0,     0,   308,     0,    88,    90,
    92,    89,     0,     0,   321,   320,   172,   173,   171,     0,
   177,     0,   300,     0,     0,     0,   317,     0,     0,     0,
     0,     0,     0,   136,   132,   133,   196,   197,    88,    90,
    89,     0,     0,     0,     0,   301,   149,   312,   313,    64,
   114,   139,   155,     0,   302,     0,   312,   312,   364,     0,
     0,     0,   271,   292,     0,     0,     0,     0,   247,     0,
   246,     0,   312,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   291,   295,   290,     0,   148,   101,
     0,     0,     0,     0,    94,    32,    31,    54,    30,     0,
    65,   109,     0,   365,   365,     0,   365,   365,   365,   365,
   365,   365,   361,   365,   365,   362,   365,   365,    25,    29,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   145,
   184,   213,     0,     0,     0,     0,   158,   159,   166,   157,
     0,   335,    43,     0,   282,   282,   282,     0,   288,     0,
     0,     0,   282,     0,     0,     0,     0,     0,     0,     0,
   324,     0,   299,   298,     0,     0,     0,     0,     0,     0,
   170,     0,   207,   207,   207,   207,   170,     0,     0,   336,
     0,     0,     0,     0,     0,    90,   316,   149,     0,     0,
     0,     0,     0,     0,   315,   314,   310,     0,     0,     0,
     0,     0,   301,     0,   244,   245,   154,     0,    40,     0,
     0,    48,     0,   342,     0,   340,     0,   344,    53,    41,
    42,   293,     0,   289,    69,     0,     0,     0,   148,   103,
   102,   104,    72,     0,     0,     0,     0,   352,   349,    71,
   359,   355,   353,   350,   363,   357,   351,   348,   358,   354,
    28,     0,   164,     0,   214,   162,     0,     0,   216,     0,
     0,     0,     0,   215,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   333,     0,   282,   261,   282,   282,   258,   282,   282,
   249,   282,     0,     0,   282,     0,   282,   282,   273,   282,
     0,   309,   308,     0,     0,     0,     0,     0,     0,     0,
   323,     0,   318,   297,     0,   135,   198,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   338,   337,
     0,   195,     0,     0,     0,     0,     0,   148,   271,   316,
   148,   365,   365,     0,   311,    58,     0,     0,    70,     0,
     0,     0,     0,     0,     0,     0,   345,   345,   343,   341,
   296,   295,   147,   148,   138,   104,   104,     0,    96,    66,
   370,   365,   365,   371,   365,   365,     0,     0,   161,     0,
     0,   237,   221,     0,   224,     0,   226,     0,   223,     0,
     0,     0,     0,     0,     0,   219,     0,     0,   220,     0,
     0,   217,   218,   234,     0,     0,     0,     0,   334,     0,
   282,   262,   282,   282,   254,   282,   259,   282,   282,   250,
     0,   268,   282,   282,   248,     0,     0,   282,   274,   282,
   282,   275,   287,   282,   282,     0,   272,     0,   307,     0,
     0,     0,     0,     0,     0,   326,     0,     0,   208,   207,
   207,   170,   202,   203,   199,   201,   200,     0,   137,   339,
     0,     0,     0,     0,     0,     0,   271,     0,     0,     0,
   360,   356,     0,    57,     0,   148,   153,     0,   347,   346,
   294,   146,    97,    98,   104,   367,   366,   369,   368,     0,
   163,   233,     0,   227,   230,   232,   229,   171,   171,   171,
     0,     0,   222,     0,   225,     0,   236,     0,     0,   327,
     0,   263,   282,   255,   257,   260,   282,   251,   253,   282,
   282,   267,     0,   264,    68,     0,   277,   276,   278,   282,
   286,     0,   279,     0,    63,     0,     0,     0,     0,     0,
   325,     0,     0,     0,   204,   206,   205,     0,     0,     0,
     0,     0,     0,     0,     0,   138,    84,   152,    55,     0,
     0,     0,    95,    23,   235,     0,     0,     0,   171,   171,
   228,   231,     0,     0,   271,   256,   252,   269,   265,     0,
    67,     0,   271,   280,     0,     0,   282,     0,     0,   304,
     0,   304,   304,     0,     0,    44,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    85,     0,
    59,     0,   104,   104,     0,     0,     0,     0,     0,     0,
     0,     0,   282,    60,     0,   282,     0,   283,    56,     0,
     0,     0,   304,   319,   271,     0,     0,     0,   148,     0,
     0,     0,   148,   148,     0,     0,     0,     0,   271,    99,
   100,   148,   148,   148,     0,     0,     0,   329,   282,   266,
   282,   285,   282,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   148,     0,     0,     0,     0,   148,   148,
   332,   270,   281,   284,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   119,     0,     0,
     0,   117,   120,     0,     0,     0,     0,    86,   140,   143,
   142,     0,     0,     0,   331,   328,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   134,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   118,     0,
   141,   144,   330,   304,   304,     0,   304,   304,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    87,   304,   304,   304,   304,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   304,   148,   148,
     0,   148,   148,     0,     0,     0,     0,     0,     0,   148,
     0,     0,   148,   148,   148,     0,   129,   127,     0,   123,
   121,     0,     0,     0,   148,   128,   122,   126,   124,     0,
   125,     0,     0,     0
};

static const short yydefgoto[] = {  1092,
     2,    21,   204,   149,   360,   852,    99,    62,    63,    64,
    65,    66,   350,   355,    67,    68,    69,   193,   346,   294,
   100,   101,   497,   102,   218,   652,   649,   104,   105,   249,
   296,   297,   298,   592,   106,   107,   653,   250,   331,   417,
   418,   266,   348,   494,   287,   143,   108,   109,   110,   111,
   112,   426,   322,   155,    73,    74,    75,   280,   582,   812,
    76,   678,   996,    77,   552,    78,   451,    79,   485,   113,
   508
};

static const short yypact[] = {    49,
  1684,  2146,-32768,-32768,   -40,-32768,-32768,-32768,  1684,  1684,
  1684,  1684,  1202,  1684,  1684,  1684,  1684,  1684,  1684,-32768,
   379,    53,  1202,-32768,    61,   166,   263,-32768,-32768,    64,
   -24,    92,  1803,    48,-32768,-32768,   147,   179,-32768,-32768,
-32768,-32768,-32768,-32768,  2332,  2146,   158,   176,    81,    81,
   -22,   153,   318,   370,   374,   380,   420,   837,   146,   997,
-32768,-32768,   423,-32768,-32768,   146,-32768,   438,-32768,   156,
    33,    34,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   220,   782,   856,   386,   386,  1202,-32768,-32768,-32768,  3082,
   306,   481,   481,  1202,-32768,-32768,-32768,-32768,-32768,   156,
-32768,    33,-32768,  1367,-32768,-32768,-32768,    34,-32768,-32768,
-32768,-32768,-32768,   386,   386,   386,   386,   386,   386,-32768,
  1684,  1684,  1684,  1684,  1684,-32768,   481,   513,  1202,   146,
   146,   146,   146,   541,   -24,-32768,   522,   -24,  2573,   616,
   633,  1202,    55,  2146,  3605,  2433,   209,    31,   945,   835,
   217,   325,   652,   521,   553,   717,   895,   733,   748,   608,
   727,   684,-32768,-32768,  3510,   762,-32768,-32768,-32768,  2534,
   330,-32768,   215,  1202,   353,  2146,  2146,  2146,  2653,  1202,
   146,   150,-32768,   253,  2146,  2146,  2146,  2146,   781,-32768,
-32768,-32768,  3605,    32,  2653,    32,    32,    32,    44,    44,
  1202,-32768,  1684,   792,   805,   795,    11,    12,   774,   128,
  3121,   296,   365,   804,   217,   825,   325,   857,   868,   521,
   717,   306,   215,    33,-32768,    34,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1202,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1202,   481,  1202,
   909,   911,   554,   820,   820,   876,    55,   887,-32768,-32768,
-32768,-32768,   448,   890,   346,   900,   906,   841,    11,    12,
   774,   128,  3004,   366,-32768,-32768,   637,   630,   719,   918,
   880,   919,-32768,   915,   913,  2146,-32768,  1116,  2731,  3655,
  3655,   447,    58,-32768,-32768,   881,-32768,-32768,   889,   896,
   920,   389,   868,   912,   -22,   953,   973,    31,-32768,-32768,
-32768,-32768,   970,   961,-32768,   964,    31,    31,-32768,  2146,
  1039,  1005,   448,  2653,   146,   146,   455,   401,-32768,  1010,
-32768,   967,  2433,   962,   303,  1014,   306,   268,   523,  1016,
   975,  1018,  1036,    46,-32768,  1034,-32768,  1025,  1041,-32768,
  1000,  1202,    85,  3605,-32768,   926,  1012,  1012,-32768,  1026,
  1020,-32768,    32,   309,   309,  1035,   309,   309,   309,   309,
   309,   309,-32768,   164,   309,-32768,   164,   309,-32768,   856,
  1074,  1202,  1002,   481,   132,   481,   160,   161,   481,   162,
   212,   278,   284,   729,   310,   314,  1044,  1050,   327,-32768,
-32768,   961,   530,   325,   521,   717,-32768,-32768,-32768,-32768,
  1051,  1090,-32768,  1023,    43,   140,   141,  1054,-32768,  1033,
   -24,   470,   184,  1060,    24,  1064,   520,  3043,  1078,   242,
  1202,    55,-32768,-32768,  1158,  1093,  2809,  1082,   857,   355,
  1089,  2887,  1100,   -10,  1100,   -10,  1100,  3549,  3605,-32768,
  1095,   581,  1096,  1101,  1103,  1061,   964,  1104,  1202,  1107,
  1009,  1202,    32,  1105,  1085,-32768,   797,    55,  1146,  1117,
  1118,   -24,  1112,   973,-32768,-32768,-32768,  1120,-32768,   605,
   530,-32768,    32,-32768,  1121,-32768,  1126,-32768,-32768,-32768,
-32768,-32768,   580,-32768,-32768,  1004,  1122,    30,  1041,-32768,
-32768,  1138,-32768,   781,  1130,    44,    44,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
<<<<<<< HEAD
-32768,  1023,  1417,  1299,  1066,  1066,    -9,   784,   883,  1417,
  1417,  2305,  1833,  1008,-32768,    43,    50,  1417,   159,  1302,
  1302,  1417,  1417,  1053,-32768,-32768,-32768,-32768,   956,   893,
   644,   917,   926,   714,   -22,    15,   672,   151,  1840,   430,
-32768,-32768,   935,   950,-32768,  1104,   943,  2934,-32768,  1228,
  3128,  1737,  1737,   451,   655,-32768,  1094,   901,-32768,-32768,
-32768,   958,  1002,   175,   221,   254,  1272,  1434,  1132,   130,
   946,   965,  3008,-32768,-32768,-32768,-32768,   973,   952,-32768,
   990,  1425,  1425,-32768,  2934,  1069,  1046,   956,  3248,   336,
   336,   462,   820,-32768,   676,-32768,  1019,  2715,  1082,   631,
   547,   632,   600,   793,   355,   912,   422,   288,   675,  1057,
  1096,  1152,  1159,    20,  1100,-32768,  1084,   200,-32768,  1062,
  1417,     5,  1712,-32768,   954,  1060,  1060,-32768,  1114,  1072,
-32768,    69,   181,   181,  1133,   181,   181,   181,   181,   181,
   181,-32768,   352,   181,-32768,   352,   181,-32768,   575,  1170,
  1417,  1108,  1023,   337,  1023,   443,   453,  1023,   455,   470,
   523,   589,  1221,   593,   610,  1165,  1176,   620,-32768,   952,
  1260,   604,   547,   731,   600,   793,  1408,-32768,  1094,  1161,
  1094,  1094,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1094,
  1215,  1168,-32768,  1094,  1094,-32768,  1157,   -18,   142,   273,
  1211,-32768,  1171,   -19,   486,   299,  1216,    13,  1222,   514,
  3416,  1230,   357,  1302,   159,-32768,-32768,  1472,  1249,  3211,
  1236,   473,   119,  1247,  3331,   218,   271,  1268,   218,   271,
  1268,  3926,  1712,-32768,  1266,  1196,   609,   651,   652,   653,
   703,   717,  1165,  1176,   990,  1285,  1417,  1281,  3091,  1162,
  1417,    37,  1295,  1276,-32768,  1013,   159,  1337,  1314,  1316,
   -19,  1317,   965,-32768,-32768,-32768,  1320,  1277,  1279,  1287,
  1596,-32768,   477,   604,-32768,    37,-32768,  1334,-32768,  1338,
-32768,-32768,-32768,-32768,-32768,   484,-32768,-32768,   476,  1343,
    24,   200,-32768,-32768,  1352,-32768,   762,   348,  1349,   -23,
   -23,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1351,    45,   737,-32768,  1640,
  1023,  1364,-32768,  1023,  1365,  1023,  1366,-32768,  1023,  1382,
   741,   748,   749,   703,   750,  1023,   751,  1023,   764,  1023,
  1023,  1023,  1387,  1339,  1340,  1342,  1232,  1012,   159,-32768,
  1332,   317,-32768,   177,   330,-32768,   202,   335,-32768,   209,
  1363,  1335,   522,   -19,   591,   -20,-32768,   938,  2934,-32768,
   926,  1369,   433,   175,   221,   254,  1251,   490,  1079,  1409,
-32768,-32768,  1410,-32768,-32768,  1411,  3368,   119,   792,  1405,
  1412,  1414,  1406,  1415,  1418,  3538,  1413,  1432,-32768,  1196,
-32768,  1102,  1934,  2083,   767,   771,  1420,   200,   956,-32768,
   200,   181,   181,  2934,-32768,-32768,   159,  1423,-32768,  1285,
  1417,  1417,  1436,  1437,  1439,  1383,  1385,  1277,  1279,  1287,
  1300,  1450,  1450,-32768,-32768,-32768,  1100,-32768,   200,-32768,
   390,  1352,  1438,-32768,-32768,-32768,   352,   181,-32768,   352,
   181,  1573,  1417,-32768,  1023,  1444,  1023,-32768,-32768,  1023,
-32768,  1023,-32768,  1023,-32768,  1023,  2191,  2238,  2296,   776,
-32768,  1023,  1448,-32768,  1023,  1451,-32768,-32768,-32768,  1023,
  1460,  1462,  1464,  1383,  1419,  1023,  1485,  1478,-32768,  1483,
   -20,-32768,   594,   594,-32768,   -20,-32768,   594,   594,-32768,
   -19,-32768,   736,   263,-32768,  1486,  1489,   594,-32768,   594,
   594,-32768,-32768,   941,   359,  1417,-32768,  1481,-32768,  1493,
   508,   717,   261,  1302,  1280,-32768,   218,   271,  1268,-32768,
-32768,-32768,-32768,-32768,-32768,  3586,-32768,-32768,  3623,  1121,
  1498,  3671,  1179,  1502,  1210,  1503,  2342,  2384,   956,  1491,
  1507,  1514,-32768,-32768,  1530,-32768,  2934,   200,  1094,   -30,
    11,   709,  1512,  1516,  1385,-32768,-32768,-32768,-32768,-32768,
-32768,   503,-32768,-32768,-32768,-32768,   712,  1094,-32768,  1023,
  1408,-32768,-32768,-32768,-32768,  3932,-32768,  1023,-32768,  1023,
-32768,  1455,  1457,  1458,  1531,  1543,  1538,-32768,  1539,-32768,
   594,-32768,-32768,-32768,   594,-32768,-32768,   594,   594,-32768,
  1417,-32768,  2934,  1541,-32768,-32768,-32768,   594,-32768,  1417,
-32768,   666,-32768,  2934,-32768,  1542,  1169,  1544,-32768,-32768,
-32768,  3708,  1537,  1547,  3756,  1548,  1553,  1561,  1566,  1307,
  3793,  1313,  1545,  1546,  1571,-32768,-32768,-32768,  1496,  1568,
  1577,  1578,  1498,  1582,  1583,  1502,  1585,  1503,  1517,    57,
    24,-32768,-32768,-32768,-32768,-32768,  1521,  1588,  2934,   956,
-32768,-32768,-32768,-32768,   367,   -12,  1540,   956,-32768,   691,
  1417,   594,  1290,   159,-32768,  1595,   782,   801,  1305,  1417,
  1417,   804,   810,  1368,  1417,  1417,  1417,  1417,  1592,  3841,
  1594,  1597,-32768,  1600,-32768,  1571,   885,  1081,  1602,  1604,
  1605,  1545,   390,  1352,  2934,  1341,  1608,   594,-32768,  1609,
   594,   828,-32768,-32768,-32768,   956,   814,   818,   819,   200,
   200,   822,   846,   847,   200,   200,   200,   200,  1417,   848,
   854,  1384,  1417,  1417,   956,  1528,  1562,  1618,  1565,  1567,
  1622,  1163,-32768,-32768,  1362,-32768,   594,-32768,   594,-32768,
   594,  1620,  3960,  3967,   855,  1613,  1616,  4008,  4014,   856,
  1621,  1625,  1631,  1634,   200,   865,   866,   869,   200,   200,
  1623,  1643,  1644,  1603,  1651,  1653,  1606,  1611,  1612,  1659,
   507,-32768,-32768,-32768,    78,  1662,  1664,  4042,-32768,-32768,
  1665,  1679,  4049,-32768,-32768,-32768,-32768,  1676,  4090,  4096,
   870,  1678,  1688,  1660,  1629,  1632,  1699,  1633,  1636,  1702,
  1708,  1709,  1661,  1012,-32768,-32768,   158,   269,-32768,  1713,
  1717,  1719,  1720,  1722,  1723,  1725,-32768,  1726,  1728,  4124,
-32768,-32768,  1196,  1662,  1664,  1645,  1665,  1679,  1666,  1667,
  1674,  1729,-32768,   370,   682,  1739,  1740,  1730,  1741,  1742,
  1732,  1733,  1748,  1749,   901,  1720,  1725,  1726,  1728,  1683,
  1417,  1417,  1751,  1417,  1417,  1752,  1763,  1764,  1753,  1749,
   200,   200,  1417,   200,   200,  1417,  1417,  1417,  1765,  1766,
  1767,   200,  1768,  1769,   200,   200,   200,  1417,-32768,-32768,
  1771,-32768,-32768,  1774,  1779,  1782,   200,-32768,-32768,-32768,
-32768,  1786,-32768,  1816,  1839,-32768
=======
-32768,  1140,  1170,   333,-32768,   885,   481,  1147,-32768,   481,
  1153,   481,  1154,-32768,   481,  1155,   392,   394,   395,   398,
   430,   481,   453,   481,   526,   481,   481,   481,  1156,  1003,
    55,-32768,   -24,   210,-32768,   300,   248,-32768,   436,   250,
-32768,   537,  1131,   -24,   548,   -24,   623,    18,-32768,   624,
  2146,-32768,   906,  1133,   476,   529,   572,   588,   845,   478,
-32768,  1176,-32768,-32768,  1161,-32768,-32768,  1174,  2965,   355,
  1853,  1169,  1181,  1183,  1184,  1194,  3160,  1177,  1212,-32768,
   581,-32768,     7,     8,  1136,  1203,  1208,  1041,   448,-32768,
  1041,   309,   309,  2146,-32768,-32768,    55,  1207,-32768,  1104,
  1202,  1202,   889,   896,   920,  1213,  1223,  1223,-32768,-32768,
-32768,  1034,-32768,  1041,-32768,    -9,  1138,  1209,-32768,-32768,
-32768,   164,   309,-32768,   164,   309,  1684,  1202,-32768,   481,
  1216,-32768,-32768,   481,-32768,   481,-32768,   481,-32768,   481,
   481,   481,   481,   591,   595,-32768,   481,  1217,-32768,   481,
  1220,-32768,-32768,-32768,   481,   481,  1233,  1224,-32768,  1228,
    18,-32768,   522,   522,-32768,    18,-32768,   522,   522,-32768,
   -24,-32768,   740,   714,-32768,  1236,  1230,   522,-32768,   522,
   522,-32768,-32768,   791,   794,  1202,-32768,  1168,-32768,  1244,
   489,   596,   606,   607,   615,   330,  1202,  1172,-32768,  1100,
   -10,  1100,-32768,-32768,-32768,-32768,-32768,  3199,-32768,-32768,
  1245,  1247,  1249,  1252,  1254,    25,   448,  1250,  1256,  1253,
-32768,-32768,  1210,-32768,  2146,  1041,-32768,  1061,-32768,-32768,
-32768,-32768,-32768,-32768,   295,-32768,-32768,-32768,-32768,   861,
-32768,-32768,   481,-32768,-32768,-32768,-32768,   534,   544,   672,
   481,   481,-32768,   481,-32768,   481,-32768,  1268,  1261,-32768,
  1262,-32768,   522,-32768,-32768,-32768,   522,-32768,-32768,   522,
   522,-32768,  1202,-32768,  2146,  1263,-32768,-32768,-32768,   522,
-32768,  1202,-32768,   443,-32768,  2146,   697,  1175,  1325,   626,
-32768,  1265,  1269,  1271,-32768,-32768,-32768,   498,  1272,   814,
  1273,  1274,  1276,  1279,  1280,  1284,-32768,-32768,-32768,  1173,
  1282,    30,-32768,-32768,-32768,  1285,  1286,  1287,   683,   689,
-32768,-32768,  1289,  2146,   448,-32768,-32768,-32768,-32768,  1290,
   997,  1270,   448,-32768,  1291,  1202,   522,  1049,  3238,  1247,
  3277,  1252,  1254,  1971,    55,-32768,  1293,  1259,  1264,  1299,
  1202,  1266,  1275,  1302,  1202,  1202,   855,  1294,-32768,  1306,
-32768,  1284,    -9,  1138,  1202,  1202,  1202,  1305,  1308,  2146,
  1063,  1320,   522,-32768,  1321,   522,  1317,-32768,-32768,  3316,
  3355,  3394,  1279,-32768,   448,  1323,  1329,  1288,  1041,  1334,
  1339,  1296,  1041,  1041,  1297,  1298,  1348,  1202,   448,-32768,
-32768,  1041,  1041,  1041,  1202,  1202,  1075,-32768,   522,-32768,
   522,-32768,   522,   653,   667,   860,   691,   692,   905,  3433,
  1349,  1292,  1295,  1350,  1346,  1303,  1309,  1352,  1355,  1356,
  1353,  1357,  1311,  1041,  1362,  1361,  1365,  1370,  1041,  1041,
  1019,-32768,-32768,-32768,   693,   694,   698,   705,   723,   739,
   752,   755,   929,   152,  1376,  1378,  1319,-32768,  1381,  1384,
  1324,-32768,-32768,  1328,  1330,  1393,  1394,  1372,-32768,-32768,
-32768,  1409,  1411,  1003,-32768,-32768,  2186,  2380,   756,  3471,
  3621,   764,   769,   779,   785,    50,   837,-32768,  1419,  1421,
  1422,  1425,  1426,  1427,  1428,  1429,  1431,  1368,-32768,   581,
-32768,-32768,-32768,  1376,  1378,  3661,  1381,  1384,  3733,  3760,
  3767,   789,   762,  1415,  1430,  1435,  1432,  1433,  1438,  1439,
  1440,  1441,   881,  1425,  1428,  1429,  1431,  3773,  1202,  1202,
  1443,  1202,  1202,  1444,  1446,  1447,  1442,  1441,  1041,  1041,
  1202,  1041,  1041,  1202,  1202,  1202,  1449,  1450,  1451,  1041,
  1452,  1453,  1041,  1041,  1041,  1202,-32768,-32768,  1454,-32768,
-32768,  1455,  1456,  1457,  1041,-32768,-32768,-32768,-32768,  1465,
-32768,  1491,  1500,-32768
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
};

static const short yypgoto[] = {-32768,
-32768,    20,  1137,    94,  1015,-32768,    26,-32768,-32768,  -175,
   -34,     4,   -18,  -489,  -134,   -12,  1070,-32768,  -127,-32768,
   983,   -84,   450,  1206,   -13,  -302,-32768,  1195,   -81,-32768,
  -288,-32768,-32768,  -402,    17,-32768,   999,-32768,-32768,  -105,
  -304,  1416,  -178,   898,  -253,-32768,   331,  -282,-32768,-32768,
-32768,   948,  1055,  -124,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -902,-32768,-32768,-32768,-32768,   928,-32768,  -331,  1424,
   356
};


<<<<<<< HEAD
#define	YYLAST		4240


static const short yytable[] = {    98,
   233,   234,   299,   509,   694,   543,   292,   385,   344,   473,
   477,   480,   380,   620,   901,   281,   530,   281,    60,   143,
   535,   382,   344,   403,   138,   138,   138,   169,   170,   176,
   129,   259,   372,   114,    82,    83,    84,    85,   344,   108,
   109,   110,   111,   112,   113,   347,   319,    48,   324,   138,
     1,   305,   703,  1075,   203,   904,   434,   138,    81,   366,
   405,   191,   163,   437,   227,   192,   193,   194,   650,   205,
   119,   302,   404,   303,   223,   366,   602,   373,   121,    51,
   902,   382,    70,   903,   177,   144,  1103,    58,   159,   120,
   139,   139,   139,   211,   115,   172,   116,   117,   118,   187,
   119,   960,   381,    89,   641,   642,   643,   644,   645,   406,
   155,   263,   204,   548,    51,   188,   344,   178,   344,   120,
   291,   905,  1077,   139,   906,   156,    70,   206,   223,   145,
   172,   173,   179,   265,   307,   127,   263,   235,   236,   274,
   254,   255,   256,   257,   258,   510,    61,   172,    48,   370,
   820,   821,   296,   200,   127,   456,   312,   345,    94,   297,
   132,   127,   428,   300,   635,    94,   356,   961,   221,   228,
   962,   307,   368,   137,   171,   344,   344,   281,   473,   172,
   200,   201,   327,   638,   371,   307,   138,   307,  1078,   154,
    61,   744,   349,   159,   651,   159,   408,   550,   361,   362,
   363,   486,  1104,   223,   471,   221,   298,   375,   376,   377,
   378,   202,   281,   366,   141,   155,   749,  -112,  -112,   500,
   403,   147,   156,   754,    51,   693,   189,    70,   504,   505,
   156,   173,   200,   196,   399,   539,   605,   281,   202,   429,
   172,   155,   178,   148,   281,   409,   431,   432,   263,   691,
   398,   221,   139,   639,   440,   551,   350,   179,   444,   445,
   201,   358,    70,    70,    70,   569,   405,   573,  1105,   488,
   578,    70,    70,    70,    70,   223,   545,   442,   443,   311,
   383,   912,   386,   388,   390,   393,   396,   472,   476,   479,
   202,    61,   235,   236,   154,   169,   170,   221,   281,   408,
   275,   276,   277,   278,   200,   355,   639,   422,   281,   263,
   235,   236,   861,   185,   468,   489,   311,   138,   186,   344,
    61,   631,   164,   526,   801,   307,    61,    61,    61,   133,
   311,   134,   311,   527,   281,    61,    61,    61,    61,   816,
   817,   800,   221,   138,   802,   638,   165,   778,   490,   392,
   395,   506,   281,   486,   462,    51,   347,   542,   638,   307,
   177,   138,   202,   666,   380,   281,   159,   608,   550,   156,
   281,   172,   819,   471,   138,   159,   159,   180,    70,   138,
   138,   221,   571,   139,   173,   594,   648,   567,   595,   181,
   596,   159,   548,   616,   281,   500,   201,   435,   438,   523,
   173,   138,   592,   221,   879,   880,   881,   594,   870,   139,
   595,   741,   596,   155,  1104,    70,   182,   968,   414,   597,
   462,   415,  1003,  1004,   746,   372,   551,   139,   156,   751,
   187,   572,   474,   478,   481,   524,   227,   422,    89,   687,
   139,   597,    61,   171,   228,   139,   188,   223,   721,    51,
   724,   628,   727,   728,   177,   739,   472,   189,   172,   235,
   236,   223,   549,   357,   894,   172,   421,   188,   345,   307,
   311,   629,   486,   567,   138,    89,   688,   138,   705,    61,
  1105,   183,    86,   658,   686,   263,    51,   661,   574,    87,
    86,   900,   154,   320,   184,   482,   344,    87,   576,   169,
   579,   422,   172,   195,   311,    89,   138,   275,   277,   321,
   736,  1074,   737,    51,   678,   403,    51,   679,   419,   680,
    88,   523,   307,   806,   463,   689,   462,   771,   301,   172,
   138,   302,   172,   303,   138,   730,   758,   575,   372,   544,
   188,   156,   159,   188,-32768,    51,    48,   577,   681,   580,
   221,   207,   138,   830,    48,   221,   511,   281,   138,    89,
    89,   172,   221,   203,   581,   235,   236,    89,   405,    90,
    51,    51,   512,    91,   279,   203,   177,    90,   304,   221,
   614,    91,   662,   911,   187,   967,    58,   172,   462,    92,
    93,    94,   328,   970,    58,   127,   139,    92,    93,    94,
   188,   474,   187,   524,   328,   761,   682,   326,   623,   297,
   209,   135,   878,   136,   311,    86,   205,   582,   188,   963,
   200,   204,    87,   223,   188,   777,   281,   276,   549,   281,
   697,   700,   223,   204,   408,   768,   344,   875,   586,  -113,
  -113,  1012,   197,   198,   452,   330,   846,   200,   115,   327,
   116,   117,   118,    88,   119,   588,   298,   808,   809,   340,
  1031,   134,    28,  1016,  1017,   592,   295,   311,  1021,  1022,
  1023,  1024,   692,   120,   206,   201,   327,   329,   202,    48,
   805,    40,    41,   583,    42,    43,    44,   587,   453,   828,
   483,   205,    89,   334,   696,   699,   652,   653,   654,    70,
   484,   931,    90,    51,   589,   202,    91,   338,  1058,   205,
   526,   339,  1062,  1063,   593,   343,   932,   221,   342,    58,
   529,   516,    92,    93,    94,   400,   221,   827,  -111,  -111,
   553,   186,   555,   556,   557,   558,   559,   560,   330,   561,
   562,   971,   563,   564,    70,   572,   575,   580,   586,   206,
   859,   341,   872,   136,   454,   402,   455,   344,   235,   236,
   913,   416,   588,    61,   417,   344,   407,   206,   235,   236,
   779,   281,   223,  -110,  -110,   223,   420,   166,   223,   167,
    28,   877,   705,   235,   236,   115,   717,   116,   117,   118,
   975,   119,   776,   718,   719,   588,   722,   655,    86,    40,
    41,  1115,    42,    43,    44,    87,   168,   418,    61,   725,
   120,   656,   797,   344,  1140,  1141,   798,  1143,  1144,   907,
   208,   836,   908,   899,   340,  1151,   460,   403,  1154,  1155,
  1156,   706,   344,    49,    50,   572,   475,   294,   334,   302,
  1162,   303,   575,   580,   720,   723,   405,   925,   115,   403,
   116,   117,   118,   179,   119,   405,   930,   514,   726,  1013,
   515,   723,    48,  1014,   588,   726,   221,  1018,   223,   221,
   726,   223,   221,   120,    59,    89,   977,   223,  1011,   926,
    72,    86,   120,   235,   236,    90,    51,    70,   122,    91,
   933,  1019,   588,   403,   200,   978,   123,   124,   982,   405,
  1048,  1053,    58,   127,   983,    92,    93,    94,   572,   140,
  1059,  1060,   575,  1015,   588,  1090,   572,   972,   205,    88,
   235,   236,   996,   160,    72,   997,   980,   981,   430,   175,
    72,   985,   986,   987,   988,   966,   223,   190,   330,   269,
   575,  1020,  1026,    70,   190,    48,   260,   261,  1027,   726,
   726,    61,   765,   457,    70,   868,   998,   525,    89,   572,
   575,   458,   221,  1061,   726,   221,   225,   231,    90,    51,
   464,   221,    91,   281,    28,  1025,   281,   465,   401,  1029,
  1030,  1005,   270,   486,   271,    58,   127,   766,    92,    93,
    94,   467,   487,    40,    41,   497,    42,    43,    44,    70,
   447,   197,   198,   225,   235,   236,   325,    61,   803,   804,
   498,   190,   190,   190,   190,   736,   280,   737,    61,   283,
   160,   270,   501,   271,   -62,    72,   502,   343,   160,   322,
   221,   192,   193,   194,   191,   270,    87,   271,   192,   193,
   194,   331,   964,   823,   824,    70,   825,   826,   335,   225,
   272,   273,   -62,   433,   353,    72,   -62,   -62,   -62,   359,
    72,    72,    72,    61,   503,   190,   448,    88,   449,    72,
    72,    72,    72,   332,   166,   333,   167,    28,   384,   507,
   387,   389,   391,   394,   397,   270,   191,   271,   436,   439,
   192,   193,   194,    48,   508,   225,    40,    41,   446,    42,
    43,    44,   531,   168,    71,   425,    89,  1131,  1132,    61,
  1134,  1135,   133,   517,   460,    87,    90,    51,   999,  1142,
    91,  1000,  1145,  1146,  1147,  1080,   711,   522,   713,   538,
   270,   715,   271,    58,  1157,   536,    92,    93,    94,   194,
   225,   532,   541,   118,   729,   119,   789,   157,    71,   466,
   335,   547,  1001,   174,    71,   191,   270,   549,   271,   192,
   193,   194,   546,   336,   120,   185,   883,   160,   190,   191,
   186,    59,    48,   192,   193,   194,    72,   495,   554,   225,
   566,   270,   175,   271,   549,    89,   235,   236,   191,  1079,
   222,   229,   192,   193,   194,    90,    51,   533,   496,    91,
  1038,   225,   568,  1039,   534,   711,   715,   660,   598,   332,
   590,   333,   790,    72,   935,   791,    93,    94,   190,   190,
   513,   591,   599,   185,   886,   191,   160,   222,   186,   192,
   193,   194,   191,   353,  1040,   425,   192,   193,   194,   332,
   650,   333,   231,   302,   157,   303,   270,   271,   271,    71,
   190,   601,   157,   174,   185,   888,   611,   829,   584,   186,
   280,   585,   832,   619,   833,   612,   834,   622,   835,   734,
   711,   715,   735,   222,   837,   326,   469,   839,   351,    71,
   633,   634,   841,   229,    71,    71,    71,   166,   584,   167,
    28,   772,   636,    71,    71,    71,    71,   594,    28,   425,
   595,   191,   596,   639,   421,   192,   193,   194,    86,   491,
    41,   649,   492,    43,    44,   122,   168,    40,    41,   222,
    42,    43,    44,   123,   124,   659,   604,   607,   610,   423,
   657,   597,   613,   615,   618,   974,   621,   734,   190,   160,
   815,   190,   584,    89,   664,   979,   125,   667,   225,   837,
   839,   185,   949,   225,    51,   333,   186,   185,   951,   668,
   225,   669,   186,   191,   222,   672,   671,   192,   193,   194,
   172,   673,    48,   674,   116,   117,   118,   225,   119,   684,
   663,   675,   914,   685,    59,    89,  1006,   372,   839,   670,
   915,   157,   916,   690,   327,    90,    51,   120,   702,    91,
    71,   353,   126,   222,   683,   584,   174,  1041,   984,   710,
   712,   714,    58,   127,   191,    92,    93,    94,   192,   193,
   194,   584,   174,    86,  1028,   222,   280,   716,   698,   701,
    87,    86,   730,   731,   732,   191,   733,    71,   122,   192,
   193,   194,   740,   756,   773,   757,   123,   124,   770,   166,
   157,   167,    28,   780,   774,   775,   783,   351,   787,   423,
   781,    88,   782,   238,   799,   784,   229,   483,   785,   323,
   807,   493,    41,   158,   494,    43,    44,   813,   168,   814,
   743,   810,   811,   748,   812,   526,   753,    48,   822,   830,
   239,   240,   760,   838,   764,    48,   840,    72,   247,   248,
    89,   190,   249,   250,   251,   842,   190,   843,    89,   844,
    90,    51,    80,   845,    91,   225,   224,   230,    90,    51,
   632,   847,    91,   423,   225,   152,   848,    58,   849,   873,
    92,    93,    94,   863,   864,    58,   127,   874,    92,    93,
    94,   895,    72,   884,   955,   191,    59,   887,   889,   192,
   193,   194,   896,   224,   191,   162,    80,   909,   192,   193,
   194,   910,    80,   157,   897,   902,   711,   905,   907,   191,
   224,   711,   222,   192,   193,   194,   917,   222,   224,   918,
   898,     3,   919,   920,   222,   928,   940,   934,   969,   936,
   952,   953,     4,     5,     6,     7,   941,   945,   226,   232,
   839,   222,   946,   191,   352,   839,     8,   192,   193,   194,
   947,   166,   711,   167,    28,   948,   954,     9,   956,   851,
    10,   957,  1032,   883,   855,   351,   958,   959,   886,   858,
   888,   961,   965,   676,    41,   226,   677,    43,    44,   976,
   168,   989,   839,   993,   995,   224,   994,   949,  1002,   190,
   951,    72,   162,  1007,  1009,   424,  1033,    80,  1034,  1035,
   162,  1036,  1037,  1049,   225,  1045,  1050,   225,  1064,   427,
   225,  1054,    11,    12,    13,  1055,    14,    15,    16,    17,
    18,  1056,    19,    20,  1057,    72,   354,    80,  1065,  1066,
   224,   360,    80,    80,    80,   238,  1068,  1067,  1069,  1073,
  1070,    80,    80,    80,    80,  1071,  1072,  1081,    59,  1082,
  1084,   266,   267,   243,   244,   245,   246,   224,    86,   235,
   236,    71,   239,   240,  1085,    87,  1087,   226,  1091,   224,
   247,   248,   235,   236,   249,   250,   251,   426,  1092,   222,
  1093,    72,  1094,    86,  1096,  1095,  1097,  1099,   222,  1098,
    87,   224,    72,  1100,  1101,  1102,   301,   201,  1116,   302,
   225,   303,  1106,   225,  1107,  1108,    71,  1109,  1110,   225,
  1111,  1112,   226,  1113,  1120,  1123,   224,  1126,  1127,  1117,
  1118,   475,    48,   352,   302,   352,   303,  1119,  1121,  1122,
  1124,  1125,   230,  1128,  1129,    89,  1130,    72,  1139,   162,
  1133,  1136,   603,   606,   609,    90,   304,    48,    80,    91,
   617,   226,  1137,  1138,  1148,  1165,  1149,  1150,  1152,  1153,
    89,  1158,    58,   127,  1159,    92,    93,    94,   225,  1160,
    90,    51,  1161,   226,    91,   570,  1163,   570,  1166,   565,
   570,   647,   695,    72,   707,    80,    86,    58,   127,   424,
    92,    93,    94,    87,   253,   212,   788,   769,   162,   818,
     0,   665,     0,     0,     0,   354,     0,   426,     0,     0,
     0,     0,     0,     0,   232,    71,     0,   410,   419,     0,
   411,   215,   412,     0,   461,     0,     0,     0,   222,   224,
     0,   222,     0,     0,   222,     0,     0,     0,   224,     0,
     0,     0,     0,   224,     0,     0,     0,     0,     0,    71,
    48,   413,   219,     0,     0,     0,     0,   266,   267,   243,
   244,   245,   246,    89,     0,   235,   236,   224,    86,     0,
     0,   426,     0,    90,   151,    87,     0,    91,     0,   177,
     0,     0,     0,     0,     0,     0,     0,    87,     0,     0,
    58,   424,   220,    92,    93,    94,   742,     0,   745,   747,
     0,   750,   752,     0,   755,    71,   142,   759,     0,   762,
   763,   162,   767,     0,     0,     0,    71,     0,   792,     0,
   226,     0,     0,     0,   222,   226,     0,   222,     0,     0,
     0,     0,    48,   222,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   570,    48,    89,   570,     0,   570,   226,
     0,   570,     0,     0,     0,    90,    51,    89,   570,    91,
   570,    71,   570,   570,   570,     0,     0,    90,    51,     0,
     0,    91,    58,   354,     0,    92,    93,    94,     0,     0,
     0,     0,     0,     0,   793,     0,     0,   794,    93,    94,
     0,     0,   222,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   224,     0,    71,     0,     0,
     0,     0,     0,     0,   224,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   570,   570,   570,     0,     0,     0,
     0,     0,     0,     0,     0,   850,    87,   852,   853,     0,
   854,     0,   856,   857,     0,     0,     0,   860,   862,     0,
     0,     0,   865,     0,   866,   867,     0,     0,   869,   871,
     0,     0,     0,     0,     0,     0,     0,    88,     0,    80,
     0,     0,     0,     0,     0,     0,     0,   570,     0,   831,
     0,     0,   570,     0,   570,     0,   570,   226,   570,   570,
   570,   570,     0,    48,   570,     0,   226,   570,     0,     0,
     0,     0,   570,     0,     0,     0,    89,     0,     0,     0,
     0,     0,    86,     0,    80,     0,    90,    51,     0,   122,
    91,   212,     0,     0,     0,     0,     0,   123,   124,     0,
     0,     0,     0,   795,     0,     0,   796,    93,    94,     0,
     0,     0,     0,   213,    87,   921,   214,   215,   216,   922,
   262,     0,   923,   924,   224,     0,     0,   224,     0,     0,
   224,     0,   929,     0,     0,     0,     0,     0,     0,   570,
   570,     0,     0,     0,     0,    88,    48,   218,   219,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    89,
     0,    87,     0,     0,     0,     0,     0,     0,     0,    90,
    51,    48,   570,    91,     0,     0,   126,     0,   570,     0,
   570,     0,   570,     0,    89,     0,    58,   127,   220,    92,
    93,    94,    88,    80,    90,    51,   973,     0,    91,     0,
     0,     0,     0,     0,     0,     0,   226,     0,     0,   226,
     0,   790,   226,     0,    92,    93,    94,     0,    48,    87,
   224,    86,     0,   224,     0,     0,     0,    80,   122,   224,
   212,    89,  1008,     0,     0,  1010,   123,   124,     0,     0,
     0,    90,    51,     0,     0,    91,     0,     0,     0,     0,
    88,     0,   410,     0,     0,   411,   215,   412,   793,   262,
     0,    92,    93,    94,     0,    87,     0,     0,     0,     0,
     0,  1042,     0,  1043,     0,  1044,    48,     0,     0,     0,
     0,     0,     0,    80,     0,    48,   413,   219,   224,    89,
     0,     0,     0,     0,    80,     0,    88,     0,    89,    90,
    51,     0,   226,    91,     0,   226,     0,    87,    90,    51,
     0,   226,    91,     0,     0,   126,   795,     0,     0,    92,
    93,    94,    48,     0,     0,    58,   127,   220,    92,    93,
    94,     0,     0,     0,     0,    89,     0,     0,   891,    80,
     0,     0,     0,     0,     0,    90,    51,     0,     0,    91,
     0,     0,     0,     0,     0,   570,   570,     0,     0,     0,
   570,   570,   890,     0,    48,    92,    93,    94,     0,     0,
   226,     0,     0,     0,     0,     0,     0,    89,     0,     0,
     0,     0,     0,     0,     0,    80,     0,    90,    51,     0,
   570,    91,     0,     0,     0,   570,     0,     0,     0,    22,
     0,   570,   570,   149,   892,    24,    25,   893,    93,    94,
   122,     0,    26,     0,    27,    28,    29,    30,   123,   124,
    31,    32,    33,    34,   238,    35,    36,    37,     0,    38,
    39,     0,   570,     0,    40,    41,     0,    42,    43,    44,
     0,   150,     0,     0,    46,     0,     0,     0,    47,     0,
     0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,     0,     0,   249,   250,   251,     0,    48,    49,    50,
=======
#define	YYLAST		3885


static const short yytable[] = {   103,
   440,   444,   446,   412,   276,   216,   441,   487,   447,   128,
   228,   229,   639,   361,   163,   164,   366,   293,   470,   140,
   135,   304,   165,   309,   572,   591,   353,    61,    82,    83,
    84,    85,   150,   114,   115,   116,   117,   118,   119,   172,
   183,   593,   594,   595,   596,   256,   492,   190,   141,   197,
   199,   731,   733,   265,   216,   285,   384,   386,   995,   332,
     1,   153,   135,   452,   452,   362,    81,    51,   135,   823,
    61,    61,   205,   347,   601,   308,   363,   290,   265,   291,
   230,   525,   136,   529,   166,   500,   534,   135,   363,   347,
   222,  1023,   142,   449,  1006,    60,   160,   127,   161,    28,
   385,   387,   286,   450,   275,   129,   219,   225,    48,   198,
   200,   259,   260,   261,   262,   258,   732,   734,    40,    41,
    91,    42,    43,    44,   136,   162,   216,   148,   284,   135,
   136,   295,   554,   150,   824,    51,   138,    95,   166,   157,
   251,   252,   253,   254,   255,   471,   753,   754,   440,   136,
    58,   330,   166,   590,   441,   219,  1033,   150,   172,   423,
   336,   438,   303,   602,   351,   295,   349,   409,   329,    61,
   134,    61,   194,   389,   181,   265,   265,   527,   583,   295,
   506,   295,   329,   461,   135,   135,   153,   379,   216,    59,
   135,   182,   465,   466,   144,    61,  1006,   170,   329,   352,
   195,    61,    61,    61,   216,   530,   532,   535,   195,   636,
    61,    61,    61,    61,   616,   637,    48,   390,   347,   265,
   407,   528,   380,   145,   373,   376,   502,   219,   135,   557,
   560,   194,   196,   194,   408,   181,   410,   288,   303,   666,
   507,   669,    51,   672,   673,   265,   136,   136,   171,   531,
   533,   536,   182,   165,   135,   183,   201,   384,  1007,   166,
   429,   195,   312,   334,   158,   833,   329,   163,   329,   341,
   342,   343,   130,   568,   131,   439,   443,   445,   356,   357,
   358,   359,   159,   265,   194,   265,   135,   548,   353,   219,
   136,   196,   135,   196,   135,   749,   750,   679,   305,   681,
   590,   537,   721,   483,   739,   219,   259,   261,   722,   438,
   295,    61,   590,   484,   684,   306,   136,   815,   816,   817,
   150,   599,   429,   386,   354,   506,   329,   329,   361,   389,
   353,   580,    72,   395,   501,   265,   396,   686,   499,   691,
   295,   197,   332,   216,   196,    61,   419,   480,   182,   303,
   222,   153,   216,   153,   136,   542,   136,   216,    61,   544,
   225,   137,   174,   744,    28,   632,   832,   538,   523,   132,
   313,   133,   548,   539,   335,   154,    72,    91,   650,   435,
    91,   169,    72,    40,    41,   507,    42,    43,    44,   184,
   420,   120,    51,   920,   921,    51,   184,   337,   171,   543,
   587,   198,   397,   545,   160,   398,   161,    28,   260,   166,
   135,   328,   166,   467,   175,   429,   549,   581,   176,    51,
   220,   226,   651,   439,   177,   171,    40,    41,   452,   456,
    43,    44,   825,   162,   330,   295,   166,   661,   475,   662,
   663,   476,    51,   542,   219,   608,   121,   122,   611,   123,
   689,   329,   421,   219,   422,   430,   124,   125,   219,   166,
   184,   184,   184,   184,   178,   264,    28,   429,   267,   279,
   189,   265,   182,   126,    72,   544,   154,   307,   856,   295,
-32768,   528,   634,   531,   536,    40,    41,   664,    42,    43,
    44,   448,   414,   857,    87,   220,   303,    59,   667,   135,
   154,    72,    88,    89,   216,   339,    72,    72,    72,   191,
   192,   184,   216,   328,   135,    72,    72,    72,    72,   665,
   135,   650,   135,   675,   365,    90,   368,   370,   372,   375,
   378,   641,   644,   135,   763,   868,    51,   199,   869,   199,
   892,   220,   668,   883,   472,    48,   194,   257,   895,   884,
   199,   694,   405,   166,   415,    91,   416,   265,   483,   566,
   199,   473,   698,   870,   135,   711,   315,   181,   486,    92,
    51,   670,   265,    93,   384,   312,   136,   720,   181,   836,
   631,   811,   182,   265,   182,   263,    86,    58,    95,   837,
    96,    97,    98,    87,   778,   182,    61,   200,   316,   200,
   941,    88,    89,   279,   184,   219,   196,   746,   747,   575,
   200,   904,   329,   219,   955,   671,    72,   386,   712,   220,
   200,   317,   169,   318,   289,   601,   182,   290,   290,   291,
   291,   124,   125,   389,   761,   458,   771,   701,   705,    61,
   772,   807,   623,   216,    48,   624,   197,   625,   126,   480,
    72,   808,   809,   194,    91,   184,   184,   474,   265,   265,
   544,   713,   282,   154,   708,   154,   760,   405,    92,   292,
   626,   864,    93,   706,   226,   313,    94,   714,   283,    91,
   668,   195,   312,   184,   671,   528,    58,    95,   199,    96,
    97,    98,   804,   264,    51,   531,   536,   314,   384,   199,
   171,  -113,  -113,   813,   810,   199,   198,   743,  -112,  -112,
    87,   166,   386,   196,   325,   671,   131,   838,    88,    89,
   509,   814,   511,   512,   513,   514,   515,   516,   888,   517,
   518,  1043,   519,   520,   889,   199,   384,   386,   997,   998,
   329,   859,   965,   544,   219,   556,   559,   562,   200,   265,
  1000,   565,   567,   570,   791,   573,   966,   184,   279,   200,
   184,    48,   319,   793,   315,   200,   540,   220,  1001,   541,
    61,    91,   220,   327,   216,   265,   216,   323,   220,   850,
   968,   969,   528,   531,   544,    92,    51,   999,   855,    93,
  -110,  -110,   324,   613,   528,   200,   160,   384,   161,    28,
   386,  1026,   620,    58,    95,   800,   860,    97,    98,  1029,
   154,   180,   531,   628,  1030,   216,   216,   216,    40,    41,
    61,    42,    43,    44,  1031,   162,   265,   202,  1002,   265,
   544,    61,   320,   326,  1048,   133,   643,   646,   830,   382,
   381,  1003,   897,   802,  1004,   671,    49,    50,   329,   121,
   122,   872,   123,   671,   873,   216,   329,   909,   528,   124,
   125,   913,   914,   388,   185,   186,   187,   188,   531,    61,
   400,   922,   923,   924,  1032,   219,   126,   219,   671,   874,
   311,   179,   540,   680,   683,   715,   180,   688,   851,    59,
   693,   203,   915,   399,   697,   916,   700,   540,   704,   858,
   967,    72,   401,   383,   954,   184,   191,   192,   329,   834,
   184,   959,   960,   402,   126,    61,   219,   219,   219,   220,
   917,   411,   329,   121,   122,   319,   123,   220,   121,   122,
   320,   123,   413,   124,   125,   315,   424,   891,   124,   125,
   231,   425,   540,   321,    72,   970,   432,   325,   638,   427,
   126,  -111,  -111,   431,   452,   126,   219,   457,   232,   233,
   433,   434,   185,   186,   187,   188,   540,   741,   742,  1005,
   241,   242,   243,   244,   245,   246,   247,   122,   453,   123,
   317,   123,   318,   927,    70,   454,   124,   125,   124,   125,
   310,   768,   769,   770,   186,   187,   188,   756,   757,  1008,
   758,   759,   459,   126,   633,   126,   676,   479,   677,   455,
    86,   783,   185,   186,   187,   188,   787,    87,   460,   462,
   489,   790,   676,   994,   677,    88,    89,   151,    70,   185,
   186,   187,   188,   167,   173,  1059,  1060,   463,  1062,  1063,
   464,   184,   185,   186,   187,   188,    72,  1070,    90,   468,
  1073,  1074,  1075,   469,   610,   477,   478,   738,   220,   482,
   740,   488,  1085,   490,   185,   186,   187,   188,    48,   493,
   495,   498,   215,   223,   503,    72,   496,   317,    91,   318,
   510,   491,   188,   752,   522,   185,   186,   187,   188,   546,
   504,   524,    92,    51,   899,   547,    93,   551,   550,   563,
    94,   839,   840,   185,   186,   187,   188,   571,   928,   574,
    58,    95,   553,    96,    97,    98,   185,   186,   187,   188,
   961,   277,   564,   311,   585,    72,    70,   586,   151,   167,
   185,   186,   187,   188,   588,   591,    72,   768,   769,   770,
   600,   603,   185,   186,   187,   188,   604,   215,   605,   607,
   606,   609,   151,   173,   614,   318,   617,   338,    70,    70,
    70,   621,   618,   619,   436,   622,   629,    70,    70,    70,
    70,   630,   635,   353,    72,   312,   364,   648,   367,   369,
   371,   374,   377,   185,   186,   187,   188,   647,    87,   220,
    28,   220,   654,   215,   840,   831,    88,    89,   656,   658,
   660,   675,   696,   710,   403,   717,   584,    71,    86,    40,
    41,   716,    42,    43,    44,    87,   805,   723,   718,   861,
    72,   881,   729,    88,    89,   185,   186,   187,   188,   724,
   220,   220,   220,   725,   726,   185,   186,   187,   188,    48,
   185,   186,   187,   188,   727,   735,    90,   449,   736,    91,
   152,    71,   737,   748,   745,   277,   168,    71,   483,   755,
   829,   763,   774,    92,    51,   776,    48,    93,    70,   779,
   220,   215,   780,   781,   167,   796,    91,   185,   186,   187,
   188,    58,    95,   795,   862,    97,    98,   167,   806,   818,
    92,    51,   819,   820,    93,   217,   224,   821,    94,   822,
   826,   827,    70,   828,   843,   844,   845,   853,    58,    95,
   865,    96,    97,    98,   866,   151,   867,   481,   894,   403,
   877,   871,   875,   876,   878,   879,   223,   768,   769,   880,
   768,   769,   882,   890,   885,   886,   887,   905,    87,   908,
   893,   896,   912,   918,   278,   505,    88,    89,   906,    71,
   919,   152,   168,   907,   925,   910,   840,   926,   945,   840,
   768,   769,   949,   950,   911,   929,   931,   933,   942,    90,
   217,   956,   957,   958,   943,   152,    71,   944,   840,   946,
   224,    71,    71,    71,   947,   948,   951,   952,   953,    48,
    71,    71,    71,    71,   974,   977,   978,   981,   984,    91,
   986,   975,   985,   987,   976,   982,   983,   988,   992,   993,
   277,   989,   979,    92,    51,   990,   217,    93,   980,   215,
   991,  1010,   231,  1011,   215,    80,  1013,   404,  1012,  1014,
   215,    58,    95,  1015,   863,    97,    98,  1016,  1018,  1017,
   232,   233,   234,  1020,  1019,   612,   235,   236,   237,   238,
   239,   240,   241,   242,   243,   244,   245,   246,   247,  1021,
   248,  1022,   481,   195,  1049,   627,  1034,  1035,   156,    80,
  1036,  1037,  1038,  1039,  1040,    80,  1041,  1042,   278,  1050,
  1051,  1052,  1053,  1054,  1055,  1056,  1057,  1067,   642,   645,
  1093,    71,  1061,  1064,   217,  1065,  1066,   168,  1076,  1094,
  1077,  1078,  1080,  1081,  1086,  1087,  1088,  1089,  1068,  1069,
   168,  1071,  1072,   221,   227,  1091,   521,   598,   640,  1079,
   709,   615,  1082,  1083,  1084,    71,   730,     0,   655,   751,
   657,     0,     0,   659,  1090,     0,     0,     0,   152,     0,
   152,     0,   404,     0,     0,     0,   674,     0,     0,   224,
     0,     0,     0,    70,     0,     0,     0,     0,     0,     0,
     0,     0,   281,     0,     0,     0,     0,    80,     0,   156,
     0,   215,     0,     0,     0,     0,     0,     0,   526,   215,
   526,     0,     0,   526,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   156,    80,     0,    70,     0,   340,    80,
    80,    80,     0,     0,     0,     0,     0,     0,    80,    80,
    80,    80,     0,     0,     0,     0,     0,     0,     0,     0,
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   278,   221,     0,     0,     0,     0,     0,
     0,     0,   217,     0,     0,   406,     0,   217,   762,     0,
     0,     0,   764,   217,   765,     0,   766,     0,   767,     0,
   655,   659,     0,     0,     0,   773,     0,     0,   775,     0,
     0,     0,     0,   777,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   152,     0,     0,     0,     0,
     0,     0,     3,     0,     0,     0,   281,     0,   173,     0,
     0,     0,     0,     4,     5,     6,     7,     0,     0,    80,
   215,     0,   221,     0,     0,     0,     0,     8,     0,     0,
     0,   526,     0,     0,   526,     0,   526,    70,     9,   526,
     0,    10,     0,     0,     0,     0,   526,     0,   526,     0,
   526,   526,   526,    80,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   156,     0,   156,     0,
   406,   835,     0,     0,     0,     0,     0,   227,     0,   773,
   775,     0,   841,     0,   842,     0,    71,    70,     0,    11,
    12,    13,     0,    14,    15,    16,    17,    18,    70,    19,
    20,     0,     0,     0,   217,     0,     0,     0,     0,     0,
     0,     0,   217,     0,     0,     0,   655,   659,     0,    86,
     0,     0,     0,     0,     0,     0,    87,     0,     0,    71,
     0,     0,     0,     0,    88,    89,    70,     0,     0,     0,
   555,   558,   561,     0,     0,     0,     0,     0,   569,     0,
     0,   215,     0,   215,   526,     0,     0,   139,   526,     0,
   526,   281,   526,   719,   526,   526,   526,   526,     0,    86,
   221,   526,   775,     0,   526,   221,    87,    48,     0,   526,
     0,     0,    70,     0,    88,    89,     0,    91,     0,     0,
     0,     0,   215,   215,   215,     0,     0,     0,     0,     0,
     0,    92,    51,     0,     0,    93,     0,   442,     0,    94,
   290,     0,   291,   156,     0,     0,     0,     0,     0,    58,
    95,     0,    96,    97,    98,     0,     0,    48,     0,     0,
     0,    71,   215,     0,     0,     0,     0,    91,     0,     0,
     0,     0,     0,   217,     0,     0,     0,     0,     0,     0,
     0,    92,    51,     0,     0,    93,     0,     0,     0,    94,
    71,     0,     0,     0,     0,     0,  1009,   526,     0,    58,
    95,     0,    96,    97,    98,   526,   526,     0,   526,   682,
   526,   685,   687,     0,   690,   692,     0,   695,     0,     0,
   699,     0,   702,   703,    87,   707,     0,     0,   505,     0,
     0,     0,    88,    89,    80,     0,   655,     0,     0,   655,
    71,   526,   526,   526,     0,     0,     0,     0,     0,     0,
     0,    71,   221,     0,     0,   902,     0,     0,     0,     0,
   221,     0,     0,     0,   775,     0,     0,   775,     0,   655,
     0,     0,     0,     0,     0,    48,     0,    80,     0,     0,
     0,     0,     0,     0,     0,    91,   775,     0,     0,    71,
     0,     0,     0,     0,     0,     0,     0,     0,   526,    92,
    51,     0,     0,    93,   217,     0,   217,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    58,    95,     0,
   903,    97,    98,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    71,   782,     0,   784,   785,
     0,   786,     0,   788,   789,   217,   217,   217,   792,   794,
     0,     0,     0,   797,     0,   798,   799,     0,     0,   801,
   803,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
     0,     0,     0,     0,     0,   217,     0,     0,    22,     0,
     0,   221,    23,     0,    24,    25,     0,     0,     0,     0,
     0,    26,     0,    27,    28,    29,    30,     0,    80,    31,
    32,    33,    34,     0,    35,    36,    37,     0,    38,    39,
     0,     0,     0,    40,    41,     0,    42,    43,    44,     0,
    45,   526,   526,    46,   526,   526,     0,    47,   846,    87,
     0,     0,   847,     0,     0,   848,   849,    88,    89,     0,
    48,    49,    50,     0,     0,   854,     0,     0,    80,     0,
   526,     0,     0,   526,   526,   526,     0,     0,     0,    80,
    90,     0,     0,     0,     0,    51,     0,     0,     0,     0,
     0,    52,   526,    53,    54,    55,    56,    57,     0,     0,
    48,     0,    58,     0,    59,     0,     0,     0,     0,     0,
    91,     0,     0,     0,     0,     0,     0,    80,     0,     0,
     0,     0,   898,     0,    92,    51,     0,     0,    93,     0,
     0,     0,   221,     0,   221,     0,     0,     0,     0,     0,
     0,     0,    58,    95,     0,  1024,    97,    98,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   930,     0,
     0,   932,     0,    80,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   221,   221,   221,     0,     0,     0,     0,
     0,     0,     0,     0,    22,     0,     0,     0,    23,     0,
    24,    25,     0,     0,   962,     0,   963,    26,   964,    27,
    28,    29,    30,     0,     0,    31,    32,    33,    34,     0,
    35,    36,    37,   221,    38,    39,     0,     0,     0,    40,
    41,     0,    42,    43,    44,     0,   146,     0,     0,    46,
     0,     0,     0,    47,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    87,     0,     0,    48,    49,    50,     0,
     0,    88,    89,     0,     0,     0,    91,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   147,     0,     0,    90,     0,     0,    52,   148,    53,
    54,    55,    56,    57,     0,    22,     0,     0,    58,    23,
    59,    24,    25,     0,    48,     0,     0,     0,    26,     0,
    27,    28,    29,    30,    91,     0,    31,    32,    33,    34,
     0,    35,    36,    37,     0,    38,    39,     0,    92,    51,
   299,    41,    93,   300,    43,   301,     0,   146,     0,     0,
    46,     0,     0,     0,    47,     0,    58,    95,     0,  1025,
    97,    98,     0,     0,     0,     0,     0,    48,   302,    50,
     0,     0,     0,     0,     0,     0,     0,    91,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   147,     0,     0,     0,     0,     0,    52,   148,
    53,    54,    55,    56,    57,     0,    22,     0,     0,    58,
    23,    59,    24,    25,     0,     0,     0,     0,     0,    26,
     0,    27,    28,    29,    30,     0,     0,    31,    32,    33,
    34,     0,    35,    36,    37,     0,    38,    39,     0,     0,
     0,    40,    41,     0,    42,    43,    44,     0,   333,    86,
     0,    46,     0,     0,     0,    47,    87,     0,   268,     0,
   161,    28,     0,     0,    88,    89,     0,     0,    48,    49,
    50,     0,     0,     0,     0,     0,     0,     0,    91,     0,
   269,    41,     0,   270,   271,   272,     0,   273,     0,     0,
     0,     0,     0,    51,     0,     0,     0,     0,     0,    52,
     0,    53,    54,    55,    56,    57,     0,    48,   212,   213,
    58,     0,    59,     0,     0,     0,     0,    91,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
     0,    92,    51,     0,     0,    93,    87,     0,   171,    94,
     0,    28,     0,     0,    88,    89,     0,     0,     0,    58,
    95,   274,    96,    97,    98,     0,     0,     0,     0,     0,
    40,    41,     0,    42,    43,    44,     0,   289,     0,     0,
   290,     0,   291,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    48,   328,     0,
     0,     0,     0,     0,     0,     0,     0,   344,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    86,     0,     0,
     0,    92,   292,     0,    87,    93,   206,     0,     0,    94,
     0,     0,    88,    89,     0,     0,     0,     0,     0,    58,
    95,   345,    96,    97,    98,     0,     0,     0,   207,     0,
     0,   208,   209,   210,     0,   437,     0,     0,   290,     0,
   291,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    48,   212,   213,     0,     0,
     0,     0,     0,     0,     0,    91,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    86,     0,     0,     0,    92,
   292,     0,    87,    93,   206,     0,     0,    94,     0,     0,
    88,    89,     0,     0,     0,     0,     0,    58,    95,   214,
    96,    97,    98,     0,     0,     0,   391,     0,     0,   392,
   209,   393,     0,   437,     0,     0,   290,     0,   291,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    48,   394,   213,     0,     0,     0,     0,
     0,     0,     0,    91,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,    92,   292,     0,
    87,    93,   206,     0,     0,    94,     0,     0,    88,    89,
     0,     0,     0,     0,     0,    58,    95,   214,    96,    97,
    98,     0,     0,     0,   207,     0,     0,   208,   209,   210,
     0,   589,     0,     0,   290,     0,   291,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,   212,   213,     0,     0,     0,     0,     0,     0,
     0,    91,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    86,     0,     0,     0,    92,    51,     0,    87,    93,
   206,     0,     0,    94,     0,     0,    88,    89,     0,     0,
     0,     0,     0,    58,    95,   214,    96,    97,    98,     0,
     0,     0,   391,     0,     0,   392,   209,   393,     0,   589,
    86,     0,   290,     0,   291,     0,     0,    87,     0,   206,
     0,     0,     0,     0,     0,    88,    89,     0,     0,    48,
   394,   213,     0,     0,     0,     0,     0,     0,     0,    91,
     0,   391,     0,     0,   392,   209,   393,     0,   428,    86,
     0,     0,     0,    92,    51,     0,    87,    93,   206,     0,
     0,    94,     0,     0,    88,    89,     0,     0,    48,   394,
   213,    58,    95,   214,    96,    97,    98,     0,    91,     0,
   576,     0,     0,   577,   209,   578,     0,   428,    86,     0,
     0,     0,    92,   147,     0,    87,    93,   206,     0,   171,
    94,     0,     0,    88,    89,     0,     0,    48,   579,   213,
    58,    95,   214,    96,    97,    98,     0,    91,     0,   207,
     0,     0,   208,   209,   210,     0,   211,    86,     0,     0,
     0,    92,    51,     0,    87,    93,   206,     0,   171,    94,
     0,     0,    88,    89,     0,     0,    48,   212,   213,    58,
    95,   214,    96,    97,    98,     0,    91,     0,   391,     0,
     0,   392,   209,   393,     0,   211,    86,     0,     0,     0,
    92,    51,     0,    87,    93,   206,     0,     0,    94,     0,
     0,    88,    89,     0,     0,    48,   394,   213,    58,    95,
   214,    96,    97,    98,     0,    91,     0,   207,     0,     0,
   208,   209,   210,     0,   728,    86,     0,     0,     0,    92,
    51,     0,    87,    93,   206,     0,     0,    94,     0,     0,
    88,    89,     0,     0,    48,   212,   213,    58,    95,   214,
    96,    97,    98,     0,    91,     0,   576,     0,     0,   577,
   209,   578,     0,   211,    86,     0,     0,     0,    92,    51,
     0,    87,    93,   206,     0,     0,    94,     0,     0,    88,
    89,     0,     0,    48,   579,   213,    58,    95,   214,    96,
    97,    98,     0,    91,     0,   207,     0,     0,   208,   209,
   210,     0,   900,    86,     0,     0,     0,    92,    51,     0,
    87,    93,   206,     0,     0,    94,     0,     0,    88,    89,
     0,     0,    48,   212,   213,    58,    95,   214,    96,    97,
    98,     0,    91,     0,   207,     0,     0,   208,   209,   210,
     0,   901,    86,     0,     0,     0,    92,    51,     0,    87,
    93,   206,     0,     0,    94,     0,     0,    88,    89,     0,
     0,    48,   212,   213,    58,    95,   214,    96,    97,    98,
     0,    91,     0,   934,     0,     0,   935,   209,   393,     0,
   211,    86,     0,     0,     0,    92,    51,     0,    87,    93,
   206,     0,     0,    94,     0,     0,    88,    89,     0,     0,
    48,   936,   213,    58,    95,   214,    96,    97,    98,     0,
    91,     0,   937,     0,     0,   938,   209,   393,     0,   211,
    86,     0,     0,     0,    92,    51,     0,    87,    93,   206,
     0,     0,    94,     0,     0,    88,    89,     0,     0,    48,
   939,   213,    58,    95,   214,    96,    97,    98,     0,    91,
     0,   207,     0,     0,   208,   209,   210,     0,   940,    86,
     0,     0,     0,    92,    51,     0,    87,    93,   206,     0,
     0,    94,     0,     0,    88,    89,     0,     0,    48,   212,
   213,    58,    95,   214,    96,    97,    98,     0,    91,     0,
   971,     0,     0,   972,   209,   393,     0,   211,     0,     0,
     0,     0,    92,    51,    87,     0,    93,     0,     0,     0,
    94,     0,    88,    89,     0,     0,     0,    48,   973,   213,
    58,    95,   214,    96,    97,    98,     0,    91,     0,     0,
     0,     0,     0,     0,     0,    90,    86,     0,     0,     0,
     0,    92,    51,    87,     0,    93,     0,     0,    28,    94,
     0,    88,    89,     0,     0,    48,     0,     0,     0,    58,
    95,   214,    96,    97,    98,    91,     0,    40,    41,     0,
    42,    43,    44,     0,    90,    86,     0,     0,     0,    92,
    51,     0,    87,    93,     0,     0,     0,    28,     0,     0,
    88,    89,     0,     0,    48,   328,     0,    58,    95,     0,
  1027,    97,    98,     0,    91,     0,    40,    41,     0,    42,
    43,    44,     0,   597,     0,     0,     0,     0,    92,    51,
     0,     0,    93,     0,     0,     0,    94,     0,     0,     0,
     0,    86,     0,    48,   328,     0,    58,    95,    87,    96,
    97,    98,     0,    91,     0,     0,    88,    89,     0,     0,
     0,     0,     0,     0,    87,     0,     0,    92,    51,     0,
     0,    93,    88,    89,     0,    94,     0,     0,     0,   289,
     0,     0,   290,     0,   291,    58,    95,     0,    96,    97,
    98,    86,     0,     0,     0,    90,     0,     0,    87,    48,
     0,     0,     0,     0,    87,     0,    88,    89,     0,    91,
     0,     0,    88,    89,     0,    48,     0,     0,     0,     0,
     0,     0,     0,    92,   292,    91,     0,    93,     0,   442,
     0,    94,   290,     0,   291,    90,     0,     0,     0,    92,
    51,    58,    95,    93,    96,    97,    98,     0,     0,    48,
     0,     0,     0,     0,     0,    48,     0,    58,    95,    91,
  1028,    97,    98,     0,     0,    91,     0,     0,     0,     0,
     0,     0,     0,    92,    51,     0,    87,    93,     0,    92,
    51,    94,     0,    93,    88,    89,     0,     0,     0,     0,
     0,    58,    95,     0,    96,    97,    98,    58,    95,     0,
  1044,    97,    98,    87,     0,     0,     0,    90,     0,     0,
    87,    88,    89,     0,     0,     0,    87,     0,    88,    89,
     0,     0,     0,     0,    88,    89,     0,    48,     0,     0,
     0,     0,     0,     0,    90,     0,     0,    91,     0,     0,
     0,    90,     0,     0,     0,     0,     0,    90,     0,     0,
     0,    92,    51,     0,    48,    93,     0,     0,     0,     0,
     0,    48,     0,     0,    91,     0,     0,    48,     0,    58,
    95,    91,  1045,    97,    98,     0,     0,    91,    92,    51,
     0,     0,    93,     0,     0,    92,    51,     0,     0,    93,
     0,    92,    51,     0,     0,    93,    58,    95,     0,  1046,
    97,    98,     0,    58,    95,     0,  1047,    97,    98,    58,
    95,     0,  1058,    97,    98
};

static const short yycheck[] = {    13,
<<<<<<< HEAD
    90,    91,   146,   338,   545,     1,   142,   201,   171,   301,
   302,   303,   195,     1,    45,    36,   359,    36,     2,    33,
     1,    45,   185,    46,    45,    45,    45,    49,    50,    45,
    23,   121,    36,    13,     9,    10,    11,    12,   201,    14,
    15,    16,    17,    18,    19,   171,   150,    71,   152,    45,
    12,   148,     8,  1041,    17,    45,    14,    45,   111,   185,
    46,    74,    46,    14,    45,    78,    79,    80,    45,    17,
    80,    48,    95,    50,    88,   201,    95,    81,    45,    95,
   111,    45,     2,   114,   100,     1,  1074,   111,    45,    99,
   111,   111,   111,    86,    74,   111,    76,    77,    78,    95,
    80,    45,   199,    84,   477,   478,   479,   480,   481,    95,
    45,   125,    75,    45,    95,   111,   279,    52,   281,    99,
   142,   111,    45,   111,   114,    45,    46,    75,   142,    45,
   111,    51,    52,   126,   148,   112,   150,    93,    94,   132,
   115,   116,   117,   118,   119,   339,     2,   111,    71,    15,
   691,   692,   145,    17,   112,   281,   149,   171,   116,     1,
    45,   112,   252,   147,    46,   116,   180,   111,    88,    89,
   114,   185,   186,   111,    45,   338,   339,    36,   470,   111,
    17,    45,    46,   475,    50,   199,    45,   201,   111,    45,
    46,    15,   176,   150,   486,   152,    46,    17,   182,   183,
   184,    83,    45,   217,   301,   125,    48,   191,   192,   193,
   194,    75,    36,   339,    45,   150,    15,    81,    82,   323,
    46,    48,   142,    15,    95,   542,    59,   147,   332,   333,
   150,   151,    17,    66,   209,    36,    95,    36,    75,   253,
   111,   176,   177,    45,    36,    95,   260,   261,   262,   541,
   207,   171,   111,    36,   268,    75,   176,   177,   272,   273,
    45,   181,   182,   183,   184,   403,    46,   405,   111,    95,
   408,   191,   192,   193,   194,   289,   373,   270,   271,   148,
   200,   822,   202,   203,   204,   205,   206,   301,   302,   303,
    75,   147,    93,    94,   150,   317,   318,   217,    36,    46,
   133,   134,   135,   136,    17,    45,    36,   227,    36,   323,
    93,    94,    50,    45,   298,    95,   185,    45,    50,   482,
   176,   465,   111,    36,   659,   339,   182,   183,   184,   111,
   199,   113,   201,    46,    36,   191,   192,   193,   194,   682,
   683,   658,   262,    45,   661,   637,   111,   639,    95,   205,
   206,   335,    36,    83,   289,    95,   482,   371,   650,   373,
   100,    45,    75,   507,   547,    36,   323,    95,    17,   289,
    36,   111,   689,   470,    45,   332,   333,    45,   298,    45,
    45,   301,    46,   111,   304,    38,   483,   401,    41,    45,
    43,   348,    45,    95,    36,   499,    45,   266,   267,    45,
   320,    45,    46,   323,   777,   778,   779,    38,    50,   111,
    41,    95,    43,   348,    45,   335,    45,    51,    38,    72,
   355,    41,   963,   964,    95,    36,    75,   111,   348,    95,
    95,    95,   301,   302,   303,   355,    45,   357,    84,   536,
   111,    72,   298,    45,   364,   111,   111,   461,   586,    95,
   588,    95,   590,   591,   100,   599,   470,   290,   111,    93,
    94,   475,   382,    45,   799,   111,    45,   111,   482,   483,
   339,   464,    83,   487,    45,    84,     1,    45,    46,   335,
   111,    45,     7,   497,     1,   499,    95,   501,    46,    14,
     7,   808,   348,    95,    45,    45,   659,    14,    46,   521,
    46,   421,   111,    48,   373,    84,    45,   340,   341,   111,
     4,     5,     6,    95,    38,    46,    95,    41,    46,    43,
    45,    45,   536,   667,    95,   539,   461,    95,    45,   111,
    45,    48,   111,    50,    45,    46,    15,    95,    36,   372,
   111,   461,   499,   111,    99,    95,    71,    95,    72,    95,
   470,    37,    45,    46,    71,   475,    95,    36,    45,    84,
    84,   111,   482,    17,    95,    93,    94,    84,    46,    94,
    95,    95,   111,    98,    45,    17,   100,    94,    95,   499,
    95,    98,   502,    81,    95,   920,   111,   111,   523,   114,
   115,   116,    46,   928,   111,   112,   111,   114,   115,   116,
   111,   470,    95,   523,    46,    15,   526,    46,    95,     1,
    36,   111,   775,   113,   483,     7,    17,    95,   111,   911,
    17,    75,    14,   637,   111,   639,    36,   460,   548,    36,
   550,   551,   646,    75,    46,   619,   799,   773,    46,    81,
    82,   976,    81,    82,     1,    46,   736,    17,    74,    46,
    76,    77,    78,    45,    80,    46,    48,   671,   672,   111,
   995,   113,    19,   980,   981,    46,    46,   536,   985,   986,
   987,   988,   541,    99,    75,    45,    46,    46,    75,    71,
   664,    38,    39,    95,    41,    42,    43,    95,    45,   703,
    36,    17,    84,    46,   550,   551,    46,    46,    46,   619,
    46,    36,    94,    95,    95,    75,    98,    45,  1025,    17,
    36,    45,  1029,  1030,    95,    72,    51,   637,    95,   111,
    46,    46,   114,   115,   116,    49,   646,   702,    81,    82,
   384,    50,   386,   387,   388,   389,   390,   391,    46,   393,
   394,    51,   396,   397,   664,    95,    95,    95,    46,    75,
    15,   111,   766,   113,   111,   113,   113,   920,    93,    94,
    49,    38,    46,   619,    41,   928,    95,    75,    93,    94,
   639,    36,   786,    81,    82,   789,    46,    16,   792,    18,
    19,   774,    46,    93,    94,    74,    46,    76,    77,    78,
   934,    80,     1,    46,    46,    46,    46,    95,     7,    38,
    39,  1093,    41,    42,    43,    14,    45,    95,   664,    46,
    99,    95,    46,   976,  1131,  1132,    46,  1134,  1135,   111,
    46,    46,   114,   807,   111,  1142,   113,    46,  1145,  1146,
  1147,    95,   995,    72,    73,    95,    45,    47,    46,    48,
  1157,    50,    95,    95,    95,    95,    46,   861,    74,    46,
    76,    77,    78,   773,    80,    46,   870,    38,    95,    46,
    41,    95,    71,    46,    46,    95,   786,    46,   882,   789,
    95,   885,   792,    99,   113,    84,    95,   891,    51,   863,
     2,     7,    99,    93,    94,    94,    95,   807,    14,    98,
   874,    46,    46,    46,    17,    95,    22,    23,    95,    46,
    46,    46,   111,   112,    95,   114,   115,   116,    95,    31,
    46,    46,    95,    95,    46,    46,    95,   931,    17,    45,
    93,    94,    38,    45,    46,    41,   940,   941,    46,    51,
    52,   945,   946,   947,   948,   919,   950,    59,    46,    35,
    95,    95,    95,   863,    66,    71,    85,    86,    95,    95,
    95,   807,    15,    37,   874,    15,    72,    46,    84,    95,
    95,    36,   882,    95,    95,   885,    88,    89,    94,    95,
    36,   891,    98,    36,    19,   989,    36,    28,    35,   993,
   994,   965,    78,    83,    80,   111,   112,    50,   114,   115,
   116,    49,    35,    38,    39,    50,    41,    42,    43,   919,
    45,    81,    82,   125,    93,    94,    46,   863,   662,   663,
    46,   133,   134,   135,   136,     4,   138,     6,   874,   141,
   142,    78,    50,    80,    46,   147,    75,    72,   150,   151,
   950,    78,    79,    80,    74,    78,    14,    80,    78,    79,
    80,    46,   911,   697,   698,   965,   700,   701,    36,   171,
    85,    86,    74,    46,   176,   177,    78,    79,    80,   181,
   182,   183,   184,   919,    75,   187,   111,    45,   113,   191,
   192,   193,   194,    78,    16,    80,    18,    19,   200,    11,
   202,   203,   204,   205,   206,    78,    74,    80,   266,   267,
    78,    79,    80,    71,    49,   217,    38,    39,    46,    41,
    42,    43,    46,    45,     2,   227,    84,  1121,  1122,   965,
  1124,  1125,   111,    95,   113,    14,    94,    95,    38,  1133,
    98,    41,  1136,  1137,  1138,  1045,   574,    46,   576,    46,
    78,   579,    80,   111,  1148,    36,   114,   115,   116,    80,
   262,    46,    81,    78,   592,    80,    45,    45,    46,    46,
    36,    80,    72,    51,    52,    74,    78,  1077,    80,    78,
    79,    80,    49,    49,    99,    45,    46,   289,   290,    74,
    50,   113,    71,    78,    79,    80,   298,    46,    46,   301,
    11,    78,   304,    80,  1104,    84,    93,    94,    74,  1045,
    88,    89,    78,    79,    80,    94,    95,    46,   320,    98,
    38,   323,    95,    41,    46,   653,   654,    46,    48,    78,
    46,    80,   111,   335,    46,   114,   115,   116,   340,   341,
   342,    46,     8,    45,    46,    74,   348,   125,    50,    78,
    79,    80,    74,   355,    72,   357,    78,    79,    80,    78,
    45,    80,   364,    48,   142,    50,    78,    80,    80,   147,
   372,    95,   150,   151,    45,    46,    46,   705,    38,    50,
   382,    41,   710,    48,   712,    95,   714,    46,   716,    38,
   718,   719,    41,   171,   722,    46,    49,   725,   176,   177,
    32,    46,   730,   181,   182,   183,   184,    16,    38,    18,
    19,    41,    46,   191,   192,   193,   194,    38,    19,   421,
    41,    74,    43,    36,    45,    78,    79,    80,     7,    38,
    39,    46,    41,    42,    43,    14,    45,    38,    39,   217,
    41,    42,    43,    22,    23,    45,   448,   449,   450,   227,
    46,    72,   454,   455,   456,    46,   458,    38,   460,   461,
    41,   463,    38,    84,    50,    41,    45,    11,   470,   797,
   798,    45,    46,   475,    95,    80,    50,    45,    46,    46,
   482,    46,    50,    74,   262,    46,    50,    78,    79,    80,
   111,    95,    71,    95,    76,    77,    78,   499,    80,    46,
   502,    95,   830,    46,   113,    84,    46,    36,   836,   511,
   838,   289,   840,    51,    46,    94,    95,    99,    48,    98,
   298,   523,   101,   301,   526,    38,   304,    46,    41,    46,
    46,    46,   111,   112,    74,   114,   115,   116,    78,    79,
    80,    38,   320,     7,    41,   323,   548,    46,   550,   551,
    14,     7,    46,    95,    95,    74,    95,   335,    14,    78,
    79,    80,   111,    81,    36,   111,    22,    23,    80,    16,
   348,    18,    19,    49,    45,    45,    51,   355,    46,   357,
    49,    45,    49,    56,    45,    51,   364,    36,    51,    45,
    48,    38,    39,    45,    41,    42,    43,    95,    45,    95,
   602,    46,    46,   605,    46,    36,   608,    71,    51,    46,
    83,    84,   614,    46,   616,    71,    46,   619,    91,    92,
    84,   623,    95,    96,    97,    46,   628,    46,    84,    46,
    94,    95,     2,    95,    98,   637,    88,    89,    94,    95,
    49,    37,    98,   421,   646,   101,    49,   111,    46,    49,
   114,   115,   116,    48,    46,   111,   112,    45,   114,   115,
   116,    51,   664,    46,    49,    74,   113,    46,    46,    78,
    79,    80,    46,   125,    74,    45,    46,    46,    78,    79,
    80,    46,    52,   461,    51,   111,  1014,   111,   111,    74,
   142,  1019,   470,    78,    79,    80,    46,   475,   150,    37,
    51,     9,    45,    45,   482,    45,    50,    46,    49,    46,
    46,    46,    20,    21,    22,    23,    50,    50,    88,    89,
  1048,   499,    50,    74,   176,  1053,    34,    78,    79,    80,
    50,    16,  1060,    18,    19,    50,    46,    45,    51,   741,
    48,    45,    95,    46,   746,   523,    45,   111,    46,   751,
    46,   111,    45,    38,    39,   125,    41,    42,    43,    45,
    45,    50,  1090,    50,    45,   217,    50,    46,    45,   771,
    46,   773,   142,    46,    46,   227,    95,   147,    41,    95,
   150,    95,    41,    51,   786,    46,    51,   789,    46,   237,
   792,    51,   100,   101,   102,    51,   104,   105,   106,   107,
   108,    51,   110,   111,    51,   807,   176,   177,    46,    46,
   262,   181,   182,   183,   184,    56,    46,    95,    46,    41,
    95,   191,   192,   193,   194,    95,    95,    46,   113,    46,
    46,    85,    86,    87,    88,    89,    90,   289,     7,    93,
    94,   619,    83,    84,    46,    14,    51,   217,    51,   301,
    91,    92,    93,    94,    95,    96,    97,   227,    51,   637,
    81,   863,   114,     7,    46,   114,   114,    46,   646,   114,
    14,   323,   874,    46,    46,    95,    45,    45,   114,    48,
   882,    50,    46,   885,    46,    46,   664,    46,    46,   891,
    46,    46,   262,    46,    46,    46,   348,    46,    46,   114,
   114,    45,    71,   355,    48,   357,    50,   114,    50,    50,
    50,    50,   364,    46,    46,    84,   114,   919,    46,   289,
    50,    50,   448,   449,   450,    94,    95,    71,   298,    98,
   456,   301,    50,    50,    50,     0,    51,    51,    51,    51,
    84,    51,   111,   112,    51,   114,   115,   116,   950,    51,
    94,    95,    51,   323,    98,   403,    51,   405,     0,   399,
   408,   482,   547,   965,   570,   335,     7,   111,   112,   421,
   114,   115,   116,    14,    99,    16,   648,   621,   348,   687,
    -1,   506,    -1,    -1,    -1,   355,    -1,   357,    -1,    -1,
    -1,    -1,    -1,    -1,   364,   773,    -1,    38,    46,    -1,
    41,    42,    43,    -1,    45,    -1,    -1,    -1,   786,   461,
    -1,   789,    -1,    -1,   792,    -1,    -1,    -1,   470,    -1,
    -1,    -1,    -1,   475,    -1,    -1,    -1,    -1,    -1,   807,
    71,    72,    73,    -1,    -1,    -1,    -1,    85,    86,    87,
    88,    89,    90,    84,    -1,    93,    94,   499,     7,    -1,
    -1,   421,    -1,    94,    95,    14,    -1,    98,    -1,   100,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,
   111,   523,   113,   114,   115,   116,   602,    -1,   604,   605,
    -1,   607,   608,    -1,   610,   863,    45,   613,    -1,   615,
   616,   461,   618,    -1,    -1,    -1,   874,    -1,    45,    -1,
   470,    -1,    -1,    -1,   882,   475,    -1,   885,    -1,    -1,
    -1,    -1,    71,   891,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   571,    71,    84,   574,    -1,   576,   499,
    -1,   579,    -1,    -1,    -1,    94,    95,    84,   586,    98,
   588,   919,   590,   591,   592,    -1,    -1,    94,    95,    -1,
    -1,    98,   111,   523,    -1,   114,   115,   116,    -1,    -1,
    -1,    -1,    -1,    -1,   111,    -1,    -1,   114,   115,   116,
    -1,    -1,   950,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   637,    -1,   965,    -1,    -1,
    -1,    -1,    -1,    -1,   646,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   652,   653,   654,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   741,    14,   743,   744,    -1,
   746,    -1,   748,   749,    -1,    -1,    -1,   753,   754,    -1,
    -1,    -1,   758,    -1,   760,   761,    -1,    -1,   764,   765,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,   619,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   705,    -1,   707,
    -1,    -1,   710,    -1,   712,    -1,   714,   637,   716,   717,
   718,   719,    -1,    71,   722,    -1,   646,   725,    -1,    -1,
    -1,    -1,   730,    -1,    -1,    -1,    84,    -1,    -1,    -1,
    -1,    -1,     7,    -1,   664,    -1,    94,    95,    -1,    14,
    98,    16,    -1,    -1,    -1,    -1,    -1,    22,    23,    -1,
    -1,    -1,    -1,   111,    -1,    -1,   114,   115,   116,    -1,
    -1,    -1,    -1,    38,    14,   851,    41,    42,    43,   855,
    45,    -1,   858,   859,   786,    -1,    -1,   789,    -1,    -1,
   792,    -1,   868,    -1,    -1,    -1,    -1,    -1,    -1,   797,
   798,    -1,    -1,    -1,    -1,    45,    71,    72,    73,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,
    95,    71,   830,    98,    -1,    -1,   101,    -1,   836,    -1,
   838,    -1,   840,    -1,    84,    -1,   111,   112,   113,   114,
   115,   116,    45,   773,    94,    95,   932,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   786,    -1,    -1,   789,
    -1,   111,   792,    -1,   114,   115,   116,    -1,    71,    14,
   882,     7,    -1,   885,    -1,    -1,    -1,   807,    14,   891,
    16,    84,   968,    -1,    -1,   971,    22,    23,    -1,    -1,
    -1,    94,    95,    -1,    -1,    98,    -1,    -1,    -1,    -1,
    45,    -1,    38,    -1,    -1,    41,    42,    43,   111,    45,
    -1,   114,   115,   116,    -1,    14,    -1,    -1,    -1,    -1,
    -1,  1007,    -1,  1009,    -1,  1011,    71,    -1,    -1,    -1,
    -1,    -1,    -1,   863,    -1,    71,    72,    73,   950,    84,
    -1,    -1,    -1,    -1,   874,    -1,    45,    -1,    84,    94,
    95,    -1,   882,    98,    -1,   885,    -1,    14,    94,    95,
    -1,   891,    98,    -1,    -1,   101,   111,    -1,    -1,   114,
   115,   116,    71,    -1,    -1,   111,   112,   113,   114,   115,
   116,    -1,    -1,    -1,    -1,    84,    -1,    -1,    45,   919,
    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,
    -1,    -1,    -1,    -1,    -1,  1013,  1014,    -1,    -1,    -1,
  1018,  1019,   111,    -1,    71,   114,   115,   116,    -1,    -1,
   950,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   965,    -1,    94,    95,    -1,
  1048,    98,    -1,    -1,    -1,  1053,    -1,    -1,    -1,     3,
    -1,  1059,  1060,     7,   111,     9,    10,   114,   115,   116,
    14,    -1,    16,    -1,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    56,    29,    30,    31,    -1,    33,
    34,    -1,  1090,    -1,    38,    39,    -1,    41,    42,    43,
    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,
    -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    -1,    -1,    95,    96,    97,    -1,    71,    72,    73,
=======
   289,   290,   291,   257,   139,    90,   289,   339,   291,    23,
    92,    93,   502,   189,    49,    50,   195,   145,   323,    33,
    45,   146,    45,   148,     1,    36,    36,     2,     9,    10,
    11,    12,    45,    14,    15,    16,    17,    18,    19,    52,
    59,   444,   445,   446,   447,   127,     1,    66,     1,    17,
    17,    45,    45,    36,   139,     1,    46,    46,   961,   165,
    12,    45,    45,    74,    74,   193,   107,    90,    45,    45,
    45,    46,    86,   179,    45,    45,    45,    48,    36,    50,
    94,   384,   107,   386,   107,     1,   389,    45,    45,   195,
    45,   994,    45,    36,    45,     2,    16,    45,    18,    19,
    90,    90,    48,    46,   139,    45,    90,    91,    65,    77,
    77,   130,   131,   132,   133,   129,   110,   110,    38,    39,
    75,    41,    42,    43,   107,    45,   211,    97,   142,    45,
   107,   145,    90,   146,   110,    90,    45,   108,   107,    46,
   121,   122,   123,   124,   125,   324,   636,   637,   437,   107,
   107,   165,   107,   442,   437,   139,   107,   170,   171,   265,
   174,   289,   146,   452,    15,   179,   180,   249,   165,   144,
   107,   146,    17,    46,    90,    36,    36,    46,   432,   193,
    17,   195,   179,   308,    45,    45,   170,   201,   273,   109,
    45,   107,   317,   318,    48,   170,    45,    45,   195,    50,
    45,   176,   177,   178,   289,    46,    46,    46,    45,   498,
   185,   186,   187,   188,   468,   498,    65,    90,   324,    36,
   234,    90,   203,    45,   199,   200,   354,   211,    45,    90,
    90,    17,    77,    17,   248,    90,   250,   144,   222,   542,
    77,   544,    90,   546,   547,    36,   107,   107,    96,    90,
    90,    90,   107,    45,    45,   274,    37,    46,   107,   107,
   273,    45,    46,   170,   107,   755,   263,   302,   265,   176,
   177,   178,   107,    90,   109,   289,   290,   291,   185,   186,
   187,   188,   107,    36,    17,    36,    45,    46,    36,   273,
   107,    77,    45,    77,    45,   627,   628,   551,    90,    90,
   589,    90,   591,    36,   609,   289,   325,   326,   591,   437,
   324,   286,   601,    46,    15,   107,   107,   720,   721,   722,
   333,   449,   335,    46,    72,    17,   323,   324,   504,    46,
    36,    90,     2,    38,   353,    36,    41,    90,   352,    90,
   354,    17,   448,   428,    77,   320,     1,    45,   107,   333,
    45,   335,   437,   337,   107,    46,   107,   442,   333,    46,
   344,    31,    45,   617,    19,   493,    72,    90,   382,   107,
    46,   109,    46,    90,    45,    45,    46,    75,    46,   286,
    75,    51,    52,    38,    39,    77,    41,    42,    43,    59,
    45,    13,    90,   883,   884,    90,    66,    45,    96,    90,
    46,    77,    38,    90,    16,    41,    18,    19,   427,   107,
    45,    66,   107,   320,    45,   428,    90,   431,    45,    90,
    90,    91,    90,   437,    45,    96,    38,    39,    74,    41,
    42,    43,   737,    45,   448,   449,   107,    46,    38,    46,
    46,    41,    90,    46,   428,   459,    68,    69,   462,    71,
    15,   448,   107,   437,   109,    90,    78,    79,   442,   107,
   130,   131,   132,   133,    45,   135,    19,   480,   138,   139,
    48,    36,   107,    95,   144,    46,   146,   147,    36,   493,
    95,    90,   496,    90,    90,    38,    39,    90,    41,    42,
    43,    45,    45,    51,    14,   165,   480,   109,    46,    45,
   170,   171,    22,    23,   589,   175,   176,   177,   178,    72,
    73,   181,   597,    66,    45,   185,   186,   187,   188,    90,
    45,    46,    45,    46,   194,    45,   196,   197,   198,   199,
   200,   506,   507,    45,    46,    38,    90,    17,    41,    17,
   845,   211,    90,   832,    90,    65,    17,    35,   853,   832,
    17,    15,   222,   107,   107,    75,   109,    36,    36,    90,
    17,   107,    15,    66,    45,    90,    46,    90,    46,    89,
    90,    46,    36,    93,    46,    46,   107,   591,    90,    46,
     1,   716,   107,    36,   107,    45,     7,   107,   108,    46,
   110,   111,   112,    14,   676,   107,   571,    77,    46,    77,
   905,    22,    23,   273,   274,   589,    77,   621,   622,    90,
    77,   865,   609,   597,   919,    90,   286,    46,    90,   289,
    77,    69,   292,    71,    45,    45,   107,    48,    48,    50,
    50,    78,    79,    46,   648,   305,    46,    15,    15,   614,
    46,    46,    38,   728,    65,    41,    17,    43,    95,    45,
   320,    46,    46,    17,    75,   325,   326,   327,    36,    36,
    46,    90,    47,   333,   571,   335,   647,   337,    89,    90,
    66,    46,    93,    50,   344,    46,    97,    90,    46,    75,
    90,    45,    46,   353,    90,    90,   107,   108,    17,   110,
   111,   112,   706,   363,    90,    90,    90,    46,    46,    17,
    96,    72,    73,   717,    90,    17,    77,   614,    72,    73,
    14,   107,    46,    77,   107,    90,   109,    46,    22,    23,
   365,   718,   367,   368,   369,   370,   371,   372,    46,   374,
   375,  1020,   377,   378,    46,    17,    46,    46,    46,    46,
   737,    45,    90,    46,   728,   415,   416,   417,    77,    36,
    46,   421,   422,   423,    15,   425,    90,   427,   428,    77,
   430,    65,    46,    50,    46,    77,    38,   437,    46,    41,
   745,    75,   442,    90,   859,    36,   861,    45,   448,   793,
    90,    90,    90,    90,    46,    89,    90,    90,   802,    93,
    72,    73,    45,   463,    90,    77,    16,    46,    18,    19,
    46,    46,   472,   107,   108,    15,   110,   111,   112,    46,
   480,    50,    90,   483,    46,   900,   901,   902,    38,    39,
   795,    41,    42,    43,    46,    45,    36,    46,    90,    36,
    46,   806,    36,   107,    46,   109,   506,   507,   745,    35,
    49,    90,   856,    50,    90,    90,    66,    67,   845,    68,
    69,    38,    71,    90,    41,   940,   853,   871,    90,    78,
    79,   875,   876,    90,    68,    69,    70,    71,    90,   844,
    46,   885,   886,   887,    90,   859,    95,   861,    90,    66,
    46,    45,    38,   553,   554,    41,    50,   557,   795,   109,
   560,    36,    38,    90,   564,    41,   566,    38,   568,   806,
    41,   571,    46,   109,   918,   575,    72,    73,   905,    49,
   580,   925,   926,    46,    95,   890,   900,   901,   902,   589,
    66,    46,   919,    68,    69,    46,    71,   597,    68,    69,
    36,    71,    46,    78,    79,    46,    37,   844,    78,    79,
    56,    36,    38,    49,   614,    41,    28,   107,   499,   109,
    95,    72,    73,    36,    74,    95,   940,    46,    74,    75,
    46,    49,    68,    69,    70,    71,    38,   612,   613,    41,
    86,    87,    88,    89,    90,    91,    92,    69,    90,    71,
    69,    71,    71,   890,     2,    90,    78,    79,    78,    79,
    46,   661,   662,   663,    69,    70,    71,   642,   643,   974,
   645,   646,    50,    95,     1,    95,     4,    46,     6,    90,
     7,   681,    68,    69,    70,    71,   686,    14,    46,    50,
    46,   691,     4,     5,     6,    22,    23,    45,    46,    68,
    69,    70,    71,    51,    52,  1049,  1050,    77,  1052,  1053,
    77,   711,    68,    69,    70,    71,   716,  1061,    45,    11,
  1064,  1065,  1066,    49,    46,    46,    90,   608,   728,    46,
   611,    46,  1076,    46,    68,    69,    70,    71,    65,    36,
    46,    72,    90,    91,    49,   745,    36,    69,    75,    71,
    46,    46,    71,   634,    11,    68,    69,    70,    71,    46,
    71,    90,    89,    90,    46,    46,    93,     8,    48,    46,
    97,   771,   772,    68,    69,    70,    71,    48,    46,    46,
   107,   108,    90,   110,   111,   112,    68,    69,    70,    71,
    46,   139,    90,    46,    32,   795,   144,    46,   146,   147,
    68,    69,    70,    71,    46,    36,   806,   807,   808,   809,
    46,    46,    68,    69,    70,    71,    46,   165,    46,    46,
    90,    45,   170,   171,    50,    71,    11,   175,   176,   177,
   178,    50,    46,    46,    49,    46,    46,   185,   186,   187,
   188,    46,    51,    36,   844,    46,   194,     8,   196,   197,
   198,   199,   200,    68,    69,    70,    71,    48,    14,   859,
    19,   861,    46,   211,   864,   746,    22,    23,    46,    46,
    46,    46,    72,    71,   222,    45,    49,     2,     7,    38,
    39,    36,    41,    42,    43,    14,    49,    49,    45,    45,
   890,    49,    46,    22,    23,    68,    69,    70,    71,    49,
   900,   901,   902,    51,    51,    68,    69,    70,    71,    65,
    68,    69,    70,    71,    51,   110,    45,    36,    46,    75,
    45,    46,    45,    41,    48,   273,    51,    52,    36,    51,
    51,    46,    46,    89,    90,    46,    65,    93,   286,    37,
   940,   289,    49,    46,   292,    46,    75,    68,    69,    70,
    71,   107,   108,    48,   110,   111,   112,   305,    45,    45,
    89,    90,    46,    45,    93,    90,    91,    46,    97,    46,
    51,    46,   320,    51,    37,    45,    45,    45,   107,   108,
    46,   110,   111,   112,    46,   333,    46,   335,    49,   337,
    45,    50,    50,    50,    46,    46,   344,   997,   998,    46,
  1000,  1001,    51,    45,    50,    50,    50,    45,    14,    41,
    51,    51,    41,    50,   139,   363,    22,    23,    90,   144,
    45,   146,   147,    90,    50,    90,  1026,    50,   909,  1029,
  1030,  1031,   913,   914,    90,    46,    46,    51,    46,    45,
   165,   922,   923,   924,    46,   170,   171,    90,  1048,    46,
   175,   176,   177,   178,    46,    90,    90,    90,    41,    65,
   185,   186,   187,   188,    46,    46,    51,    46,    46,    75,
    90,   110,    46,   954,   110,    51,    51,    46,   959,   960,
   428,    51,   110,    89,    90,    51,   211,    93,   110,   437,
    51,    46,    56,    46,   442,     2,    46,   222,   110,    46,
   448,   107,   108,   110,   110,   111,   112,   110,    46,   110,
    74,    75,    76,    72,    51,   463,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    51,
    94,    51,   480,    45,    50,   483,    46,    46,    45,    46,
    46,    46,    46,    46,    46,    52,    46,   110,   273,    50,
    46,    50,    50,    46,    46,    46,    46,    46,   506,   507,
     0,   286,    50,    50,   289,    50,    50,   292,    50,     0,
    51,    51,    51,    51,    51,    51,    51,    51,  1059,  1060,
   305,  1062,  1063,    90,    91,    51,   380,   448,   504,  1070,
   573,   467,  1073,  1074,  1075,   320,   599,    -1,   530,   632,
   532,    -1,    -1,   535,  1085,    -1,    -1,    -1,   333,    -1,
   335,    -1,   337,    -1,    -1,    -1,   548,    -1,    -1,   344,
    -1,    -1,    -1,   571,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,
    -1,   589,    -1,    -1,    -1,    -1,    -1,    -1,   384,   597,
   386,    -1,    -1,   389,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   170,   171,    -1,   614,    -1,   175,   176,
   177,   178,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   428,   211,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   437,    -1,    -1,   222,    -1,   442,   650,    -1,
    -1,    -1,   654,   448,   656,    -1,   658,    -1,   660,    -1,
   662,   663,    -1,    -1,    -1,   667,    -1,    -1,   670,    -1,
    -1,    -1,    -1,   675,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   480,    -1,    -1,    -1,    -1,
    -1,    -1,     9,    -1,    -1,    -1,   273,    -1,   716,    -1,
    -1,    -1,    -1,    20,    21,    22,    23,    -1,    -1,   286,
   728,    -1,   289,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    -1,   527,    -1,    -1,   530,    -1,   532,   745,    45,   535,
    -1,    48,    -1,    -1,    -1,    -1,   542,    -1,   544,    -1,
   546,   547,   548,   320,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   333,    -1,   335,    -1,
   337,   763,    -1,    -1,    -1,    -1,    -1,   344,    -1,   771,
   772,    -1,   774,    -1,   776,    -1,   571,   795,    -1,    96,
    97,    98,    -1,   100,   101,   102,   103,   104,   806,   106,
   107,    -1,    -1,    -1,   589,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   597,    -1,    -1,    -1,   808,   809,    -1,     7,
    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,   614,
    -1,    -1,    -1,    -1,    22,    23,   844,    -1,    -1,    -1,
   415,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,
    -1,   859,    -1,   861,   650,    -1,    -1,    45,   654,    -1,
   656,   428,   658,     1,   660,   661,   662,   663,    -1,     7,
   437,   667,   864,    -1,   670,   442,    14,    65,    -1,   675,
    -1,    -1,   890,    -1,    22,    23,    -1,    75,    -1,    -1,
    -1,    -1,   900,   901,   902,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    -1,    -1,    93,    -1,    45,    -1,    97,
    48,    -1,    50,   480,    -1,    -1,    -1,    -1,    -1,   107,
   108,    -1,   110,   111,   112,    -1,    -1,    65,    -1,    -1,
    -1,   716,   940,    -1,    -1,    -1,    -1,    75,    -1,    -1,
    -1,    -1,    -1,   728,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    -1,    -1,    93,    -1,    -1,    -1,    97,
   745,    -1,    -1,    -1,    -1,    -1,   974,   763,    -1,   107,
   108,    -1,   110,   111,   112,   771,   772,    -1,   774,   554,
   776,   556,   557,    -1,   559,   560,    -1,   562,    -1,    -1,
   565,    -1,   567,   568,    14,   570,    -1,    -1,  1006,    -1,
    -1,    -1,    22,    23,   571,    -1,   998,    -1,    -1,  1001,
   795,   807,   808,   809,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   806,   589,    -1,    -1,    45,    -1,    -1,    -1,    -1,
   597,    -1,    -1,    -1,  1026,    -1,    -1,  1029,    -1,  1031,
    -1,    -1,    -1,    -1,    -1,    65,    -1,   614,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    75,  1048,    -1,    -1,   844,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   864,    89,
    90,    -1,    -1,    93,   859,    -1,   861,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,
   110,   111,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   890,   681,    -1,   683,   684,
    -1,   686,    -1,   688,   689,   900,   901,   902,   693,   694,
    -1,    -1,    -1,   698,    -1,   700,   701,    -1,    -1,   704,
   705,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   716,
    -1,    -1,    -1,    -1,    -1,   940,    -1,    -1,     3,    -1,
    -1,   728,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
    -1,    16,    -1,    18,    19,    20,    21,    -1,   745,    24,
    25,    26,    27,    -1,    29,    30,    31,    -1,    33,    34,
    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
    45,   997,   998,    48,  1000,  1001,    -1,    52,   783,    14,
    -1,    -1,   787,    -1,    -1,   790,   791,    22,    23,    -1,
    65,    66,    67,    -1,    -1,   800,    -1,    -1,   795,    -1,
  1026,    -1,    -1,  1029,  1030,  1031,    -1,    -1,    -1,   806,
    45,    -1,    -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,
    -1,    96,  1048,    98,    99,   100,   101,   102,    -1,    -1,
    65,    -1,   107,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    75,    -1,    -1,    -1,    -1,    -1,    -1,   844,    -1,    -1,
    -1,    -1,   857,    -1,    89,    90,    -1,    -1,    93,    -1,
    -1,    -1,   859,    -1,   861,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   107,   108,    -1,   110,   111,   112,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   893,    -1,
    -1,   896,    -1,   890,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   900,   901,   902,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,     7,    -1,
     9,    10,    -1,    -1,   929,    -1,   931,    16,   933,    18,
    19,    20,    21,    -1,    -1,    24,    25,    26,    27,    -1,
    29,    30,    31,   940,    33,    34,    -1,    -1,    -1,    38,
    39,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    48,
    -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    14,    -1,    -1,    65,    66,    67,    -1,
    -1,    22,    23,    -1,    -1,    -1,    75,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    90,    -1,    -1,    45,    -1,    -1,    96,    97,    98,
    99,   100,   101,   102,    -1,     3,    -1,    -1,   107,     7,
   109,     9,    10,    -1,    65,    -1,    -1,    -1,    16,    -1,
    18,    19,    20,    21,    75,    -1,    24,    25,    26,    27,
    -1,    29,    30,    31,    -1,    33,    34,    -1,    89,    90,
    38,    39,    93,    41,    42,    43,    -1,    45,    -1,    -1,
    48,    -1,    -1,    -1,    52,    -1,   107,   108,    -1,   110,
   111,   112,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,
    98,    99,   100,   101,   102,    -1,     3,    -1,    -1,   107,
     7,   109,     9,    10,    -1,    -1,    -1,    -1,    -1,    16,
    -1,    18,    19,    20,    21,    -1,    -1,    24,    25,    26,
    27,    -1,    29,    30,    31,    -1,    33,    34,    -1,    -1,
    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,     7,
    -1,    48,    -1,    -1,    -1,    52,    14,    -1,    16,    -1,
    18,    19,    -1,    -1,    22,    23,    -1,    -1,    65,    66,
    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,
    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
    -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    96,
    -1,    98,    99,   100,   101,   102,    -1,    65,    66,    67,
   107,    -1,   109,    -1,    -1,    -1,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,
    -1,    89,    90,    -1,    -1,    93,    14,    -1,    96,    97,
    -1,    19,    -1,    -1,    22,    23,    -1,    -1,    -1,   107,
   108,   109,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,
    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,
    -1,    89,    90,    -1,    14,    93,    16,    -1,    -1,    97,
    -1,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,   107,
   108,   109,   110,   111,   112,    -1,    -1,    -1,    38,    -1,
    -1,    41,    42,    43,    -1,    45,    -1,    -1,    48,    -1,
    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    89,
    90,    -1,    14,    93,    16,    -1,    -1,    97,    -1,    -1,
    22,    23,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
   110,   111,   112,    -1,    -1,    -1,    38,    -1,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    48,    -1,    50,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     7,    -1,    -1,    -1,    89,    90,    -1,
    14,    93,    16,    -1,    -1,    97,    -1,    -1,    22,    23,
    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
   112,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,    -1,    -1,    48,    -1,    50,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    65,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     7,    -1,    -1,    -1,    89,    90,    -1,    14,    93,
    16,    -1,    -1,    97,    -1,    -1,    22,    23,    -1,    -1,
    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,    -1,
    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
     7,    -1,    48,    -1,    50,    -1,    -1,    14,    -1,    16,
    -1,    -1,    -1,    -1,    -1,    22,    23,    -1,    -1,    65,
    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,     7,
    -1,    -1,    -1,    89,    90,    -1,    14,    93,    16,    -1,
    -1,    97,    -1,    -1,    22,    23,    -1,    -1,    65,    66,
    67,   107,   108,   109,   110,   111,   112,    -1,    75,    -1,
    38,    -1,    -1,    41,    42,    43,    -1,    45,     7,    -1,
    -1,    -1,    89,    90,    -1,    14,    93,    16,    -1,    96,
    97,    -1,    -1,    22,    23,    -1,    -1,    65,    66,    67,
   107,   108,   109,   110,   111,   112,    -1,    75,    -1,    38,
    -1,    -1,    41,    42,    43,    -1,    45,     7,    -1,    -1,
    -1,    89,    90,    -1,    14,    93,    16,    -1,    96,    97,
    -1,    -1,    22,    23,    -1,    -1,    65,    66,    67,   107,
   108,   109,   110,   111,   112,    -1,    75,    -1,    38,    -1,
    -1,    41,    42,    43,    -1,    45,     7,    -1,    -1,    -1,
    89,    90,    -1,    14,    93,    16,    -1,    -1,    97,    -1,
    -1,    22,    23,    -1,    -1,    65,    66,    67,   107,   108,
   109,   110,   111,   112,    -1,    75,    -1,    38,    -1,    -1,
    41,    42,    43,    -1,    45,     7,    -1,    -1,    -1,    89,
    90,    -1,    14,    93,    16,    -1,    -1,    97,    -1,    -1,
    22,    23,    -1,    -1,    65,    66,    67,   107,   108,   109,
   110,   111,   112,    -1,    75,    -1,    38,    -1,    -1,    41,
    42,    43,    -1,    45,     7,    -1,    -1,    -1,    89,    90,
    -1,    14,    93,    16,    -1,    -1,    97,    -1,    -1,    22,
    23,    -1,    -1,    65,    66,    67,   107,   108,   109,   110,
   111,   112,    -1,    75,    -1,    38,    -1,    -1,    41,    42,
    43,    -1,    45,     7,    -1,    -1,    -1,    89,    90,    -1,
    14,    93,    16,    -1,    -1,    97,    -1,    -1,    22,    23,
    -1,    -1,    65,    66,    67,   107,   108,   109,   110,   111,
   112,    -1,    75,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,     7,    -1,    -1,    -1,    89,    90,    -1,    14,
    93,    16,    -1,    -1,    97,    -1,    -1,    22,    23,    -1,
    -1,    65,    66,    67,   107,   108,   109,   110,   111,   112,
    -1,    75,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
    45,     7,    -1,    -1,    -1,    89,    90,    -1,    14,    93,
    16,    -1,    -1,    97,    -1,    -1,    22,    23,    -1,    -1,
    65,    66,    67,   107,   108,   109,   110,   111,   112,    -1,
    75,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
     7,    -1,    -1,    -1,    89,    90,    -1,    14,    93,    16,
    -1,    -1,    97,    -1,    -1,    22,    23,    -1,    -1,    65,
    66,    67,   107,   108,   109,   110,   111,   112,    -1,    75,
    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,     7,
    -1,    -1,    -1,    89,    90,    -1,    14,    93,    16,    -1,
    -1,    97,    -1,    -1,    22,    23,    -1,    -1,    65,    66,
    67,   107,   108,   109,   110,   111,   112,    -1,    75,    -1,
    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
    -1,    -1,    89,    90,    14,    -1,    93,    -1,    -1,    -1,
    97,    -1,    22,    23,    -1,    -1,    -1,    65,    66,    67,
   107,   108,   109,   110,   111,   112,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    45,     7,    -1,    -1,    -1,
    -1,    89,    90,    14,    -1,    93,    -1,    -1,    19,    97,
    -1,    22,    23,    -1,    -1,    65,    -1,    -1,    -1,   107,
   108,   109,   110,   111,   112,    75,    -1,    38,    39,    -1,
    41,    42,    43,    -1,    45,     7,    -1,    -1,    -1,    89,
    90,    -1,    14,    93,    -1,    -1,    -1,    19,    -1,    -1,
    22,    23,    -1,    -1,    65,    66,    -1,   107,   108,    -1,
   110,   111,   112,    -1,    75,    -1,    38,    39,    -1,    41,
    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    89,    90,
    -1,    -1,    93,    -1,    -1,    -1,    97,    -1,    -1,    -1,
    -1,     7,    -1,    65,    66,    -1,   107,   108,    14,   110,
   111,   112,    -1,    75,    -1,    -1,    22,    23,    -1,    -1,
    -1,    -1,    -1,    -1,    14,    -1,    -1,    89,    90,    -1,
    -1,    93,    22,    23,    -1,    97,    -1,    -1,    -1,    45,
    -1,    -1,    48,    -1,    50,   107,   108,    -1,   110,   111,
   112,     7,    -1,    -1,    -1,    45,    -1,    -1,    14,    65,
    -1,    -1,    -1,    -1,    14,    -1,    22,    23,    -1,    75,
    -1,    -1,    22,    23,    -1,    65,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    75,    -1,    93,    -1,    45,
    -1,    97,    48,    -1,    50,    45,    -1,    -1,    -1,    89,
    90,   107,   108,    93,   110,   111,   112,    -1,    -1,    65,
    -1,    -1,    -1,    -1,    -1,    65,    -1,   107,   108,    75,
   110,   111,   112,    -1,    -1,    75,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    -1,    14,    93,    -1,    89,
    90,    97,    -1,    93,    22,    23,    -1,    -1,    -1,    -1,
    -1,   107,   108,    -1,   110,   111,   112,   107,   108,    -1,
   110,   111,   112,    14,    -1,    -1,    -1,    45,    -1,    -1,
    14,    22,    23,    -1,    -1,    -1,    14,    -1,    22,    23,
    -1,    -1,    -1,    -1,    22,    23,    -1,    65,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    75,    -1,    -1,
    -1,    45,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,
    -1,    89,    90,    -1,    65,    93,    -1,    -1,    -1,    -1,
    -1,    65,    -1,    -1,    75,    -1,    -1,    65,    -1,   107,
   108,    75,   110,   111,   112,    -1,    -1,    75,    89,    90,
    -1,    -1,    93,    -1,    -1,    89,    90,    -1,    -1,    93,
    -1,    89,    90,    -1,    -1,    93,   107,   108,    -1,   110,
   111,   112,    -1,   107,   108,    -1,   110,   111,   112,   107,
   108,    -1,   110,   111,   112
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 149 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 179 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 180 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 186 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 187 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 189 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 200 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 201 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 209 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 210 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 212 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 215 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 217 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 221 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 222 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 227 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 230 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 237 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 245 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								yyvsp[0].tnode->SetChild1(struct_tree);
								struct_tree=yyvsp[0].tnode;
																
								/*CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1($3);
								$$=$1;*/
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 357 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 358 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 359 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 360 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 361 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 368 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 369 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 370 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 371 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 377 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 378 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 379 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 380 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 382 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 385 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 388 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 394 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 398 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 404 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 412 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 423 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 426 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 64:
#line 439 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 65:
#line 444 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 66:
#line 448 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 67:
#line 454 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 68:
#line 455 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 69:
#line 461 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 70:
#line 466 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 71:
#line 471 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 72:
#line 480 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 73:
#line 488 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 74:
#line 499 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 75:
#line 512 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 76:
#line 513 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 77:
#line 514 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 519 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 79:
#line 523 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 80:
#line 527 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 81:
#line 531 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 82:
#line 535 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 539 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 545 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 85:
#line 547 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 86:
#line 550 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 87:
#line 555 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 88:
#line 566 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 89:
#line 567 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 90:
#line 568 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 91:
#line 571 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 92:
#line 572 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 93:
#line 573 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 94:
#line 581 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 95:
#line 585 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 96:
#line 589 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 594 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 600 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 605 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 100:
#line 612 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 101:
#line 618 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 102:
#line 629 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 103:
#line 630 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 104:
#line 631 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 105:
#line 636 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 106:
#line 643 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 107:
#line 646 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 108:
#line 647 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 656 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 110:
#line 659 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 111:
#line 660 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 112:
#line 661 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 662 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 663 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 115:
#line 664 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 116:
#line 665 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 117:
#line 669 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 118:
#line 671 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 119:
#line 673 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 120:
#line 675 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 121:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 122:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 125:
#line 685 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 687 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 689 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 128:
#line 691 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 129:
#line 693 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 697 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 131:
#line 698 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 132:
#line 701 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 133:
#line 702 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 134:
#line 703 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 135:
#line 704 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 136:
#line 705 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 137:
#line 708 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 138:
#line 712 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 139:
#line 713 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 140:
#line 718 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, INTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 141:
#line 723 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, UINTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 142:
#line 728 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,FLOATPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 143:
#line 733 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode,CHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 144:
#line 738 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-5].tnode, UCHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 145:
#line 743 "msv.y"
{ 
	      yyval.tnode=yyvsp[-1].tnode
	   ;
    break;}
case 146:
#line 749 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 147:
#line 750 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 148:
#line 751 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 149:
#line 757 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 150:
#line 758 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 151:
#line 760 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 152:
#line 762 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 153:
#line 764 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 154:
#line 766 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 155:
#line 767 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 156:
#line 773 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 157:
#line 774 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 158:
#line 775 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 159:
#line 776 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 160:
#line 777 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 161:
#line 778 "msv.y"
{ yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 162:
#line 782 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 163:
#line 786 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 164:
#line 787 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 165:
#line 791 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 166:
#line 792 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 167:
#line 796 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 168:
#line 797 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 169:
#line 798 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 170:
#line 799 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 171:
#line 800 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 801 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 802 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 803 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 804 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 805 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 806 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 807 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 808 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 180:
#line 809 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 181:
#line 810 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 182:
#line 811 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 183:
#line 812 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 184:
#line 813 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 185:
#line 816 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 186:
#line 817 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 187:
#line 818 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 188:
#line 819 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 189:
#line 820 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 190:
#line 821 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 191:
#line 822 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 192:
#line 823 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 193:
#line 824 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 194:
#line 825 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 195:
#line 830 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 196:
#line 831 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 197:
#line 832 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 198:
#line 833 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 199:
#line 840 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 200:
#line 844 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 201:
#line 852 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 202:
#line 864 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 203:
#line 877 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 889 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 205:
#line 893 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 206:
#line 901 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 207:
#line 904 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 208:
#line 905 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 209:
#line 910 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 210:
#line 914 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 211:
#line 918 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 212:
#line 923 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 213:
#line 926 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 214:
#line 935 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 215:
#line 936 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 216:
#line 937 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 217:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 218:
#line 941 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 219:
#line 944 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 220:
#line 945 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 221:
#line 948 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 222:
#line 949 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 223:
#line 950 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 224:
#line 951 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 225:
#line 952 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 226:
#line 953 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 227:
#line 956 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 228:
#line 957 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 229:
#line 958 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 230:
#line 959 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 231:
#line 960 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 232:
#line 961 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 233:
#line 963 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 234:
#line 964 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 235:
#line 966 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 236:
#line 967 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 237:
#line 969 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 238:
#line 980 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 239:
#line 981 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 240:
#line 982 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 241:
#line 983 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 242:
#line 984 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 243:
#line 985 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 244:
#line 993 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 245:
#line 994 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 246:
#line 998 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 247:
#line 999 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 248:
#line 1006 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 249:
#line 1010 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 250:
#line 1015 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 251:
#line 1021 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 252:
#line 1027 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 253:
#line 1033 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 254:
#line 1043 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 255:
#line 1049 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 256:
#line 1055 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 257:
#line 1061 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 258:
#line 1069 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 259:
#line 1073 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 260:
#line 1077 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 261:
#line 1083 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 262:
#line 1087 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 263:
#line 1091 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 264:
#line 1097 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 265:
#line 1103 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 266:
#line 1110 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 267:
#line 1116 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 268:
#line 1122 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 269:
#line 1126 "msv.y"
{
		  CSyntaxNode* pChild00=new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
		  CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, pChild00, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 270:
#line 1134 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].cString,yyvsp[-2].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 271:
#line 1139 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 272:
#line 1143 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 273:
#line 1147 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 274:
#line 1151 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 275:
#line 1157 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 276:
#line 1163 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 277:
#line 1169 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 278:
#line 1176 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 279:
#line 1184 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 280:
#line 1190 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 281:
#line 1205 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].cString,yyvsp[-2].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;

		;
    break;}
<<<<<<< HEAD
case 297:
#line 1228 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 298:
#line 1233 "msv.y"
=======
case 282:
#line 1210 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 283:
#line 1215 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 299:
#line 1241 "msv.y"
=======
case 284:
#line 1223 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 300:
#line 1248 "msv.y"
=======
case 285:
#line 1230 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 301:
#line 1254 "msv.y"
=======
case 286:
#line 1236 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 302:
#line 1260 "msv.y"
=======
case 287:
#line 1242 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	      yyval.tnode=NULL;
		;
    break;}
<<<<<<< HEAD
case 303:
#line 1263 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 304:
#line 1273 "msv.y"
=======
case 288:
#line 1245 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 289:
#line 1255 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 305:
#line 1284 "msv.y"
=======
case 290:
#line 1266 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
<<<<<<< HEAD
case 306:
#line 1287 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 307:
#line 1288 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 308:
#line 1293 "msv.y"
=======
case 291:
#line 1270 "msv.y"
{
	      yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].cString, NULL, STRUCTTYPE);
	   ;
    break;}
case 292:
#line 1273 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 293:
#line 1274 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 294:
#line 1279 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 309:
#line 1306 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 310:
#line 1307 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1315 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 312:
#line 1317 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 313:
#line 1324 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 314:
#line 1326 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 315:
#line 1332 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 316:
#line 1333 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 317:
#line 1337 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 318:
#line 1342 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 319:
#line 1347 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 320:
#line 1352 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 321:
#line 1359 "msv.y"
=======
case 295:
#line 1292 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 296:
#line 1293 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 297:
#line 1301 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 298:
#line 1303 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 299:
#line 1310 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 300:
#line 1312 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 301:
#line 1318 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 302:
#line 1319 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 303:
#line 1323 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 304:
#line 1328 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 305:
#line 1333 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 306:
#line 1338 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 307:
#line 1345 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
<<<<<<< HEAD
case 322:
#line 1362 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 323:
#line 1363 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 324:
#line 1369 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 325:
#line 1371 "msv.y"
=======
case 308:
#line 1348 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 309:
#line 1349 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 310:
#line 1355 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1357 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 326:
#line 1391 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 327:
#line 1392 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 328:
#line 1394 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 329:
#line 1396 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 330:
#line 1397 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 331:
#line 1403 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 332:
#line 1410 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 333:
#line 1418 "msv.y"
=======
case 313:
#line 1377 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 314:
#line 1379 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 315:
#line 1381 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 316:
#line 1382 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 317:
#line 1388 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 318:
#line 1395 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 319:
#line 1403 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 334:
#line 1426 "msv.y"
=======
case 320:
#line 1411 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
<<<<<<< HEAD
case 335:
#line 1430 "msv.y"
=======
case 321:
#line 1415 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
<<<<<<< HEAD
case 336:
#line 1434 "msv.y"
=======
case 322:
#line 1419 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	      yyval.tnode=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 337:
#line 1440 "msv.y"
=======
case 323:
#line 1425 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
<<<<<<< HEAD
case 338:
#line 1444 "msv.y"
=======
case 324:
#line 1429 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	      yyval.tnode=NULL;
	  ;
    break;}
<<<<<<< HEAD
case 339:
#line 1450 "msv.y"
=======
case 325:
#line 1435 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
<<<<<<< HEAD
case 340:
#line 1454 "msv.y"
=======
case 326:
#line 1439 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	      yyval.tnode=NULL;
	  ;
    break;}
<<<<<<< HEAD
case 341:
#line 1461 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 342:
#line 1465 "msv.y"
=======
case 327:
#line 1446 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 328:
#line 1450 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 343:
#line 1469 "msv.y"
=======
case 329:
#line 1454 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 344:
#line 1476 "msv.y"
=======
case 330:
#line 1461 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
<<<<<<< HEAD
case 345:
#line 1480 "msv.y"
=======
case 331:
#line 1465 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
<<<<<<< HEAD
case 346:
#line 1483 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 347:
#line 1488 "msv.y"
=======
case 332:
#line 1468 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 333:
#line 1473 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
<<<<<<< HEAD
case 348:
#line 1497 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 349:
#line 1498 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 350:
#line 1504 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 351:
#line 1505 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 352:
#line 1509 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 353:
#line 1510 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 354:
#line 1515 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 355:
#line 1516 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 356:
#line 1517 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 357:
#line 1518 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 358:
#line 1519 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1522 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 360:
#line 1523 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 361:
#line 1524 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 362:
#line 1530 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 363:
#line 1531 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 364:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 365:
#line 1534 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 366:
#line 1535 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1536 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1538 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1539 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1540 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1541 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1543 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1544 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1545 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1546 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1547 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1548 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1549 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 379:
#line 1553 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 380:
#line 1554 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 381:
#line 1555 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 382:
#line 1556 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 383:
#line 1557 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 384:
#line 1558 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 385:
#line 1559 "msv.y"
=======
case 334:
#line 1482 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 335:
#line 1483 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 336:
#line 1489 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 337:
#line 1490 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 338:
#line 1494 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 339:
#line 1495 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 340:
#line 1500 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 341:
#line 1501 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 342:
#line 1502 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 343:
#line 1503 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 344:
#line 1504 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 345:
#line 1507 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 346:
#line 1508 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 347:
#line 1509 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 348:
#line 1515 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 349:
#line 1516 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 350:
#line 1517 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 351:
#line 1519 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 352:
#line 1520 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 353:
#line 1521 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 354:
#line 1523 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 355:
#line 1524 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 356:
#line 1525 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 357:
#line 1526 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 358:
#line 1528 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 359:
#line 1529 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 360:
#line 1530 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 361:
#line 1531 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 362:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 363:
#line 1533 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 364:
#line 1534 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 365:
#line 1538 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 366:
#line 1539 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1540 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1541 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1542 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1543 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 371:
#line 1544 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
<<<<<<< HEAD
#line 1561 "msv.y"
=======
#line 1546 "msv.y"
>>>>>>> 548d801fb84f74412b85de9ab87f82f187558f96
