
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	RETURN	262
#define	IF	263
#define	ELSE	264
#define	EMPTY	265
#define	AWAIT	266
#define	PROJECTION	267
#define	PBEGIN	268
#define	PEND	269
#define	POINTERNULL	270
#define	ARRAY	271
#define	STRUCT	272
#define	DOT	273
#define	UNION	274
#define	FILEDECLARATION	275
#define	MORE	276
#define	DEFINE	277
#define	MY_TRUE	278
#define	MY_FALSE	279
#define	EXIST	280
#define	FRAME	281
#define	FOR	282
#define	WHILE	283
#define	DO	284
#define	TRUE	285
#define	FALSE	286
#define	REPEAT	287
#define	UNTIL	288
#define	DISPLAY	289
#define	SKIP	290
#define	THEN	291
#define	COMMA	292
#define	COLON	293
#define	INTDECLARATION	294
#define	STRDECLARATION	295
#define	POINTERDECLARATION	296
#define	CHARDECLARATION	297
#define	VOIDDECLARATION	298
#define	FLOATDECLARATION	299
#define	LISTDECLARATION	300
#define	OPEN_PAR	301
#define	CLOSE_PAR	302
#define	TIMES	303
#define	OPEN_BPAR	304
#define	CLOSE_BPAR	305
#define	OPEN_MPAR	306
#define	CLOSE_MPAR	307
#define	FUNCTION	308
#define	OVER	309
#define	CYLINDER	310
#define	OVEREP	311
#define	INTER_OR	312
#define	NON_DETERMINED	313
#define	SEND	314
#define	RECEIVE	315
#define	PROCESS	316
#define	CHANNEL	317
#define	PUT	318
#define	GET	319
#define	ERROR_TOKEN	320
#define	STRFUNCHEAD	321
#define	STRFUNCTAIL	322
#define	STRFUNCCAT	323
#define	STRFUNCCMP	324
#define	STRFUNCCPY	325
#define	STRFUNCLEN	326
#define	EXTERN	327
#define	UNSIGNED	328
#define	SIGNED	329
#define	CHOP	330
#define	IMPLY	331
#define	IFF	332
#define	PROPIMPLY	333
#define	OR	334
#define	PARALLEL	335
#define	AND	336
#define	ASS_P	337
#define	ASS_N	338
#define	CON	339
#define	ADDRESS	340
#define	NE	341
#define	EQ	342
#define	GE	343
#define	LE	344
#define	GT	345
#define	LT	346
#define	LST	347
#define	RST	348
#define	ADD	349
#define	SUB	350
#define	MUL	351
#define	DIV	352
#define	MOD	353
#define	BNE	354
#define	CHOPSTAR	355
#define	NEXT	356
#define	NEGATION	357
#define	LENGTH	358
#define	REQUEST	359
#define	FINAL	360
#define	KEEP	361
#define	ALWAYS	362
#define	HALT	363
#define	W_NEXT	364
#define	PREFIX	365
#define	SOMETIMES	366
#define	ID	367
#define	STRLITERAL	368
#define	STRUCT_TYPE	369
#define	INTLITERAL	370
#define	FLOATLITERAL	371
#define	CHARLITERAL	372

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1179
#define	YYFLAG		-32768
#define	YYNTBASE	118

#define YYTRANSLATE(x) ((unsigned)(x) <= 372 ? yytranslate[x] : 193)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   114,   116,   118,   120,
   122,   127,   132,   137,   142,   151,   153,   155,   157,   162,
   164,   166,   168,   170,   175,   179,   187,   197,   204,   210,
   220,   222,   224,   226,   234,   238,   240,   244,   246,   247,
   256,   261,   267,   272,   277,   280,   283,   286,   289,   291,
   294,   297,   301,   305,   309,   313,   321,   330,   342,   356,
   358,   360,   362,   364,   366,   368,   371,   378,   383,   389,
   395,   404,   413,   416,   419,   422,   423,   430,   438,   439,
   442,   446,   448,   450,   452,   454,   458,   461,   463,   475,
   488,   500,   512,   530,   549,   567,   586,   606,   625,   643,
   662,   680,   682,   684,   686,   688,   690,   701,   705,   707,
   712,   718,   730,   743,   755,   767,   780,   784,   788,   791,
   792,   795,   798,   801,   809,   816,   821,   825,   827,   831,
   835,   841,   843,   847,   850,   851,   853,   857,   859,   862,
   865,   867,   869,   871,   873,   875,   877,   881,   883,   885,
   887,   889,   891,   893,   895,   897,   899,   901,   903,   905,
   907,   909,   913,   915,   917,   921,   926,   931,   936,   941,
   946,   951,   955,   959,   963,   964,   967,   970,   973,   976,
   979,   983,   988,   993,   998,  1004,  1010,  1016,  1022,  1028,
  1035,  1041,  1047,  1054,  1060,  1067,  1075,  1082,  1089,  1097,
  1104,  1111,  1117,  1125,  1132,  1134,  1136,  1139,  1143,  1147,
  1151,  1155,  1157,  1159,  1161,  1165,  1169,  1173,  1177,  1181,
  1185,  1189,  1193,  1197,  1201,  1203,  1205,  1207,  1209,  1211,
  1213,  1216,  1219,  1221,  1223,  1227,  1230,  1234,  1239,  1245,
  1250,  1254,  1259,  1265,  1270,  1273,  1277,  1282,  1285,  1289,
  1294,  1299,  1305,  1313,  1318,  1322,  1328,  1337,  1338,  1343,
  1347,  1352,  1357,  1363,  1369,  1375,  1381,  1388,  1398,  1399,
  1407,  1417,  1426,  1432,  1437,  1440,  1443,  1449,  1451,  1452,
  1455,  1459,  1466,  1467,  1470,  1474,  1477,  1481,  1484,  1486,
  1490,  1492,  1494,  1496,  1498,  1502,  1503,  1506,  1507,  1511,
  1513,  1516,  1520,  1524,  1528,  1532,  1538,  1548,  1550,  1552,
  1553,  1555,  1556,  1558,  1559,  1567,  1575,  1581,  1584,  1586,
  1587,  1593,  1596,  1597,  1602,  1608,  1609,  1613,  1618,  1624,
  1629,  1635,  1640,  1641,  1645,  1649,  1654,  1659,  1664,  1669,
  1674,  1679,  1684,  1689,  1696,  1701,  1706,  1711,  1718,  1722,
  1726,  1731,  1735,  1736,  1740,  1744,  1748,  1752,  1755
};

static const short yyrhs[] = {   119,
   122,     0,    13,   120,    14,     0,     0,   120,    81,   120,
     0,   120,    79,   120,     0,   120,    77,   120,     0,   120,
    78,   120,     0,   120,    75,   120,     0,   107,   120,     0,
   106,   120,     0,   111,   120,     0,   109,   120,     0,   101,
   120,     0,    35,     0,    23,     0,    24,     0,   103,   143,
     0,    10,     0,    21,     0,   108,   120,     0,   105,   120,
     0,   102,   120,     0,    49,   120,   121,    50,    12,    49,
   120,    50,     0,   112,     0,    22,   112,    38,   158,     0,
   120,   100,     0,    46,   120,    47,     0,    37,   120,   121,
     0,     0,   122,    81,   122,     0,   122,    79,   122,     0,
   122,    75,   122,     0,   134,     0,   129,     0,   182,     0,
     7,   138,     0,   185,     0,   176,     0,   177,     0,   178,
     0,   101,    46,   122,    47,     0,   106,    46,   122,    47,
     0,   107,    46,   122,    47,     0,    11,    46,   157,    47,
     0,    32,    49,   122,    50,    33,    46,   157,    47,     0,
    35,     0,    10,     0,    21,     0,   103,    46,   143,    47,
     0,   189,     0,   187,     0,    30,     0,    31,     0,   105,
    46,   122,    47,     0,   122,    80,   122,     0,    46,   175,
    47,    76,    51,   122,    52,     0,    26,    46,   168,   173,
    47,    81,    46,   122,    47,     0,    49,   122,   174,    50,
    12,   166,     0,    49,   122,    50,    12,   166,     0,    22,
   112,    46,   162,    47,    82,    49,   124,    50,     0,   127,
     0,   125,     0,   126,     0,    25,   168,   163,    38,    49,
   122,    50,     0,    46,   122,    47,     0,   129,     0,   129,
    81,   123,     0,   122,     0,     0,    53,   112,    46,   162,
    47,    49,   122,    50,     0,   112,    46,   164,    47,     0,
    72,   112,    46,   164,    47,     0,   140,    46,   164,    47,
     0,   128,    49,   123,    50,     0,    17,   112,     0,    19,
   112,     0,    74,   130,     0,    73,   130,     0,   130,     0,
   131,   132,     0,   114,   132,     0,    17,   112,   132,     0,
    19,   112,   132,     0,    17,   114,   132,     0,    19,   114,
   132,     0,    46,    96,   168,    47,    46,   162,    47,     0,
    46,    96,    96,   168,    47,    46,   162,    47,     0,    46,
    96,   112,    51,   143,   141,    52,    47,    46,   162,    47,
     0,    46,    96,   112,    51,   143,   141,    52,    47,    46,
   162,    47,    82,   150,     0,    39,     0,    44,     0,    42,
     0,    40,     0,    43,     0,    20,     0,   168,   133,     0,
   112,    51,   143,   141,    52,   133,     0,   168,    82,   138,
   133,     0,   112,    16,    82,   150,   133,     0,   112,    16,
    82,   169,   133,     0,   112,    51,   143,   141,    52,    82,
   150,   133,     0,   112,    51,   143,   141,    52,    82,   169,
   133,     0,    96,   132,     0,    37,   132,     0,    37,     1,
     0,     0,   112,    51,   143,   141,    52,     0,     0,    37,
   112,    51,   143,   141,    52,     0,     0,     0,    37,     1,
     0,   135,   137,   138,     0,   168,     0,   191,     0,   140,
     0,   142,     0,    46,   135,    47,     0,   101,   135,     0,
   136,     0,    46,    46,    42,    96,    47,   115,    47,    51,
   143,   141,    52,     0,    46,    46,    73,    42,    96,    47,
   115,    47,    51,   143,   141,    52,     0,    46,    46,    39,
    96,    47,   115,    47,    51,   143,   141,    52,     0,    46,
    46,    44,    96,    47,   115,    47,    51,   143,   141,    52,
     0,    46,    46,    42,    96,    47,    46,    46,    42,    96,
    47,   115,    47,    47,    51,   143,   141,    52,     0,    46,
    46,    42,    96,    47,    46,    46,    73,    42,    96,    47,
   115,    47,    47,    51,   143,   141,    52,     0,    46,    46,
    42,    96,    47,    46,    46,    39,    96,    47,   115,    47,
    47,    51,   143,   141,    52,     0,    46,    46,    73,    42,
    96,    47,    46,    46,    42,    96,    47,   115,    47,    47,
    51,   143,   141,    52,     0,    46,    46,    73,    42,    96,
    47,    46,    46,    73,    42,    96,    47,   115,    47,    47,
    51,   143,   141,    52,     0,    46,    46,    73,    42,    96,
    47,    46,    46,    39,    96,    47,   115,    47,    47,    51,
   143,   141,    52,     0,    46,    46,    39,    96,    47,    46,
    46,    42,    96,    47,   115,    47,    47,    51,   143,   141,
    52,     0,    46,    46,    39,    96,    47,    46,    46,    73,
    42,    96,    47,   115,    47,    47,    51,   143,   141,    52,
     0,    46,    46,    39,    96,    47,    46,    46,    39,    96,
    47,   115,    47,    47,    51,   143,   141,    52,     0,    82,
     0,    83,     0,   143,     0,   150,     0,   169,     0,    46,
   169,    47,    46,   131,    47,    46,   162,    47,   126,     0,
    46,   138,    47,     0,   139,     0,    96,    46,   136,    47,
     0,   112,    51,   143,   141,    52,     0,    46,    46,    39,
    96,    47,   112,    47,    51,   143,   141,    52,     0,    46,
    46,    73,    39,    96,    47,   112,    47,    51,   143,   141,
    52,     0,    46,    46,    44,    96,    47,   112,    47,    51,
   143,   141,    52,     0,    46,    46,    42,    96,    47,   112,
    47,    51,   143,   141,    52,     0,    46,    46,    73,    42,
    96,    47,   112,    47,    51,   143,   141,    52,     0,    46,
   140,    47,     0,    37,   143,   141,     0,    37,     1,     0,
     0,    96,   168,     0,    96,   142,     0,    96,   140,     0,
    46,   142,    47,    51,   143,   141,    52,     0,    96,    46,
   161,    96,    47,   143,     0,    96,    46,   143,    47,     0,
    46,   142,    47,     0,   146,     0,   146,   159,   143,     0,
   143,   149,   146,     0,     8,   157,    36,   143,   145,     0,
   146,     0,   146,   149,   146,     0,     9,   143,     0,     0,
   147,     0,   146,   148,   147,     0,   170,     0,    95,   147,
     0,    99,   147,     0,    15,     0,   172,     0,   168,     0,
   140,     0,   142,     0,   126,     0,    46,   143,    47,     0,
   171,     0,   154,     0,   155,     0,   191,     0,    96,     0,
    97,     0,    98,     0,    92,     0,    93,     0,    85,     0,
    57,     0,    84,     0,    94,     0,    95,     0,   150,    84,
   150,     0,   151,     0,   152,     0,    46,   150,    47,     0,
    51,   143,   153,    52,     0,    51,   169,   153,    52,     0,
    51,   150,   153,    52,     0,    49,   143,   153,    50,     0,
    49,   169,   153,    50,     0,    49,   150,   153,    50,     0,
    37,   143,   153,     0,    37,   169,   153,     0,    37,   150,
   153,     0,     0,    37,     1,     0,    85,   168,     0,    85,
   140,     0,    85,   191,     0,    85,   154,     0,    46,   154,
    47,     0,    46,    39,    47,   144,     0,    46,    44,    47,
   144,     0,    46,    42,    47,   144,     0,    46,    74,    39,
    47,   144,     0,    46,    74,    42,    47,   144,     0,    46,
    73,    39,    47,   144,     0,    46,    73,    42,    47,   144,
     0,    46,    39,    96,    47,   156,     0,    46,    73,    39,
    96,    47,   156,     0,    46,    44,    96,    47,   156,     0,
    46,    42,    96,    47,   156,     0,    46,    73,    42,    96,
    47,   156,     0,    46,    43,    96,    47,   156,     0,    46,
    39,    96,    96,    47,   156,     0,    46,    73,    39,    96,
    96,    47,   156,     0,    46,    44,    96,    96,    47,   156,
     0,    46,    42,    96,    96,    47,   156,     0,    46,    73,
    42,    96,    96,    47,   156,     0,    46,    43,    96,    96,
    47,   156,     0,    46,    17,   114,    96,    47,   156,     0,
    46,   114,    96,    47,   156,     0,    46,    17,   114,    96,
    96,    47,   156,     0,    46,   114,    96,    96,    47,   156,
     0,   144,     0,   158,     0,   102,   157,     0,   157,    81,
   157,     0,   157,    79,   157,     0,    46,   157,    47,     0,
   143,   159,   143,     0,    23,     0,    24,     0,   143,     0,
   143,    87,   169,     0,   143,    86,   169,     0,   169,    87,
   143,     0,   169,    86,   143,     0,   143,    87,    15,     0,
   143,    86,    15,     0,    15,    87,   143,     0,    15,    86,
   143,     0,   143,    87,   171,     0,   143,    86,   171,     0,
    88,     0,    89,     0,    86,     0,    90,     0,    91,     0,
    87,     0,    73,    39,     0,    73,    42,     0,   160,     0,
   131,     0,   161,   168,   163,     0,   161,   163,     0,   114,
   168,   163,     0,   114,    96,   168,   163,     0,   114,    96,
    96,   168,   163,     0,   114,   168,    16,   163,     0,   112,
   168,   163,     0,   112,    96,   168,   163,     0,   112,    96,
    96,   168,   163,     0,   112,   168,    16,   163,     0,   114,
   163,     0,   114,    96,   163,     0,   114,    96,    96,   163,
     0,   112,   163,     0,   112,    96,   163,     0,   112,    96,
    96,   163,     0,   161,   168,    16,   163,     0,   161,    96,
   168,    16,   163,     0,   161,   168,    16,    51,   143,    52,
   163,     0,   161,    96,   168,   163,     0,   161,    96,   163,
     0,   161,    96,    96,   168,   163,     0,    46,    96,   168,
    47,    46,   162,    47,   163,     0,     0,    37,   161,   168,
   163,     0,    37,   161,   163,     0,    37,   112,   168,   163,
     0,    37,   114,   168,   163,     0,    37,   114,    96,   168,
   163,     0,    37,   112,   168,    16,   163,     0,    37,   114,
   168,    16,   163,     0,    37,   161,   168,    16,   163,     0,
    37,   161,    96,   168,    16,   163,     0,    37,    46,    96,
   168,    47,    46,   162,    47,   163,     0,     0,    37,   161,
   168,    51,   143,    52,   163,     0,    37,   161,   168,    51,
   143,    37,   143,    52,   163,     0,    37,   161,   168,    16,
    51,   143,    52,   163,     0,    37,   161,    96,   168,   163,
     0,    37,   161,    96,   163,     0,    37,     1,     0,   138,
   165,     0,   112,    46,   164,    47,   165,     0,   161,     0,
     0,    85,     1,     0,    37,   138,   165,     0,    37,   112,
    46,   164,    47,   165,     0,     0,    37,     1,     0,    49,
   122,    50,     0,     1,    50,     0,    46,   157,    47,     0,
     1,    47,     0,   112,     0,    46,   168,    47,     0,   113,
     0,   115,     0,   117,     0,   116,     0,    37,   168,   173,
     0,     0,    37,     1,     0,     0,    37,   122,   174,     0,
   158,     0,   102,   175,     0,   175,    81,   175,     0,   175,
    79,   175,     0,    46,   175,    47,     0,    28,   167,   166,
     0,    27,   143,    48,    29,   166,     0,    27,    46,   179,
    37,   180,    37,   181,    47,   166,     0,   134,     0,   130,
     0,     0,   157,     0,     0,   134,     0,     0,     3,    46,
   147,    47,    49,   183,    50,     0,     4,   147,    38,    46,
   122,    47,   184,     0,     6,    38,    46,   122,    47,     0,
     5,   183,     0,   183,     0,     0,     8,   157,    36,   166,
   186,     0,     9,   166,     0,     0,    34,    46,   138,    47,
     0,    34,    46,   138,   188,    47,     0,     0,    37,   138,
   188,     0,   104,    46,   168,    47,     0,   104,    46,   168,
   190,    47,     0,   104,    46,   140,    47,     0,   104,    46,
   140,   190,    47,     0,   104,    46,   191,    47,     0,     0,
    37,   168,   190,     0,    37,   140,   190,     0,   168,    18,
   168,   192,     0,   140,    18,   168,   192,     0,   142,    18,
   168,   192,     0,   168,    18,   140,   192,     0,   140,    18,
   140,   192,     0,   142,    18,   140,   192,     0,   168,    76,
   168,   192,     0,   140,    76,   168,   192,     0,    46,   154,
    47,    76,   168,   192,     0,   142,    76,   168,   192,     0,
   168,    76,   140,   192,     0,   140,    76,   140,   192,     0,
    46,   154,    47,    76,   140,   192,     0,   168,    18,   126,
     0,   168,    76,   126,     0,   142,    76,   140,   192,     0,
    46,   191,    47,     0,     0,    18,   168,   192,     0,    18,
   140,   192,     0,    76,   168,   192,     0,    76,   140,   192,
     0,    18,   126,     0,    76,   126,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   177,   178,   182,   183,   184,   185,   186,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   204,   205,   206,
   207,   208,   209,   213,   214,   219,   220,   224,   228,   233,
   235,   242,   348,   349,   351,   352,   353,   354,   355,   356,
   357,   359,   360,   362,   363,   364,   365,   366,   367,   373,
   374,   375,   376,   377,   378,   380,   382,   387,   391,   406,
   416,   418,   419,   421,   435,   439,   443,   450,   451,   456,
   464,   469,   474,   483,   491,   502,   516,   517,   518,   522,
   526,   530,   534,   538,   542,   549,   551,   553,   558,   570,
   571,   572,   575,   576,   577,   584,   588,   592,   597,   603,
   608,   615,   621,   632,   634,   635,   639,   646,   650,   651,
   659,   663,   664,   665,   666,   667,   668,   669,   672,   674,
   676,   678,   680,   682,   684,   686,   688,   690,   692,   694,
   696,   701,   702,   705,   706,   707,   710,   711,   712,   715,
   719,   724,   726,   728,   730,   732,   734,   738,   740,   741,
   747,   748,   749,   751,   753,   755,   757,   763,   764,   766,
   767,   773,   774,   778,   779,   783,   784,   788,   789,   790,
   791,   792,   794,   795,   796,   797,   798,   799,   800,   801,
   802,   805,   806,   807,   808,   809,   810,   811,   812,   814,
   816,   820,   821,   822,   823,   829,   833,   841,   853,   857,
   866,   878,   882,   890,   894,   895,   898,   903,   907,   912,
   916,   923,   926,   927,   930,   931,   934,   935,   938,   939,
   940,   941,   942,   943,   946,   947,   948,   949,   950,   951,
   953,   954,   956,   957,   959,   967,   968,   969,   970,   971,
   977,   979,   980,   983,   984,   985,   988,   989,   992,   993,
   996,   997,  1000,  1001,  1006,  1007,  1008,  1009,  1010,  1011,
  1018,  1020,  1023,  1025,  1031,  1035,  1040,  1046,  1052,  1058,
  1068,  1074,  1080,  1086,  1094,  1098,  1102,  1108,  1112,  1116,
  1122,  1128,  1135,  1141,  1147,  1151,  1158,  1164,  1167,  1171,
  1175,  1181,  1187,  1193,  1200,  1208,  1214,  1229,  1235,  1238,
  1246,  1254,  1260,  1266,  1270,  1279,  1283,  1290,  1294,  1295,
  1299,  1303,  1313,  1314,  1322,  1324,  1331,  1333,  1339,  1340,
  1344,  1349,  1354,  1359,  1365,  1369,  1370,  1376,  1377,  1388,
  1399,  1400,  1402,  1404,  1410,  1416,  1424,  1432,  1436,  1440,
  1446,  1450,  1456,  1460,  1467,  1471,  1475,  1482,  1486,  1490,
  1494,  1504,  1505,  1511,  1512,  1516,  1517,  1522,  1523,  1524,
  1525,  1526,  1529,  1530,  1531,  1537,  1538,  1539,  1541,  1542,
  1543,  1545,  1546,  1547,  1548,  1550,  1551,  1552,  1553,  1554,
  1555,  1556,  1560,  1561,  1562,  1563,  1564,  1565,  1566
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","RETURN","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN",
"PEND","POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE",
"DEFINE","MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE",
"REPEAT","UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N",
"CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function_define","function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp","option_exp_else_statement",
"simple_ari_exp","member_in_exp","bi_operator","ari_operator","array_exp","option_list_value",
"option_struct_list_value","inner_option_list_value","address_exp","type_cast",
"casted_element","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   118,   119,   119,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   121,   121,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   123,   123,   124,   124,   125,
   126,   126,   126,   127,   128,   128,   129,   129,   129,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   131,
   131,   131,   131,   131,   131,   132,   132,   132,   132,   132,
   132,   132,   132,   133,   133,   133,    -1,    -1,    -1,    -1,
   134,   135,   135,   135,   135,   135,   135,   135,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   137,   137,   138,   138,   138,   138,   138,   138,   139,
   140,   140,   140,   140,   140,   140,   140,   141,   141,   141,
   142,   142,   142,   142,   142,   142,   142,   143,   143,   143,
   143,   144,   144,   145,   145,   146,   146,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   148,   148,   148,   148,   148,   148,   148,   148,   149,
   149,   150,   150,   150,   150,   151,   151,   151,   152,   152,
   152,   153,   153,   153,   153,   153,   154,   154,   154,   154,
   154,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   156,   157,   157,   157,   157,   157,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   159,   159,   159,   159,   159,   159,
   160,   160,   161,   161,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   164,   164,   164,   164,   164,
   165,   165,   165,   165,   166,   166,   167,   167,   168,   168,
   169,   170,   171,   172,   173,   173,   173,   174,   174,   175,
   175,   175,   175,   175,   176,   177,   178,   179,   179,   179,
   180,   180,   181,   181,   182,   183,   183,   184,   184,   184,
   185,   186,   186,   187,   187,   188,   188,   189,   189,   189,
   189,   189,   190,   190,   190,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   192,   192,   192,   192,   192,   192,   192
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     2,     1,     1,     1,     1,
     4,     4,     4,     4,     8,     1,     1,     1,     4,     1,
     1,     1,     1,     4,     3,     7,     9,     6,     5,     9,
     1,     1,     1,     7,     3,     1,     3,     1,     0,     8,
     4,     5,     4,     4,     2,     2,     2,     2,     1,     2,
     2,     3,     3,     3,     3,     7,     8,    11,    13,     1,
     1,     1,     1,     1,     1,     2,     6,     4,     5,     5,
     8,     8,     2,     2,     2,     0,     6,     7,     0,     2,
     3,     1,     1,     1,     1,     3,     2,     1,    11,    12,
    11,    11,    17,    18,    17,    18,    19,    18,    17,    18,
    17,     1,     1,     1,     1,     1,    10,     3,     1,     4,
     5,    11,    12,    11,    11,    12,     3,     3,     2,     0,
     2,     2,     2,     7,     6,     4,     3,     1,     3,     3,
     5,     1,     3,     2,     0,     1,     3,     1,     2,     2,
     1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     1,     3,     4,     4,     4,     4,     4,
     4,     3,     3,     3,     0,     2,     2,     2,     2,     2,
     3,     4,     4,     4,     5,     5,     5,     5,     5,     6,
     5,     5,     6,     5,     6,     7,     6,     6,     7,     6,
     6,     5,     7,     6,     1,     1,     2,     3,     3,     3,
     3,     1,     1,     1,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
     2,     2,     1,     1,     3,     2,     3,     4,     5,     4,
     3,     4,     5,     4,     2,     3,     4,     2,     3,     4,
     4,     5,     7,     4,     3,     5,     8,     0,     4,     3,
     4,     4,     5,     5,     5,     5,     6,     9,     0,     7,
     9,     8,     5,     4,     2,     2,     5,     1,     0,     2,
     3,     6,     0,     2,     3,     2,     3,     2,     1,     3,
     1,     1,     1,     1,     3,     0,     2,     0,     3,     1,
     2,     3,     3,     3,     3,     5,     9,     1,     1,     0,
     1,     0,     1,     0,     7,     7,     5,     2,     1,     0,
     5,     2,     0,     4,     5,     0,     3,     4,     5,     4,
     5,     4,     0,     3,     3,     4,     4,     4,     4,     4,
     4,     4,     4,     6,     4,     4,     4,     6,     3,     3,
     4,     3,     0,     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,     0,    47,     0,     0,     0,    95,    48,
     0,     0,     0,     0,     0,    52,    53,     0,     0,    46,
    90,    93,    92,    94,    91,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   319,     0,
     1,    62,    63,    61,     0,    34,    79,     0,    33,     0,
   118,   114,   115,   112,    38,    39,    40,    35,    37,    51,
    50,   113,     0,     0,    29,    13,    22,     0,   171,     0,
     0,     0,     0,   322,   324,   323,   176,   174,   175,    17,
   158,   166,   179,   180,   173,   168,   178,   172,   181,    21,
    10,     9,    20,    12,    11,     2,     0,     0,     0,     0,
     0,    26,     0,     0,     0,     0,     0,   321,    36,   139,
   134,   135,   193,   194,   136,   171,   242,   243,     0,     0,
   244,     0,   236,     0,     0,    75,     0,    76,     0,     0,
     0,   319,   299,     0,   340,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   176,     0,   174,   175,
   179,   330,   173,     0,   181,     0,     0,     0,     0,     0,
     0,    78,    77,     0,   319,   153,   152,   151,     0,     0,
   117,   114,     0,     0,     0,     0,     0,   309,     0,     0,
   319,    81,   106,     0,     0,     0,     0,     0,    80,   132,
   133,     0,     0,   309,     0,     0,     0,     0,     0,     0,
    27,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   174,   175,     0,   179,   173,   181,     0,
   208,     0,   210,   207,   209,   169,   170,   190,   191,     0,
   188,   189,   187,   257,   260,   255,   256,   258,   259,   185,
   186,   182,   183,   184,     0,     0,     8,     6,     7,     5,
     4,     0,     0,     0,     0,     0,     0,     0,   205,   205,
   205,   205,   205,   205,     0,     0,     0,     0,     0,   244,
     0,   237,   257,   260,     0,     0,     0,     0,     0,     0,
     0,    82,    84,    83,    85,   288,     0,     0,     0,   326,
     0,    90,    92,    94,    91,     0,     0,   339,   338,     0,
     0,   318,     0,     0,     0,   335,     0,     0,     0,     0,
    90,    92,    91,     0,     0,     0,     0,   319,   151,     0,
   331,    65,   116,   147,   157,     0,   320,     0,     0,     0,
   382,     0,     0,     0,   288,   309,     0,     0,     0,     0,
   264,     0,   263,     0,     0,     0,   114,   115,     0,   112,
   113,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   319,   313,   308,     0,   150,   103,     0,     0,     0,
     0,    96,    32,    31,    55,    30,     0,    66,   111,     0,
   383,   383,     0,   383,   383,   383,   383,   383,   383,   379,
   383,   383,   380,   383,   383,    25,    29,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   177,   211,     0,     0,
     0,     0,     0,     0,   160,   167,   159,     0,   138,   195,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   192,   252,   251,   240,   250,   246,   254,
   249,   245,   253,   241,   353,   239,   238,   248,   247,    44,
     0,   299,   299,   299,     0,   305,     0,     0,     0,   299,
     0,     0,     0,     0,     0,     0,     0,   342,     0,   317,
   316,     0,     0,     0,   354,     0,     0,     0,     0,     0,
    90,    92,    90,    92,   334,   151,     0,     0,     0,     0,
     0,     0,     0,   333,   332,   328,     0,     0,     0,     0,
     0,   319,     0,   261,   262,   156,     0,    90,    92,    91,
     0,    41,     0,     0,    49,     0,   360,     0,   358,     0,
   362,    54,    42,    43,   310,   309,     0,   306,    71,     0,
     0,     0,   150,   105,   104,   106,    74,     0,     0,     0,
     0,     0,   370,   367,    73,   377,   373,   371,   368,   381,
   375,   369,   366,   376,   372,    28,     0,   165,     0,   212,
   162,     0,     0,   214,     0,     0,     0,     0,   213,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   206,   205,   205,   205,   199,   201,   200,   196,   198,   197,
     0,   140,     0,   351,     0,   299,   278,   299,   299,   275,
   299,   299,   266,   299,     0,     0,   299,     0,   299,   299,
   290,   299,     0,   327,   326,     0,     0,     0,     0,     0,
     0,     0,   341,     0,   336,   315,     0,   356,   355,     0,
     0,     0,     0,     0,     0,   150,   288,   334,   150,   383,
   383,     0,   329,    59,     0,     0,    72,     0,     0,     0,
     0,     0,     0,    90,    92,     0,     0,     0,     0,   363,
   363,   361,   359,     0,   314,   319,   313,   149,   150,   141,
   106,   106,     0,    98,    67,   388,   383,   383,   389,   383,
   383,     0,     0,   161,     0,     0,     0,   235,   219,     0,
   222,     0,   224,     0,   221,     0,     0,     0,     0,     0,
   217,     0,     0,   218,     0,     0,   215,   216,   232,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   202,
   204,   203,   352,     0,   299,   279,   299,   299,   271,   299,
   276,   299,   299,   267,     0,   285,   299,   299,   265,     0,
     0,   299,   291,   299,   299,   292,   304,   299,   299,     0,
   289,     0,   325,     0,     0,     0,   344,     0,   357,     0,
   319,   322,     0,   319,   322,   319,   322,     0,     0,   288,
     0,     0,     0,   378,   374,     0,    58,     0,   150,   155,
     0,     0,     0,     0,     0,     0,   365,   364,    71,   309,
   311,   148,    99,   100,   106,   385,   384,   387,   386,     0,
   164,   231,     0,   163,   225,   228,   230,   227,     0,   220,
     0,   223,     0,   234,     0,     0,     0,     0,     0,     0,
   345,     0,     0,   280,   299,   272,   274,   277,   299,   268,
   270,   299,   299,   284,     0,   281,    69,     0,   294,   293,
   295,   299,   303,     0,   296,     0,    64,     0,   343,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   319,
     0,   319,   322,     0,   141,    86,   154,    56,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   307,     0,     0,    97,    23,   233,   226,   229,     0,     0,
     0,   288,   288,   273,   269,   286,   282,     0,    68,     0,
   288,   297,     0,     0,   299,     0,     0,    45,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    87,     0,    70,     0,     0,     0,
     0,     0,     0,     0,    71,   106,   106,     0,     0,     0,
     0,   299,    60,     0,   299,     0,   300,    57,   337,     0,
     0,     0,   150,   150,     0,     0,     0,   150,   150,   150,
   150,     0,     0,     0,     0,     0,     0,   288,     0,     0,
     0,     0,     0,     0,     0,   312,   101,   102,     0,   347,
     0,   299,   283,   299,   302,   299,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   150,     0,
     0,     0,   150,   150,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   350,     0,     0,   137,     0,   287,
   298,   301,   322,   322,     0,   142,   121,   322,   322,     0,
   145,   119,   144,   122,     0,     0,     0,     0,     0,     0,
    88,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   349,   346,     0,     0,     0,     0,   322,     0,     0,
   322,   143,   322,   322,     0,   146,   120,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   348,     0,     0,
     0,     0,     0,     0,     0,     0,   322,    89,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   150,   150,     0,   150,   150,     0,     0,
     0,     0,     0,     0,   150,     0,     0,   150,   150,   150,
     0,   131,   129,     0,   125,   123,     0,     0,     0,   150,
   130,   124,   128,   126,     0,   127,     0,     0,     0
};

static const short yydefgoto[] = {  1177,
     2,    21,   223,   166,   397,   940,    62,    97,    64,    65,
    66,    67,    68,   387,   392,    69,    70,    71,   212,   383,
   130,    98,   561,    99,   141,   728,   724,   101,   102,   265,
   250,   132,   133,   134,   455,   103,   104,   729,   291,   143,
   295,   363,   484,   485,   309,   385,   558,   475,   159,   105,
   144,   106,   107,   108,   493,   354,   174,    75,    76,    77,
   320,   664,   890,    78,   758,  1093,    79,   634,    80,   506,
    81,   548,   109,   573
};

static const short yypact[] = {    50,
  1271,  2854,-32768,-32768,   -34,-32768,-32768,-32768,  1271,  1271,
  1271,  1271,  1482,  1271,  1271,  1271,  1271,  1271,  1271,-32768,
   615,    49,  1127,  1233,-32768,   106,   -42,   758,-32768,-32768,
    58,   109,   130,  1790,    61,-32768,-32768,   207,   227,-32768,
-32768,-32768,-32768,-32768,-32768,  2401,  2854,   226,   296,   277,
   277,   286,   259,   315,   371,   421,   433,   499,   300,   354,
  1189,-32768,-32768,-32768,   406,-32768,-32768,   354,-32768,   579,
-32768,   136,    38,   144,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   461,  1018,   906,   510,   510,  1233,-32768,  3373,
    -2,   474,   474,-32768,-32768,-32768,-32768,   136,    38,   904,
  2163,-32768,-32768,-32768,   144,-32768,-32768,-32768,-32768,   510,
   510,   510,   510,   510,   510,-32768,  1271,  1271,  1271,  1271,
  1271,-32768,   474,  3048,  1632,  1632,   401,-32768,-32768,-32768,
   904,   589,-32768,-32768,-32768,  1020,-32768,-32768,  2193,  1233,
  1943,   572,-32768,  1235,  1233,   354,   354,   354,   354,   645,
   109,-32768,   689,   109,  2088,   863,   695,  1233,   453,  2854,
  1127,  1233,  2516,   414,  1448,  1353,  1478,    96,   690,   720,
   712,-32768,   751,   699,   338,  1360,   684,   737,   861,   970,
   708,-32768,-32768,  3798,   773,-32768,-32768,-32768,  2746,   322,
-32768,   253,  1482,   416,  2854,  2854,  2854,  3168,  1482,   354,
   489,-32768,   389,  2854,  2854,  2854,  2854,   661,-32768,-32768,
-32768,  1127,   137,  3168,   137,   137,   137,    20,    20,  1674,
-32768,  1271,   763,   899,   777,     7,    27,   780,    55,  3421,
   607,   719,   785,   234,   192,   302,   807,   404,   869,   399,
   924,    38,-32768,   930,-32768,-32768,-32768,-32768,-32768,   474,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   474,  1482,  1219,   -10,   -10,   749,
   908,   914,  3131,   943,   302,    17,   966,  3251,   336,   157,
   980,   336,   157,   980,  3846,  1098,  1482,  1482,  2891,  1646,
   889,-32768,    -9,    11,  1482,   453,  1233,  1233,  1482,  1482,
   922,-32768,-32768,-32768,-32768,  1141,   985,    45,  1004,  1057,
  1005,     7,    27,   780,    55,   521,   491,-32768,-32768,  1108,
  1128,-32768,   964,  1143,  2854,-32768,  1084,   127,   923,  1063,
   208,   246,   293,  1369,  1566,   967,   286,  1119,  1160,  2928,
-32768,-32768,-32768,-32768,  1195,  1182,-32768,  1184,  1448,  1448,
-32768,  2854,  1255,  1225,  1141,  3168,   354,   354,   503,   976,
-32768,   592,-32768,  1191,  2631,  1571,   234,   192,   712,   404,
   869,   131,   750,   399,   362,   594,  1244,  1583,  1676,  1747,
    13,   525,  1241,-32768,  1254,   349,-32768,  1245,  1482,    21,
  1127,-32768,  1148,  1226,  1226,-32768,  1264,  1249,-32768,   176,
   261,   261,  1279,   261,   261,   261,   261,   261,   261,-32768,
   249,   261,-32768,   249,   261,-32768,   906,  1319,  1482,  1240,
   474,   317,   474,   332,   337,   474,   418,   445,   460,   486,
  1017,   506,   531,  1293,  1295,   538,-32768,  1182,   683,   409,
   192,   807,   404,   869,  1192,-32768,   904,  1294,-32768,-32768,
  1298,  3288,    17,   740,  1297,  1301,  1302,  1306,  1307,  1308,
  3458,  1317,  1098,-32768,   904,   904,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   904,  1357,  1288,-32768,   904,   904,-32768,
  1275,     3,     4,   154,  1328,-32768,  1285,   109,   528,   165,
  1335,    22,  1338,   546,  3336,  1346,   485,  1233,   453,-32768,
-32768,  1136,  1361,  1127,-32768,  1349,  1187,   549,   603,   622,
   624,   627,  1293,  1295,  1184,  1352,  1482,  1355,  3011,  1073,
  1482,   137,  1356,  1322,-32768,   972,   453,  1394,  1367,  1370,
   109,  1371,  1160,-32768,-32768,-32768,  1373,  1325,  1329,  1334,
  1667,-32768,   454,   409,-32768,   137,-32768,  1377,-32768,  1384,
-32768,-32768,-32768,-32768,-32768,  3168,  1015,-32768,-32768,  1390,
  1385,     9,   349,-32768,-32768,  1401,-32768,   661,   586,  1396,
    20,    20,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1397,    36,   628,-32768,
  1907,   474,  1402,-32768,   474,  1403,   474,  1404,-32768,   474,
  1407,   685,   692,   698,   624,   703,   474,   715,   474,   724,
   474,   474,   474,  1408,  1365,  1368,  1380,  1059,  1231,  1974,
-32768,   336,   157,   980,-32768,-32768,-32768,-32768,-32768,-32768,
  3506,-32768,   453,-32768,   109,   328,-32768,   247,   346,-32768,
   248,   365,-32768,   717,  1366,   109,   806,   109,   832,    15,
-32768,   733,  2854,-32768,  1057,  1398,   511,   208,   246,   293,
  1087,   567,  1232,  1428,-32768,-32768,  1420,  1440,-32768,   959,
  1757,  1911,   727,   746,  1432,   349,  1141,-32768,   349,   261,
   261,  2854,-32768,-32768,   453,  1433,-32768,  1352,  1482,  1482,
  1434,  1437,  1441,  1391,  1395,  1325,  1329,  1334,  1111,  1455,
  1455,-32768,-32768,  1449,-32768,   706,  1241,-32768,   349,-32768,
   167,  1401,  1443,-32768,-32768,-32768,   249,   261,-32768,   249,
   261,  1271,  1482,-32768,   474,  1452,   474,-32768,-32768,   474,
-32768,   474,-32768,   474,-32768,   474,  2026,  2231,  2283,   762,
-32768,   474,  1453,-32768,   474,  1454,-32768,-32768,-32768,   474,
  1463,  1466,  1467,  1391,  1426,   474,  1486,  1477,  1469,-32768,
-32768,-32768,-32768,  1484,    15,-32768,   689,   689,-32768,    15,
-32768,   689,   689,-32768,   109,-32768,  1065,   353,-32768,  1480,
  1485,   689,-32768,   689,   689,-32768,-32768,  1067,   877,  1482,
-32768,  1258,-32768,  1491,   601,   627,   322,  1233,-32768,  3543,
  1109,  1499,  3591,  1120,  1502,  1145,  1509,  3852,  3880,  1141,
  1490,  1515,  1516,-32768,-32768,  1459,-32768,  2854,   349,   904,
    34,    51,  1082,  1522,  1524,  1395,-32768,-32768,  1241,  3168,
-32768,-32768,-32768,-32768,   574,-32768,-32768,-32768,-32768,  1495,
   904,-32768,   474,  1192,-32768,-32768,-32768,-32768,  3887,-32768,
   474,-32768,   474,-32768,  1468,  1472,  1479,  1528,  1551,  1546,
-32768,  1547,  1550,-32768,   689,-32768,-32768,-32768,   689,-32768,
-32768,   689,   689,-32768,  1482,-32768,  2854,  1555,-32768,-32768,
-32768,   689,-32768,  1482,-32768,   669,-32768,  2854,-32768,  1557,
  1093,  3628,  1556,  1560,  3676,  1562,  1563,  1568,  1569,  1173,
  3713,  1215,  1578,  1579,  1580,-32768,-32768,-32768,  1615,  1577,
  1590,  1592,  1499,  1595,  1598,  1502,  1602,  1509,  1530,    60,
-32768,  1609,     9,-32768,-32768,-32768,-32768,-32768,  1548,  1613,
  2854,  1141,  1141,-32768,-32768,-32768,-32768,   789,  1189,  1552,
  1141,-32768,   940,  1482,   689,  1802,   453,-32768,   767,   769,
  1161,  1482,  1482,   781,   790,  1162,  1482,  1482,  1482,  1482,
  1621,  3761,  1624,  1626,-32768,  1620,-32768,  1580,   987,  1066,
  1638,  1633,  1641,  1578,  1241,   167,  1401,  2854,  1816,  1645,
  1652,   689,-32768,  1654,   689,   944,-32768,-32768,-32768,   791,
   812,   813,   349,   349,   814,   817,   819,   349,   349,   349,
   349,  1482,   833,   838,  1179,  1482,  1482,  1141,  1607,  1612,
  1670,  1618,  1622,  1677,  1070,-32768,-32768,-32768,  1829,-32768,
    33,   689,-32768,   689,-32768,   689,  3928,  3934,   854,  1669,
  1673,  3962,  3969,   857,  1678,  1686,  1687,  1690,   349,   860,
   876,   880,   349,   349,  1675,  1679,  1682,  1657,  1707,  1713,
  1666,  1668,  1680,  1721,  1246,   216,   300,-32768,  1720,-32768,
-32768,-32768,  1724,  1728,  4010,-32768,-32768,  1730,  1731,  4016,
-32768,-32768,-32768,-32768,  1732,  4044,  4051,   890,  1733,  1736,
  1698,  1681,  1685,  1746,  1696,  1699,  1748,  1750,  1755,  1723,
  1231,-32768,-32768,   670,   773,  1769,  1770,  1777,  1778,  1783,
  1784,-32768,  1785,  1786,  4092,-32768,-32768,  1098,  1724,  1728,
  1719,  1730,  1731,  1722,  1726,  1729,  1791,-32768,  1788,  1795,
  1800,  1799,  1803,  1811,  1817,  1818,  1820,   589,  1777,  1784,
  1785,  1786,  1753,  1482,  1482,  1819,  1482,  1482,  1827,  1833,
  1836,  1824,  1820,   349,   349,  1482,   349,   349,  1482,  1482,
  1482,  1839,  1828,  1840,   349,  1841,  1846,   349,   349,   349,
  1482,-32768,-32768,  1847,-32768,-32768,  1848,  1849,  1851,   349,
-32768,-32768,-32768,-32768,  1859,-32768,  1912,  1913,-32768
};

static const short yypgoto[] = {-32768,
-32768,    18,  1497,     1,  1347,-32768,-32768,    94,-32768,-32768,
  -201,   -26,   108,   327,  -524,  -154,    40,  1498,-32768,    -3,
-32768,    29,  -193,  1263,   -13,   -90,-32768,  1248,   -84,-32768,
  1326,  -113,-32768,-32768,  -265,   379,-32768,  1337,   190,   212,
  1822,-32768,  -141,  -353,  1171,  -209,  -660,  -155,-32768,   873,
   311,-32768,  1030,-32768,  1266,  1399,  -112,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -860,-32768,-32768,-32768,-32768,  1256,
-32768,  -338,  1427,   488
};


#define	YYLAST		4209


static const short yytable[] = {   100,
   319,   529,    61,   326,   403,   468,   398,   246,   247,   131,
   276,   280,   283,   555,   456,   457,   458,   459,   460,   129,
   156,   564,   654,   182,   183,   471,    84,    85,    86,    87,
    72,   110,   111,   112,   113,   114,   115,   550,   272,   308,
   308,   714,   364,   240,   723,   486,   831,   176,   151,   151,
   336,   308,   341,   421,   463,   216,   384,   125,   240,   126,
   151,   157,     1,   450,    29,   400,   151,   151,   120,   146,
   121,   147,   384,   423,   169,    72,   236,    83,  1056,   911,
   186,   192,    91,    41,    42,   168,    43,    44,    45,   122,
   487,    49,   191,    52,   123,    63,   914,    91,   636,   639,
   286,   426,   422,   128,    49,   972,   158,    96,    52,   185,
   275,   279,   282,   217,   152,   152,   200,   360,   234,   241,
   274,   128,   424,   128,   185,   290,   152,    96,   318,   248,
   249,    59,   201,   152,   267,   268,   269,   270,   271,   167,
    63,   236,   343,   364,  1057,   912,   530,   131,   913,   290,
   427,   145,   234,   213,   151,   186,   488,   328,   489,   276,
   327,   218,   915,   504,   453,   916,   490,   234,   921,   150,
   362,   973,   464,   505,   974,   154,   543,   210,   211,   373,
   446,   214,   400,   169,   131,   386,   833,   834,    72,   366,
   308,   169,   186,   454,  1092,   378,   379,   380,   131,   151,
   131,   308,   168,   390,   393,   394,   395,   396,   399,   216,
   151,   215,   234,   142,   384,    91,   236,   367,   192,   219,
   152,   569,   375,    72,    72,    72,    52,   520,   168,   191,
  1118,   190,    72,    72,    72,    72,   524,   525,   345,   417,
   286,   401,   185,   404,   406,   408,   411,   414,   185,   642,
   286,   213,   447,    63,   421,   160,   167,   172,   234,   275,
   650,  1094,   768,   773,   236,   152,   571,   217,   440,   274,
   213,   362,   161,   465,   466,   290,   152,   224,   571,   214,
   344,   474,    63,   308,   308,   478,   479,   185,    63,    63,
    63,   361,   423,   179,   214,   180,    29,    63,    63,    63,
    63,   234,   236,   508,   189,   361,   234,   182,   183,   215,
   924,   410,   413,   234,  1016,    41,    42,   234,    43,    44,
    45,   361,   181,   812,   572,   502,   290,  1095,   215,   292,
   590,   184,   594,   135,   301,   599,   572,   177,   453,   426,
   623,   509,   131,   665,   169,   198,   704,   323,   437,   453,
   199,   329,   526,    72,    52,   496,   760,   761,   762,   190,
   193,   827,   828,   592,   308,   186,   398,   372,   234,   713,
   185,   684,   454,   151,   172,   563,   172,   131,   595,   213,
    72,    52,   308,   597,   351,   560,   202,   566,   510,   308,
    60,   151,   361,   169,   209,   248,   249,   185,   546,   151,
   544,   308,   440,   875,   168,   588,   520,   178,   547,   241,
   151,   496,   593,   361,   384,   361,   194,    52,    63,  -113,
  -113,   218,   190,   765,   171,   390,   213,   596,   570,   248,
   249,   416,   598,   185,   277,   281,   284,   215,   236,   152,
   622,   770,   248,   249,   439,    63,   285,   236,   711,   200,
   347,  1017,  1018,   324,   208,   344,   904,   152,   167,   184,
   775,   374,   361,   361,   600,   201,   195,   440,   237,   243,
   391,   135,   302,   303,   304,   305,   152,   763,   196,   219,
   234,   236,   811,    91,   215,   813,   476,   477,    89,   234,
   131,   421,   696,   588,    52,   697,    52,   698,   220,   543,
   668,   325,   237,   676,   388,   290,   423,   679,   135,   337,
   185,    52,   185,   601,   182,   832,   741,   237,   744,    90,
   747,   748,   135,   169,   135,   338,   699,   185,    88,   817,
   151,   613,   426,   237,   496,    89,   151,   225,    91,   389,
   602,   237,   131,   131,   197,    49,   709,   234,   151,    52,
   680,   172,   607,   707,   190,   603,   151,   725,    91,   428,
   172,   172,   429,   228,   430,   185,   495,   369,    92,    52,
   556,   544,    93,   151,   700,   199,   172,   609,   980,   981,
   662,   604,   496,   277,   613,    59,   497,   984,    94,    95,
    96,   151,    49,   431,   232,   670,   201,   570,   531,   717,
   720,   608,   201,   469,   472,    91,   795,   296,   237,-32768,
   390,   218,   151,   750,   532,    92,   164,   236,   442,    93,
   922,   190,   201,   648,   615,   910,   610,   616,   116,   617,
   546,   569,    59,   614,   233,    94,    95,    96,   536,   152,
   549,   657,   889,   202,   593,   432,   151,   843,   433,   671,
   297,   237,   298,   792,  1045,   923,   237,   201,   618,   234,
   210,   211,   200,   361,   716,   719,   135,   237,   672,   219,
   607,   859,   286,   609,   725,   819,   820,   179,   201,   180,
    29,    72,   816,   302,   304,   248,   249,   663,   384,   117,
   306,   118,   119,   120,   237,   121,   200,   185,   596,    41,
    42,   135,    43,    44,    45,   944,   181,   213,   615,   841,
    72,   616,   201,   617,   122,  1094,   565,   601,   237,   673,
   945,   615,   674,   726,   616,   308,   617,   759,   439,   355,
   172,   737,   778,    50,    51,   214,   344,   216,   738,   840,
   621,   322,   618,   237,   739,   348,    63,    88,   789,   609,
   369,   830,   369,   308,    89,   618,   199,   434,   346,   243,
   435,   742,   248,   249,   624,   215,   345,    91,   218,   308,
   745,  -114,  -114,   808,    60,    63,   886,   349,    52,   350,
   593,  1095,   356,   790,   361,   278,   236,   596,   125,   236,
   126,   989,   809,   601,   185,   217,   545,   347,   740,  1030,
  1031,  -115,  -115,   359,  1035,  1036,  1037,  1038,   849,   976,
   743,    49,   418,   421,   135,   423,   131,   442,   909,   746,
   303,   782,   743,   199,    91,   192,   219,   421,   234,   121,
   237,   234,  -112,  -112,    92,    52,   423,  1027,    93,   237,
   982,   746,   308,   248,   249,  1075,    72,   785,   122,  1079,
  1080,    59,   128,   438,    94,    95,    96,   746,  1028,   609,
  1032,   938,   990,  1033,   991,   609,   135,   135,   308,   148,
   943,   149,   712,   237,    74,   425,   995,   939,   236,   421,
   436,   236,   248,   249,   423,   996,   593,   236,   946,   574,
   420,   576,   577,   578,   579,   580,   581,   237,   582,   583,
  1065,   584,   585,  1070,   153,    72,  1076,   596,  1029,   593,
   321,    63,   596,   308,  1034,   351,    72,   361,   173,    74,
   234,   442,  1077,   234,   188,    74,   609,   884,  1040,   234,
   986,   979,   203,  1041,   419,   467,  1105,   361,   993,   994,
   203,   213,   222,   998,   999,  1000,  1001,   218,   236,   746,
  1153,  1154,   746,  1156,  1157,   593,   248,   249,   507,    72,
   448,  1164,   238,   244,  1167,  1168,  1169,   297,   480,   298,
    63,   596,   357,    89,   147,  1078,  1175,   297,  1019,   298,
   117,    63,   118,   119,   120,   746,   121,   891,  1039,   449,
   234,   985,  1043,  1044,  1128,  1026,   238,   248,   249,   188,
   297,   297,   298,   298,   800,   122,    72,   122,   352,   237,
   500,   238,   451,   515,   534,   705,   454,   535,   203,   203,
   203,   203,    88,   307,    63,  1009,   310,   173,  1010,    89,
    49,   347,    74,   248,   249,   173,   339,   248,   249,   361,
   361,   491,   297,    91,   298,   349,   204,   350,   361,  1059,
   205,   206,   207,    92,    52,   605,   238,    93,   606,  1011,
   124,   370,    74,   125,   221,   126,   376,    74,    74,    74,
   801,    63,   203,   802,    95,    96,    74,    74,    74,    74,
   873,   358,   882,   149,   570,   402,    49,   405,   407,   409,
   412,   415,   117,   492,   118,   119,   120,   754,   121,    91,
   755,   308,   238,   308,  1012,   287,   288,  1013,  1052,    92,
   127,  1053,   443,    93,  1058,   361,   357,   122,   494,   678,
  1144,  1145,   570,  1147,  1148,   605,   706,   128,   796,    94,
    95,    96,  1155,   503,    88,  1158,  1159,  1160,  1014,   948,
   135,    89,  1054,   463,   498,   238,   125,  1170,   126,   754,
   238,   349,   826,   350,   198,   893,   499,   238,   204,   199,
    29,   238,   205,   206,   207,   198,   896,   814,   815,   517,
   199,   297,   124,   298,   146,   125,   494,   126,   237,    41,
    42,   237,    43,    44,    45,   666,   481,   324,   173,   203,
   198,   898,   501,   917,    88,   199,   918,    74,    49,   605,
   605,    89,   992,   997,   836,   837,   518,   838,   839,   516,
   204,    91,   238,   360,   205,   206,   207,   605,   198,   961,
  1042,    92,   127,   199,    74,    93,   205,   206,   207,   203,
   203,   533,    90,   977,   756,   325,   757,   173,    59,   128,
    88,    94,    95,    96,   370,   521,   443,   136,   251,   756,
  1091,   757,   482,   244,   483,   137,   138,   522,    49,   523,
   198,   963,   203,   204,    73,   199,   527,   205,   206,   207,
   237,    91,   307,   237,   528,   252,   253,   557,   139,   237,
     3,    92,    52,   260,   261,    93,   537,   262,   263,   264,
   551,     4,     5,     6,     7,   118,   119,   120,    59,   121,
   559,    94,    95,    96,    49,     8,   207,   887,   170,    73,
   297,   443,   298,   567,   187,    73,     9,    91,   122,    10,
   299,   300,   470,   473,   238,   575,   562,    92,    52,   568,
   587,    93,   204,   238,   140,   589,   205,   206,   207,   611,
   237,   612,   619,   620,    59,   128,   625,    94,    95,    96,
   626,   627,   235,   242,   638,   641,   644,   628,   629,   630,
   647,   649,   652,   632,   655,   633,   203,   173,   298,   203,
   635,    11,    12,    13,   645,    14,    15,    16,    17,    18,
   646,    19,    20,   653,   656,   179,   235,   180,    29,   187,
   708,   238,   343,   667,   681,   669,   352,    88,   675,   342,
   677,   235,   350,   688,    89,   685,   682,   511,    42,   353,
   512,    44,    45,   686,   181,   370,   687,   170,   701,   690,
   691,   689,    73,   702,   692,   170,   187,   204,    82,   693,
   703,   205,   206,   207,   204,    90,   710,   390,   205,   206,
   207,   307,   344,   718,   721,   722,   235,   780,   730,   732,
   734,   368,    73,   736,   750,    88,   242,    73,    73,    73,
   751,    49,   136,   752,   797,   798,    73,    73,    73,    73,
   137,   138,   175,    82,    91,   753,   504,   810,   794,    82,
   821,   818,    60,   822,    92,    52,   824,   823,    93,    88,
   825,   546,   235,   340,   835,   829,    89,   445,   843,   851,
   853,    59,   441,   238,    94,    95,    96,   764,   767,   855,
   908,   772,   856,   857,   777,   862,   239,   245,   781,    49,
   784,   858,   788,   860,   -63,    74,   861,    90,   877,   203,
   863,   878,    91,   204,   203,   235,   888,   205,   206,   207,
   235,   905,    92,    52,   925,   894,    93,   235,   897,   165,
   239,   235,   -63,    49,    74,   899,   -63,   -63,   -63,    59,
   128,   906,    94,    95,    96,   239,    91,   907,   919,   117,
   920,   118,   119,   120,   929,   121,    92,    52,   170,   912,
    93,   175,   179,   915,   180,    29,    82,    73,   930,   175,
   917,   931,   932,    59,   122,   933,    94,    95,    96,   187,
   941,   983,   235,   947,   513,    42,   952,   514,    44,    45,
   953,   181,   957,   958,    73,   371,    82,   542,   959,   960,
   377,    82,    82,    82,   964,   965,   966,   170,   968,   552,
    82,    82,    82,    82,   368,   969,   441,   865,   893,    88,
   970,   971,   869,   242,   896,   204,    89,   872,   898,   205,
   206,   207,   637,   640,   643,   975,   239,   204,   978,   973,
   651,   205,   206,   207,   967,  1008,   444,   203,   591,    74,
   591,  1002,   238,   591,  1006,   238,  1007,   278,  1015,    60,
   125,    88,   126,   179,   961,   180,    29,   963,   136,   204,
    74,  1021,   437,   205,   206,   207,   137,   138,  1022,   239,
  1024,   441,  1046,    49,   239,   694,    42,  1047,   695,    44,
    45,  1048,   181,  1049,   235,   239,    91,  1050,  1051,    90,
  1066,  1081,   553,   235,  1067,  1082,    92,    52,  1083,  1071,
    93,   293,   294,   256,   257,   258,   259,  1072,  1073,   248,
   249,  1074,   175,    59,   128,    49,    94,    95,    96,    74,
   204,    82,  1084,  1085,   205,   206,   207,   170,    91,  1086,
    74,  1087,  1090,  1088,   238,   214,   239,   238,    92,    52,
  1096,    89,    93,   238,  1097,  1089,  1099,  1100,    82,  1108,
    60,   235,   462,  1102,  1106,    59,   128,  1107,    94,    95,
    96,   175,  1111,   554,  1114,  1109,  1115,    88,   371,  1110,
   444,  1116,   803,    74,    89,   368,   766,   245,   769,   771,
  1112,   774,   776,  1113,   779,  1119,  1120,   783,  1117,   786,
   787,   204,   791,  1121,  1122,   205,   206,   207,    49,  1123,
  1124,  1125,  1126,  1129,   238,   155,  1130,  1133,  1134,   591,
  1131,    91,   591,  1132,   591,  1135,  1136,   591,   988,  1137,
    74,    92,    52,  1138,   591,    93,   591,  1139,   591,   591,
   591,    49,  1020,  1140,  1141,   444,  1142,  1143,   804,  1146,
  1152,   805,    95,    96,    91,  1055,   204,  1149,   239,  1162,
   205,   206,   207,  1150,    92,    52,  1151,   239,    93,  1161,
   204,  1163,  1165,   235,   205,   206,   207,  1166,  1171,  1172,
  1173,    59,  1174,   204,    94,    95,    96,   205,   206,   207,
  1176,  1178,  1179,   586,   715,    73,   727,   591,   591,   591,
   793,   175,   266,   799,   683,    89,     0,     0,     0,     0,
     0,   731,     0,   733,     0,   864,   735,   866,   867,     0,
   868,     0,   870,   871,    73,   239,     0,   874,   876,   749,
     0,     0,   879,     0,   880,   881,    90,     0,   883,   885,
     0,     0,     0,   251,     0,     0,     0,     0,     0,   371,
     0,     0,   591,     0,   844,     0,     0,   591,     0,   591,
     0,   591,    49,   591,   591,   591,   591,     0,     0,   591,
   252,   253,   591,    29,     0,    91,     0,   591,   260,   261,
   248,   249,   262,   263,   264,    92,    52,   731,   735,    93,
     0,     0,    41,    42,     0,    43,    44,    45,     0,     0,
     0,     0,   806,     0,     0,   807,    95,    96,   293,   294,
   256,   257,   258,   259,     0,   934,   248,   249,     0,   935,
    89,     0,   936,   937,     0,     0,     0,     0,     0,     0,
     0,     0,   942,     0,     0,   591,   591,   239,     0,    73,
     0,   842,   235,     0,     0,   235,   845,     0,   846,     0,
   847,    90,   848,     0,   731,   735,     0,     0,   850,    82,
    73,   852,     0,     0,     0,     0,   854,     0,     0,     0,
   591,     0,     0,     0,     0,    88,   591,    49,   591,     0,
   591,     0,    89,     0,   311,     0,   180,    29,    82,     0,
    91,     0,     0,     0,     0,   987,     0,     0,     0,     0,
    92,    52,     0,     0,    93,     0,   312,    42,     0,   313,
   314,   315,     0,   316,     0,     0,     0,   801,     0,    73,
    94,    95,    96,     0,   850,   852,     0,     0,     0,     0,
    73,     0,  1023,     0,   235,  1025,     0,   235,     0,    49,
   231,   232,     0,   235,     0,     0,     0,     0,     0,     0,
     0,     0,    91,     0,     0,     0,     0,     0,     0,   926,
     0,     0,    92,    52,     0,   852,    93,   927,   190,   928,
     0,     0,  1060,    73,  1061,     0,  1062,     0,     0,    59,
    88,   317,    94,    95,    96,     0,     0,   136,     0,   225,
     0,     0,     0,     0,     0,   137,   138,     0,     0,   251,
     0,     0,     0,    82,   235,     0,   239,     0,     0,   239,
     0,   226,     0,     0,   227,   228,   229,     0,   289,     0,
    73,     0,     0,     0,    82,    89,   252,   253,   254,   255,
   256,   257,   258,   259,   260,   261,     0,     0,   262,   263,
   264,     0,     0,     0,    49,   231,   232,     0,     0,     0,
     0,     0,     0,     0,   591,   591,    90,    91,     0,   591,
   591,     0,     0,     0,     0,     0,     0,    92,    52,     0,
     0,    93,     0,     0,   140,     0,     0,    89,     0,     0,
     0,     0,    49,    82,    59,   128,   233,    94,    95,    96,
     0,     0,   591,     0,    82,    91,     0,   591,   239,     0,
     0,   239,     0,   591,   591,    92,    52,   239,    90,    93,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   804,     0,     0,    94,    95,    96,     0,     0,
     0,     0,   591,     0,    49,     0,     0,    82,     0,     0,
     0,     0,     0,     0,   731,     0,     0,    91,     0,   731,
     0,     0,     0,     0,     0,     0,     0,    92,    52,     0,
     0,    93,     0,     0,     0,     0,     0,     0,   239,     0,
     0,     0,     0,     0,   806,     0,     0,    94,    95,    96,
     0,   852,     0,    22,    82,     0,   852,    23,   162,     0,
    25,    26,     0,   731,     0,   136,     0,    27,     0,    28,
    29,    30,    31,   137,   138,    32,    33,    34,    35,     0,
    36,    37,    38,     0,    39,    40,     0,     0,     0,    41,
    42,   852,    43,    44,    45,     0,   163,     0,     0,    47,
     0,     0,     0,    48,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    49,    50,    51,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    91,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    92,   164,     0,     0,    93,
     0,    53,   165,    54,    55,    56,    57,    58,     0,     0,
     0,     0,    59,   128,    60,    94,    95,    96,    22,     0,
     0,     0,    23,   162,     0,    25,    26,     0,     0,     0,
   136,     0,   330,     0,    28,    29,    30,    31,   137,   138,
    32,    33,    34,    35,     0,    36,    37,    38,     0,    39,
    40,     0,     0,     0,   331,    42,     0,   332,   314,   333,
     0,   163,     0,     0,    47,     0,     0,     0,    48,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    49,   334,   335,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    92,   164,     0,     0,    93,     0,    53,   165,    54,    55,
    56,    57,    58,     0,     0,     0,     0,    59,   128,   317,
    94,    95,    96,    22,     0,     0,     0,    23,   162,     0,
    25,    26,     0,     0,     0,   136,     0,    27,     0,    28,
    29,    30,    31,   137,   138,    32,    33,    34,    35,     0,
    36,    37,    38,     0,    39,    40,     0,     0,     0,   538,
    42,     0,   539,    44,   540,     0,   163,     0,     0,    47,
     0,     0,     0,    48,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    49,   541,    51,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    91,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    92,   164,     0,     0,    93,
     0,    53,   165,    54,    55,    56,    57,    58,     0,     0,
     0,     0,    59,   128,    60,    94,    95,    96,    22,     0,
     0,     0,    23,    24,     0,    25,    26,     0,     0,     0,
     0,     0,    27,     0,    28,    29,    30,    31,     0,     0,
    32,    33,    34,    35,     0,    36,    37,    38,     0,    39,
    40,     0,     0,     0,    41,    42,     0,    43,    44,    45,
     0,   365,     0,     0,    47,     0,     0,     0,    48,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    49,    50,    51,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    52,     0,     0,     0,     0,    53,     0,    54,    55,
    56,    57,    58,     0,     0,     0,    22,    59,     0,    60,
    23,    24,     0,    25,    26,     0,     0,     0,     0,     0,
    27,     0,    28,    29,    30,    31,     0,     0,    32,    33,
    34,    35,     0,    36,    37,    38,     0,    39,    40,     0,
     0,     0,    41,    42,     0,    43,    44,    45,    88,    46,
     0,     0,    47,     0,     0,   136,    48,   225,     0,     0,
     0,     0,     0,   137,   138,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    49,    50,    51,     0,   428,
     0,     0,   429,   228,   430,    88,   289,     0,     0,     0,
     0,     0,   136,     0,   225,     0,     0,     0,     0,    52,
   137,   138,     0,     0,    53,     0,    54,    55,    56,    57,
    58,     0,    49,   431,   232,    59,   226,    60,     0,   227,
   228,   229,     0,   519,     0,    91,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    92,    52,     0,     0,    93,
     0,     0,   140,     0,     0,     0,     0,     0,     0,    49,
   231,   232,    59,   128,   233,    94,    95,    96,     0,     0,
     0,     0,    91,     0,     0,     0,     0,     0,    88,     0,
     0,     0,    92,    52,     0,   136,    93,   225,     0,   165,
     0,     0,     0,   137,   138,     0,     0,     0,     0,    59,
   128,   233,    94,    95,    96,     0,     0,     0,     0,   428,
     0,     0,   429,   228,   430,    88,   519,     0,     0,     0,
     0,     0,    89,     0,   225,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    49,   431,   232,     0,   226,     0,     0,   227,
   228,   229,     0,   273,     0,    91,   125,     0,   126,     0,
     0,     0,     0,     0,     0,    92,    52,     0,     0,    93,
     0,     0,   165,     0,     0,     0,     0,     0,     0,    49,
   231,   232,    59,   128,   233,    94,    95,    96,     0,     0,
     0,     0,    91,     0,     0,     0,     0,     0,    88,     0,
     0,     0,    92,   127,     0,    89,    93,   225,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    59,
   128,   233,    94,    95,    96,     0,     0,     0,     0,   428,
     0,     0,   429,   228,   430,    88,   273,     0,     0,   125,
     0,   126,    89,     0,     0,     0,     0,    29,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    49,   431,   232,     0,    41,    42,     0,    43,
    44,    45,     0,   124,     0,    91,   125,     0,   126,     0,
     0,     0,     0,     0,     0,    92,   127,     0,     0,    93,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    49,
   360,     0,    59,   128,   233,    94,    95,    96,     0,     0,
     0,     0,   381,     0,     0,     0,     0,     0,    88,     0,
     0,     0,    92,   127,     0,    89,    93,   225,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   382,
   128,     0,    94,    95,    96,     0,     0,     0,     0,   226,
     0,     0,   227,   228,   229,    88,   452,     0,     0,   125,
     0,   126,    89,     0,   225,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    49,   231,   232,     0,   428,     0,     0,   429,
   228,   430,     0,   452,     0,    91,   125,     0,   126,     0,
     0,     0,     0,    88,     0,    92,    52,     0,     0,    93,
    89,     0,   225,     0,     0,     0,     0,     0,     0,    49,
   431,   232,    59,     0,   233,    94,    95,    96,     0,     0,
     0,     0,    91,     0,   658,     0,     0,   659,   228,   660,
    88,   495,    92,    52,     0,     0,    93,    89,     0,   225,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    59,
     0,   233,    94,    95,    96,     0,     0,    49,   661,   232,
     0,   226,     0,     0,   227,   228,   229,     0,   230,     0,
    91,     0,     0,     0,     0,     0,     0,     0,    88,     0,
    92,    52,     0,     0,    93,    89,   190,   225,     0,     0,
     0,     0,     0,     0,    49,   231,   232,    59,     0,   233,
    94,    95,    96,     0,     0,     0,     0,    91,     0,   428,
     0,     0,   429,   228,   430,    88,   230,    92,    52,     0,
     0,    93,    89,     0,   225,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    59,     0,   233,    94,    95,    96,
     0,     0,    49,   431,   232,     0,   428,     0,     0,   429,
   228,   430,     0,   631,     0,    91,     0,     0,     0,     0,
     0,     0,     0,    88,     0,    92,    52,     0,     0,    93,
    89,     0,   225,     0,     0,     0,     0,     0,     0,    49,
   431,   232,    59,     0,   233,    94,    95,    96,     0,     0,
     0,     0,    91,     0,   658,     0,     0,   659,   228,   660,
    88,   230,    92,    52,     0,     0,    93,    89,     0,   225,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    59,
     0,   233,    94,    95,    96,     0,     0,    49,   661,   232,
     0,   226,     0,     0,   227,   228,   229,     0,   892,     0,
    91,     0,     0,     0,     0,     0,     0,     0,    88,     0,
    92,    52,     0,     0,    93,    89,     0,   225,     0,     0,
     0,     0,     0,     0,    49,   231,   232,    59,     0,   233,
    94,    95,    96,     0,     0,     0,     0,    91,     0,   226,
     0,     0,   227,   228,   229,    88,   895,    92,    52,     0,
     0,    93,    89,     0,   225,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    59,     0,   233,    94,    95,    96,
     0,     0,    49,   231,   232,     0,   949,     0,     0,   950,
   228,   430,     0,   230,     0,    91,     0,     0,     0,     0,
     0,     0,     0,    88,     0,    92,    52,     0,     0,    93,
    89,     0,   225,     0,     0,     0,     0,     0,     0,    49,
   951,   232,    59,     0,   233,    94,    95,    96,     0,     0,
     0,     0,    91,     0,   954,     0,     0,   955,   228,   430,
    88,   230,    92,    52,     0,     0,    93,    89,     0,   225,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    59,
     0,   233,    94,    95,    96,     0,     0,    49,   956,   232,
     0,   226,     0,     0,   227,   228,   229,     0,   962,     0,
    91,     0,     0,     0,     0,     0,     0,     0,    88,     0,
    92,    52,     0,     0,    93,    89,     0,   225,     0,     0,
     0,     0,     0,     0,    49,   231,   232,    59,     0,   233,
    94,    95,    96,     0,     0,     0,     0,    91,     0,  1003,
     0,     0,  1004,   228,   430,    88,   230,    92,    52,     0,
     0,    93,    89,     0,     0,     0,     0,    29,     0,     0,
     0,     0,     0,     0,    59,     0,   233,    94,    95,    96,
     0,     0,    49,  1005,   232,     0,    41,    42,     0,    43,
    44,    45,     0,   230,     0,    91,     0,     0,     0,     0,
     0,     0,     0,    88,     0,    92,    52,     0,     0,    93,
    89,     0,     0,     0,     0,    29,    89,     0,     0,    49,
   360,     0,    59,     0,   233,    94,    95,    96,     0,     0,
     0,     0,    91,     0,    41,    42,     0,    43,    44,    45,
     0,   461,    92,    52,    89,     0,    93,    90,     0,     0,
     0,    89,     0,     0,     0,     0,     0,     0,     0,    59,
     0,     0,    94,    95,    96,     0,     0,    49,   360,     0,
     0,     0,     0,    49,     0,   901,     0,     0,     0,     0,
    91,     0,    90,     0,     0,     0,    91,     0,     0,     0,
    92,    52,    89,     0,    93,     0,    92,    52,    89,     0,
    93,    49,     0,     0,     0,     0,     0,    59,    49,     0,
    94,    95,    96,   900,    91,     0,    94,    95,    96,     0,
     0,    91,     0,    90,    92,    52,    89,     0,    93,    90,
     0,    92,    52,    89,     0,    93,     0,     0,     0,     0,
     0,   902,     0,     0,   903,    95,    96,     0,   902,    49,
     0,    94,    95,    96,     0,    49,     0,    90,     0,     0,
     0,     0,    91,     0,    90,     0,     0,     0,    91,     0,
     0,     0,    92,    52,    89,     0,    93,     0,    92,    52,
    89,     0,    93,    49,     0,     0,     0,     0,     0,   801,
    49,     0,  1063,    95,    96,   804,    91,     0,  1064,    95,
    96,     0,     0,    91,     0,    90,    92,    52,    89,     0,
    93,    90,     0,    92,    52,    89,     0,    93,     0,     0,
     0,     0,     0,   801,     0,     0,  1068,    95,    96,     0,
   804,    49,     0,  1069,    95,    96,     0,    49,     0,    90,
     0,     0,     0,     0,    91,     0,    90,     0,     0,     0,
    91,     0,     0,     0,    92,    52,    89,     0,    93,     0,
    92,    52,     0,     0,    93,    49,     0,     0,     0,     0,
     0,   902,    49,     0,  1098,    95,    96,   902,    91,     0,
  1101,    95,    96,     0,     0,    91,     0,    90,    92,    52,
     0,     0,    93,     0,     0,    92,    52,     0,     0,    93,
     0,     0,     0,     0,     0,   801,     0,     0,  1103,    95,
    96,     0,   804,    49,     0,  1104,    95,    96,     0,     0,
     0,     0,     0,     0,     0,     0,    91,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    92,    52,     0,     0,
    93,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   902,     0,     0,  1127,    95,    96
};

static const short yycheck[] = {    13,
   155,   355,     2,   159,   214,    15,   208,    92,    93,    23,
   124,   125,   126,     1,   280,   281,   282,   283,   284,    23,
    34,     1,     1,    50,    51,    15,     9,    10,    11,    12,
     2,    14,    15,    16,    17,    18,    19,   376,   123,    37,
    37,   566,   184,    46,     9,     1,   707,    47,    46,    46,
   163,    37,   165,    47,    46,    18,   198,    49,    46,    51,
    46,     1,    13,    47,    20,    46,    46,    46,    79,   112,
    81,   114,   214,    47,    46,    47,    90,   112,    46,    46,
    52,    53,    85,    39,    40,    46,    42,    43,    44,   100,
    46,    72,    53,    96,    46,     2,    46,    85,    96,    96,
    84,    47,    96,   113,    72,    46,    46,   117,    96,   112,
   124,   125,   126,    76,   112,   112,    96,    73,    90,    91,
   124,   113,    96,   113,   112,   139,   112,   117,   155,    94,
    95,   112,   112,   112,   117,   118,   119,   120,   121,    46,
    47,   155,    47,   285,   112,   112,   356,   161,   115,   163,
    96,    46,   124,    18,    46,   127,   112,   161,   114,   273,
   160,    18,   112,    37,   278,   115,   308,   139,   829,   112,
   184,   112,   286,    47,   115,    46,    46,    82,    83,   193,
   265,    46,    46,   155,   198,   199,   711,   712,   160,   189,
    37,   163,   164,    37,  1055,   195,   196,   197,   212,    46,
   214,    37,   163,    37,   204,   205,   206,   207,   212,    18,
    46,    76,   184,    24,   356,    85,   230,   189,   190,    76,
   112,    46,   194,   195,   196,   197,    96,   340,   189,   190,
  1091,   101,   204,   205,   206,   207,   349,   350,    47,   222,
    84,   213,   112,   215,   216,   217,   218,   219,   112,    96,
    84,    18,   266,   160,    47,    49,   163,    46,   230,   273,
    96,    46,    16,    16,   278,   112,    18,    76,   240,   273,
    18,   285,    46,   287,   288,   289,   112,    88,    18,    46,
    47,   295,   189,    37,    37,   299,   300,   112,   195,   196,
   197,   184,    47,    17,    46,    19,    20,   204,   205,   206,
   207,   273,   316,    96,    46,   198,   278,   334,   335,    76,
   835,   218,   219,   285,   975,    39,    40,   289,    42,    43,
    44,   214,    46,   677,    76,   325,   340,   112,    76,   140,
   421,    46,   423,    23,   145,   426,    76,   112,   452,    47,
   454,    96,   356,   499,   316,    46,   556,   158,    47,   463,
    51,   162,   352,   325,    96,   316,   622,   623,   624,   101,
    46,   700,   701,    47,    37,   337,   568,    46,   340,   563,
   112,   527,    37,    46,   163,   389,   165,   391,    47,    18,
   352,    96,    37,    47,    47,    37,    60,   391,    96,    37,
   114,    46,   285,   365,    68,    94,    95,   112,    37,    46,
   372,    37,   374,    51,   365,   419,   519,   112,    47,   381,
    46,   372,    96,   306,   556,   308,    46,    96,   325,    82,
    83,    18,   101,    96,    46,    37,    18,    96,   400,    94,
    95,   220,    96,   112,   124,   125,   126,    76,   452,   112,
   454,    96,    94,    95,    46,   352,    46,   461,   562,    96,
    47,   976,   977,     1,    49,    47,   810,   112,   365,    46,
    96,    46,   355,   356,    47,   112,    46,   439,    90,    91,
    82,   161,   146,   147,   148,   149,   112,   633,    46,    76,
   452,   495,   676,    85,    76,   679,   297,   298,    15,   461,
   504,    47,    39,   507,    96,    42,    96,    44,    38,    46,
   504,    49,   124,   517,    16,   519,    47,   521,   198,    96,
   112,    96,   112,    96,   541,   709,   607,   139,   609,    46,
   611,   612,   212,   495,   214,   112,    73,   112,     8,   685,
    46,    47,    47,   155,   495,    15,    46,    17,    85,    51,
    96,   163,   556,   557,    46,    72,   560,   519,    46,    96,
   522,   340,    47,   557,   101,    96,    46,    47,    85,    39,
   349,   350,    42,    43,    44,   112,    46,   189,    95,    96,
    46,   543,    99,    46,   546,    51,   365,    47,   932,   933,
    96,    96,   543,   273,    47,   112,    96,   941,   115,   116,
   117,    46,    72,    73,    74,    47,   112,   569,    96,   571,
   572,    96,   112,   293,   294,    85,    96,    36,   230,   100,
    37,    18,    46,    47,   112,    95,    96,   631,   240,    99,
   830,   101,   112,    96,    39,   819,    96,    42,    14,    44,
    37,    46,   112,    96,   114,   115,   116,   117,    47,   112,
    47,    96,   797,   317,    96,    39,    46,    47,    42,    47,
    79,   273,    81,   653,  1008,    82,   278,   112,    73,   631,
    82,    83,    96,   556,   571,   572,   356,   289,    47,    76,
    47,   756,    84,    47,    47,   689,   690,    17,   112,    19,
    20,   653,   682,   357,   358,    94,    95,   498,   830,    75,
    46,    77,    78,    79,   316,    81,    96,   112,    96,    39,
    40,   391,    42,    43,    44,    37,    46,    18,    39,   723,
   682,    42,   112,    44,   100,    46,   390,    96,   340,    96,
    52,    39,    96,    96,    42,    37,    44,   620,    46,    46,
   519,    47,    16,    73,    74,    46,    47,    18,    47,   722,
     1,    47,    73,   365,    47,    47,   653,     8,    16,    47,
   372,    46,   374,    37,    15,    73,    51,    39,    47,   381,
    42,    47,    94,    95,   454,    76,    47,    85,    18,    37,
    47,    82,    83,    47,   114,   682,   790,    79,    96,    81,
    96,   112,    46,    51,   677,    46,   800,    96,    49,   803,
    51,   947,    47,    96,   112,    76,    47,    47,    96,   993,
   994,    82,    83,    96,   998,   999,  1000,  1001,    47,   923,
    96,    72,    50,    47,   504,    47,   830,   439,   818,    96,
   494,    16,    96,    51,    85,   797,    76,    47,   800,    81,
   452,   803,    82,    83,    95,    96,    47,    47,    99,   461,
    52,    96,    37,    94,    95,  1039,   818,    16,   100,  1043,
  1044,   112,   113,    47,   115,   116,   117,    96,    47,    47,
    47,   875,    96,    47,    96,    47,   556,   557,    37,   112,
   884,   114,   562,   495,     2,    96,    96,   877,   892,    47,
    96,   895,    94,    95,    47,    96,    96,   901,   888,   402,
   114,   404,   405,   406,   407,   408,   409,   519,   411,   412,
    47,   414,   415,    47,    32,   877,    47,    96,    96,    96,
    48,   818,    96,    37,    96,    47,   888,   810,    46,    47,
   892,   543,    47,   895,    52,    53,    47,    51,    96,   901,
   944,   931,    60,    96,    36,    47,    47,   830,   952,   953,
    68,    18,    37,   957,   958,   959,   960,    18,   962,    96,
  1144,  1145,    96,  1147,  1148,    96,    94,    95,    36,   931,
    47,  1155,    90,    91,  1158,  1159,  1160,    79,    47,    81,
   877,    96,   112,    15,   114,    96,  1170,    79,   978,    81,
    75,   888,    77,    78,    79,    96,    81,   798,  1002,    47,
   962,    52,  1006,  1007,  1108,    52,   124,    94,    95,   127,
    79,    79,    81,    81,    46,   100,   978,   100,    37,   631,
    47,   139,    47,    47,    39,     1,    37,    42,   146,   147,
   148,   149,     8,   151,   931,    39,   154,   155,    42,    15,
    72,    47,   160,    94,    95,   163,   164,    94,    95,   932,
   933,    38,    79,    85,    81,    79,    75,    81,   941,  1021,
    79,    80,    81,    95,    96,    39,   184,    99,    42,    73,
    46,   189,   190,    49,    47,    51,   194,   195,   196,   197,
   112,   978,   200,   115,   116,   117,   204,   205,   206,   207,
    16,   112,    16,   114,  1056,   213,    72,   215,   216,   217,
   218,   219,    75,    37,    77,    78,    79,    39,    81,    85,
    42,    37,   230,    37,    39,    86,    87,    42,    39,    95,
    96,    42,   240,    99,  1021,  1008,   112,   100,   114,    47,
  1134,  1135,  1094,  1137,  1138,    39,   112,   113,    42,   115,
   116,   117,  1146,    50,     8,  1149,  1150,  1151,    73,    47,
   830,    15,    73,    46,    37,   273,    49,  1161,    51,    39,
   278,    79,    42,    81,    46,    47,    29,   285,    75,    51,
    20,   289,    79,    80,    81,    46,    47,   680,   681,    51,
    51,    79,    46,    81,   112,    49,   114,    51,   800,    39,
    40,   803,    42,    43,    44,    50,    46,     1,   316,   317,
    46,    47,    50,   112,     8,    51,   115,   325,    72,    39,
    39,    15,    42,    42,   717,   718,    47,   720,   721,   337,
    75,    85,   340,    73,    79,    80,    81,    39,    46,    47,
    42,    95,    96,    51,   352,    99,    79,    80,    81,   357,
   358,   359,    46,   923,     4,    49,     6,   365,   112,   113,
     8,   115,   116,   117,   372,    51,   374,    15,    57,     4,
     5,     6,   112,   381,   114,    23,    24,    76,    72,    76,
    46,    47,   390,    75,     2,    51,    12,    79,    80,    81,
   892,    85,   400,   895,    50,    84,    85,    37,    46,   901,
    10,    95,    96,    92,    93,    99,    96,    96,    97,    98,
    47,    21,    22,    23,    24,    77,    78,    79,   112,    81,
    47,   115,   116,   117,    72,    35,    81,    50,    46,    47,
    79,   439,    81,    50,    52,    53,    46,    85,   100,    49,
    86,    87,   293,   294,   452,    47,    82,    95,    96,    81,
    12,    99,    75,   461,   102,    96,    79,    80,    81,    47,
   962,    47,    49,    46,   112,   113,    50,   115,   116,   117,
    50,    50,    90,    91,   482,   483,   484,    52,    52,    52,
   488,   489,   490,    47,   492,     9,   494,   495,    81,   497,
    96,   101,   102,   103,    47,   105,   106,   107,   108,   109,
    96,   111,   112,    49,    47,    17,   124,    19,    20,   127,
     1,   519,    47,    33,   522,    47,    37,     8,    47,    47,
    46,   139,    81,   531,    15,    12,    51,    39,    40,    50,
    42,    43,    44,    47,    46,   543,    47,   155,   546,    47,
    96,    51,   160,    47,    96,   163,   164,    75,     2,    96,
    47,    79,    80,    81,    75,    46,    52,    37,    79,    80,
    81,   569,    47,   571,   572,    49,   184,    82,    47,    47,
    47,   189,   190,    47,    47,     8,   194,   195,   196,   197,
    96,    72,    15,    96,    37,    46,   204,   205,   206,   207,
    23,    24,    46,    47,    85,    96,    37,    46,    81,    53,
    47,    49,   114,    47,    95,    96,    96,    47,    99,     8,
    96,    37,   230,    46,    52,    47,    15,   250,    47,    47,
    47,   112,   240,   631,   115,   116,   117,   635,   636,    47,
    52,   639,    47,    47,   642,    47,    90,    91,   646,    72,
   648,    96,   650,    38,    47,   653,    50,    46,    49,   657,
    47,    47,    85,    75,   662,   273,    46,    79,    80,    81,
   278,    52,    95,    96,    50,    47,    99,   285,    47,   102,
   124,   289,    75,    72,   682,    47,    79,    80,    81,   112,
   113,    47,   115,   116,   117,   139,    85,    52,    47,    75,
    47,    77,    78,    79,    47,    81,    95,    96,   316,   112,
    99,   155,    17,   112,    19,    20,   160,   325,    38,   163,
   112,    46,    46,   112,   100,    46,   115,   116,   117,   337,
    46,    50,   340,    47,    39,    40,    51,    42,    43,    44,
    51,    46,    51,    51,   352,   189,   190,    47,    51,    51,
   194,   195,   196,   197,    47,    47,    47,   365,    52,    47,
   204,   205,   206,   207,   372,    46,   374,   765,    47,     8,
    46,   112,   770,   381,    47,    75,    15,   775,    47,    79,
    80,    81,   482,   483,   484,    47,   230,    75,    46,   112,
   490,    79,    80,    81,    50,    46,   240,   795,   421,   797,
   423,    51,   800,   426,    51,   803,    51,    46,    46,   114,
    49,     8,    51,    17,    47,    19,    20,    47,    15,    75,
   818,    47,    47,    79,    80,    81,    23,    24,    47,   273,
    47,   439,    96,    72,   278,    39,    40,    96,    42,    43,
    44,    42,    46,    96,   452,   289,    85,    96,    42,    46,
    52,    47,    47,   461,    52,    47,    95,    96,    47,    52,
    99,    86,    87,    88,    89,    90,    91,    52,    52,    94,
    95,    52,   316,   112,   113,    72,   115,   116,   117,   877,
    75,   325,    96,    47,    79,    80,    81,   495,    85,    47,
   888,    96,    42,    96,   892,    46,   340,   895,    95,    96,
    47,    15,    99,   901,    47,    96,    47,    47,   352,    82,
   114,   519,   285,    52,    52,   112,   113,    52,   115,   116,
   117,   365,    47,    47,    47,   115,    47,     8,   372,   115,
   374,    47,    46,   931,    15,   543,   636,   381,   638,   639,
   115,   641,   642,   115,   644,    47,    47,   647,    96,   649,
   650,    75,   652,    47,    47,    79,    80,    81,    72,    47,
    47,    47,    47,   115,   962,    46,   115,    47,    51,   592,
   115,    85,   595,   115,   597,    51,    47,   600,    47,    51,
   978,    95,    96,    51,   607,    99,   609,    47,   611,   612,
   613,    72,    47,    47,    47,   439,    47,   115,   112,    51,
    47,   115,   116,   117,    85,    47,    75,    51,   452,    52,
    79,    80,    81,    51,    95,    96,    51,   461,    99,    51,
    75,    52,    52,   631,    79,    80,    81,    52,    52,    52,
    52,   112,    52,    75,   115,   116,   117,    79,    80,    81,
    52,     0,     0,   417,   568,   653,   591,   670,   671,   672,
   655,   495,   101,   668,   526,    15,    -1,    -1,    -1,    -1,
    -1,   595,    -1,   597,    -1,   765,   600,   767,   768,    -1,
   770,    -1,   772,   773,   682,   519,    -1,   777,   778,   613,
    -1,    -1,   782,    -1,   784,   785,    46,    -1,   788,   789,
    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,   543,
    -1,    -1,   725,    -1,   727,    -1,    -1,   730,    -1,   732,
    -1,   734,    72,   736,   737,   738,   739,    -1,    -1,   742,
    84,    85,   745,    20,    -1,    85,    -1,   750,    92,    93,
    94,    95,    96,    97,    98,    95,    96,   671,   672,    99,
    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    -1,
    -1,    -1,   112,    -1,    -1,   115,   116,   117,    86,    87,
    88,    89,    90,    91,    -1,   865,    94,    95,    -1,   869,
    15,    -1,   872,   873,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   882,    -1,    -1,   808,   809,   631,    -1,   797,
    -1,   725,   800,    -1,    -1,   803,   730,    -1,   732,    -1,
   734,    46,   736,    -1,   738,   739,    -1,    -1,   742,   653,
   818,   745,    -1,    -1,    -1,    -1,   750,    -1,    -1,    -1,
   843,    -1,    -1,    -1,    -1,     8,   849,    72,   851,    -1,
   853,    -1,    15,    -1,    17,    -1,    19,    20,   682,    -1,
    85,    -1,    -1,    -1,    -1,   945,    -1,    -1,    -1,    -1,
    95,    96,    -1,    -1,    99,    -1,    39,    40,    -1,    42,
    43,    44,    -1,    46,    -1,    -1,    -1,   112,    -1,   877,
   115,   116,   117,    -1,   808,   809,    -1,    -1,    -1,    -1,
   888,    -1,   982,    -1,   892,   985,    -1,   895,    -1,    72,
    73,    74,    -1,   901,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,   843,
    -1,    -1,    95,    96,    -1,   849,    99,   851,   101,   853,
    -1,    -1,  1022,   931,  1024,    -1,  1026,    -1,    -1,   112,
     8,   114,   115,   116,   117,    -1,    -1,    15,    -1,    17,
    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    57,
    -1,    -1,    -1,   797,   962,    -1,   800,    -1,    -1,   803,
    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
   978,    -1,    -1,    -1,   818,    15,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
    98,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1027,  1028,    46,    85,    -1,  1032,
  1033,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,
    -1,    99,    -1,    -1,   102,    -1,    -1,    15,    -1,    -1,
    -1,    -1,    72,   877,   112,   113,   114,   115,   116,   117,
    -1,    -1,  1065,    -1,   888,    85,    -1,  1070,   892,    -1,
    -1,   895,    -1,  1076,  1077,    95,    96,   901,    46,    99,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
    -1,    -1,  1105,    -1,    72,    -1,    -1,   931,    -1,    -1,
    -1,    -1,    -1,    -1,  1028,    -1,    -1,    85,    -1,  1033,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,
    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,   962,    -1,
    -1,    -1,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
    -1,  1065,    -1,     3,   978,    -1,  1070,     7,     8,    -1,
    10,    11,    -1,  1077,    -1,    15,    -1,    17,    -1,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
    30,    31,    32,    -1,    34,    35,    -1,    -1,    -1,    39,
    40,  1105,    42,    43,    44,    -1,    46,    -1,    -1,    49,
    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,   101,   102,   103,   104,   105,   106,   107,    -1,    -1,
    -1,    -1,   112,   113,   114,   115,   116,   117,     3,    -1,
    -1,    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,
    15,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    -1,    30,    31,    32,    -1,    34,
    35,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
    -1,    46,    -1,    -1,    49,    -1,    -1,    -1,    53,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    95,    96,    -1,    -1,    99,    -1,   101,   102,   103,   104,
   105,   106,   107,    -1,    -1,    -1,    -1,   112,   113,   114,
   115,   116,   117,     3,    -1,    -1,    -1,     7,     8,    -1,
    10,    11,    -1,    -1,    -1,    15,    -1,    17,    -1,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
    30,    31,    32,    -1,    34,    35,    -1,    -1,    -1,    39,
    40,    -1,    42,    43,    44,    -1,    46,    -1,    -1,    49,
    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,   101,   102,   103,   104,   105,   106,   107,    -1,    -1,
    -1,    -1,   112,   113,   114,   115,   116,   117,     3,    -1,
    -1,    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,
    -1,    -1,    17,    -1,    19,    20,    21,    22,    -1,    -1,
    25,    26,    27,    28,    -1,    30,    31,    32,    -1,    34,
    35,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
    -1,    46,    -1,    -1,    49,    -1,    -1,    -1,    53,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    96,    -1,    -1,    -1,    -1,   101,    -1,   103,   104,
   105,   106,   107,    -1,    -1,    -1,     3,   112,    -1,   114,
     7,     8,    -1,    10,    11,    -1,    -1,    -1,    -1,    -1,
    17,    -1,    19,    20,    21,    22,    -1,    -1,    25,    26,
    27,    28,    -1,    30,    31,    32,    -1,    34,    35,    -1,
    -1,    -1,    39,    40,    -1,    42,    43,    44,     8,    46,
    -1,    -1,    49,    -1,    -1,    15,    53,    17,    -1,    -1,
    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    39,
    -1,    -1,    42,    43,    44,     8,    46,    -1,    -1,    -1,
    -1,    -1,    15,    -1,    17,    -1,    -1,    -1,    -1,    96,
    23,    24,    -1,    -1,   101,    -1,   103,   104,   105,   106,
   107,    -1,    72,    73,    74,   112,    39,   114,    -1,    42,
    43,    44,    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,   112,   113,   114,   115,   116,   117,    -1,    -1,
    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,     8,    -1,
    -1,    -1,    95,    96,    -1,    15,    99,    17,    -1,   102,
    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,   112,
   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    39,
    -1,    -1,    42,    43,    44,     8,    46,    -1,    -1,    -1,
    -1,    -1,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,    -1,    39,    -1,    -1,    42,
    43,    44,    -1,    46,    -1,    85,    49,    -1,    51,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,   112,   113,   114,   115,   116,   117,    -1,    -1,
    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,     8,    -1,
    -1,    -1,    95,    96,    -1,    15,    99,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    39,
    -1,    -1,    42,    43,    44,     8,    46,    -1,    -1,    49,
    -1,    51,    15,    -1,    -1,    -1,    -1,    20,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,    -1,    39,    40,    -1,    42,
    43,    44,    -1,    46,    -1,    85,    49,    -1,    51,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    -1,   112,   113,   114,   115,   116,   117,    -1,    -1,
    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,     8,    -1,
    -1,    -1,    95,    96,    -1,    15,    99,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
   113,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,    39,
    -1,    -1,    42,    43,    44,     8,    46,    -1,    -1,    49,
    -1,    51,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,    -1,    39,    -1,    -1,    42,
    43,    44,    -1,    46,    -1,    85,    49,    -1,    51,    -1,
    -1,    -1,    -1,     8,    -1,    95,    96,    -1,    -1,    99,
    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,   112,    -1,   114,   115,   116,   117,    -1,    -1,
    -1,    -1,    85,    -1,    39,    -1,    -1,    42,    43,    44,
     8,    46,    95,    96,    -1,    -1,    99,    15,    -1,    17,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
    -1,   114,   115,   116,   117,    -1,    -1,    72,    73,    74,
    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
    95,    96,    -1,    -1,    99,    15,   101,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    72,    73,    74,   112,    -1,   114,
   115,   116,   117,    -1,    -1,    -1,    -1,    85,    -1,    39,
    -1,    -1,    42,    43,    44,     8,    46,    95,    96,    -1,
    -1,    99,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   112,    -1,   114,   115,   116,   117,
    -1,    -1,    72,    73,    74,    -1,    39,    -1,    -1,    42,
    43,    44,    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     8,    -1,    95,    96,    -1,    -1,    99,
    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,   112,    -1,   114,   115,   116,   117,    -1,    -1,
    -1,    -1,    85,    -1,    39,    -1,    -1,    42,    43,    44,
     8,    46,    95,    96,    -1,    -1,    99,    15,    -1,    17,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
    -1,   114,   115,   116,   117,    -1,    -1,    72,    73,    74,
    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
    95,    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    72,    73,    74,   112,    -1,   114,
   115,   116,   117,    -1,    -1,    -1,    -1,    85,    -1,    39,
    -1,    -1,    42,    43,    44,     8,    46,    95,    96,    -1,
    -1,    99,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   112,    -1,   114,   115,   116,   117,
    -1,    -1,    72,    73,    74,    -1,    39,    -1,    -1,    42,
    43,    44,    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     8,    -1,    95,    96,    -1,    -1,    99,
    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,   112,    -1,   114,   115,   116,   117,    -1,    -1,
    -1,    -1,    85,    -1,    39,    -1,    -1,    42,    43,    44,
     8,    46,    95,    96,    -1,    -1,    99,    15,    -1,    17,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
    -1,   114,   115,   116,   117,    -1,    -1,    72,    73,    74,
    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
    95,    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    72,    73,    74,   112,    -1,   114,
   115,   116,   117,    -1,    -1,    -1,    -1,    85,    -1,    39,
    -1,    -1,    42,    43,    44,     8,    46,    95,    96,    -1,
    -1,    99,    15,    -1,    -1,    -1,    -1,    20,    -1,    -1,
    -1,    -1,    -1,    -1,   112,    -1,   114,   115,   116,   117,
    -1,    -1,    72,    73,    74,    -1,    39,    40,    -1,    42,
    43,    44,    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     8,    -1,    95,    96,    -1,    -1,    99,
    15,    -1,    -1,    -1,    -1,    20,    15,    -1,    -1,    72,
    73,    -1,   112,    -1,   114,   115,   116,   117,    -1,    -1,
    -1,    -1,    85,    -1,    39,    40,    -1,    42,    43,    44,
    -1,    46,    95,    96,    15,    -1,    99,    46,    -1,    -1,
    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
    -1,    -1,   115,   116,   117,    -1,    -1,    72,    73,    -1,
    -1,    -1,    -1,    72,    -1,    46,    -1,    -1,    -1,    -1,
    85,    -1,    46,    -1,    -1,    -1,    85,    -1,    -1,    -1,
    95,    96,    15,    -1,    99,    -1,    95,    96,    15,    -1,
    99,    72,    -1,    -1,    -1,    -1,    -1,   112,    72,    -1,
   115,   116,   117,   112,    85,    -1,   115,   116,   117,    -1,
    -1,    85,    -1,    46,    95,    96,    15,    -1,    99,    46,
    -1,    95,    96,    15,    -1,    99,    -1,    -1,    -1,    -1,
    -1,   112,    -1,    -1,   115,   116,   117,    -1,   112,    72,
    -1,   115,   116,   117,    -1,    72,    -1,    46,    -1,    -1,
    -1,    -1,    85,    -1,    46,    -1,    -1,    -1,    85,    -1,
    -1,    -1,    95,    96,    15,    -1,    99,    -1,    95,    96,
    15,    -1,    99,    72,    -1,    -1,    -1,    -1,    -1,   112,
    72,    -1,   115,   116,   117,   112,    85,    -1,   115,   116,
   117,    -1,    -1,    85,    -1,    46,    95,    96,    15,    -1,
    99,    46,    -1,    95,    96,    15,    -1,    99,    -1,    -1,
    -1,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
   112,    72,    -1,   115,   116,   117,    -1,    72,    -1,    46,
    -1,    -1,    -1,    -1,    85,    -1,    46,    -1,    -1,    -1,
    85,    -1,    -1,    -1,    95,    96,    15,    -1,    99,    -1,
    95,    96,    -1,    -1,    99,    72,    -1,    -1,    -1,    -1,
    -1,   112,    72,    -1,   115,   116,   117,   112,    85,    -1,
   115,   116,   117,    -1,    -1,    85,    -1,    46,    95,    96,
    -1,    -1,    99,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,    -1,    -1,    -1,    -1,   112,    -1,    -1,   115,   116,
   117,    -1,   112,    72,    -1,   115,   116,   117,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   112,    -1,    -1,   115,   116,   117
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 147 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 177 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 178 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 182 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 183 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 187 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 191 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 192 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 210 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 213 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 215 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 220 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 225 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 228 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 233 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 243 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 348 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 349 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 351 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 352 "msv.y"
{yyval.tnode=new CSyntaxNode(RETURN_STA, yyvsp[0].tnode,VOIDTYPE);;
    break;}
case 37:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 41:
#line 357 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 359 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 360 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 362 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 46:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 47:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 48:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 49:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 50:
#line 373 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 374 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 52:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 54:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 55:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 56:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 57:
#line 383 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 58:
#line 388 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 59:
#line 392 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 60:
#line 407 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 418 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 419 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 64:
#line 422 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 65:
#line 435 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 66:
#line 440 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 67:
#line 444 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 68:
#line 450 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 69:
#line 451 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 70:
#line 457 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 71:
#line 465 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 72:
#line 470 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 73:
#line 475 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 74:
#line 484 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 75:
#line 492 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 76:
#line 503 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 77:
#line 516 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 517 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 79:
#line 518 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 80:
#line 523 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 81:
#line 527 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 82:
#line 531 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 535 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 539 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 85:
#line 543 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 86:
#line 549 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 87:
#line 551 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 88:
#line 554 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 89:
#line 559 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 90:
#line 570 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 91:
#line 571 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 92:
#line 572 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 93:
#line 575 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 94:
#line 576 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 95:
#line 577 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 96:
#line 585 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 589 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 593 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 598 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 100:
#line 604 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 101:
#line 609 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 102:
#line 616 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 103:
#line 622 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 104:
#line 633 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 105:
#line 634 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 106:
#line 635 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 107:
#line 640 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 108:
#line 647 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 109:
#line 650 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 110:
#line 651 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 111:
#line 660 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 112:
#line 663 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 664 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 665 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 115:
#line 666 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 116:
#line 667 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 117:
#line 668 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 118:
#line 669 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 119:
#line 673 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 120:
#line 675 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 121:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 122:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 123:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 125:
#line 685 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 126:
#line 687 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 689 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 128:
#line 691 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 129:
#line 693 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 695 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 131:
#line 697 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 132:
#line 701 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 133:
#line 702 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 134:
#line 705 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 135:
#line 706 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 136:
#line 707 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 137:
#line 710 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 138:
#line 711 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 139:
#line 712 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 140:
#line 715 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 141:
#line 719 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 142:
#line 725 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 143:
#line 727 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 144:
#line 729 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 145:
#line 731 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 146:
#line 733 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 147:
#line 734 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 148:
#line 739 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 149:
#line 740 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 150:
#line 741 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 151:
#line 747 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 152:
#line 748 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 153:
#line 750 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 154:
#line 752 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 155:
#line 754 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 156:
#line 756 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 157:
#line 757 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 158:
#line 763 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 159:
#line 764 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 160:
#line 766 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 161:
#line 768 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 162:
#line 773 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 163:
#line 774 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 164:
#line 778 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 165:
#line 779 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 166:
#line 783 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 167:
#line 784 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 168:
#line 788 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 169:
#line 789 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 170:
#line 790 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 171:
#line 791 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 172:
#line 792 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 794 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 795 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 796 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 797 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 798 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 178:
#line 799 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 800 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 801 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 181:
#line 802 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 182:
#line 805 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 183:
#line 806 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 184:
#line 807 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 185:
#line 808 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 186:
#line 809 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 187:
#line 810 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 188:
#line 811 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 189:
#line 812 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 190:
#line 815 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 191:
#line 816 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 192:
#line 820 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 193:
#line 821 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 194:
#line 822 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 195:
#line 823 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 196:
#line 830 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 197:
#line 834 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 198:
#line 842 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 199:
#line 854 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 200:
#line 858 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 201:
#line 867 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 202:
#line 879 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 203:
#line 883 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 891 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 205:
#line 894 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 206:
#line 895 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 207:
#line 900 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 208:
#line 904 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 209:
#line 908 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 210:
#line 913 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 211:
#line 916 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 212:
#line 925 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 213:
#line 926 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 214:
#line 927 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 215:
#line 930 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 216:
#line 931 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 217:
#line 934 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 218:
#line 935 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 219:
#line 938 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 220:
#line 939 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 221:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 222:
#line 941 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 223:
#line 942 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 224:
#line 943 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 225:
#line 946 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 226:
#line 947 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 227:
#line 948 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 228:
#line 949 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 229:
#line 950 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 230:
#line 951 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 231:
#line 953 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 232:
#line 954 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 233:
#line 956 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 234:
#line 957 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 235:
#line 959 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 236:
#line 967 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 237:
#line 968 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 238:
#line 969 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 239:
#line 970 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 240:
#line 971 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 241:
#line 977 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 242:
#line 979 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 243:
#line 980 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 244:
#line 983 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 245:
#line 984 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 246:
#line 985 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 988 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 248:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 249:
#line 992 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 250:
#line 993 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 251:
#line 996 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 997 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 1000 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 254:
#line 1001 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 255:
#line 1006 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 256:
#line 1007 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 257:
#line 1008 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 258:
#line 1009 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 259:
#line 1010 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 260:
#line 1011 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 261:
#line 1019 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 262:
#line 1020 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 263:
#line 1024 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 264:
#line 1025 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 265:
#line 1032 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 266:
#line 1036 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 267:
#line 1041 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 268:
#line 1047 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 269:
#line 1053 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 270:
#line 1059 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 271:
#line 1069 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 272:
#line 1075 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 273:
#line 1081 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 274:
#line 1087 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 275:
#line 1095 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 276:
#line 1099 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 277:
#line 1103 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 278:
#line 1109 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 279:
#line 1113 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 280:
#line 1117 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 281:
#line 1123 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 282:
#line 1129 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 283:
#line 1136 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 284:
#line 1142 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 285:
#line 1148 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 286:
#line 1152 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 287:
#line 1159 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 288:
#line 1164 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 289:
#line 1168 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 290:
#line 1172 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 291:
#line 1176 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 292:
#line 1182 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 293:
#line 1188 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 294:
#line 1194 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 295:
#line 1201 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 296:
#line 1209 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 297:
#line 1215 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 298:
#line 1230 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 299:
#line 1235 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 300:
#line 1240 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 301:
#line 1248 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 302:
#line 1255 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 303:
#line 1261 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 304:
#line 1267 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 305:
#line 1270 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 306:
#line 1280 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 307:
#line 1284 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 308:
#line 1291 "msv.y"
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
case 309:
#line 1294 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 310:
#line 1295 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1300 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 312:
#line 1304 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 313:
#line 1313 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 314:
#line 1314 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 315:
#line 1322 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 316:
#line 1324 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 317:
#line 1331 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 318:
#line 1333 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 319:
#line 1339 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 320:
#line 1340 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 321:
#line 1344 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 322:
#line 1349 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 323:
#line 1354 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 324:
#line 1359 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 325:
#line 1366 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 326:
#line 1369 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 327:
#line 1370 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 328:
#line 1376 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 329:
#line 1378 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 330:
#line 1398 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 331:
#line 1399 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 332:
#line 1401 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 333:
#line 1403 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 334:
#line 1404 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 335:
#line 1410 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 336:
#line 1417 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 337:
#line 1425 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 338:
#line 1433 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 339:
#line 1437 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 340:
#line 1441 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 341:
#line 1447 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 342:
#line 1451 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 343:
#line 1457 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 344:
#line 1461 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 345:
#line 1468 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 346:
#line 1472 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 347:
#line 1476 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 348:
#line 1483 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 349:
#line 1487 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 350:
#line 1490 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 351:
#line 1495 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 352:
#line 1504 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 353:
#line 1505 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 354:
#line 1511 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 355:
#line 1512 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 356:
#line 1516 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 357:
#line 1517 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 358:
#line 1522 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1523 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 360:
#line 1524 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 361:
#line 1525 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 362:
#line 1526 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 363:
#line 1529 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 364:
#line 1530 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 365:
#line 1531 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 366:
#line 1537 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1538 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1539 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1541 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1542 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1543 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1545 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1546 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1547 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1548 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1550 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1551 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1552 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1553 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 380:
#line 1554 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 381:
#line 1555 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 382:
#line 1556 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 383:
#line 1560 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 384:
#line 1561 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 385:
#line 1562 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 386:
#line 1563 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 387:
#line 1564 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 388:
#line 1565 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 389:
#line 1566 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1568 "msv.y"
