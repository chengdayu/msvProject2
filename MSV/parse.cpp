
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	RETURN	262
#define	IF	263
#define	ELSE	264
#define	EMPTY	265
#define	AWAIT	266
#define	PROJECTION	267
#define	PBEGIN	268
#define	PEND	269
#define	POINTERNULL	270
#define	ARRAY	271
#define	STRUCT	272
#define	DOT	273
#define	UNION	274
#define	FILEDECLARATION	275
#define	MORE	276
#define	DEFINE	277
#define	MY_TRUE	278
#define	MY_FALSE	279
#define	EXIST	280
#define	FRAME	281
#define	FOR	282
#define	WHILE	283
#define	DO	284
#define	TRUE	285
#define	FALSE	286
#define	REPEAT	287
#define	UNTIL	288
#define	DISPLAY	289
#define	SKIP	290
#define	THEN	291
#define	COMMA	292
#define	COLON	293
#define	INTDECLARATION	294
#define	STRDECLARATION	295
#define	POINTERDECLARATION	296
#define	CHARDECLARATION	297
#define	VOIDDECLARATION	298
#define	FLOATDECLARATION	299
#define	LISTDECLARATION	300
#define	OPEN_PAR	301
#define	CLOSE_PAR	302
#define	TIMES	303
#define	OPEN_BPAR	304
#define	CLOSE_BPAR	305
#define	OPEN_MPAR	306
#define	CLOSE_MPAR	307
#define	FUNCTION	308
#define	OVER	309
#define	CYLINDER	310
#define	OVEREP	311
#define	INTER_OR	312
#define	NON_DETERMINED	313
#define	SEND	314
#define	RECEIVE	315
#define	PROCESS	316
#define	CHANNEL	317
#define	PUT	318
#define	GET	319
#define	ERROR_TOKEN	320
#define	STRFUNCHEAD	321
#define	STRFUNCTAIL	322
#define	STRFUNCCAT	323
#define	STRFUNCCMP	324
#define	STRFUNCCPY	325
#define	STRFUNCLEN	326
#define	EXTERN	327
#define	UNSIGNED	328
#define	SIGNED	329
#define	CHOP	330
#define	IMPLY	331
#define	IFF	332
#define	PROPIMPLY	333
#define	OR	334
#define	PARALLEL	335
#define	AND	336
#define	ASS_P	337
#define	ASS_N	338
#define	CON	339
#define	ADDRESS	340
#define	NE	341
#define	EQ	342
#define	GE	343
#define	LE	344
#define	GT	345
#define	LT	346
#define	LST	347
#define	RST	348
#define	ADD	349
#define	SUB	350
#define	MUL	351
#define	DIV	352
#define	MOD	353
#define	BNE	354
#define	CHOPSTAR	355
#define	NEXT	356
#define	NEGATION	357
#define	LENGTH	358
#define	REQUEST	359
#define	FINAL	360
#define	KEEP	361
#define	ALWAYS	362
#define	HALT	363
#define	W_NEXT	364
#define	PREFIX	365
#define	SOMETIMES	366
#define	ID	367
#define	STRLITERAL	368
#define	STRUCT_TYPE	369
#define	INTLITERAL	370
#define	FLOATLITERAL	371
#define	CHARLITERAL	372

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1173
#define	YYFLAG		-32768
#define	YYNTBASE	118

#define YYTRANSLATE(x) ((unsigned)(x) <= 372 ? yytranslate[x] : 192)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   114,   116,   118,   120,
   122,   127,   132,   137,   142,   151,   153,   155,   157,   162,
   164,   166,   168,   170,   175,   179,   187,   197,   204,   210,
   219,   229,   231,   233,   241,   245,   247,   251,   253,   254,
   259,   265,   270,   275,   278,   281,   284,   287,   289,   292,
   295,   299,   303,   307,   311,   319,   328,   340,   354,   356,
   358,   360,   362,   364,   366,   369,   376,   381,   387,   393,
   402,   411,   414,   417,   420,   421,   428,   436,   437,   440,
   444,   446,   448,   450,   452,   456,   459,   461,   473,   486,
   498,   510,   528,   547,   565,   584,   604,   623,   641,   660,
   678,   680,   682,   684,   686,   688,   699,   703,   705,   710,
   716,   728,   741,   753,   765,   778,   782,   786,   789,   790,
   793,   796,   799,   807,   814,   819,   823,   825,   829,   833,
   839,   841,   845,   848,   849,   851,   855,   857,   860,   863,
   865,   867,   869,   871,   873,   875,   879,   881,   883,   885,
   887,   889,   891,   893,   895,   897,   899,   901,   903,   905,
   907,   911,   913,   915,   919,   924,   929,   934,   939,   944,
   949,   953,   957,   961,   962,   965,   968,   971,   974,   977,
   981,   986,   991,   996,  1002,  1008,  1014,  1020,  1026,  1033,
  1039,  1045,  1052,  1058,  1065,  1073,  1080,  1087,  1095,  1102,
  1109,  1115,  1123,  1130,  1132,  1134,  1137,  1141,  1145,  1149,
  1153,  1155,  1157,  1159,  1163,  1167,  1171,  1175,  1179,  1183,
  1187,  1191,  1195,  1199,  1201,  1203,  1205,  1207,  1209,  1211,
  1214,  1217,  1219,  1221,  1225,  1228,  1232,  1237,  1243,  1248,
  1252,  1257,  1263,  1268,  1271,  1275,  1280,  1283,  1287,  1292,
  1297,  1303,  1311,  1316,  1320,  1326,  1335,  1336,  1341,  1345,
  1350,  1355,  1361,  1367,  1373,  1379,  1386,  1396,  1397,  1405,
  1415,  1424,  1430,  1435,  1438,  1441,  1443,  1444,  1447,  1451,
  1458,  1459,  1462,  1466,  1469,  1473,  1476,  1478,  1482,  1484,
  1486,  1488,  1490,  1494,  1495,  1498,  1499,  1503,  1505,  1508,
  1512,  1516,  1520,  1524,  1530,  1540,  1542,  1544,  1545,  1547,
  1548,  1550,  1551,  1559,  1567,  1573,  1576,  1578,  1579,  1585,
  1588,  1589,  1594,  1600,  1601,  1605,  1610,  1616,  1621,  1627,
  1632,  1633,  1637,  1641,  1646,  1651,  1656,  1661,  1666,  1671,
  1676,  1681,  1688,  1693,  1698,  1703,  1710,  1714,  1718,  1723,
  1727,  1728,  1732,  1736,  1740,  1744,  1747
};

static const short yyrhs[] = {   119,
   122,     0,    13,   120,    14,     0,     0,   120,    81,   120,
     0,   120,    79,   120,     0,   120,    77,   120,     0,   120,
    78,   120,     0,   120,    75,   120,     0,   107,   120,     0,
   106,   120,     0,   111,   120,     0,   109,   120,     0,   101,
   120,     0,    35,     0,    23,     0,    24,     0,   103,   142,
     0,    10,     0,    21,     0,   108,   120,     0,   105,   120,
     0,   102,   120,     0,    49,   120,   121,    50,    12,    49,
   120,    50,     0,   112,     0,    22,   112,    38,   157,     0,
   120,   100,     0,    46,   120,    47,     0,    37,   120,   121,
     0,     0,   122,    81,   122,     0,   122,    79,   122,     0,
   122,    75,   122,     0,   133,     0,   128,     0,   181,     0,
     7,   112,     0,   184,     0,   175,     0,   176,     0,   177,
     0,   101,    46,   122,    47,     0,   106,    46,   122,    47,
     0,   107,    46,   122,    47,     0,    11,    46,   156,    47,
     0,    32,    49,   122,    50,    33,    46,   156,    47,     0,
    35,     0,    10,     0,    21,     0,   103,    46,   142,    47,
     0,   188,     0,   186,     0,    30,     0,    31,     0,   105,
    46,   122,    47,     0,   122,    80,   122,     0,    46,   174,
    47,    76,    51,   122,    52,     0,    26,    46,   167,   172,
    47,    81,    46,   122,    47,     0,    49,   122,   173,    50,
    12,   165,     0,    49,   122,    50,    12,   165,     0,    53,
   112,    46,   161,    47,    49,   122,    50,     0,    22,   112,
    46,   161,    47,    82,    49,   124,    50,     0,   126,     0,
   125,     0,    25,   167,   162,    38,    49,   122,    50,     0,
    46,   122,    47,     0,   128,     0,   128,    81,   123,     0,
   122,     0,     0,   112,    46,   163,    47,     0,    72,   112,
    46,   163,    47,     0,   139,    46,   163,    47,     0,   127,
    49,   123,    50,     0,    17,   112,     0,    19,   112,     0,
    74,   129,     0,    73,   129,     0,   129,     0,   130,   131,
     0,   114,   131,     0,    17,   112,   131,     0,    19,   112,
   131,     0,    17,   114,   131,     0,    19,   114,   131,     0,
    46,    96,   167,    47,    46,   161,    47,     0,    46,    96,
    96,   167,    47,    46,   161,    47,     0,    46,    96,   112,
    51,   142,   140,    52,    47,    46,   161,    47,     0,    46,
    96,   112,    51,   142,   140,    52,    47,    46,   161,    47,
    82,   149,     0,    39,     0,    44,     0,    42,     0,    40,
     0,    43,     0,    20,     0,   167,   132,     0,   112,    51,
   142,   140,    52,   132,     0,   167,    82,   137,   132,     0,
   112,    16,    82,   149,   132,     0,   112,    16,    82,   168,
   132,     0,   112,    51,   142,   140,    52,    82,   149,   132,
     0,   112,    51,   142,   140,    52,    82,   168,   132,     0,
    96,   131,     0,    37,   131,     0,    37,     1,     0,     0,
   112,    51,   142,   140,    52,     0,     0,    37,   112,    51,
   142,   140,    52,     0,     0,     0,    37,     1,     0,   134,
   136,   137,     0,   167,     0,   190,     0,   139,     0,   141,
     0,    46,   134,    47,     0,   101,   134,     0,   135,     0,
    46,    46,    42,    96,    47,   115,    47,    51,   142,   140,
    52,     0,    46,    46,    73,    42,    96,    47,   115,    47,
    51,   142,   140,    52,     0,    46,    46,    39,    96,    47,
   115,    47,    51,   142,   140,    52,     0,    46,    46,    44,
    96,    47,   115,    47,    51,   142,   140,    52,     0,    46,
    46,    42,    96,    47,    46,    46,    42,    96,    47,   115,
    47,    47,    51,   142,   140,    52,     0,    46,    46,    42,
    96,    47,    46,    46,    73,    42,    96,    47,   115,    47,
    47,    51,   142,   140,    52,     0,    46,    46,    42,    96,
    47,    46,    46,    39,    96,    47,   115,    47,    47,    51,
   142,   140,    52,     0,    46,    46,    73,    42,    96,    47,
    46,    46,    42,    96,    47,   115,    47,    47,    51,   142,
   140,    52,     0,    46,    46,    73,    42,    96,    47,    46,
    46,    73,    42,    96,    47,   115,    47,    47,    51,   142,
   140,    52,     0,    46,    46,    73,    42,    96,    47,    46,
    46,    39,    96,    47,   115,    47,    47,    51,   142,   140,
    52,     0,    46,    46,    39,    96,    47,    46,    46,    42,
    96,    47,   115,    47,    47,    51,   142,   140,    52,     0,
    46,    46,    39,    96,    47,    46,    46,    73,    42,    96,
    47,   115,    47,    47,    51,   142,   140,    52,     0,    46,
    46,    39,    96,    47,    46,    46,    39,    96,    47,   115,
    47,    47,    51,   142,   140,    52,     0,    82,     0,    83,
     0,   142,     0,   149,     0,   168,     0,    46,   168,    47,
    46,   130,    47,    46,   161,    47,   125,     0,    46,   137,
    47,     0,   138,     0,    96,    46,   135,    47,     0,   112,
    51,   142,   140,    52,     0,    46,    46,    39,    96,    47,
   112,    47,    51,   142,   140,    52,     0,    46,    46,    73,
    39,    96,    47,   112,    47,    51,   142,   140,    52,     0,
    46,    46,    44,    96,    47,   112,    47,    51,   142,   140,
    52,     0,    46,    46,    42,    96,    47,   112,    47,    51,
   142,   140,    52,     0,    46,    46,    73,    42,    96,    47,
   112,    47,    51,   142,   140,    52,     0,    46,   139,    47,
     0,    37,   142,   140,     0,    37,     1,     0,     0,    96,
   167,     0,    96,   141,     0,    96,   139,     0,    46,   141,
    47,    51,   142,   140,    52,     0,    96,    46,   160,    96,
    47,   142,     0,    96,    46,   142,    47,     0,    46,   141,
    47,     0,   145,     0,   145,   158,   142,     0,   142,   148,
   145,     0,     8,   156,    36,   142,   144,     0,   145,     0,
   145,   148,   145,     0,     9,   142,     0,     0,   146,     0,
   145,   147,   146,     0,   169,     0,    95,   146,     0,    99,
   146,     0,    15,     0,   171,     0,   167,     0,   139,     0,
   141,     0,   125,     0,    46,   142,    47,     0,   170,     0,
   153,     0,   154,     0,   190,     0,    96,     0,    97,     0,
    98,     0,    92,     0,    93,     0,    85,     0,    57,     0,
    84,     0,    94,     0,    95,     0,   149,    84,   149,     0,
   150,     0,   151,     0,    46,   149,    47,     0,    51,   142,
   152,    52,     0,    51,   168,   152,    52,     0,    51,   149,
   152,    52,     0,    49,   142,   152,    50,     0,    49,   168,
   152,    50,     0,    49,   149,   152,    50,     0,    37,   142,
   152,     0,    37,   168,   152,     0,    37,   149,   152,     0,
     0,    37,     1,     0,    85,   167,     0,    85,   139,     0,
    85,   190,     0,    85,   153,     0,    46,   153,    47,     0,
    46,    39,    47,   143,     0,    46,    44,    47,   143,     0,
    46,    42,    47,   143,     0,    46,    74,    39,    47,   143,
     0,    46,    74,    42,    47,   143,     0,    46,    73,    39,
    47,   143,     0,    46,    73,    42,    47,   143,     0,    46,
    39,    96,    47,   155,     0,    46,    73,    39,    96,    47,
   155,     0,    46,    44,    96,    47,   155,     0,    46,    42,
    96,    47,   155,     0,    46,    73,    42,    96,    47,   155,
     0,    46,    43,    96,    47,   155,     0,    46,    39,    96,
    96,    47,   155,     0,    46,    73,    39,    96,    96,    47,
   155,     0,    46,    44,    96,    96,    47,   155,     0,    46,
    42,    96,    96,    47,   155,     0,    46,    73,    42,    96,
    96,    47,   155,     0,    46,    43,    96,    96,    47,   155,
     0,    46,    17,   114,    96,    47,   155,     0,    46,   114,
    96,    47,   155,     0,    46,    17,   114,    96,    96,    47,
   155,     0,    46,   114,    96,    96,    47,   155,     0,   143,
     0,   157,     0,   102,   156,     0,   156,    81,   156,     0,
   156,    79,   156,     0,    46,   156,    47,     0,   142,   158,
   142,     0,    23,     0,    24,     0,   142,     0,   142,    87,
   168,     0,   142,    86,   168,     0,   168,    87,   142,     0,
   168,    86,   142,     0,   142,    87,    15,     0,   142,    86,
    15,     0,    15,    87,   142,     0,    15,    86,   142,     0,
   142,    87,   170,     0,   142,    86,   170,     0,    88,     0,
    89,     0,    86,     0,    90,     0,    91,     0,    87,     0,
    73,    39,     0,    73,    42,     0,   159,     0,   130,     0,
   160,   167,   162,     0,   160,   162,     0,   114,   167,   162,
     0,   114,    96,   167,   162,     0,   114,    96,    96,   167,
   162,     0,   114,   167,    16,   162,     0,   112,   167,   162,
     0,   112,    96,   167,   162,     0,   112,    96,    96,   167,
   162,     0,   112,   167,    16,   162,     0,   114,   162,     0,
   114,    96,   162,     0,   114,    96,    96,   162,     0,   112,
   162,     0,   112,    96,   162,     0,   112,    96,    96,   162,
     0,   160,   167,    16,   162,     0,   160,    96,   167,    16,
   162,     0,   160,   167,    16,    51,   142,    52,   162,     0,
   160,    96,   167,   162,     0,   160,    96,   162,     0,   160,
    96,    96,   167,   162,     0,    46,    96,   167,    47,    46,
   161,    47,   162,     0,     0,    37,   160,   167,   162,     0,
    37,   160,   162,     0,    37,   112,   167,   162,     0,    37,
   114,   167,   162,     0,    37,   114,    96,   167,   162,     0,
    37,   112,   167,    16,   162,     0,    37,   114,   167,    16,
   162,     0,    37,   160,   167,    16,   162,     0,    37,   160,
    96,   167,    16,   162,     0,    37,    46,    96,   167,    47,
    46,   161,    47,   162,     0,     0,    37,   160,   167,    51,
   142,    52,   162,     0,    37,   160,   167,    51,   142,    37,
   142,    52,   162,     0,    37,   160,   167,    16,    51,   142,
    52,   162,     0,    37,   160,    96,   167,   162,     0,    37,
   160,    96,   162,     0,    37,     1,     0,   137,   164,     0,
   160,     0,     0,    85,     1,     0,    37,   137,   164,     0,
    37,   112,    46,   163,    47,   164,     0,     0,    37,     1,
     0,    49,   122,    50,     0,     1,    50,     0,    46,   156,
    47,     0,     1,    47,     0,   112,     0,    46,   167,    47,
     0,   113,     0,   115,     0,   117,     0,   116,     0,    37,
   167,   172,     0,     0,    37,     1,     0,     0,    37,   122,
   173,     0,   157,     0,   102,   174,     0,   174,    81,   174,
     0,   174,    79,   174,     0,    46,   174,    47,     0,    28,
   166,   165,     0,    27,   142,    48,    29,   165,     0,    27,
    46,   178,    37,   179,    37,   180,    47,   165,     0,   133,
     0,   129,     0,     0,   156,     0,     0,   133,     0,     0,
     3,    46,   146,    47,    49,   182,    50,     0,     4,   146,
    38,    46,   122,    47,   183,     0,     6,    38,    46,   122,
    47,     0,     5,   182,     0,   182,     0,     0,     8,   156,
    36,   165,   185,     0,     9,   165,     0,     0,    34,    46,
   137,    47,     0,    34,    46,   137,   187,    47,     0,     0,
    37,   137,   187,     0,   104,    46,   167,    47,     0,   104,
    46,   167,   189,    47,     0,   104,    46,   139,    47,     0,
   104,    46,   139,   189,    47,     0,   104,    46,   190,    47,
     0,     0,    37,   167,   189,     0,    37,   139,   189,     0,
   167,    18,   167,   191,     0,   139,    18,   167,   191,     0,
   141,    18,   167,   191,     0,   167,    18,   139,   191,     0,
   139,    18,   139,   191,     0,   141,    18,   139,   191,     0,
   167,    76,   167,   191,     0,   139,    76,   167,   191,     0,
    46,   153,    47,    76,   167,   191,     0,   141,    76,   167,
   191,     0,   167,    76,   139,   191,     0,   139,    76,   139,
   191,     0,    46,   153,    47,    76,   139,   191,     0,   167,
    18,   125,     0,   167,    76,   125,     0,   141,    76,   139,
   191,     0,    46,   190,    47,     0,     0,    18,   167,   191,
     0,    18,   139,   191,     0,    76,   167,   191,     0,    76,
   139,   191,     0,    18,   125,     0,    76,   125,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   146,   177,   178,   182,   183,   184,   185,   186,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   204,   205,   206,
   207,   208,   209,   213,   214,   219,   220,   224,   228,   233,
   235,   242,   348,   349,   351,   352,   353,   354,   355,   356,
   357,   359,   360,   362,   363,   364,   365,   366,   367,   373,
   374,   375,   376,   377,   378,   380,   383,   389,   393,   399,
   407,   417,   419,   421,   435,   439,   443,   450,   451,   456,
   461,   466,   475,   483,   494,   508,   509,   510,   514,   518,
   522,   526,   530,   534,   541,   543,   545,   550,   562,   563,
   564,   567,   568,   569,   576,   580,   584,   589,   595,   600,
   607,   613,   624,   626,   627,   631,   638,   642,   643,   651,
   655,   656,   657,   658,   659,   660,   661,   664,   666,   668,
   670,   672,   674,   676,   678,   680,   682,   684,   686,   688,
   693,   694,   697,   698,   699,   702,   703,   704,   707,   711,
   716,   718,   720,   722,   724,   726,   730,   732,   733,   739,
   740,   741,   743,   745,   747,   749,   755,   756,   758,   759,
   765,   766,   770,   771,   775,   776,   780,   781,   782,   783,
   784,   786,   787,   788,   789,   790,   791,   792,   793,   794,
   797,   798,   799,   800,   801,   802,   803,   804,   806,   808,
   812,   813,   814,   815,   821,   825,   833,   845,   849,   858,
   870,   874,   882,   886,   887,   890,   895,   899,   904,   908,
   915,   918,   919,   922,   923,   926,   927,   930,   931,   932,
   933,   934,   935,   938,   939,   940,   941,   942,   943,   945,
   946,   948,   949,   951,   959,   960,   961,   962,   963,   969,
   971,   972,   975,   976,   977,   980,   981,   984,   985,   988,
   989,   992,   993,   998,   999,  1000,  1001,  1002,  1003,  1010,
  1012,  1015,  1017,  1023,  1027,  1032,  1038,  1044,  1050,  1060,
  1066,  1072,  1078,  1086,  1090,  1094,  1100,  1104,  1108,  1114,
  1120,  1127,  1133,  1139,  1143,  1150,  1156,  1159,  1163,  1167,
  1173,  1179,  1185,  1192,  1200,  1206,  1221,  1227,  1230,  1238,
  1246,  1252,  1258,  1262,  1271,  1282,  1286,  1287,  1291,  1295,
  1305,  1306,  1314,  1316,  1323,  1325,  1331,  1332,  1336,  1341,
  1346,  1351,  1357,  1361,  1362,  1368,  1369,  1380,  1391,  1392,
  1394,  1396,  1402,  1408,  1416,  1424,  1428,  1432,  1438,  1442,
  1448,  1452,  1459,  1463,  1467,  1474,  1478,  1482,  1486,  1496,
  1497,  1503,  1504,  1508,  1509,  1514,  1515,  1516,  1517,  1518,
  1521,  1522,  1523,  1529,  1530,  1531,  1533,  1534,  1535,  1537,
  1538,  1539,  1540,  1542,  1543,  1544,  1545,  1546,  1547,  1548,
  1552,  1553,  1554,  1555,  1556,  1557,  1558
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","RETURN","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN",
"PEND","POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE",
"DEFINE","MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE",
"REPEAT","UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N",
"CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp","option_exp_else_statement",
"simple_ari_exp","member_in_exp","bi_operator","ari_operator","array_exp","option_list_value",
"option_struct_list_value","inner_option_list_value","address_exp","type_cast",
"casted_element","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   118,   119,   119,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   121,   121,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   123,   123,   124,   124,   125,
   125,   125,   126,   127,   127,   128,   128,   128,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   130,   130,
   130,   130,   130,   130,   131,   131,   131,   131,   131,   131,
   131,   131,   132,   132,   132,    -1,    -1,    -1,    -1,   133,
   134,   134,   134,   134,   134,   134,   134,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   136,   136,   137,   137,   137,   137,   137,   137,   138,   139,
   139,   139,   139,   139,   139,   139,   140,   140,   140,   141,
   141,   141,   141,   141,   141,   141,   142,   142,   142,   142,
   143,   143,   144,   144,   145,   145,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
   147,   147,   147,   147,   147,   147,   147,   147,   148,   148,
   149,   149,   149,   149,   150,   150,   150,   151,   151,   151,
   152,   152,   152,   152,   152,   153,   153,   153,   153,   153,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   155,   156,   156,   156,   156,   156,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   158,   158,   158,   158,   158,   158,   159,
   159,   160,   160,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   163,   163,   163,   163,   164,   164,
   164,   164,   165,   165,   166,   166,   167,   167,   168,   169,
   170,   171,   172,   172,   172,   173,   173,   174,   174,   174,
   174,   174,   175,   176,   177,   178,   178,   178,   179,   179,
   180,   180,   181,   182,   182,   183,   183,   183,   184,   185,
   185,   186,   186,   187,   187,   188,   188,   188,   188,   188,
   189,   189,   189,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   191,   191,   191,   191,   191,   191,   191
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     2,     1,     1,     1,     1,
     4,     4,     4,     4,     8,     1,     1,     1,     4,     1,
     1,     1,     1,     4,     3,     7,     9,     6,     5,     8,
     9,     1,     1,     7,     3,     1,     3,     1,     0,     4,
     5,     4,     4,     2,     2,     2,     2,     1,     2,     2,
     3,     3,     3,     3,     7,     8,    11,    13,     1,     1,
     1,     1,     1,     1,     2,     6,     4,     5,     5,     8,
     8,     2,     2,     2,     0,     6,     7,     0,     2,     3,
     1,     1,     1,     1,     3,     2,     1,    11,    12,    11,
    11,    17,    18,    17,    18,    19,    18,    17,    18,    17,
     1,     1,     1,     1,     1,    10,     3,     1,     4,     5,
    11,    12,    11,    11,    12,     3,     3,     2,     0,     2,
     2,     2,     7,     6,     4,     3,     1,     3,     3,     5,
     1,     3,     2,     0,     1,     3,     1,     2,     2,     1,
     1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     1,     1,     3,     4,     4,     4,     4,     4,     4,
     3,     3,     3,     0,     2,     2,     2,     2,     2,     3,
     4,     4,     4,     5,     5,     5,     5,     5,     6,     5,
     5,     6,     5,     6,     7,     6,     6,     7,     6,     6,
     5,     7,     6,     1,     1,     2,     3,     3,     3,     3,
     1,     1,     1,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     1,     1,     1,     1,     1,     1,     2,
     2,     1,     1,     3,     2,     3,     4,     5,     4,     3,
     4,     5,     4,     2,     3,     4,     2,     3,     4,     4,
     5,     7,     4,     3,     5,     8,     0,     4,     3,     4,
     4,     5,     5,     5,     5,     6,     9,     0,     7,     9,
     8,     5,     4,     2,     2,     1,     0,     2,     3,     6,
     0,     2,     3,     2,     3,     2,     1,     3,     1,     1,
     1,     1,     3,     0,     2,     0,     3,     1,     2,     3,
     3,     3,     3,     5,     9,     1,     1,     0,     1,     0,
     1,     0,     7,     7,     5,     2,     1,     0,     5,     2,
     0,     4,     5,     0,     3,     4,     5,     4,     5,     4,
     0,     3,     3,     4,     4,     4,     4,     4,     4,     4,
     4,     6,     4,     4,     4,     6,     3,     3,     4,     3,
     0,     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,     0,    47,     0,     0,     0,    94,    48,
     0,     0,     0,     0,     0,    52,    53,     0,     0,    46,
    89,    92,    91,    93,    90,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   317,     0,
     1,    63,    62,     0,    34,    78,     0,    33,     0,   117,
   113,   114,   111,    38,    39,    40,    35,    37,    51,    50,
   112,     0,     0,    29,    13,    22,     0,   170,     0,     0,
     0,     0,   320,   322,   321,   175,   173,   174,    17,   157,
   165,   178,   179,   172,   167,   177,   171,   180,    21,    10,
     9,    20,    12,    11,     2,     0,     0,     0,     0,     0,
    26,     0,    36,   170,   241,   242,     0,     0,   319,   243,
     0,   235,     0,     0,    74,     0,    75,     0,     0,     0,
   317,   298,     0,   338,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   175,     0,   173,   174,   178,
   328,   172,     0,   180,     0,     0,     0,     0,     0,     0,
    77,    76,     0,   317,   152,   151,   150,     0,     0,   116,
   113,     0,     0,     0,     0,     0,   307,     0,     0,   317,
    80,   105,     0,     0,     0,     0,     0,    79,   131,   132,
     0,     0,   307,     0,     0,     0,     0,     0,     0,    27,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   173,   174,     0,   178,   172,   180,     0,   207,
     0,   209,   206,   208,   168,   169,   189,   190,     0,   187,
   188,   186,   256,   259,   254,   255,   257,   258,   184,   185,
   181,   182,   183,     0,     0,     8,     6,     7,     5,     4,
     0,     0,     0,     0,   243,     0,   236,   256,   259,     0,
     0,     0,     0,     0,     0,     0,    81,    83,    82,    84,
   287,     0,     0,     0,   324,     0,    89,    91,    93,    90,
     0,     0,   337,   336,     0,     0,   316,     0,     0,     0,
   333,     0,     0,     0,     0,     0,     0,   138,   133,   134,
   192,   193,   135,     0,     0,    89,    91,    90,     0,     0,
     0,     0,   317,   150,     0,   329,    65,   115,   146,   156,
     0,   318,     0,     0,     0,   380,     0,     0,     0,   287,
   307,     0,     0,     0,     0,   263,     0,   262,     0,     0,
     0,   113,   114,     0,   111,   112,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   311,   306,     0,   149,
   102,     0,     0,     0,     0,    95,    32,    31,    55,    30,
     0,    66,   110,     0,   381,   381,     0,   381,   381,   381,
   381,   381,   381,   377,   381,   381,   378,   381,   381,    25,
    29,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   176,   210,     0,     0,     0,     0,     0,     0,   159,   166,
   158,     0,   251,   250,   239,   249,   245,   253,   248,   244,
   252,   240,   351,   238,   237,   247,   246,    44,     0,   298,
   298,   298,     0,   304,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,     0,   340,     0,   315,   314,     0,
     0,     0,     0,     0,     0,     0,     0,   204,   204,   204,
   204,   204,   204,     0,     0,   352,     0,     0,     0,     0,
     0,     0,    89,    91,    89,    91,   332,   150,     0,     0,
     0,     0,     0,     0,     0,   331,   330,   326,     0,     0,
     0,     0,     0,   317,     0,   260,   261,   155,     0,    89,
    91,    90,     0,    41,     0,     0,    49,     0,   358,     0,
   356,     0,   360,    54,    42,    43,   308,     0,   305,    70,
     0,     0,     0,   149,   104,   103,   105,    73,     0,     0,
     0,     0,     0,   368,   365,    72,   375,   371,   369,   366,
   379,   373,   367,   364,   374,   370,    28,     0,   164,     0,
   211,   161,     0,     0,   213,     0,     0,     0,     0,   212,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   349,     0,   298,   277,   298,   298,   274,   298,   298,
   265,   298,     0,     0,   298,     0,   298,   298,   289,   298,
     0,   325,   324,     0,     0,     0,     0,     0,     0,     0,
   339,     0,   334,   313,     0,   137,   194,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   354,
   353,     0,   191,     0,     0,     0,     0,     0,     0,   149,
   287,   332,   149,   381,   381,     0,   327,    59,     0,     0,
    71,     0,     0,     0,     0,     0,     0,    89,    91,     0,
     0,     0,     0,   361,   361,   359,   357,   312,   317,   311,
   148,   149,   140,   105,   105,     0,    97,    67,   386,   381,
   381,   387,   381,   381,     0,     0,   160,     0,     0,     0,
   234,   218,     0,   221,     0,   223,     0,   220,     0,     0,
     0,     0,     0,   216,     0,     0,   217,     0,     0,   214,
   215,   231,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   350,     0,   298,   278,   298,   298,   270,   298,   275,
   298,   298,   266,     0,   284,   298,   298,   264,     0,     0,
   298,   290,   298,   298,   291,   303,   298,   298,     0,   288,
     0,   323,     0,     0,     0,   342,     0,     0,   205,   204,
   204,   204,   198,   200,   199,   195,   197,   196,     0,   139,
   355,     0,   317,   320,     0,   317,   320,   317,   320,     0,
     0,   287,     0,     0,     0,   376,   372,     0,    58,     0,
   149,   154,     0,     0,     0,     0,     0,     0,   363,   362,
   307,   309,   147,    98,    99,   105,   383,   382,   385,   384,
     0,   163,   230,     0,   162,   224,   227,   229,   226,     0,
   219,     0,   222,     0,   233,     0,     0,     0,     0,     0,
     0,   343,     0,   279,   298,   271,   273,   276,   298,   267,
   269,   298,   298,   283,     0,   280,    69,     0,   293,   292,
   294,   298,   302,     0,   295,     0,    64,     0,   341,     0,
     0,     0,   201,   203,   202,     0,     0,     0,     0,     0,
     0,     0,     0,   317,     0,   317,   320,     0,   140,    85,
   153,    56,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    96,    23,   232,   225,
   228,     0,     0,     0,   287,   272,   268,   285,   281,     0,
    68,     0,   287,   296,     0,     0,   298,     0,     0,    45,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    86,     0,    60,
     0,     0,     0,     0,     0,     0,     0,    70,   105,   105,
     0,     0,     0,   298,    61,     0,   298,     0,   299,    57,
   335,   287,     0,     0,     0,   149,   149,     0,     0,     0,
   149,   149,   149,   149,     0,     0,     0,     0,     0,     0,
   287,     0,     0,     0,     0,     0,     0,     0,   310,   100,
   101,     0,   345,   298,   282,   298,   301,   298,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   149,     0,     0,     0,   149,   149,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   348,   286,   297,
   300,     0,   320,   320,     0,   141,   120,   320,   320,     0,
   144,   118,   143,   121,     0,     0,     0,     0,     0,     0,
    87,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   347,   344,     0,     0,   136,     0,     0,     0,   320,
     0,     0,   320,   142,   320,   320,     0,   145,   119,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   346,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   320,    88,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   149,   149,     0,
   149,   149,     0,     0,     0,     0,     0,     0,   149,     0,
     0,   149,   149,   149,     0,   130,   128,     0,   124,   122,
     0,     0,     0,   149,   129,   123,   127,   125,     0,   126,
     0,     0,     0
};

static const short yydefgoto[] = {  1171,
     2,    21,   212,   155,   381,   932,    96,    63,    64,    65,
    66,    67,   371,   376,    68,    69,    70,   201,   367,   308,
    97,   542,    98,   130,   711,   707,   100,   101,   254,   239,
   310,   311,   312,   642,   102,   103,   712,   266,   132,   270,
   348,   452,   453,   284,   369,   539,   443,   148,   104,   133,
   105,   106,   107,   461,   339,   163,    74,    75,    76,   295,
   632,   880,    77,   741,  1083,    78,   602,    79,   487,    80,
   530,   108,   554
};

static const short yypact[] = {    48,
  2427,  2997,-32768,-32768,   -59,-32768,-32768,-32768,  2427,  2427,
  2427,  2427,   835,  2427,  2427,  2427,  2427,  2427,  2427,-32768,
     2,    46,    -4,  1852,-32768,    66,   467,   471,-32768,-32768,
   156,    18,   158,   955,   119,-32768,-32768,   245,   255,-32768,
-32768,-32768,-32768,-32768,-32768,  2544,  2997,   232,   243,   496,
   496,   111,   275,   327,   363,   374,   380,   403,   441,   151,
   824,-32768,-32768,   434,-32768,-32768,   151,-32768,   237,-32768,
   481,    78,    80,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   483,   978,  1113,   409,   409,  1852,-32768,  3396,   295,
   569,   569,-32768,-32768,-32768,-32768,   481,    78,   923,  1909,
-32768,-32768,-32768,    80,-32768,-32768,-32768,-32768,   409,   409,
   409,   409,   409,   409,-32768,  2427,  2427,  2427,  2427,  2427,
-32768,   569,-32768,  1038,-32768,-32768,  1572,  1852,-32768,  1634,
   524,-32768,  1054,  1852,   151,   151,   151,   151,   480,    18,
-32768,   555,    18,  2234,   644,   550,  1852,   309,  2997,   672,
  1852,  2659,   159,  3858,  1082,  1100,   827,   573,   548,   565,
-32768,   570,   438,   878,   909,   625,   680,   970,   984,   640,
-32768,-32768,  1358,   691,-32768,-32768,-32768,  2889,   318,-32768,
    92,   835,   199,  2997,  2997,  2997,  1272,   835,   151,   213,
-32768,   174,  2997,  2997,  2997,  2997,  1480,-32768,-32768,-32768,
   672,    28,  1272,    28,    28,    28,   153,   153,  2176,-32768,
  2427,   709,   728,   663,   -27,   -23,   715,    20,  3444,   605,
   652,   731,   375,   502,   371,   758,   665,   786,   296,   841,
    78,-32768,   848,-32768,-32768,-32768,-32768,-32768,   569,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   569,   835,  1430,  1056,  1056,   248,   742,
   828,   835,   835,  2397,  1183,   546,-32768,     8,    35,   835,
   309,  1852,  1852,   835,   835,   982,-32768,-32768,-32768,-32768,
  1589,   839,    12,   813,   864,  1090,   -27,   -23,   715,    20,
  3311,   381,-32768,-32768,   912,   943,-32768,  1002,   933,  2997,
-32768,  1128,  3154,  3895,  3895,   422,   658,-32768,   923,   948,
-32768,-32768,-32768,   804,  1186,    40,   130,   227,   774,  1214,
  1022,   111,   985,   997,  3034,-32768,-32768,-32768,-32768,  1007,
   986,-32768,   990,  3858,  3858,-32768,  2997,  1078,  1063,  1589,
  1272,   151,   151,   484,   974,-32768,   542,-32768,  1006,  2774,
  1120,   375,   502,   565,   665,   786,   304,   564,   296,   661,
   693,  1073,  1204,  1228,  1333,   220,  1096,-32768,  1104,    69,
-32768,  1076,   835,    26,   672,-32768,   994,  1083,  1083,-32768,
  1133,  1108,-32768,    43,   397,   397,  1146,   397,   397,   397,
   397,   397,   397,-32768,   528,   397,-32768,   528,   397,-32768,
  1113,  1198,   835,  1102,   569,   238,   569,   302,   341,   569,
   415,   427,   459,   475,  1004,   552,   554,  1173,  1177,   567,
-32768,   986,   458,   696,   502,   758,   665,   786,  1478,-32768,
   923,  1176,   923,   923,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   923,  1223,  1162,-32768,   923,   923,-32768,  1152,   -12,
   116,   221,  1202,-32768,  1159,    18,   506,   267,  1210,    17,
  1218,   517,  3359,  1244,   336,  1852,   309,-32768,-32768,  1267,
  1273,  3191,  1258,   371,    19,  1266,  1798,   262,   150,  1289,
   262,   150,  1289,  3821,   672,-32768,  1290,   461,   992,   576,
   586,   592,   593,   620,  1173,  1177,   990,  1296,   835,  1305,
  3071,  1065,   835,    28,  1314,  1298,-32768,   929,   309,  1391,
  1334,  1359,    18,  1371,   997,-32768,-32768,-32768,  1382,  1343,
  1344,  1346,  1310,-32768,  1053,   696,-32768,    28,-32768,  1398,
-32768,  1405,-32768,-32768,-32768,-32768,-32768,   452,-32768,-32768,
  1151,  1403,   195,    69,-32768,-32768,  1421,-32768,  1480,   233,
  1412,   153,   153,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1413,    56,   677,
-32768,  1384,   569,  1417,-32768,   569,  1418,   569,  1420,-32768,
   569,  1425,   678,   699,   700,   593,   701,   569,   723,   569,
   734,   569,   569,   569,  1439,  1392,  1396,  1406,  1072,  1316,
   309,-32768,    18,   272,-32768,   713,   289,-32768,   749,   301,
-32768,   920,  1419,    18,   927,    18,   928,    49,-32768,   729,
  2997,-32768,   864,  1422,   393,    40,   130,   227,  1145,   449,
  1293,  1450,-32768,-32768,  1448,-32768,-32768,  1458,  3274,    19,
   907,  1462,  1463,  1464,  1466,  1469,  1473,  3481,  1468,  1479,
-32768,   461,-32768,   882,  1685,  1789,   743,   745,  1481,    69,
  1589,-32768,    69,   397,   397,  2997,-32768,-32768,   309,  1482,
-32768,  1296,   835,   835,  1485,  1489,  1491,  1432,  1433,  1343,
  1344,  1346,  1222,  1502,  1502,-32768,-32768,-32768,   934,  1096,
-32768,    69,-32768,   252,  1421,  1488,-32768,-32768,-32768,   528,
   397,-32768,   528,   397,  2427,   835,-32768,   569,  1494,   569,
-32768,-32768,   569,-32768,   569,-32768,   569,-32768,   569,  2275,
  3904,  3910,   757,-32768,   569,  1496,-32768,   569,  1497,-32768,
-32768,-32768,   569,  1500,  1503,  1504,  1432,  1453,   569,  1514,
  1505,-32768,  1509,    49,-32768,   555,   555,-32768,    49,-32768,
   555,   555,-32768,    18,-32768,  1015,    -2,-32768,  1510,  1518,
   555,-32768,   555,   555,-32768,-32768,  1052,   373,   835,-32768,
  1598,-32768,  1523,   486,   620,   318,  1852,  1320,-32768,   262,
   150,  1289,-32768,-32768,-32768,-32768,-32768,-32768,  3529,-32768,
-32768,  3566,   922,  1526,  3614,  1059,  1530,  1235,  1531,  3946,
  3971,  1589,  1529,  1535,  1532,-32768,-32768,  1330,-32768,  2997,
    69,   923,   -24,   -18,  1178,  1541,  1543,  1433,-32768,-32768,
  1272,-32768,-32768,-32768,-32768,   288,-32768,-32768,-32768,-32768,
   779,   923,-32768,   569,  1478,-32768,-32768,-32768,-32768,  3983,
-32768,   569,-32768,   569,-32768,  1486,  1490,  1498,  1544,  1555,
  1551,-32768,  1557,-32768,   555,-32768,-32768,-32768,   555,-32768,
-32768,   555,   555,-32768,   835,-32768,  2997,  1571,-32768,-32768,
-32768,   555,-32768,   835,-32768,    23,-32768,  2997,-32768,  1573,
  1074,  1574,-32768,-32768,-32768,  3651,  1576,  1579,  3699,  1583,
  1587,  1588,  1590,  1372,  3736,  1400,  1575,  1577,  1578,-32768,
-32768,-32768,  1632,  1600,  1596,  1603,  1526,  1607,  1612,  1530,
  1613,  1531,  1511,    77,  1614,   195,-32768,-32768,-32768,-32768,
-32768,  1554,  1623,  2997,  1589,-32768,-32768,-32768,-32768,   832,
   824,  1620,  1589,-32768,   939,   835,   555,  1369,   309,-32768,
  1629,   759,   781,  1257,   835,   835,   791,   797,  1299,   835,
   835,   835,   835,  1625,  3784,  1639,  1640,-32768,  1637,-32768,
  1578,   710,  1203,  1633,  1648,  1655,  1575,  1096,   252,  1421,
  2997,  1525,  1657,   555,-32768,  1659,   555,   953,-32768,-32768,
-32768,  1589,   798,   799,   815,    69,    69,   816,   817,   818,
    69,    69,    69,    69,   835,   821,   822,  1354,   835,   835,
  1589,  1599,  1621,  1666,  1631,  1636,  1667,  1262,-32768,-32768,
-32768,  1617,-32768,   555,-32768,   555,-32768,   555,  1669,  4008,
  4044,   823,  1678,  1681,  4050,  4056,   825,  1682,  1683,  1684,
  1686,    69,   833,   845,   849,    69,    69,  1690,  1692,  1693,
  1645,  1695,  1699,  1651,  1652,  1658,  1711,  1428,-32768,-32768,
-32768,   176,  1708,  1709,  4091,-32768,-32768,  1716,  1717,  4098,
-32768,-32768,-32768,-32768,  1706,  4132,  4139,   859,  1713,  1714,
  1687,  1653,  1656,  1725,  1661,  1664,  1727,  1736,  1739,  1694,
  1316,-32768,-32768,    47,   441,-32768,  1742,  1744,  1745,  1746,
  1747,  1749,  1751,-32768,  1752,  1756,  4173,-32768,-32768,   461,
  1708,  1709,  1674,  1716,  1717,  1696,  1697,  1704,  1758,-32768,
   689,   691,  1757,  1759,  1767,  1769,  1770,  1776,  1779,  1780,
  1782,   948,  1746,  1751,  1752,  1756,  1718,   835,   835,  1781,
   835,   835,  1783,  1785,  1787,  1784,  1782,    69,    69,   835,
    69,    69,   835,   835,   835,  1788,  1793,  1794,    69,  1796,
  1799,    69,    69,    69,   835,-32768,-32768,  1800,-32768,-32768,
  1801,  1802,  1803,    69,-32768,-32768,-32768,-32768,  1804,-32768,
  1850,  1858,-32768
};

static const short yypgoto[] = {-32768,
-32768,    27,  1461,     0,  1315,-32768,    24,-32768,-32768,  -183,
   -39,  -170,   216,  -528,  -138,    81,  1375,-32768,   -60,-32768,
   250,  -317,  1242,   -13,  -306,-32768,  1368,   -82,-32768,  1301,
  -274,-32768,-32768,  -300,   671,-32768,  1522,   -19,    61,  1765,
-32768,  -125,  -339,  1366,  -199,  -675,  -140,-32768,  1033,   -68,
-32768,   946,-32768,  1245,  1370,   -95,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -857,-32768,-32768,-32768,-32768,  1227,-32768,
  -354,  1566,   311
};


#define	YYLAST		4290


static const short yytable[] = {    99,
   511,    61,   346,   387,   131,   294,   532,   301,   235,   236,
   171,   172,   454,   382,   822,   115,   346,   622,   697,   405,
   145,   905,   436,   407,   283,    62,   545,   908,   475,   479,
   482,    29,   346,   140,   283,    83,    84,    85,    86,   261,
   109,   110,   111,   112,   113,   114,   165,   349,   865,   439,
    41,    42,    82,    43,    44,    45,   321,   455,   326,   936,
     1,   368,   140,   140,   706,   637,   410,   213,   406,   156,
    62,   140,   408,   384,   937,   225,   116,   368,   117,   118,
   119,   313,   120,   604,   345,   283,   405,   906,   550,   307,
   907,   122,  1111,   909,   140,   205,   910,   207,   571,   141,
   575,   121,   488,   580,   293,   541,   161,   123,   267,   202,
   346,   134,   346,   265,   276,   411,   237,   238,   313,   146,
   129,   189,   965,   456,    95,   457,   157,   298,   141,   141,
   225,   314,   313,   180,   313,   490,   309,   190,   265,   174,
   383,   512,   256,   257,   258,   259,   260,   129,   302,   237,
   238,    95,   283,   206,   174,   208,   173,   458,  1112,   347,
   141,   140,   237,   238,   147,   824,   825,   204,   358,   346,
   346,   430,    62,   309,   370,   156,   407,   351,   643,   644,
   645,   646,   647,   363,   364,   365,   641,   309,   966,   309,
  1082,   967,   377,   378,   379,   380,   140,   475,   384,   437,
   440,    62,   640,   143,   173,   225,    52,    62,    62,    62,
   374,   607,   161,   653,   161,   368,    62,    62,    62,    62,
   537,  1084,   174,  1110,    49,   491,   696,   141,   372,   502,
   394,   397,   157,   488,   476,   480,   483,   401,   506,   507,
   652,   431,   473,   304,   359,   305,   189,    49,   433,   434,
   265,    71,   444,   445,   322,   375,   442,   283,   157,   180,
   446,   447,   190,   373,    59,   229,   140,   139,   694,   400,
   323,   596,   313,   410,   597,   191,   598,   225,   550,   171,
   172,   724,   198,   727,   573,   730,   731,  1085,   374,   474,
   478,   481,  1009,   149,    52,   158,    71,   917,   641,   470,
   150,   175,   181,   283,    90,   599,   313,   129,   283,   299,
   174,   265,   140,   346,   547,    52,   610,   140,   199,   200,
   178,   804,   492,    62,   374,   283,   633,   309,   120,   819,
   820,   174,   141,   574,   140,   488,   508,   283,   223,   230,
   229,   423,   803,   166,   174,   805,   140,   121,   576,   525,
   277,   278,   279,   280,   167,   237,   238,   300,   349,   544,
    62,   309,   618,   357,   640,   382,   781,   744,   668,   916,
    52,   464,   182,   156,   823,   179,   223,   640,   141,    90,
    90,   140,   594,   141,   749,   161,   174,   578,    90,   569,
    52,    52,   202,   158,   161,   161,   754,   577,    71,    52,
   141,   158,   175,   476,   179,   502,   174,   174,   183,   283,
   161,   473,   141,    52,   552,   174,   313,   421,   179,   184,
   203,   329,   223,   874,   650,   185,   140,   352,   181,   174,
   157,   630,   360,    71,    71,    71,   579,   464,   140,   708,
  1010,  1011,    71,    71,    71,    71,   631,   190,   186,   225,
   204,   385,   688,   388,   390,   392,   395,   398,   474,    87,
   742,   581,   898,   225,   237,   238,    88,   484,   223,   313,
   347,   309,   553,   405,   695,   569,   465,   690,   424,   883,
   884,   885,   197,   171,   333,   660,   187,   265,   774,   663,
   346,   188,   190,   904,   140,   733,   596,   303,   202,   597,
   304,   598,   305,   423,   190,   407,   652,   191,-32768,   304,
   582,   305,   168,   223,   169,    29,   334,    52,   335,   205,
   209,   410,   583,    49,   309,   281,   203,   692,   809,   140,
   599,   140,   834,   174,    41,    42,    90,    43,    44,    45,
   158,   170,    90,   464,   189,   552,    91,   306,   330,    71,
    92,   140,   223,    52,   584,   175,   204,   277,   279,   271,
   190,   161,   140,   689,   129,   205,    93,    94,    95,   174,
   585,   175,   782,   203,   223,   699,   702,   206,   135,   513,
   136,   189,   137,    88,   138,   973,    71,   207,   518,   546,
   202,   283,   435,   976,   330,   514,   297,   190,   588,   158,
   590,   616,   272,   553,   273,   464,   526,   882,   424,    60,
   527,   331,   625,   594,    89,   230,   332,   141,   203,   329,
   771,   915,   654,   206,   272,   225,   273,   780,   190,  -114,
  -114,   346,   655,   551,   225,   237,   238,   879,   656,   588,
    49,   969,  1019,   416,    62,   208,   417,   589,   204,   591,
   346,  -111,  -111,    90,  -113,  -113,   850,   237,   238,   811,
   812,  1038,   595,    91,    52,   808,   590,    92,  1023,  1024,
   340,   574,   424,  1028,  1029,  1030,  1031,   278,   202,    87,
    59,   577,   207,    93,    94,    95,    88,   582,   657,    62,
   418,   296,   832,   419,   485,   368,   555,   528,   557,   558,
   559,   560,   561,   562,   486,   563,   564,   529,   565,   566,
   207,   332,   158,   202,  1065,   658,   160,   303,  1069,  1070,
   304,   223,   305,   708,   720,   341,   223,   596,   747,   528,
   597,   831,   598,   223,  1111,   344,   204,   237,   238,   531,
   208,   188,   329,    49,   768,   721,   722,   590,  1002,   283,
   223,  1003,   313,   664,   346,   876,    90,   881,   402,   226,
   232,   599,   346,   403,   752,   283,    91,   306,   208,   725,
    92,   204,   709,   574,   526,   225,   404,   684,   225,   769,
   728,   225,  1004,    59,   129,   283,    93,    94,    95,   800,
   168,   801,   169,    29,   577,   582,   723,   226,   981,   551,
  1112,   700,   703,   840,   422,   405,   272,   309,   273,   903,
   409,   346,   493,    42,   226,   494,    44,    45,   726,   170,
  1147,  1148,   226,  1150,  1151,  1122,   420,   407,   918,   729,
   346,  1158,   336,    62,  1161,  1162,  1163,   405,   726,   489,
   729,   121,    87,   407,  1020,  1021,  1169,   970,   354,    88,
   459,   930,   729,   116,   983,   117,   118,   119,   202,   120,
   935,   590,  1025,  1026,   590,   207,   931,   405,   407,  1055,
    71,  1060,   225,   328,   432,   225,   984,   938,   121,  1066,
    89,   225,   272,   974,   273,   332,   988,    60,   223,   226,
    62,  1067,   989,   574,   577,   590,    88,   223,   193,   426,
   460,    62,   194,   195,   196,  1097,    49,   779,   199,   200,
  1022,   574,   577,  1027,    87,    71,  1033,  1034,   729,    90,
   729,    88,   978,   972,   336,   237,   238,   792,   574,    91,
    52,   986,   987,    92,   226,   757,   991,   992,   993,   994,
   577,   225,   761,   764,  1068,   337,    59,    62,   466,    93,
    94,    95,   477,    49,   729,   304,   283,   305,   338,  -112,
  -112,   226,    87,   283,   283,   337,    90,   187,   887,    88,
  1012,   467,   188,   226,   806,   807,    91,    52,    49,   821,
    92,  1032,   469,   193,   188,  1036,  1037,   194,   195,   196,
   977,    90,   299,   793,    62,   226,   794,    94,    95,    87,
   144,    91,    52,   193,  1018,    92,    88,   194,   195,   196,
   827,   828,   516,   829,   830,   517,   237,   238,    59,   129,
   226,    93,    94,    95,   210,   181,    49,   354,   448,   354,
   863,   488,   237,   238,    73,   499,   232,    89,   223,    90,
   300,   223,   586,   500,   223,   587,   237,   238,   468,    91,
    52,   283,   116,    92,   117,   118,   119,   503,   120,    71,
   272,   504,   273,    49,   142,   505,    59,   872,   497,    93,
    94,    95,   194,   195,   196,  1086,    90,   121,   162,    73,
   272,   342,   273,   136,   177,    73,    91,    52,   283,   509,
    92,   680,   192,   426,   681,   343,   682,   138,   525,   192,
   334,   519,   335,    59,   187,   890,    93,    94,    95,   188,
   737,   662,   510,   738,  1138,  1139,    71,  1141,  1142,   533,
   940,   227,   233,   262,   263,   683,  1149,    71,   327,  1152,
  1153,  1154,   538,   226,   119,   223,   120,    90,   223,   274,
   275,  1164,   226,   334,   223,   335,   -63,   226,    52,   211,
   540,   691,   272,   179,   273,   121,   193,   543,    87,   227,
   194,   195,   196,   196,   174,    88,   524,   192,   192,   192,
   192,   226,   282,    71,   -63,   285,   162,   471,   -63,   -63,
   -63,    73,   548,   586,   162,   324,   775,   116,   549,   117,
   118,   119,   556,   120,   193,   426,    89,   570,   194,   195,
   196,   342,   193,   462,   223,   227,   194,   195,   196,   568,
   355,    73,   121,   438,   441,   361,    73,    73,    73,   592,
    71,   192,    49,   593,   600,    73,    73,    73,    73,   421,
   168,   601,   169,    29,   386,    90,   389,   391,   393,   396,
   399,  1005,   273,    72,  1006,    91,    52,   603,   613,    92,
   534,   227,   495,    42,   614,   496,    44,    45,   621,   170,
   737,   427,    59,   818,   624,    93,    94,    95,   268,   269,
   245,   246,   247,   248,   535,  1007,   237,   238,   193,    87,
   187,   892,   194,   195,   196,   188,    88,   159,    72,   911,
   328,    29,   912,   176,    72,   586,   227,   135,   985,   462,
  1045,  1087,   193,  1046,   636,   635,   194,   195,   196,   226,
    41,    42,   638,    43,    44,    45,   634,   303,   226,   739,
   304,   740,   305,   162,   192,   641,   168,    60,   169,    29,
   224,   231,    73,   551,  1047,   227,   651,   586,   177,    29,
   990,   193,   659,    49,   345,   194,   195,   196,   678,    42,
   661,   679,    44,    45,   498,   170,   366,   227,    41,    42,
   551,    43,    44,    45,   666,    87,    91,   306,   224,    73,
    92,   272,    88,   273,   192,   192,   515,    29,   335,   536,
   670,   902,   162,    59,   129,   159,    93,    94,    95,   355,
    72,   427,   586,   159,   176,  1035,    41,    42,   233,    43,
    44,    45,   669,   219,   193,   671,   192,   193,   194,   195,
   196,   194,   195,   196,   224,   980,   282,   187,   954,   353,
    72,   673,   188,    60,   231,    72,    72,    72,   674,    49,
   345,   739,  1081,   740,    72,    72,    72,    72,   675,   676,
   240,   677,    90,   193,   686,   187,   956,   194,   195,   196,
   188,   687,    91,    52,   693,   427,    92,   374,   329,   226,
   224,   705,   226,   713,   715,   226,   717,   241,   242,    59,
   425,   719,    93,    94,    95,   249,   250,   237,   238,   251,
   252,   253,   606,   609,   612,   733,   776,   734,   615,   617,
   620,   735,   623,   777,   192,   162,   168,   192,   169,    29,
   759,   736,   773,   778,   227,   224,   117,   118,   119,   227,
   120,   783,   784,   785,   790,   485,   227,   786,    41,    42,
   787,    43,    44,    45,   788,   170,   802,   816,   817,   121,
   810,   813,   159,   227,   240,   814,   665,   815,   528,   826,
   834,    72,   842,   844,   224,   672,   846,   176,   849,   847,
   848,   851,    50,    51,   852,   853,   226,   355,   867,   226,
   685,   241,   242,   176,   868,   226,   224,    81,   878,   249,
   250,  1013,   888,   251,   252,   253,   891,   893,    72,    87,
   899,   900,   282,   901,   701,   704,   124,   913,   214,   914,
   922,   159,   923,    60,   125,   126,   924,   906,   353,   193,
   425,   909,   925,   194,   195,   196,   429,   231,    29,   911,
   215,   164,    81,   216,   217,   218,   933,   264,    81,   939,
   941,   957,   964,   958,   959,   226,   945,    41,    42,   946,
    43,    44,    45,   950,   449,   743,   746,   951,   952,   751,
   953,   962,   756,    49,   220,   221,   760,   877,   763,   887,
   767,   961,   963,    73,   228,   234,    90,   192,   890,   892,
   968,   345,   192,  1048,   425,   966,    91,    52,   971,   975,
    92,   227,   193,   128,   982,   995,   194,   195,   196,   954,
   227,   960,  1001,    59,   129,   222,    93,    94,    95,   999,
  1000,   193,   228,  1008,  1039,   194,   195,   196,    73,    88,
   450,   956,   451,  1014,   159,  1016,   193,  1041,  1044,   164,
   194,   195,   196,   224,    81,  1052,  1040,   164,   224,   268,
   269,   245,   246,   247,   248,   224,  1042,   237,   238,  1056,
   795,  1043,  1057,  1061,  1062,  1063,  1071,  1064,  1072,  1073,
  1074,  1075,   224,   356,    81,  1076,  1077,  1078,   362,    81,
    81,    81,  1080,  1079,  1088,  1089,    49,  1094,    81,    81,
    81,    81,  1091,  1092,  1098,  1099,   353,  1101,  1100,    90,
  1102,  1103,   572,  1106,   572,  1104,   855,   572,  1105,    91,
    52,   859,  1107,    92,   228,  1108,   862,   203,  1123,  1109,
  1113,  1114,  1115,  1116,   428,  1117,   796,  1118,  1119,   797,
    94,    95,  1120,    88,  1127,    87,   192,  1128,    73,  1129,
  1124,  1125,    88,  1130,   214,   605,   608,   611,  1126,  1131,
  1132,   227,  1133,   619,   227,  1134,  1135,   227,  1136,   228,
  1146,  1140,  1137,  1143,    89,  1144,   215,  1145,  1155,   216,
   217,   218,    73,   639,  1156,  1157,   304,  1159,   305,  1172,
  1160,  1165,  1166,  1167,  1168,  1170,   164,  1173,   649,    87,
    49,   567,    72,   698,   255,    81,   124,   772,   228,    49,
   220,   221,   710,    90,   125,   126,   791,   667,     0,     0,
   224,     0,    90,    91,    52,     0,     0,    92,     0,   224,
   228,     0,    91,    52,     0,     0,    92,   127,     0,    73,
   798,     0,    81,   799,    94,    95,     0,    72,     0,    59,
    73,   222,    93,    94,    95,   164,     0,     0,   227,     0,
     0,   227,   356,    49,   428,     0,     0,   227,     0,     0,
     0,   234,     0,     0,     0,     0,    90,     0,     0,     0,
   572,     0,     0,   572,     0,   572,    91,    52,   572,     0,
    92,     0,     0,   128,     0,   572,    73,   572,     0,   572,
   572,   572,     0,    59,   129,   240,    93,    94,    95,   745,
     0,   748,   750,     0,   753,   755,     0,   758,     0,     0,
   762,     0,   765,   766,     0,   770,     0,   227,   428,     0,
     0,     0,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,     0,    73,   251,   252,   253,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    72,     0,     0,
     0,   572,   572,   572,     0,     0,     0,     0,   164,     0,
   224,     0,     0,   224,     0,     0,   224,   228,     0,     0,
     0,     0,   228,     0,     0,     0,     0,     0,     0,     0,
     0,    72,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   228,     0,     0,     0,
     0,     0,     0,     0,     0,   572,     0,   835,     0,     0,
   572,     0,   572,     0,   572,     0,   572,   572,   572,   572,
   356,     0,   572,     0,     0,   572,     0,   714,     0,   716,
   572,     0,   718,     0,     0,     0,     0,     0,    72,   854,
     0,   856,   857,     0,   858,   732,   860,   861,     0,    72,
     0,   864,   866,     0,     0,     0,   869,   224,   870,   871,
   224,     0,   873,   875,     0,     0,   224,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    72,     0,   572,   572,     0,
     0,     0,     0,     0,     0,     0,   714,   718,     0,     0,
     0,     0,     0,    87,     0,     0,    81,     0,     0,     0,
   124,     0,     0,     0,     0,     0,   224,     0,   125,   126,
     0,   572,     0,     0,   228,     0,     0,   572,     0,   572,
     0,   572,    72,   228,     0,     0,     0,     0,     0,     0,
   926,    89,     0,     0,   927,     0,     0,   928,   929,   833,
     0,    81,     0,     0,   836,     0,   837,   934,   838,     0,
   839,    87,   714,   718,     0,     0,   841,    49,    88,   843,
   286,     0,   169,    29,   845,     0,     0,     0,     0,     0,
    90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    91,    52,   287,    42,    92,   288,   289,   290,     0,   291,
     0,     0,     0,     0,     0,     0,     0,    59,   129,    88,
    93,    94,    95,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   979,     0,     0,    49,   220,   221,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    90,     0,
    89,   841,   843,     0,     0,     0,     0,     0,    91,    52,
     0,     0,    92,     0,   179,     0,     0,     0,     0,  1015,
     0,    81,  1017,     0,     0,    59,    49,   292,    93,    94,
    95,     0,     0,     0,   228,   919,     0,   228,     0,    90,
   228,   843,     0,   920,     0,   921,     0,     0,     0,    91,
    52,     0,     0,    92,     0,    81,     0,     0,     0,  1049,
     0,  1050,     0,  1051,     0,     0,   793,   572,   572,    93,
    94,    95,   572,   572,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    87,     0,     0,     0,     0,     0,
     0,   124,     0,   214,     0,     0,     0,     0,     0,   125,
   126,     0,   572,     0,     0,     0,     0,   572,     0,     0,
     0,     0,    81,   572,   572,   412,     3,     0,   413,   217,
   414,     0,   264,    81,     0,     0,     0,     4,     5,     6,
     7,   228,     0,     0,   228,     0,     0,     0,     0,     0,
   228,     8,     0,     0,   572,     0,     0,     0,    49,   415,
   221,     0,     9,     0,     0,    10,     0,     0,     0,     0,
     0,    90,     0,     0,     0,     0,     0,     0,     0,    81,
     0,    91,    52,     0,     0,    92,     0,     0,   128,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    59,   129,
   222,    93,    94,    95,     0,     0,     0,     0,     0,     0,
   228,     0,     0,     0,     0,     0,     0,    11,    12,    13,
     0,    14,    15,    16,    17,    18,    81,    19,    20,     0,
     0,     0,   714,     0,     0,     0,    22,   714,     0,     0,
    23,   151,     0,    25,    26,     0,     0,     0,   124,     0,
    27,     0,    28,    29,    30,    31,   125,   126,    32,    33,
    34,    35,     0,    36,    37,    38,   843,    39,    40,     0,
     0,   843,    41,    42,     0,    43,    44,    45,   714,   152,
     0,     0,    47,     0,     0,     0,    48,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    49,    50,    51,   843,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    90,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    91,   153,
     0,     0,    92,     0,    53,   154,    54,    55,    56,    57,
    58,     0,     0,     0,     0,    59,   129,    60,    93,    94,
    95,    22,     0,     0,     0,    23,   151,     0,    25,    26,
     0,     0,     0,   124,     0,   315,     0,    28,    29,    30,
    31,   125,   126,    32,    33,    34,    35,     0,    36,    37,
    38,     0,    39,    40,     0,     0,     0,   316,    42,     0,
   317,   289,   318,     0,   152,     0,     0,    47,     0,     0,
     0,    48,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    49,   319,   320,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    90,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    91,   153,     0,     0,    92,     0,    53,
   154,    54,    55,    56,    57,    58,     0,     0,     0,     0,
    59,   129,   292,    93,    94,    95,    22,     0,     0,     0,
    23,   151,     0,    25,    26,     0,     0,     0,   124,     0,
    27,     0,    28,    29,    30,    31,   125,   126,    32,    33,
    34,    35,     0,    36,    37,    38,     0,    39,    40,     0,
     0,     0,   520,    42,     0,   521,    44,   522,     0,   152,
     0,     0,    47,     0,     0,     0,    48,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    49,   523,    51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    90,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    91,   153,
     0,     0,    92,     0,    53,   154,    54,    55,    56,    57,
    58,     0,     0,     0,     0,    59,   129,    60,    93,    94,
    95,    22,     0,     0,     0,    23,    24,     0,    25,    26,
     0,     0,     0,     0,     0,    27,     0,    28,    29,    30,
    31,     0,     0,    32,    33,    34,    35,     0,    36,    37,
    38,     0,    39,    40,     0,     0,     0,    41,    42,     0,
    43,    44,    45,     0,   350,     0,     0,    47,     0,     0,
     0,    48,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    49,    50,    51,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    90,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    52,     0,     0,     0,     0,    53,
     0,    54,    55,    56,    57,    58,     0,     0,     0,    22,
    59,     0,    60,    23,    24,     0,    25,    26,     0,     0,
     0,     0,     0,    27,     0,    28,    29,    30,    31,     0,
     0,    32,    33,    34,    35,     0,    36,    37,    38,     0,
    39,    40,     0,     0,     0,    41,    42,     0,    43,    44,
    45,    87,    46,     0,     0,    47,     0,     0,   124,    48,
   214,     0,     0,     0,     0,     0,   125,   126,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    49,    50,
    51,     0,   215,     0,     0,   216,   217,   218,    87,   501,
     0,     0,     0,     0,     0,   124,     0,   214,     0,     0,
     0,     0,    52,   125,   126,     0,     0,    53,     0,    54,
    55,    56,    57,    58,     0,    49,   220,   221,    59,   412,
    60,     0,   413,   217,   414,     0,   501,     0,    90,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    91,    52,
     0,     0,    92,     0,     0,   154,     0,     0,     0,     0,
     0,     0,    49,   415,   221,    59,   129,   222,    93,    94,
    95,     0,     0,     0,     0,    90,     0,     0,     0,     0,
     0,    87,     0,     0,     0,    91,    52,     0,    88,    92,
   214,     0,   154,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    59,   129,   222,    93,    94,    95,     0,     0,
     0,     0,   215,     0,     0,   216,   217,   218,    87,   472,
     0,     0,   304,     0,   305,    88,     0,   214,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    49,   220,   221,     0,   412,
     0,     0,   413,   217,   414,     0,   472,     0,    90,   304,
     0,   305,     0,     0,     0,     0,     0,     0,    91,   306,
     0,     0,    92,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    49,   415,   221,    59,   129,   222,    93,    94,
    95,     0,     0,     0,     0,    90,     0,     0,     0,     0,
     0,    87,     0,     0,     0,    91,   306,     0,    88,    92,
   214,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    59,   129,   222,    93,    94,    95,     0,     0,
     0,     0,   412,     0,     0,   413,   217,   414,    87,   639,
     0,     0,   304,     0,   305,    88,     0,   214,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    49,   415,   221,     0,   412,
     0,     0,   413,   217,   414,     0,   463,     0,    90,     0,
     0,     0,     0,     0,     0,     0,    87,     0,    91,    52,
     0,     0,    92,    88,     0,   214,     0,     0,     0,     0,
     0,     0,    49,   415,   221,    59,     0,   222,    93,    94,
    95,     0,     0,     0,     0,    90,     0,   626,     0,     0,
   627,   217,   628,    87,   463,    91,   153,     0,     0,    92,
    88,   179,   214,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    59,     0,   222,    93,    94,    95,     0,     0,
    49,   629,   221,     0,   215,     0,     0,   216,   217,   218,
     0,   219,     0,    90,     0,     0,     0,     0,     0,     0,
     0,    87,     0,    91,    52,     0,     0,    92,    88,   179,
   214,     0,     0,     0,     0,     0,     0,    49,   220,   221,
    59,     0,   222,    93,    94,    95,     0,     0,     0,     0,
    90,     0,   412,     0,     0,   413,   217,   414,    87,   219,
    91,    52,     0,     0,    92,    88,     0,   214,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    59,     0,   222,
    93,    94,    95,     0,     0,    49,   415,   221,     0,   412,
     0,     0,   413,   217,   414,     0,   789,     0,    90,     0,
     0,     0,     0,     0,     0,     0,    87,     0,    91,    52,
     0,     0,    92,    88,     0,   214,     0,     0,     0,     0,
     0,     0,    49,   415,   221,    59,     0,   222,    93,    94,
    95,     0,     0,     0,     0,    90,     0,   626,     0,     0,
   627,   217,   628,    87,   219,    91,    52,     0,     0,    92,
    88,     0,   214,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    59,     0,   222,    93,    94,    95,     0,     0,
    49,   629,   221,     0,   215,     0,     0,   216,   217,   218,
     0,   886,     0,    90,     0,     0,     0,     0,     0,     0,
     0,    87,     0,    91,    52,     0,     0,    92,    88,     0,
   214,     0,     0,     0,     0,     0,     0,    49,   220,   221,
    59,     0,   222,    93,    94,    95,     0,     0,     0,     0,
    90,     0,   215,     0,     0,   216,   217,   218,    87,   889,
    91,    52,     0,     0,    92,    88,     0,   214,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    59,     0,   222,
    93,    94,    95,     0,     0,    49,   220,   221,     0,   942,
     0,     0,   943,   217,   414,     0,   219,     0,    90,     0,
     0,     0,     0,     0,     0,     0,    87,     0,    91,    52,
     0,     0,    92,    88,     0,   214,     0,     0,     0,     0,
     0,     0,    49,   944,   221,    59,     0,   222,    93,    94,
    95,     0,     0,     0,     0,    90,     0,   947,     0,     0,
   948,   217,   414,    87,   219,    91,    52,     0,     0,    92,
    88,     0,   214,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    59,     0,   222,    93,    94,    95,     0,     0,
    49,   949,   221,     0,   215,     0,     0,   216,   217,   218,
     0,   955,     0,    90,     0,     0,     0,     0,     0,     0,
     0,    87,     0,    91,    52,     0,     0,    92,    88,     0,
   214,     0,     0,     0,     0,     0,     0,    49,   220,   221,
    59,     0,   222,    93,    94,    95,     0,     0,     0,     0,
    90,     0,   996,     0,     0,   997,   217,   414,    87,   219,
    91,    52,     0,     0,    92,    88,     0,     0,     0,     0,
    29,     0,     0,     0,     0,     0,     0,    59,     0,   222,
    93,    94,    95,     0,     0,    49,   998,   221,     0,    41,
    42,     0,    43,    44,    45,    87,   648,     0,    90,     0,
     0,     0,   124,     0,     0,     0,     0,     0,    91,    52,
   125,   126,    92,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    49,   345,     0,    59,     0,   222,    93,    94,
    95,     0,    87,   325,     0,    90,     0,     0,     0,    88,
     0,     0,     0,     0,     0,    91,    52,     0,    88,    92,
     0,     0,     0,     0,    88,     0,     0,     0,     0,    49,
     0,     0,    59,     0,     0,    93,    94,    95,     0,     0,
   477,     0,    90,   304,     0,   305,     0,     0,     0,    89,
     0,     0,    91,    52,     0,    89,    92,     0,     0,   154,
    88,     0,     0,     0,     0,     0,    49,     0,     0,    59,
   129,     0,    93,    94,    95,    49,     0,     0,     0,    90,
     0,    49,     0,     0,     0,    88,     0,     0,    90,    91,
    52,    89,     0,    92,    90,     0,     0,    88,    91,    52,
     0,     0,    92,     0,    91,    52,    59,   129,    92,    93,
    94,    95,     0,     0,     0,   796,   895,    49,    93,    94,
    95,   798,    88,     0,    93,    94,    95,     0,    89,     0,
    90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    91,    52,    49,     0,    92,     0,     0,     0,     0,     0,
     0,     0,     0,    89,    49,    90,     0,   894,    88,     0,
    93,    94,    95,     0,    88,    91,    52,    90,     0,    92,
    88,     0,     0,     0,     0,     0,     0,    91,    52,    49,
     0,    92,   896,     0,     0,   897,    94,    95,     0,    89,
     0,     0,    90,     0,   896,    89,     0,    93,    94,    95,
     0,    89,    91,    52,     0,    88,    92,     0,     0,     0,
     0,     0,    88,     0,     0,    49,     0,     0,     0,   793,
     0,    49,  1053,    94,    95,     0,     0,    49,    90,     0,
     0,     0,     0,     0,    90,     0,    89,     0,    91,    52,
    90,     0,    92,    89,    91,    52,    88,     0,    92,     0,
    91,    52,     0,    88,    92,   796,     0,     0,  1054,    94,
    95,   793,    49,     0,  1058,    94,    95,   796,     0,    49,
  1059,    94,    95,     0,     0,    90,     0,    89,     0,     0,
     0,     0,    90,     0,    89,    91,    52,    88,     0,    92,
     0,     0,    91,    52,     0,     0,    92,     0,     0,     0,
     0,     0,   896,    49,     0,  1090,    94,    95,     0,   896,
    49,     0,  1093,    94,    95,     0,    90,     0,    89,     0,
     0,     0,     0,    90,     0,     0,    91,    52,     0,     0,
    92,     0,     0,    91,    52,     0,     0,    92,     0,     0,
     0,     0,     0,   793,    49,     0,  1095,    94,    95,     0,
   796,     0,     0,  1096,    94,    95,     0,    90,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    91,    52,     0,
     0,    92,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   896,     0,     0,  1121,    94,    95
};

static const short yycheck[] = {    13,
   340,     2,   173,   203,    24,   144,   361,   148,    91,    92,
    50,    51,     1,   197,   690,    14,   187,     1,   547,    47,
    34,    46,    15,    47,    37,     2,     1,    46,   303,   304,
   305,    20,   203,    46,    37,     9,    10,    11,    12,   122,
    14,    15,    16,    17,    18,    19,    47,   173,    51,    15,
    39,    40,   112,    42,    43,    44,   152,    46,   154,    37,
    13,   187,    46,    46,     9,    47,    47,    87,    96,    46,
    47,    46,    96,    46,    52,    89,    75,   203,    77,    78,
    79,   150,    81,    96,    73,    37,    47,   112,    46,   150,
   115,    46,    46,   112,    46,    18,   115,    18,   405,   112,
   407,   100,    84,   410,   144,    37,    46,   112,   128,    18,
   281,    46,   283,   127,   134,    96,    94,    95,   187,     1,
   113,    96,    46,   112,   117,   114,    46,   147,   112,   112,
   144,   151,   201,    53,   203,    96,   150,   112,   152,   112,
   201,   341,   116,   117,   118,   119,   120,   113,   149,    94,
    95,   117,    37,    76,   112,    76,    46,   283,   112,   173,
   112,    46,    94,    95,    46,   694,   695,    76,   182,   340,
   341,   254,   149,   187,   188,   152,    47,   178,   479,   480,
   481,   482,   483,   184,   185,   186,    37,   201,   112,   203,
  1048,   115,   193,   194,   195,   196,    46,   472,    46,   268,
   269,   178,   477,    46,    46,   219,    96,   184,   185,   186,
    37,    96,   152,   488,   154,   341,   193,   194,   195,   196,
     1,    46,   112,  1081,    72,    96,   544,   112,    16,   325,
   207,   208,   152,    84,   303,   304,   305,   211,   334,   335,
    46,   255,   303,    49,    46,    51,    96,    72,   262,   263,
   264,     2,   272,   273,    96,    82,   270,    37,   178,   179,
   274,   275,   112,    51,   112,    46,    46,   112,   543,   209,
   112,    39,   341,    47,    42,    60,    44,   291,    46,   319,
   320,   588,    67,   590,    47,   592,   593,   112,    37,   303,
   304,   305,   968,    49,    96,    46,    47,   826,    37,   300,
    46,    52,    53,    37,    85,    73,   375,   113,    37,     1,
   112,   325,    46,   484,   375,    96,    96,    46,    82,    83,
    46,   661,    96,   300,    37,    37,   467,   341,    81,   684,
   685,   112,   112,    96,    46,    84,   337,    37,    89,    90,
    46,    46,   660,   112,   112,   663,    46,   100,    47,    46,
   135,   136,   137,   138,   112,    94,    95,    49,   484,   373,
   337,   375,    96,    46,   639,   549,   641,    96,   509,    82,
    96,   291,    46,   350,   692,   101,   127,   652,   112,    85,
    85,    46,    47,   112,    96,   325,   112,    47,    85,   403,
    96,    96,    18,   144,   334,   335,    96,    96,   149,    96,
   112,   152,   153,   472,   101,   501,   112,   112,    46,    37,
   350,   472,   112,    96,    18,   112,   485,    47,   101,    46,
    46,    47,   173,    51,   485,    46,    46,   178,   179,   112,
   350,    96,   183,   184,   185,   186,    96,   357,    46,    47,
   969,   970,   193,   194,   195,   196,   466,   112,    46,   463,
    76,   202,     1,   204,   205,   206,   207,   208,   472,     8,
   601,    47,   802,   477,    94,    95,    15,    46,   219,   538,
   484,   485,    76,    47,   543,   489,    96,   538,   229,   780,
   781,   782,    49,   523,    47,   499,    46,   501,    96,   503,
   661,    51,   112,   811,    46,    47,    39,    46,    18,    42,
    49,    44,    51,    46,   112,    47,    46,   292,   100,    49,
    96,    51,    17,   264,    19,    20,    79,    96,    81,    18,
    38,    47,    96,    72,   538,    46,    46,   541,   669,    46,
    73,    46,    47,   112,    39,    40,    85,    42,    43,    44,
   291,    46,    85,   463,    96,    18,    95,    96,    47,   300,
    99,    46,   303,    96,    96,   306,    76,   342,   343,    36,
   112,   501,    46,   112,   113,    18,   115,   116,   117,   112,
    96,   322,   641,    46,   325,   552,   553,    76,   112,    96,
   114,    96,   112,    15,   114,   925,   337,    18,    47,   374,
    18,    37,    47,   933,    47,   112,    47,   112,    47,   350,
    47,    96,    79,    76,    81,   525,   357,   778,   359,   114,
    47,    47,    96,    47,    46,   366,    47,   112,    46,    47,
   621,   821,    47,    76,    79,   639,    81,   641,   112,    82,
    83,   802,    47,   384,   648,    94,    95,   776,    47,    47,
    72,   916,   982,    39,   621,    76,    42,    96,    76,    96,
   821,    82,    83,    85,    82,    83,   739,    94,    95,   673,
   674,  1001,    96,    95,    96,   666,    47,    99,   986,   987,
    46,    96,   423,   991,   992,   993,   994,   462,    18,     8,
   112,    96,    18,   115,   116,   117,    15,    96,    96,   666,
    39,    48,   706,    42,    37,   821,   386,    37,   388,   389,
   390,   391,   392,   393,    47,   395,   396,    47,   398,   399,
    18,    47,   463,    18,  1032,    96,    46,    46,  1036,  1037,
    49,   472,    51,    47,    47,    46,   477,    39,    16,    37,
    42,   705,    44,   484,    46,    96,    76,    94,    95,    47,
    76,    51,    47,    72,    16,    47,    47,    47,    39,    37,
   501,    42,   821,   504,   925,   769,    85,   777,    50,    89,
    90,    73,   933,    36,    16,    37,    95,    96,    76,    47,
    99,    76,    96,    96,   525,   789,   114,   528,   792,    51,
    47,   795,    73,   112,   113,    37,   115,   116,   117,    47,
    17,    47,    19,    20,    96,    96,    96,   127,   939,   550,
   112,   552,   553,    47,    47,    47,    79,   821,    81,   810,
    96,   982,    39,    40,   144,    42,    43,    44,    96,    46,
  1138,  1139,   152,  1141,  1142,  1100,    96,    47,    50,    96,
  1001,  1149,    47,   810,  1152,  1153,  1154,    47,    96,    36,
    96,   100,     8,    47,    47,    47,  1164,   916,   178,    15,
    38,   865,    96,    75,    96,    77,    78,    79,    18,    81,
   874,    47,    47,    47,    47,    18,   867,    47,    47,    47,
   621,    47,   886,    47,    47,   889,    96,   878,   100,    47,
    46,   895,    79,    52,    81,    47,    96,   114,   639,   219,
   867,    47,    96,    96,    96,    47,    15,   648,    75,   229,
    37,   878,    79,    80,    81,    47,    72,     1,    82,    83,
    96,    96,    96,    96,     8,   666,    96,    96,    96,    85,
    96,    15,   936,   924,    47,    94,    95,    46,    96,    95,
    96,   945,   946,    99,   264,    16,   950,   951,   952,   953,
    96,   955,    16,    16,    96,    37,   112,   924,    37,   115,
   116,   117,    46,    72,    96,    49,    37,    51,    50,    82,
    83,   291,     8,    37,    37,    37,    85,    46,    47,    15,
   971,    29,    51,   303,   664,   665,    95,    96,    72,    46,
    99,   995,    50,    75,    51,   999,  1000,    79,    80,    81,
    52,    85,     1,   112,   971,   325,   115,   116,   117,     8,
    46,    95,    96,    75,    52,    99,    15,    79,    80,    81,
   700,   701,    39,   703,   704,    42,    94,    95,   112,   113,
   350,   115,   116,   117,    47,   776,    72,   357,    47,   359,
    16,    84,    94,    95,     2,    51,   366,    46,   789,    85,
    49,   792,    39,    47,   795,    42,    94,    95,    47,    95,
    96,    37,    75,    99,    77,    78,    79,    51,    81,   810,
    79,    76,    81,    72,    32,    76,   112,    16,    47,   115,
   116,   117,    79,    80,    81,  1052,    85,   100,    46,    47,
    79,   112,    81,   114,    52,    53,    95,    96,    37,    12,
    99,    39,    60,   423,    42,   112,    44,   114,    46,    67,
    79,    96,    81,   112,    46,    47,   115,   116,   117,    51,
    39,    47,    50,    42,  1128,  1129,   867,  1131,  1132,    47,
    47,    89,    90,    86,    87,    73,  1140,   878,    47,  1143,
  1144,  1145,    37,   463,    79,   886,    81,    85,   889,    86,
    87,  1155,   472,    79,   895,    81,    47,   477,    96,    37,
    47,     1,    79,   101,    81,   100,    75,    82,     8,   127,
    79,    80,    81,    81,   112,    15,    47,   135,   136,   137,
   138,   501,   140,   924,    75,   143,   144,    50,    79,    80,
    81,   149,    50,    39,   152,   153,    42,    75,    81,    77,
    78,    79,    47,    81,    75,   525,    46,    96,    79,    80,
    81,   112,    75,   114,   955,   173,    79,    80,    81,    12,
   178,   179,   100,   268,   269,   183,   184,   185,   186,    47,
   971,   189,    72,    47,    49,   193,   194,   195,   196,    47,
    17,     9,    19,    20,   202,    85,   204,   205,   206,   207,
   208,    39,    81,     2,    42,    95,    96,    96,    47,    99,
    47,   219,    39,    40,    96,    42,    43,    44,    49,    46,
    39,   229,   112,    42,    47,   115,   116,   117,    86,    87,
    88,    89,    90,    91,    47,    73,    94,    95,    75,     8,
    46,    47,    79,    80,    81,    51,    15,    46,    47,   112,
    47,    20,   115,    52,    53,    39,   264,   112,    42,   114,
    39,  1052,    75,    42,    47,    33,    79,    80,    81,   639,
    39,    40,    47,    42,    43,    44,    50,    46,   648,     4,
    49,     6,    51,   291,   292,    37,    17,   114,    19,    20,
    89,    90,   300,  1084,    73,   303,    47,    39,   306,    20,
    42,    75,    47,    72,    73,    79,    80,    81,    39,    40,
    46,    42,    43,    44,   322,    46,    85,   325,    39,    40,
  1111,    42,    43,    44,    51,     8,    95,    96,   127,   337,
    99,    79,    15,    81,   342,   343,   344,    20,    81,    47,
    47,    52,   350,   112,   113,   144,   115,   116,   117,   357,
   149,   359,    39,   152,   153,    42,    39,    40,   366,    42,
    43,    44,    12,    46,    75,    47,   374,    75,    79,    80,
    81,    79,    80,    81,   173,    47,   384,    46,    47,   178,
   179,    51,    51,   114,   183,   184,   185,   186,    47,    72,
    73,     4,     5,     6,   193,   194,   195,   196,    96,    96,
    57,    96,    85,    75,    47,    46,    47,    79,    80,    81,
    51,    47,    95,    96,    52,   423,    99,    37,    47,   789,
   219,    49,   792,    47,    47,   795,    47,    84,    85,   112,
   229,    47,   115,   116,   117,    92,    93,    94,    95,    96,
    97,    98,   450,   451,   452,    47,    37,    96,   456,   457,
   458,    96,   460,    46,   462,   463,    17,   465,    19,    20,
    82,    96,    81,    46,   472,   264,    77,    78,    79,   477,
    81,    50,    50,    50,    47,    37,   484,    52,    39,    40,
    52,    42,    43,    44,    52,    46,    46,    96,    96,   100,
    49,    47,   291,   501,    57,    47,   504,    47,    37,    52,
    47,   300,    47,    47,   303,   513,    47,   306,    96,    47,
    47,    38,    73,    74,    50,    47,   886,   525,    49,   889,
   528,    84,    85,   322,    47,   895,   325,     2,    46,    92,
    93,    47,    47,    96,    97,    98,    47,    47,   337,     8,
    52,    47,   550,    52,   552,   553,    15,    47,    17,    47,
    47,   350,    38,   114,    23,    24,    46,   112,   357,    75,
   359,   112,    46,    79,    80,    81,   239,   366,    20,   112,
    39,    46,    47,    42,    43,    44,    46,    46,    53,    47,
    47,    47,   112,    47,    47,   955,    51,    39,    40,    51,
    42,    43,    44,    51,    46,   603,   604,    51,    51,   607,
    51,    46,   610,    72,    73,    74,   614,    50,   616,    47,
   618,    52,    46,   621,    89,    90,    85,   625,    47,    47,
    47,    73,   630,    47,   423,   112,    95,    96,    46,    50,
    99,   639,    75,   102,    46,    51,    79,    80,    81,    47,
   648,    50,    46,   112,   113,   114,   115,   116,   117,    51,
    51,    75,   127,    46,    96,    79,    80,    81,   666,    15,
   112,    47,   114,    47,   463,    47,    75,    42,    42,   144,
    79,    80,    81,   472,   149,    47,    96,   152,   477,    86,
    87,    88,    89,    90,    91,   484,    96,    94,    95,    52,
    46,    96,    52,    52,    52,    52,    47,    52,    47,    47,
    96,    47,   501,   178,   179,    47,    96,    96,   183,   184,
   185,   186,    42,    96,    47,    47,    72,    52,   193,   194,
   195,   196,    47,    47,    52,    52,   525,   115,    82,    85,
   115,    47,   405,    47,   407,   115,   744,   410,   115,    95,
    96,   749,    47,    99,   219,    47,   754,    46,   115,    96,
    47,    47,    47,    47,   229,    47,   112,    47,    47,   115,
   116,   117,    47,    15,    47,     8,   774,    51,   776,    51,
   115,   115,    15,    47,    17,   450,   451,   452,   115,    51,
    51,   789,    47,   458,   792,    47,    47,   795,    47,   264,
    47,    51,   115,    51,    46,    51,    39,    51,    51,    42,
    43,    44,   810,    46,    52,    52,    49,    52,    51,     0,
    52,    52,    52,    52,    52,    52,   291,     0,   484,     8,
    72,   401,   621,   549,   100,   300,    15,   623,   303,    72,
    73,    74,   572,    85,    23,    24,   650,   508,    -1,    -1,
   639,    -1,    85,    95,    96,    -1,    -1,    99,    -1,   648,
   325,    -1,    95,    96,    -1,    -1,    99,    46,    -1,   867,
   112,    -1,   337,   115,   116,   117,    -1,   666,    -1,   112,
   878,   114,   115,   116,   117,   350,    -1,    -1,   886,    -1,
    -1,   889,   357,    72,   359,    -1,    -1,   895,    -1,    -1,
    -1,   366,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,
   573,    -1,    -1,   576,    -1,   578,    95,    96,   581,    -1,
    99,    -1,    -1,   102,    -1,   588,   924,   590,    -1,   592,
   593,   594,    -1,   112,   113,    57,   115,   116,   117,   604,
    -1,   606,   607,    -1,   609,   610,    -1,   612,    -1,    -1,
   615,    -1,   617,   618,    -1,   620,    -1,   955,   423,    -1,
    -1,    -1,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    -1,   971,    96,    97,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   776,    -1,    -1,
    -1,   654,   655,   656,    -1,    -1,    -1,    -1,   463,    -1,
   789,    -1,    -1,   792,    -1,    -1,   795,   472,    -1,    -1,
    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   810,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   708,    -1,   710,    -1,    -1,
   713,    -1,   715,    -1,   717,    -1,   719,   720,   721,   722,
   525,    -1,   725,    -1,    -1,   728,    -1,   576,    -1,   578,
   733,    -1,   581,    -1,    -1,    -1,    -1,    -1,   867,   744,
    -1,   746,   747,    -1,   749,   594,   751,   752,    -1,   878,
    -1,   756,   757,    -1,    -1,    -1,   761,   886,   763,   764,
   889,    -1,   767,   768,    -1,    -1,   895,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   924,    -1,   800,   801,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   655,   656,    -1,    -1,
    -1,    -1,    -1,     8,    -1,    -1,   621,    -1,    -1,    -1,
    15,    -1,    -1,    -1,    -1,    -1,   955,    -1,    23,    24,
    -1,   834,    -1,    -1,   639,    -1,    -1,   840,    -1,   842,
    -1,   844,   971,   648,    -1,    -1,    -1,    -1,    -1,    -1,
   855,    46,    -1,    -1,   859,    -1,    -1,   862,   863,   708,
    -1,   666,    -1,    -1,   713,    -1,   715,   872,   717,    -1,
   719,     8,   721,   722,    -1,    -1,   725,    72,    15,   728,
    17,    -1,    19,    20,   733,    -1,    -1,    -1,    -1,    -1,
    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    95,    96,    39,    40,    99,    42,    43,    44,    -1,    46,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,    15,
   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   937,    -1,    -1,    72,    73,    74,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
    46,   800,   801,    -1,    -1,    -1,    -1,    -1,    95,    96,
    -1,    -1,    99,    -1,   101,    -1,    -1,    -1,    -1,   974,
    -1,   776,   977,    -1,    -1,   112,    72,   114,   115,   116,
   117,    -1,    -1,    -1,   789,   834,    -1,   792,    -1,    85,
   795,   840,    -1,   842,    -1,   844,    -1,    -1,    -1,    95,
    96,    -1,    -1,    99,    -1,   810,    -1,    -1,    -1,  1014,
    -1,  1016,    -1,  1018,    -1,    -1,   112,  1020,  1021,   115,
   116,   117,  1025,  1026,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    23,
    24,    -1,  1055,    -1,    -1,    -1,    -1,  1060,    -1,    -1,
    -1,    -1,   867,  1066,  1067,    39,    10,    -1,    42,    43,
    44,    -1,    46,   878,    -1,    -1,    -1,    21,    22,    23,
    24,   886,    -1,    -1,   889,    -1,    -1,    -1,    -1,    -1,
   895,    35,    -1,    -1,  1097,    -1,    -1,    -1,    72,    73,
    74,    -1,    46,    -1,    -1,    49,    -1,    -1,    -1,    -1,
    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   924,
    -1,    95,    96,    -1,    -1,    99,    -1,    -1,   102,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
   114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
   955,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,   103,
    -1,   105,   106,   107,   108,   109,   971,   111,   112,    -1,
    -1,    -1,  1021,    -1,    -1,    -1,     3,  1026,    -1,    -1,
     7,     8,    -1,    10,    11,    -1,    -1,    -1,    15,    -1,
    17,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    -1,    30,    31,    32,  1055,    34,    35,    -1,
    -1,  1060,    39,    40,    -1,    42,    43,    44,  1067,    46,
    -1,    -1,    49,    -1,    -1,    -1,    53,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,  1097,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,
    -1,    -1,    99,    -1,   101,   102,   103,   104,   105,   106,
   107,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
   117,     3,    -1,    -1,    -1,     7,     8,    -1,    10,    11,
    -1,    -1,    -1,    15,    -1,    17,    -1,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
    32,    -1,    34,    35,    -1,    -1,    -1,    39,    40,    -1,
    42,    43,    44,    -1,    46,    -1,    -1,    49,    -1,    -1,
    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,   101,
   102,   103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,
   112,   113,   114,   115,   116,   117,     3,    -1,    -1,    -1,
     7,     8,    -1,    10,    11,    -1,    -1,    -1,    15,    -1,
    17,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    -1,    30,    31,    32,    -1,    34,    35,    -1,
    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
    -1,    -1,    49,    -1,    -1,    -1,    53,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,
    -1,    -1,    99,    -1,   101,   102,   103,   104,   105,   106,
   107,    -1,    -1,    -1,    -1,   112,   113,   114,   115,   116,
   117,     3,    -1,    -1,    -1,     7,     8,    -1,    10,    11,
    -1,    -1,    -1,    -1,    -1,    17,    -1,    19,    20,    21,
    22,    -1,    -1,    25,    26,    27,    28,    -1,    30,    31,
    32,    -1,    34,    35,    -1,    -1,    -1,    39,    40,    -1,
    42,    43,    44,    -1,    46,    -1,    -1,    49,    -1,    -1,
    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    96,    -1,    -1,    -1,    -1,   101,
    -1,   103,   104,   105,   106,   107,    -1,    -1,    -1,     3,
   112,    -1,   114,     7,     8,    -1,    10,    11,    -1,    -1,
    -1,    -1,    -1,    17,    -1,    19,    20,    21,    22,    -1,
    -1,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
    34,    35,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
    44,     8,    46,    -1,    -1,    49,    -1,    -1,    15,    53,
    17,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,
    74,    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,
    -1,    -1,    -1,    -1,    -1,    15,    -1,    17,    -1,    -1,
    -1,    -1,    96,    23,    24,    -1,    -1,   101,    -1,   103,
   104,   105,   106,   107,    -1,    72,    73,    74,   112,    39,
   114,    -1,    42,    43,    44,    -1,    46,    -1,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,
    -1,    -1,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,   112,   113,   114,   115,   116,
   117,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    -1,    -1,    95,    96,    -1,    15,    99,
    17,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   112,   113,   114,   115,   116,   117,    -1,    -1,
    -1,    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,
    -1,    -1,    49,    -1,    51,    15,    -1,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    39,
    -1,    -1,    42,    43,    44,    -1,    46,    -1,    85,    49,
    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,
    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,   112,   113,   114,   115,   116,
   117,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    -1,    -1,    95,    96,    -1,    15,    99,
    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   112,   113,   114,   115,   116,   117,    -1,    -1,
    -1,    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,
    -1,    -1,    49,    -1,    51,    15,    -1,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    -1,    39,
    -1,    -1,    42,    43,    44,    -1,    46,    -1,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,    96,
    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,   112,    -1,   114,   115,   116,
   117,    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,
    42,    43,    44,     8,    46,    95,    96,    -1,    -1,    99,
    15,   101,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   112,    -1,   114,   115,   116,   117,    -1,    -1,
    72,    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,
    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    95,    96,    -1,    -1,    99,    15,   101,
    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
   112,    -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
    85,    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,
    95,    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,
   115,   116,   117,    -1,    -1,    72,    73,    74,    -1,    39,
    -1,    -1,    42,    43,    44,    -1,    46,    -1,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,    96,
    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,   112,    -1,   114,   115,   116,
   117,    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,
    42,    43,    44,     8,    46,    95,    96,    -1,    -1,    99,
    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   112,    -1,   114,   115,   116,   117,    -1,    -1,
    72,    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,
    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    95,    96,    -1,    -1,    99,    15,    -1,
    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
   112,    -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
    85,    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,
    95,    96,    -1,    -1,    99,    15,    -1,    17,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,
   115,   116,   117,    -1,    -1,    72,    73,    74,    -1,    39,
    -1,    -1,    42,    43,    44,    -1,    46,    -1,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    95,    96,
    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,   112,    -1,   114,   115,   116,
   117,    -1,    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,
    42,    43,    44,     8,    46,    95,    96,    -1,    -1,    99,
    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   112,    -1,   114,   115,   116,   117,    -1,    -1,
    72,    73,    74,    -1,    39,    -1,    -1,    42,    43,    44,
    -1,    46,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    95,    96,    -1,    -1,    99,    15,    -1,
    17,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
   112,    -1,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
    85,    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,
    95,    96,    -1,    -1,    99,    15,    -1,    -1,    -1,    -1,
    20,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,
   115,   116,   117,    -1,    -1,    72,    73,    74,    -1,    39,
    40,    -1,    42,    43,    44,     8,    46,    -1,    85,    -1,
    -1,    -1,    15,    -1,    -1,    -1,    -1,    -1,    95,    96,
    23,    24,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    -1,   112,    -1,   114,   115,   116,
   117,    -1,     8,    46,    -1,    85,    -1,    -1,    -1,    15,
    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    15,    99,
    -1,    -1,    -1,    -1,    15,    -1,    -1,    -1,    -1,    72,
    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
    46,    -1,    85,    49,    -1,    51,    -1,    -1,    -1,    46,
    -1,    -1,    95,    96,    -1,    46,    99,    -1,    -1,   102,
    15,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,   112,
   113,    -1,   115,   116,   117,    72,    -1,    -1,    -1,    85,
    -1,    72,    -1,    -1,    -1,    15,    -1,    -1,    85,    95,
    96,    46,    -1,    99,    85,    -1,    -1,    15,    95,    96,
    -1,    -1,    99,    -1,    95,    96,   112,   113,    99,   115,
   116,   117,    -1,    -1,    -1,   112,    46,    72,   115,   116,
   117,   112,    15,    -1,   115,   116,   117,    -1,    46,    -1,
    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    95,    96,    72,    -1,    99,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    46,    72,    85,    -1,   112,    15,    -1,
   115,   116,   117,    -1,    15,    95,    96,    85,    -1,    99,
    15,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    72,
    -1,    99,   112,    -1,    -1,   115,   116,   117,    -1,    46,
    -1,    -1,    85,    -1,   112,    46,    -1,   115,   116,   117,
    -1,    46,    95,    96,    -1,    15,    99,    -1,    -1,    -1,
    -1,    -1,    15,    -1,    -1,    72,    -1,    -1,    -1,   112,
    -1,    72,   115,   116,   117,    -1,    -1,    72,    85,    -1,
    -1,    -1,    -1,    -1,    85,    -1,    46,    -1,    95,    96,
    85,    -1,    99,    46,    95,    96,    15,    -1,    99,    -1,
    95,    96,    -1,    15,    99,   112,    -1,    -1,   115,   116,
   117,   112,    72,    -1,   115,   116,   117,   112,    -1,    72,
   115,   116,   117,    -1,    -1,    85,    -1,    46,    -1,    -1,
    -1,    -1,    85,    -1,    46,    95,    96,    15,    -1,    99,
    -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,
    -1,    -1,   112,    72,    -1,   115,   116,   117,    -1,   112,
    72,    -1,   115,   116,   117,    -1,    85,    -1,    46,    -1,
    -1,    -1,    -1,    85,    -1,    -1,    95,    96,    -1,    -1,
    99,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,
    -1,    -1,    -1,   112,    72,    -1,   115,   116,   117,    -1,
   112,    -1,    -1,   115,   116,   117,    -1,    85,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,
    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   112,    -1,    -1,   115,   116,   117
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 147 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 177 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 178 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 182 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 183 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 187 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 191 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 192 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 210 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 213 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 215 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 220 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 225 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 228 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 233 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 243 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 348 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 349 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 351 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 352 "msv.y"
{yyval.tnode=new CSyntaxNode(RETURN_STA, yyvsp[0].cString,NULL,VOIDTYPE);;
    break;}
case 37:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 41:
#line 357 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 359 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 360 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 362 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 46:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 47:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 48:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 49:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 50:
#line 373 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 374 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 52:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 54:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 55:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 56:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 57:
#line 384 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 58:
#line 390 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 59:
#line 394 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 60:
#line 400 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 61:
#line 408 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 63:
#line 419 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 64:
#line 422 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 65:
#line 435 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 66:
#line 440 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 67:
#line 444 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 68:
#line 450 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 69:
#line 451 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 70:
#line 457 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 71:
#line 462 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 72:
#line 467 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 73:
#line 476 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 74:
#line 484 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 75:
#line 495 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 76:
#line 508 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 77:
#line 509 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 78:
#line 510 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 79:
#line 515 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 80:
#line 519 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 81:
#line 523 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 82:
#line 527 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 531 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 535 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 85:
#line 541 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 86:
#line 543 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 87:
#line 546 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 88:
#line 551 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 89:
#line 562 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 90:
#line 563 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 91:
#line 564 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 92:
#line 567 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 93:
#line 568 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 94:
#line 569 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 95:
#line 577 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 96:
#line 581 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 585 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 590 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 596 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 100:
#line 601 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 101:
#line 608 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 102:
#line 614 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 103:
#line 625 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 104:
#line 626 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 105:
#line 627 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 106:
#line 632 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 107:
#line 639 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 108:
#line 642 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 643 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 110:
#line 652 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 111:
#line 655 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 112:
#line 656 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 657 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 658 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 115:
#line 659 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 116:
#line 660 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 117:
#line 661 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 118:
#line 665 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 119:
#line 667 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 120:
#line 669 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 121:
#line 671 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 122:
#line 673 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 675 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 125:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 128:
#line 685 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 129:
#line 687 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 689 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 131:
#line 693 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 132:
#line 694 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 133:
#line 697 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 134:
#line 698 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 135:
#line 699 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 136:
#line 702 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 137:
#line 703 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 138:
#line 704 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 139:
#line 707 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 140:
#line 711 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 141:
#line 717 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 142:
#line 719 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 143:
#line 721 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 144:
#line 723 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 145:
#line 725 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 146:
#line 726 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 147:
#line 731 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 148:
#line 732 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 149:
#line 733 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 150:
#line 739 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 151:
#line 740 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 152:
#line 742 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 153:
#line 744 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 154:
#line 746 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 155:
#line 748 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 156:
#line 749 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 157:
#line 755 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 158:
#line 756 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 159:
#line 758 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 160:
#line 760 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 161:
#line 765 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 162:
#line 766 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 163:
#line 770 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 164:
#line 771 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 165:
#line 775 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 166:
#line 776 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 167:
#line 780 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 168:
#line 781 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 169:
#line 782 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 170:
#line 783 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 171:
#line 784 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 786 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 787 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 788 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 789 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 790 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 177:
#line 791 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 792 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 793 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 794 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 181:
#line 797 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 182:
#line 798 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 183:
#line 799 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 184:
#line 800 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 185:
#line 801 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 186:
#line 802 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 187:
#line 803 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 188:
#line 804 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 189:
#line 807 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 190:
#line 808 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 191:
#line 812 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 192:
#line 813 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 193:
#line 814 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 194:
#line 815 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 195:
#line 822 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 196:
#line 826 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 197:
#line 834 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 198:
#line 846 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 199:
#line 850 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 200:
#line 859 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 201:
#line 871 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 202:
#line 875 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 203:
#line 883 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 886 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 205:
#line 887 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 206:
#line 892 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 207:
#line 896 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 208:
#line 900 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 209:
#line 905 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 210:
#line 908 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 211:
#line 917 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 212:
#line 918 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 213:
#line 919 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 214:
#line 922 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 215:
#line 923 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 216:
#line 926 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 217:
#line 927 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 218:
#line 930 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 219:
#line 931 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 220:
#line 932 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 221:
#line 933 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 222:
#line 934 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 223:
#line 935 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 224:
#line 938 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 225:
#line 939 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 226:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 227:
#line 941 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 228:
#line 942 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 229:
#line 943 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 230:
#line 945 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 231:
#line 946 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 232:
#line 948 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 233:
#line 949 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 234:
#line 951 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 235:
#line 959 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 236:
#line 960 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 237:
#line 961 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 238:
#line 962 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 239:
#line 963 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 240:
#line 969 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 241:
#line 971 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 242:
#line 972 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 243:
#line 975 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 244:
#line 976 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 245:
#line 977 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 246:
#line 980 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 981 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 248:
#line 984 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 249:
#line 985 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 250:
#line 988 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 251:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 992 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 993 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 254:
#line 998 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 255:
#line 999 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 256:
#line 1000 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 257:
#line 1001 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 258:
#line 1002 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 259:
#line 1003 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 260:
#line 1011 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 261:
#line 1012 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 262:
#line 1016 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 263:
#line 1017 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 264:
#line 1024 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 265:
#line 1028 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 266:
#line 1033 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 267:
#line 1039 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 268:
#line 1045 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 269:
#line 1051 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 270:
#line 1061 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 271:
#line 1067 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 272:
#line 1073 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 273:
#line 1079 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 274:
#line 1087 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 275:
#line 1091 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 276:
#line 1095 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 277:
#line 1101 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 278:
#line 1105 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 279:
#line 1109 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 280:
#line 1115 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 281:
#line 1121 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 282:
#line 1128 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 283:
#line 1134 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 284:
#line 1140 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 285:
#line 1144 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 286:
#line 1151 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 287:
#line 1156 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 288:
#line 1160 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 289:
#line 1164 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 290:
#line 1168 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 291:
#line 1174 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 292:
#line 1180 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 293:
#line 1186 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 294:
#line 1193 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 295:
#line 1201 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 296:
#line 1207 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 297:
#line 1222 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 298:
#line 1227 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 299:
#line 1232 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 300:
#line 1240 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 301:
#line 1247 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 302:
#line 1253 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 303:
#line 1259 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 304:
#line 1262 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 305:
#line 1272 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 306:
#line 1283 "msv.y"
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
case 307:
#line 1286 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 308:
#line 1287 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 309:
#line 1292 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 310:
#line 1296 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(ACTUAL_PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 311:
#line 1305 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 312:
#line 1306 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 313:
#line 1314 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 314:
#line 1316 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 315:
#line 1323 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 316:
#line 1325 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 317:
#line 1331 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 318:
#line 1332 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 319:
#line 1336 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 320:
#line 1341 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 321:
#line 1346 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 322:
#line 1351 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 323:
#line 1358 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 324:
#line 1361 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 325:
#line 1362 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 326:
#line 1368 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 327:
#line 1370 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 328:
#line 1390 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 329:
#line 1391 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 330:
#line 1393 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 331:
#line 1395 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 332:
#line 1396 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 333:
#line 1402 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 334:
#line 1409 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 335:
#line 1417 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 336:
#line 1425 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 337:
#line 1429 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 338:
#line 1433 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 339:
#line 1439 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 340:
#line 1443 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 341:
#line 1449 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 342:
#line 1453 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 343:
#line 1460 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 344:
#line 1464 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 345:
#line 1468 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 346:
#line 1475 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 347:
#line 1479 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 348:
#line 1482 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 349:
#line 1487 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 350:
#line 1496 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 351:
#line 1497 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 352:
#line 1503 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 353:
#line 1504 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 354:
#line 1508 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 355:
#line 1509 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 356:
#line 1514 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 357:
#line 1515 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 358:
#line 1516 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1517 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 360:
#line 1518 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 361:
#line 1521 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 362:
#line 1522 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 363:
#line 1523 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 364:
#line 1529 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 365:
#line 1530 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 366:
#line 1531 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1533 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1534 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1535 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1537 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1538 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1539 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1540 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1542 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1543 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1544 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1545 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1546 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1547 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 380:
#line 1548 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 381:
#line 1552 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 382:
#line 1553 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 383:
#line 1554 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 384:
#line 1555 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 385:
#line 1556 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 386:
#line 1557 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 387:
#line 1558 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1560 "msv.y"
