
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	IF	262
#define	ELSE	263
#define	EMPTY	264
#define	AWAIT	265
#define	PROJECTION	266
#define	PBEGIN	267
#define	PEND	268
#define	POINTERNULL	269
#define	ARRAY	270
#define	STRUCT	271
#define	DOT	272
#define	UNION	273
#define	FILEDECLARATION	274
#define	MORE	275
#define	DEFINE	276
#define	MY_TRUE	277
#define	MY_FALSE	278
#define	EXIST	279
#define	FRAME	280
#define	FOR	281
#define	WHILE	282
#define	DO	283
#define	TRUE	284
#define	FALSE	285
#define	REPEAT	286
#define	UNTIL	287
#define	DISPLAY	288
#define	SKIP	289
#define	THEN	290
#define	COMMA	291
#define	COLON	292
#define	INTDECLARATION	293
#define	STRDECLARATION	294
#define	POINTERDECLARATION	295
#define	CHARDECLARATION	296
#define	VOIDDECLARATION	297
#define	FLOATDECLARATION	298
#define	LISTDECLARATION	299
#define	OPEN_PAR	300
#define	CLOSE_PAR	301
#define	TIMES	302
#define	OPEN_BPAR	303
#define	CLOSE_BPAR	304
#define	OPEN_MPAR	305
#define	CLOSE_MPAR	306
#define	FUNCTION	307
#define	OVER	308
#define	CYLINDER	309
#define	OVEREP	310
#define	INTER_OR	311
#define	NON_DETERMINED	312
#define	SEND	313
#define	RECEIVE	314
#define	PROCESS	315
#define	CHANNEL	316
#define	PUT	317
#define	GET	318
#define	ERROR_TOKEN	319
#define	STRFUNCHEAD	320
#define	STRFUNCTAIL	321
#define	STRFUNCCAT	322
#define	STRFUNCCMP	323
#define	STRFUNCCPY	324
#define	STRFUNCLEN	325
#define	EXTERN	326
#define	UNSIGNED	327
#define	SIGNED	328
#define	CHOP	329
#define	OR	330
#define	PARALLEL	331
#define	AND	332
#define	ASS_P	333
#define	ASS_N	334
#define	CON	335
#define	ADDRESS	336
#define	IMPLY	337
#define	IFF	338
#define	PROPIMPLY	339
#define	NE	340
#define	EQ	341
#define	GE	342
#define	LE	343
#define	GT	344
#define	LT	345
#define	LST	346
#define	RST	347
#define	ADD	348
#define	SUB	349
#define	MUL	350
#define	DIV	351
#define	MOD	352
#define	BNE	353
#define	CHOPSTAR	354
#define	NEXT	355
#define	NEGATION	356
#define	LENGTH	357
#define	REQUEST	358
#define	FINAL	359
#define	KEEP	360
#define	ALWAYS	361
#define	HALT	362
#define	W_NEXT	363
#define	PREFIX	364
#define	SOMETIMES	365
#define	ID	366
#define	STRLITERAL	367
#define	STRUCT_TYPE	368
#define	INTLITERAL	369
#define	FLOATLITERAL	370
#define	CHARLITERAL	371

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1158
#define	YYFLAG		-32768
#define	YYNTBASE	117

#define YYTRANSLATE(x) ((unsigned)(x) <= 371 ? yytranslate[x] : 192)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   216,
   226,   228,   230,   238,   242,   244,   248,   250,   251,   256,
   262,   267,   272,   275,   278,   281,   284,   286,   289,   292,
   296,   300,   304,   308,   316,   325,   337,   351,   353,   355,
   357,   359,   361,   363,   366,   373,   378,   384,   390,   399,
   408,   411,   414,   417,   418,   425,   433,   434,   437,   441,
   443,   445,   447,   449,   453,   456,   458,   470,   483,   495,
   507,   525,   544,   562,   581,   601,   620,   638,   657,   675,
   677,   679,   681,   683,   685,   696,   700,   702,   707,   713,
   717,   729,   742,   754,   766,   779,   783,   786,   787,   790,
   793,   796,   804,   811,   816,   820,   822,   826,   830,   836,
   838,   842,   845,   846,   848,   852,   854,   857,   860,   862,
   864,   866,   868,   870,   872,   876,   878,   880,   882,   884,
   886,   888,   890,   892,   894,   896,   898,   900,   902,   904,
   906,   910,   912,   914,   918,   923,   928,   933,   938,   943,
   948,   952,   956,   960,   961,   964,   967,   970,   973,   976,
   980,   985,   990,   995,  1001,  1007,  1013,  1019,  1025,  1032,
  1038,  1044,  1051,  1057,  1064,  1072,  1079,  1086,  1094,  1101,
  1108,  1114,  1122,  1129,  1131,  1133,  1136,  1140,  1144,  1148,
  1152,  1154,  1156,  1158,  1162,  1166,  1170,  1174,  1178,  1182,
  1186,  1190,  1194,  1198,  1200,  1202,  1204,  1206,  1208,  1210,
  1213,  1216,  1218,  1220,  1224,  1227,  1231,  1236,  1242,  1247,
  1251,  1256,  1262,  1267,  1270,  1274,  1279,  1282,  1286,  1291,
  1296,  1302,  1310,  1315,  1319,  1325,  1334,  1335,  1340,  1344,
  1349,  1354,  1360,  1366,  1372,  1378,  1385,  1395,  1396,  1404,
  1414,  1423,  1429,  1434,  1437,  1440,  1442,  1444,  1445,  1448,
  1452,  1453,  1456,  1460,  1463,  1467,  1470,  1472,  1476,  1478,
  1480,  1482,  1484,  1488,  1489,  1492,  1493,  1497,  1499,  1502,
  1506,  1510,  1514,  1518,  1524,  1534,  1536,  1538,  1539,  1541,
  1542,  1544,  1545,  1553,  1561,  1567,  1570,  1572,  1573,  1579,
  1582,  1583,  1588,  1594,  1595,  1599,  1604,  1610,  1615,  1621,
  1626,  1627,  1631,  1635,  1640,  1645,  1650,  1655,  1660,  1665,
  1670,  1675,  1682,  1687,  1692,  1697,  1704,  1708,  1712,  1717,
  1721,  1722,  1726,  1730,  1734,  1738,  1741
};

static const short yyrhs[] = {   118,
   121,     0,    12,   119,    13,     0,     0,   119,    77,   119,
     0,   119,    75,   119,     0,   119,    83,   119,     0,   119,
    84,   119,     0,   119,    74,   119,     0,   106,   119,     0,
   105,   119,     0,   110,   119,     0,   108,   119,     0,   100,
   119,     0,    34,     0,    22,     0,    23,     0,   102,   142,
     0,     9,     0,    20,     0,   107,   119,     0,   104,   119,
     0,   101,   119,     0,    48,   119,   120,    49,    11,    48,
   119,    49,     0,   111,     0,    21,   111,    37,   157,     0,
   119,    99,     0,    45,   119,    46,     0,    36,   119,   120,
     0,     0,   121,    77,   121,     0,   121,    75,   121,     0,
   121,    74,   121,     0,   132,     0,   127,     0,   181,     0,
   184,     0,   175,     0,   176,     0,   177,     0,   100,    45,
   121,    46,     0,   105,    45,   121,    46,     0,   106,    45,
   121,    46,     0,    10,    45,   156,    46,     0,    31,    48,
   121,    49,    32,    45,   156,    46,     0,    34,     0,     9,
     0,    20,     0,   102,    45,   142,    46,     0,   188,     0,
   186,     0,    29,     0,    30,     0,   104,    45,   121,    46,
     0,   121,    76,   121,     0,    45,   174,    46,    82,    50,
   121,    51,     0,    25,    45,   167,   172,    46,    77,    45,
   121,    46,     0,    48,   121,   173,    49,    11,   165,     0,
    48,   121,    49,    11,   165,     0,    52,   111,    45,   161,
    46,    48,   121,    49,     0,    21,   111,    45,   161,    46,
    78,    48,   123,    49,     0,   125,     0,   124,     0,    24,
   167,   162,    37,    48,   121,    49,     0,    45,   121,    46,
     0,   127,     0,   127,    77,   122,     0,   121,     0,     0,
   111,    45,   163,    46,     0,    71,   111,    45,   163,    46,
     0,   138,    45,   163,    46,     0,   126,    48,   122,    49,
     0,    16,   111,     0,    18,   111,     0,    73,   128,     0,
    72,   128,     0,   128,     0,   129,   130,     0,   113,   130,
     0,    16,   111,   130,     0,    18,   111,   130,     0,    16,
   113,   130,     0,    18,   113,   130,     0,    45,    95,   167,
    46,    45,   161,    46,     0,    45,    95,    95,   167,    46,
    45,   161,    46,     0,    45,    95,   111,    50,   142,   140,
    51,    46,    45,   161,    46,     0,    45,    95,   111,    50,
   142,   140,    51,    46,    45,   161,    46,    78,   149,     0,
    38,     0,    43,     0,    41,     0,    39,     0,    42,     0,
    19,     0,   167,   131,     0,   111,    50,   142,   140,    51,
   131,     0,   167,    78,   136,   131,     0,   111,    15,    78,
   149,   131,     0,   111,    15,    78,   168,   131,     0,   111,
    50,   142,   140,    51,    78,   149,   131,     0,   111,    50,
   142,   140,    51,    78,   168,   131,     0,    95,   130,     0,
    36,   130,     0,    36,     1,     0,     0,   111,    50,   142,
   140,    51,     0,     0,    36,   111,    50,   142,   140,    51,
     0,     0,     0,    36,     1,     0,   133,   135,   136,     0,
   167,     0,   190,     0,   138,     0,   141,     0,    45,   133,
    46,     0,   100,   133,     0,   134,     0,    45,    45,    41,
    95,    46,   114,    46,    50,   142,   140,    51,     0,    45,
    45,    72,    41,    95,    46,   114,    46,    50,   142,   140,
    51,     0,    45,    45,    38,    95,    46,   114,    46,    50,
   142,   140,    51,     0,    45,    45,    43,    95,    46,   114,
    46,    50,   142,   140,    51,     0,    45,    45,    41,    95,
    46,    45,    45,    41,    95,    46,   114,    46,    46,    50,
   142,   140,    51,     0,    45,    45,    41,    95,    46,    45,
    45,    72,    41,    95,    46,   114,    46,    46,    50,   142,
   140,    51,     0,    45,    45,    41,    95,    46,    45,    45,
    38,    95,    46,   114,    46,    46,    50,   142,   140,    51,
     0,    45,    45,    72,    41,    95,    46,    45,    45,    41,
    95,    46,   114,    46,    46,    50,   142,   140,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    72,    41,
    95,    46,   114,    46,    46,    50,   142,   140,    51,     0,
    45,    45,    72,    41,    95,    46,    45,    45,    38,    95,
    46,   114,    46,    46,    50,   142,   140,    51,     0,    45,
    45,    38,    95,    46,    45,    45,    41,    95,    46,   114,
    46,    46,    50,   142,   140,    51,     0,    45,    45,    38,
    95,    46,    45,    45,    72,    41,    95,    46,   114,    46,
    46,    50,   142,   140,    51,     0,    45,    45,    38,    95,
    46,    45,    45,    38,    95,    46,   114,    46,    46,    50,
   142,   140,    51,     0,    78,     0,    79,     0,   142,     0,
   149,     0,   168,     0,    45,   168,    46,    45,   129,    46,
    45,   161,    46,   124,     0,    45,   136,    46,     0,   137,
     0,    95,    45,   134,    46,     0,   111,    50,   142,   140,
    51,     0,    45,   138,    46,     0,    45,    45,    38,    95,
    46,   167,    46,    50,   142,   140,    51,     0,    45,    45,
    72,    38,    95,    46,   111,    46,    50,   142,   140,    51,
     0,    45,    45,    43,    95,    46,   111,    46,    50,   142,
   140,    51,     0,    45,    45,    41,    95,    46,   111,    46,
    50,   142,   140,    51,     0,    45,    45,    72,    41,    95,
    46,   111,    46,    50,   142,   140,    51,     0,    36,   142,
   140,     0,    36,     1,     0,     0,    95,   167,     0,    95,
   141,     0,    95,   138,     0,    45,   141,    46,    50,   142,
   140,    51,     0,    95,    45,   160,    95,    46,   142,     0,
    95,    45,   142,    46,     0,    45,   141,    46,     0,   145,
     0,   145,   158,   142,     0,   142,   148,   145,     0,     7,
   156,    35,   142,   144,     0,   145,     0,   145,   148,   145,
     0,     8,   142,     0,     0,   146,     0,   145,   147,   146,
     0,   169,     0,    94,   146,     0,    98,   146,     0,    14,
     0,   171,     0,   167,     0,   138,     0,   141,     0,   124,
     0,    45,   142,    46,     0,   170,     0,   153,     0,   154,
     0,   190,     0,   139,     0,    95,     0,    96,     0,    97,
     0,    91,     0,    92,     0,    81,     0,    56,     0,    80,
     0,    93,     0,    94,     0,   149,    80,   149,     0,   150,
     0,   151,     0,    45,   149,    46,     0,    50,   142,   152,
    51,     0,    50,   168,   152,    51,     0,    50,   149,   152,
    51,     0,    48,   142,   152,    49,     0,    48,   168,   152,
    49,     0,    48,   149,   152,    49,     0,    36,   142,   152,
     0,    36,   168,   152,     0,    36,   149,   152,     0,     0,
    36,     1,     0,    81,   190,     0,    81,   167,     0,    81,
   138,     0,    81,   153,     0,    45,   153,    46,     0,    45,
    38,    46,   143,     0,    45,    43,    46,   143,     0,    45,
    41,    46,   143,     0,    45,    73,    38,    46,   143,     0,
    45,    73,    41,    46,   143,     0,    45,    72,    38,    46,
   143,     0,    45,    72,    41,    46,   143,     0,    45,    38,
    95,    46,   155,     0,    45,    72,    38,    95,    46,   155,
     0,    45,    43,    95,    46,   155,     0,    45,    41,    95,
    46,   155,     0,    45,    72,    41,    95,    46,   155,     0,
    45,    42,    95,    46,   155,     0,    45,    38,    95,    95,
    46,   155,     0,    45,    72,    38,    95,    95,    46,   155,
     0,    45,    43,    95,    95,    46,   155,     0,    45,    41,
    95,    95,    46,   155,     0,    45,    72,    41,    95,    95,
    46,   155,     0,    45,    42,    95,    95,    46,   155,     0,
    45,    16,   113,    95,    46,   155,     0,    45,   113,    95,
    46,   155,     0,    45,    16,   113,    95,    95,    46,   155,
     0,    45,   113,    95,    95,    46,   155,     0,   143,     0,
   157,     0,   101,   156,     0,   156,    77,   156,     0,   156,
    75,   156,     0,    45,   156,    46,     0,   142,   158,   142,
     0,    22,     0,    23,     0,   142,     0,   142,    86,   168,
     0,   142,    85,   168,     0,   168,    86,   142,     0,   168,
    85,   142,     0,   142,    86,    14,     0,   142,    85,    14,
     0,    14,    86,   142,     0,    14,    85,   142,     0,   142,
    86,   170,     0,   142,    85,   170,     0,    87,     0,    88,
     0,    85,     0,    89,     0,    90,     0,    86,     0,    72,
    38,     0,    72,    41,     0,   159,     0,   129,     0,   160,
   167,   162,     0,   160,   162,     0,   113,   167,   162,     0,
   113,    95,   167,   162,     0,   113,    95,    95,   167,   162,
     0,   113,   167,    15,   162,     0,   111,   167,   162,     0,
   111,    95,   167,   162,     0,   111,    95,    95,   167,   162,
     0,   111,   167,    15,   162,     0,   113,   162,     0,   113,
    95,   162,     0,   113,    95,    95,   162,     0,   111,   162,
     0,   111,    95,   162,     0,   111,    95,    95,   162,     0,
   160,   167,    15,   162,     0,   160,    95,   167,    15,   162,
     0,   160,   167,    15,    50,   142,    51,   162,     0,   160,
    95,   167,   162,     0,   160,    95,   162,     0,   160,    95,
    95,   167,   162,     0,    45,    95,   167,    46,    45,   161,
    46,   162,     0,     0,    36,   160,   167,   162,     0,    36,
   160,   162,     0,    36,   111,   167,   162,     0,    36,   113,
   167,   162,     0,    36,   113,    95,   167,   162,     0,    36,
   111,   167,    15,   162,     0,    36,   113,   167,    15,   162,
     0,    36,   160,   167,    15,   162,     0,    36,   160,    95,
   167,    15,   162,     0,    36,    45,    95,   167,    46,    45,
   161,    46,   162,     0,     0,    36,   160,   167,    50,   142,
    51,   162,     0,    36,   160,   167,    50,   142,    36,   142,
    51,   162,     0,    36,   160,   167,    15,    50,   142,    51,
   162,     0,    36,   160,    95,   167,   162,     0,    36,   160,
    95,   162,     0,    36,     1,     0,   136,   164,     0,   160,
     0,   113,     0,     0,    81,     1,     0,    36,   136,   164,
     0,     0,    36,     1,     0,    48,   121,    49,     0,     1,
    49,     0,    45,   156,    46,     0,     1,    46,     0,   111,
     0,    45,   167,    46,     0,   112,     0,   114,     0,   116,
     0,   115,     0,    36,   167,   172,     0,     0,    36,     1,
     0,     0,    36,   121,   173,     0,   157,     0,   101,   174,
     0,   174,    77,   174,     0,   174,    75,   174,     0,    45,
   174,    46,     0,    27,   166,   165,     0,    26,   142,    47,
    28,   165,     0,    26,    45,   178,    36,   179,    36,   180,
    46,   165,     0,   132,     0,   128,     0,     0,   156,     0,
     0,   132,     0,     0,     3,    45,   146,    46,    48,   182,
    49,     0,     4,   146,    37,    45,   121,    46,   183,     0,
     6,    37,    45,   121,    46,     0,     5,   182,     0,   182,
     0,     0,     7,   156,    35,   165,   185,     0,     8,   165,
     0,     0,    33,    45,   136,    46,     0,    33,    45,   136,
   187,    46,     0,     0,    36,   136,   187,     0,   103,    45,
   167,    46,     0,   103,    45,   167,   189,    46,     0,   103,
    45,   138,    46,     0,   103,    45,   138,   189,    46,     0,
   103,    45,   190,    46,     0,     0,    36,   167,   189,     0,
    36,   138,   189,     0,   167,    17,   167,   191,     0,   138,
    17,   167,   191,     0,   141,    17,   167,   191,     0,   167,
    17,   138,   191,     0,   138,    17,   138,   191,     0,   141,
    17,   138,   191,     0,   167,    82,   167,   191,     0,   138,
    82,   167,   191,     0,    45,   153,    46,    82,   167,   191,
     0,   141,    82,   167,   191,     0,   167,    82,   138,   191,
     0,   138,    82,   138,   191,     0,    45,   153,    46,    82,
   138,   191,     0,   167,    17,   124,     0,   167,    82,   124,
     0,   141,    82,   138,   191,     0,    45,   190,    46,     0,
     0,    17,   167,   191,     0,    17,   138,   191,     0,    82,
   167,   191,     0,    82,   138,   191,     0,    17,   124,     0,
    82,   124,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   148,   179,   180,   184,   185,   186,   187,   188,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   206,   207,   208,
   209,   210,   211,   215,   216,   221,   222,   226,   230,   235,
   237,   244,   350,   351,   353,   354,   355,   356,   357,   358,
   360,   361,   363,   364,   365,   366,   367,   368,   374,   375,
   376,   377,   378,   379,   381,   384,   390,   394,   400,   408,
   418,   420,   422,   436,   440,   444,   451,   452,   457,   462,
   467,   476,   484,   495,   509,   510,   511,   515,   519,   523,
   527,   531,   535,   542,   544,   546,   551,   563,   564,   565,
   568,   569,   570,   577,   581,   585,   590,   596,   601,   608,
   614,   625,   627,   628,   632,   639,   643,   644,   652,   659,
   660,   661,   662,   663,   664,   665,   668,   670,   672,   674,
   676,   678,   680,   682,   684,   686,   688,   690,   692,   697,
   698,   701,   702,   703,   706,   707,   708,   711,   715,   716,
   720,   725,   730,   735,   740,   747,   749,   750,   756,   757,
   758,   760,   762,   764,   766,   772,   773,   775,   776,   782,
   783,   787,   788,   792,   793,   797,   798,   799,   800,   801,
   803,   804,   805,   806,   807,   808,   809,   810,   811,   812,
   815,   816,   817,   818,   819,   820,   821,   822,   824,   826,
   830,   831,   832,   833,   839,   843,   851,   863,   867,   876,
   888,   892,   900,   904,   905,   908,   915,   919,   924,   928,
   935,   938,   939,   942,   943,   946,   947,   950,   951,   952,
   953,   954,   955,   958,   959,   960,   961,   962,   963,   965,
   966,   968,   969,   971,   979,   980,   981,   982,   983,   989,
   991,   992,   995,   996,   997,  1000,  1001,  1004,  1005,  1008,
  1009,  1012,  1013,  1018,  1019,  1020,  1021,  1022,  1023,  1030,
  1032,  1035,  1037,  1043,  1047,  1052,  1058,  1064,  1070,  1080,
  1086,  1092,  1098,  1106,  1110,  1114,  1120,  1124,  1128,  1134,
  1140,  1147,  1153,  1159,  1163,  1171,  1177,  1180,  1184,  1188,
  1194,  1200,  1206,  1213,  1221,  1227,  1242,  1248,  1251,  1259,
  1267,  1273,  1279,  1283,  1292,  1303,  1307,  1311,  1312,  1316,
  1330,  1331,  1339,  1341,  1348,  1350,  1356,  1357,  1361,  1366,
  1371,  1376,  1382,  1386,  1387,  1393,  1394,  1405,  1416,  1417,
  1419,  1421,  1427,  1433,  1441,  1449,  1453,  1457,  1463,  1467,
  1473,  1477,  1484,  1488,  1492,  1499,  1503,  1507,  1511,  1521,
  1522,  1528,  1529,  1533,  1534,  1539,  1540,  1541,  1542,  1543,
  1546,  1547,  1548,  1554,  1555,  1556,  1558,  1559,  1560,  1562,
  1563,  1564,  1565,  1567,  1568,  1569,  1570,  1571,  1572,  1573,
  1577,  1578,  1579,  1580,  1581,  1582,  1583
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND",
"POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE","DEFINE",
"MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT",
"UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","OR","PARALLEL","AND","ASS_P","ASS_N","CON","ADDRESS","IMPLY",
"IFF","PROPIMPLY","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","array_cast_exp","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp",
"option_exp_else_statement","simple_ari_exp","member_in_exp","bi_operator","ari_operator",
"array_exp","option_list_value","option_struct_list_value","inner_option_list_value",
"address_exp","type_cast","casted_element","bool_exp","prime_bool_exp","relation_operator",
"sign_type_define","all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   117,   118,   118,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   120,   120,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   122,   122,   123,   123,   124,   124,
   124,   125,   126,   126,   127,   127,   127,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   129,   129,   129,
   129,   129,   129,   130,   130,   130,   130,   130,   130,   130,
   130,   131,   131,   131,    -1,    -1,    -1,    -1,   132,   133,
   133,   133,   133,   133,   133,   133,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,   135,
   135,   136,   136,   136,   136,   136,   136,   137,   138,   138,
   139,   139,   139,   139,   139,   140,   140,   140,   141,   141,
   141,   141,   141,   141,   141,   142,   142,   142,   142,   143,
   143,   144,   144,   145,   145,   146,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
   147,   147,   147,   147,   147,   147,   147,   147,   148,   148,
   149,   149,   149,   149,   150,   150,   150,   151,   151,   151,
   152,   152,   152,   152,   152,   153,   153,   153,   153,   153,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   155,   156,   156,   156,   156,   156,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   158,   158,   158,   158,   158,   158,   159,
   159,   160,   160,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   163,   163,   163,   163,   163,   164,
   164,   164,   165,   165,   166,   166,   167,   167,   168,   169,
   170,   171,   172,   172,   172,   173,   173,   174,   174,   174,
   174,   174,   175,   176,   177,   178,   178,   178,   179,   179,
   180,   180,   181,   182,   182,   183,   183,   183,   184,   185,
   185,   186,   186,   187,   187,   188,   188,   188,   188,   188,
   189,   189,   189,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   191,   191,   191,   191,   191,   191,   191
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     8,     9,
     1,     1,     7,     3,     1,     3,     1,     0,     4,     5,
     4,     4,     2,     2,     2,     2,     1,     2,     2,     3,
     3,     3,     3,     7,     8,    11,    13,     1,     1,     1,
     1,     1,     1,     2,     6,     4,     5,     5,     8,     8,
     2,     2,     2,     0,     6,     7,     0,     2,     3,     1,
     1,     1,     1,     3,     2,     1,    11,    12,    11,    11,
    17,    18,    17,    18,    19,    18,    17,    18,    17,     1,
     1,     1,     1,     1,    10,     3,     1,     4,     5,     3,
    11,    12,    11,    11,    12,     3,     2,     0,     2,     2,
     2,     7,     6,     4,     3,     1,     3,     3,     5,     1,
     3,     2,     0,     1,     3,     1,     2,     2,     1,     1,
     1,     1,     1,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     1,     1,     3,     4,     4,     4,     4,     4,     4,
     3,     3,     3,     0,     2,     2,     2,     2,     2,     3,
     4,     4,     4,     5,     5,     5,     5,     5,     6,     5,
     5,     6,     5,     6,     7,     6,     6,     7,     6,     6,
     5,     7,     6,     1,     1,     2,     3,     3,     3,     3,
     1,     1,     1,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     1,     1,     1,     1,     1,     1,     2,
     2,     1,     1,     3,     2,     3,     4,     5,     4,     3,
     4,     5,     4,     2,     3,     4,     2,     3,     4,     4,
     5,     7,     4,     3,     5,     8,     0,     4,     3,     4,
     4,     5,     5,     5,     5,     6,     9,     0,     7,     9,
     8,     5,     4,     2,     2,     1,     1,     0,     2,     3,
     0,     2,     3,     2,     3,     2,     1,     3,     1,     1,
     1,     1,     3,     0,     2,     0,     3,     1,     2,     3,
     3,     3,     3,     5,     9,     1,     1,     0,     1,     0,
     1,     0,     7,     7,     5,     2,     1,     0,     5,     2,
     0,     4,     5,     0,     3,     4,     5,     4,     5,     4,
     0,     3,     3,     4,     4,     4,     4,     4,     4,     4,
     4,     6,     4,     4,     4,     6,     3,     3,     4,     3,
     0,     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,    93,    47,     0,
     0,     0,     0,     0,    51,    52,     0,     0,    45,    88,
    91,    90,    92,    89,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   317,     0,     1,
    62,    61,     0,    34,    77,     0,    33,     0,   116,   112,
   113,   110,    37,    38,    39,    35,    36,    50,    49,   111,
     0,     0,    29,    13,    22,     0,   169,     0,     0,     0,
     0,   320,   322,   321,   174,   172,   180,   173,    17,   156,
   164,   177,   178,   171,   166,   176,   170,   179,    21,    10,
     9,    20,    12,    11,     2,     0,     0,     0,     0,     0,
    26,     0,   169,   241,   242,     0,     0,   319,   243,     0,
   235,     0,     0,    73,     0,    74,     0,     0,     0,   317,
   298,     0,   338,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   174,     0,   172,   173,   177,   328,
   171,     0,   179,     0,     0,     0,     0,     0,     0,    76,
    75,     0,   317,   151,   150,   149,     0,     0,   115,   112,
     0,     0,     0,     0,     0,   308,     0,     0,   317,    79,
   104,     0,     0,     0,     0,     0,    78,   130,   131,     0,
     0,   308,     0,     0,     0,     0,     0,     0,    27,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   172,   173,     0,   177,   171,   179,     0,   208,     0,
   209,   207,   206,   167,   168,   189,   190,     0,   187,   188,
   186,   256,   259,   254,   255,   257,   258,   184,   185,   181,
   182,   183,     0,     0,     8,     5,     4,     6,     7,     0,
     0,     0,     0,   243,     0,   236,   256,   259,     0,     0,
     0,     0,     0,     0,     0,    80,    82,    81,    83,   287,
     0,     0,     0,   324,     0,    88,    90,    92,    89,     0,
     0,   337,   336,     0,     0,   316,     0,     0,     0,   333,
     0,     0,     0,     0,     0,     0,   137,   132,   133,   192,
   193,   134,     0,     0,    88,    90,    89,     0,     0,     0,
     0,     0,   317,   149,     0,   329,    64,   114,   140,   155,
     0,   318,     0,     0,     0,   380,     0,     0,     0,   287,
   308,     0,     0,     0,     0,   263,     0,   262,     0,     0,
     0,   112,   113,     0,   110,   111,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   307,   311,   306,     0,
   148,   101,     0,     0,     0,     0,    94,    32,    31,    54,
    30,     0,    65,   109,     0,   381,   381,     0,   381,   381,
   381,   381,   381,   381,   377,   381,   381,   378,   381,   381,
    25,    29,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   175,   210,     0,     0,     0,     0,     0,   158,   165,
   157,     0,   251,   250,   239,   249,   245,   253,   248,   244,
   252,   240,   351,   238,   237,   247,   246,    43,     0,   298,
   298,   298,     0,   304,     0,     0,     0,   298,     0,     0,
     0,     0,     0,     0,     0,   340,     0,   315,   314,     0,
     0,     0,     0,     0,     0,     0,     0,   204,   204,   204,
   204,   204,   204,     0,     0,   352,     0,     0,     0,     0,
     0,     0,    88,    90,    89,     0,    88,    90,    88,    90,
   332,   149,     0,     0,     0,     0,     0,     0,     0,   331,
   330,   326,     0,     0,     0,     0,     0,   317,     0,   260,
   261,   154,     0,    88,    90,    89,     0,    40,     0,     0,
    48,     0,   358,     0,   356,     0,   360,    53,    41,    42,
   309,     0,   305,    69,     0,     0,     0,   148,   103,   102,
   104,    72,     0,     0,     0,     0,   368,   365,    71,   375,
   371,   369,   366,   379,   373,   367,   364,   374,   370,    28,
     0,   163,     0,   211,   160,     0,     0,   213,     0,     0,
     0,     0,   212,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   349,     0,   298,   277,   298,   298,   274,   298,   298,   265,
   298,     0,     0,   298,     0,   298,   298,   289,   298,     0,
   325,   324,     0,     0,     0,     0,     0,     0,     0,   339,
     0,   334,   313,     0,   136,   194,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   354,   353,
     0,   191,     0,     0,     0,     0,     0,     0,    88,    90,
     0,     0,   148,   287,   332,   148,   381,   381,     0,   327,
    58,     0,     0,    70,     0,     0,     0,     0,     0,     0,
    90,     0,     0,     0,     0,   361,   361,   359,   357,   312,
   311,   147,   148,   139,   104,   104,     0,    96,    66,   386,
   381,   381,   387,   381,   381,     0,     0,   159,     0,     0,
     0,   234,   218,     0,   221,     0,   223,     0,   220,     0,
     0,     0,     0,     0,     0,   216,     0,     0,   217,     0,
     0,   214,   215,   231,     0,     0,     0,     0,   350,     0,
   298,   278,   298,   298,   270,   298,   275,   298,   298,   266,
     0,   284,   298,   298,   264,     0,     0,   298,   290,   298,
   298,   291,   303,   298,   298,     0,   288,     0,   323,     0,
     0,     0,   342,     0,     0,   205,   204,   204,   204,   198,
   200,   199,   195,   197,   196,     0,   138,   355,     0,   320,
     0,   320,   320,     0,     0,     0,     0,     0,   287,     0,
     0,     0,   376,   372,     0,    57,     0,   148,   153,     0,
     0,     0,     0,     0,   363,   362,   310,   146,    97,    98,
   104,   383,   382,   385,   384,     0,   162,   230,     0,   161,
   224,   227,   229,   226,   171,   317,   317,     0,     0,   219,
     0,   222,     0,   233,     0,     0,   343,     0,   279,   298,
   271,   273,   276,   298,   267,   269,   298,   298,   283,     0,
   280,    68,     0,   293,   292,   294,   298,   302,     0,   295,
     0,    63,     0,   341,     0,     0,     0,   201,   203,   202,
     0,     0,     0,     0,     0,     0,     0,   320,     0,   139,
    84,   152,    55,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    95,    23,   232,     0,     0,     0,   317,   317,
   225,   228,     0,     0,   287,   272,   268,   285,   281,     0,
    67,     0,   287,   296,     0,     0,   298,     0,     0,    44,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    85,     0,    59,     0,     0,     0,     0,     0,
   104,   104,     0,     0,     0,     0,     0,     0,     0,     0,
   298,    60,     0,   298,     0,   299,    56,   335,   287,     0,
     0,     0,   148,     0,     0,     0,   148,   148,     0,     0,
     0,     0,   287,     0,     0,     0,     0,     0,     0,     0,
    99,   100,   148,   148,   148,     0,     0,     0,   345,   298,
   282,   298,   301,   298,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   148,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   148,   148,   348,   286,   297,   300,     0,   320,   320,
     0,   119,   320,   320,     0,   117,   120,     0,     0,     0,
     0,    86,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   141,   144,   143,     0,     0,     0,   347,   344,     0,
     0,   135,     0,     0,     0,   320,     0,     0,   320,   320,
   320,     0,   118,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   142,   145,   346,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   320,    87,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   148,   148,     0,   148,   148,     0,     0,     0,
     0,     0,     0,   148,     0,     0,   148,   148,   148,     0,
   129,   127,     0,   123,   121,     0,     0,     0,   148,   128,
   122,   126,   124,     0,   125,     0,     0,     0
};

static const short yydefgoto[] = {  1156,
     2,    21,   211,   154,   382,   922,    95,    62,    63,    64,
    65,    66,   372,   377,    67,    68,    69,   200,   368,   307,
    96,    97,   546,    98,   129,   712,   708,   100,   101,   253,
   238,   309,   310,   311,   641,   102,   103,   713,   265,   131,
   269,   348,   452,   453,   283,   370,   543,   443,   147,   104,
   132,   105,   106,   107,   461,   339,   162,    73,    74,    75,
   294,   631,   875,    76,   738,  1069,    77,   601,    78,   487,
    79,   534,   108,   557
};

static const short yypact[] = {    18,
   408,  2877,-32768,-32768,   -75,-32768,-32768,-32768,   408,   408,
   408,   408,  1429,   408,   408,   408,   408,   408,   408,-32768,
   159,    -2,  1371,-32768,   143,   656,   747,-32768,-32768,   -55,
    40,   154,  1729,    33,-32768,-32768,   190,   161,-32768,-32768,
-32768,-32768,-32768,-32768,  2304,  2877,   118,   157,   577,   577,
   208,   367,   229,   255,   269,   317,   323,   416,   330,  1192,
-32768,-32768,   331,-32768,-32768,   330,-32768,   621,-32768,   240,
    60,   133,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   401,  1084,   975,   353,   353,  1371,-32768,  3368,   225,  2741,
  2741,-32768,-32768,-32768,-32768,   240,-32768,    60,   880,  2207,
-32768,-32768,-32768,   133,-32768,-32768,-32768,-32768,   353,   353,
   353,   353,   353,   353,-32768,   408,   408,   408,   408,   408,
-32768,  2741,    32,-32768,-32768,  2914,  1371,-32768,  1573,   652,
-32768,   943,  1371,   330,   330,   330,   330,   429,    40,-32768,
   453,    40,  2170,   138,   452,  1371,    41,  2877,   809,  1371,
  2430,   382,  3746,  1098,  1173,   865,   669,   757,   475,-32768,
   763,   117,   902,   996,   481,   489,  1069,  1081,   450,-32768,
-32768,  1558,   521,-32768,-32768,-32768,  2772,   436,-32768,   158,
  1429,   412,  2877,  2877,  2877,  1037,  1429,   330,    11,-32768,
   185,  2877,  2877,  2877,  2877,  1171,-32768,-32768,-32768,   809,
    67,  1037,    67,    67,    67,    12,    12,  2019,-32768,   408,
   616,   840,   485,   -28,   -21,   550,   -14,  3379,   672,   694,
   635,   555,   405,   261,   662,   417,   697,   225,   158,    60,
-32768,   133,-32768,-32768,-32768,-32768,-32768,  2741,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  2741,  1429,  1030,   923,  1082,   678,   678,   740,
  1429,  1429,  2951,  1848,   941,-32768,    17,    25,  1429,    41,
  1371,  1371,  1429,  1429,   964,-32768,-32768,-32768,-32768,   721,
   744,   613,   780,   764,  1107,   -28,   -21,   550,   -14,  3285,
   443,-32768,-32768,   785,   800,-32768,  1009,   788,  2877,-32768,
  1315,  3117,  1965,  1965,   497,   434,-32768,   880,   784,-32768,
-32768,-32768,   870,  1113,    -9,    -8,    74,  2544,  1024,  1412,
  1101,   208,   793,   838,  2997,-32768,-32768,-32768,-32768,   849,
   830,-32768,   876,  3746,  3746,-32768,  2877,   908,   930,   721,
  1037,   330,   330,   510,   853,-32768,   361,-32768,   887,  2658,
  1179,   555,   405,   475,   417,   697,    66,   737,   225,   607,
   614,   991,  1212,  1219,  1255,    65,-32768,  1010,-32768,  1007,
   568,-32768,   982,  1429,    14,   809,-32768,   854,   987,   987,
-32768,  1019,  1000,-32768,    67,   264,   264,  1035,   264,   264,
   264,   264,   264,   264,-32768,   342,   264,-32768,   342,   264,
-32768,   975,  1087,  1429,  1011,  2741,   135,  2741,   172,   181,
  2741,   206,   306,   348,   349,   912,   380,   451,  1056,  1074,
   482,-32768,   830,   548,   405,   662,   417,   697,   939,-32768,
   880,  1073,   880,   880,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   880,  1118,  1059,-32768,   880,   880,-32768,  1046,     4,
    24,   199,  1108,-32768,  1090,    40,   515,   228,  1143,    23,
  1153,   517,  3331,  1162,   297,  1371,    41,-32768,-32768,  1457,
  1183,  3154,  1165,   261,   523,  1175,  3237,   575,    -1,  1209,
   575,    -1,  1209,  3678,   809,-32768,  1205,   916,   704,   504,
   511,   512,   545,   551,   596,  1605,   380,   602,  1056,  1074,
   876,  1215,  1429,  1230,  3034,  1123,  1429,    67,  1229,  1204,
-32768,  1018,    41,  1280,  1254,  1257,    40,  1267,   838,-32768,
-32768,-32768,  1274,  1226,  1232,  1238,  1867,-32768,  1435,   548,
-32768,    67,-32768,  1278,-32768,  1288,-32768,-32768,-32768,-32768,
-32768,   472,-32768,-32768,  1245,  1285,   254,   568,-32768,-32768,
  1302,-32768,  1171,  1295,    12,    12,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1294,     0,   633,-32768,  1218,  2741,  1299,-32768,  2741,  1300,
  2741,  1305,-32768,  2741,  1307,   636,   646,   649,   660,   661,
  2741,   666,  2741,   675,  2741,  2741,  2741,  1309,   347,    41,
-32768,    40,   239,-32768,    26,   272,-32768,   432,   295,-32768,
   546,  1270,    40,   549,    40,   683,    37,-32768,   899,  2877,
-32768,   764,  1277,   390,   545,   551,   596,   952,   400,  1159,
  1321,-32768,-32768,  1313,-32768,-32768,  1317,  3248,   523,   622,
  1324,  1325,  1328,  1318,  1329,  1330,  3416,  1333,  1335,-32768,
   916,-32768,  3717,  3771,  3800,   693,   699,   700,   660,   712,
   743,  1341,   568,   721,-32768,   568,   264,   264,  2877,-32768,
-32768,    41,  1340,-32768,  1215,  1429,  1429,  1337,  1354,  1355,
  1310,  1226,  1232,  1238,  1362,  1370,  1370,-32768,-32768,-32768,
  1010,-32768,   568,-32768,   313,  1302,  1356,-32768,-32768,-32768,
   342,   264,-32768,   342,   264,   408,  1429,-32768,  2741,  1364,
  2741,-32768,-32768,  2741,-32768,  2741,-32768,  2741,-32768,  2741,
  2741,  3808,  3854,   755,   758,-32768,  2741,  1372,-32768,  2741,
  1373,-32768,-32768,-32768,  2741,  2741,  1384,  1375,-32768,  1379,
    37,-32768,   453,   453,-32768,    37,-32768,   453,   453,-32768,
    40,-32768,   689,    22,-32768,  1386,  1381,   453,-32768,   453,
   453,-32768,-32768,   735,   334,  1429,-32768,  1477,-32768,  1387,
   438,   712,   436,  1371,  1594,-32768,   575,    -1,  1209,-32768,
-32768,-32768,-32768,-32768,-32768,  3462,-32768,-32768,  3499,  1392,
  3510,  1393,  1395,  3717,  3860,  3906,   760,  3912,   721,  1394,
  1402,  1405,-32768,-32768,  1444,-32768,  2877,   568,   880,   -26,
   -18,  1345,  1414,  1310,-32768,-32768,-32768,-32768,-32768,-32768,
   302,-32768,-32768,-32768,-32768,  1158,   880,-32768,  2741,   939,
-32768,-32768,-32768,-32768,   556,  1078,  1110,  3918,  3964,-32768,
  2741,-32768,  2741,-32768,  1424,  1419,-32768,  1425,-32768,   453,
-32768,-32768,-32768,   453,-32768,-32768,   453,   453,-32768,  1429,
-32768,  2877,  1430,-32768,-32768,-32768,   453,-32768,  1429,-32768,
   608,-32768,  2877,-32768,  1431,  1185,  1433,-32768,-32768,-32768,
  3547,  1434,  3593,  1438,  1446,  3970,  3630,  1448,  1453,  1455,
-32768,-32768,-32768,  1493,  1458,  1436,  1392,  1466,  1393,  1395,
   -16,   254,-32768,-32768,-32768,  1478,  1487,  1489,  1156,  1273,
-32768,-32768,  1502,  2877,   721,-32768,-32768,-32768,-32768,   486,
  1192,  1500,   721,-32768,   703,  1429,   453,  1322,    41,-32768,
  1511,   766,   767,   953,  1429,   768,   778,   958,  1429,  1429,
  3641,  1508,-32768,  1514,-32768,  1455,   518,   929,  1518,  1448,
   313,  1302,  1429,  1429,  1429,  1523,  1525,  2877,  1338,  1530,
   453,-32768,  1532,   453,   845,-32768,-32768,-32768,   721,   781,
   783,   787,   568,   794,   798,   802,   568,   568,   803,   806,
  1105,  1429,   721,  1469,  1486,  1541,  1490,  1492,  1543,   937,
-32768,-32768,   568,   568,   568,  1429,  1429,  1416,-32768,   453,
-32768,   453,-32768,   453,  1540,  4011,  4022,   821,  1537,  4059,
  4074,   823,  1538,  1539,   837,   839,   841,   568,  1546,  1548,
  1549,  1503,  1556,  1559,  1509,  1512,  1513,  1571,  1564,  1565,
  1567,   568,   568,  1301,-32768,-32768,-32768,   148,  1574,  1579,
  4115,-32768,  1580,  1582,  4121,-32768,-32768,  4153,  4162,   842,
  1589,  1553,  1527,  1535,  1608,  1550,  1557,  1609,  1629,  1630,
  1583,-32768,-32768,-32768,  1600,  1633,   347,-32768,-32768,    69,
   416,-32768,  1635,  1639,  1641,  1642,  1643,  1644,  1645,  1648,
  1649,  4194,-32768,   916,  1574,  1579,  1584,  1580,  1582,  1585,
  1586,  1588,  1650,-32768,-32768,-32768,   521,  1631,  1647,  1658,
  1655,  1656,  1662,  1664,  1665,  1666,   784,  1642,  1645,  1648,
  1649,  1599,  1429,  1429,  1667,  1429,  1429,  1670,  1671,  1672,
  1669,  1666,   568,   568,  1429,   568,   568,  1429,  1429,  1429,
  1673,  1675,  1678,   568,  1684,  1686,   568,   568,   568,  1429,
-32768,-32768,  1687,-32768,-32768,  1688,  1690,  1699,   568,-32768,
-32768,-32768,-32768,  1700,-32768,  1716,  1724,-32768
};

static const short yypgoto[] = {-32768,
-32768,    36,  1350,   103,  1200,-32768,   226,-32768,-32768,  -180,
   -27,  -158,    73,  -538,  -140,    39,  1271,-32768,  -137,-32768,
    19,-32768,   754,  1045,   -13,  -280,-32768,  1149,   -89,-32768,
  1181,  -293,-32768,-32768,  -379,  1491,-32768,  1385,    -6,    47,
  1657,-32768,   -96,  -334,  1308,  -198,  1071,  -142,-32768,   820,
   237,-32768,   936,-32768,  1141,  1252,   -56,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -707,-32768,-32768,-32768,-32768,  1116,
-32768,  -354,  1320,   284
};


#define	YYLAST		4310


static const short yytable[] = {    99,
   234,   235,   293,   388,   300,   515,   536,   707,   475,   479,
   482,   306,   698,   346,   549,   383,   130,   406,   896,   144,
    70,   170,   171,   621,   408,   373,   898,   346,   949,     1,
   436,   411,   260,   145,   640,    81,   406,   408,   439,   282,
   744,   298,   122,   346,    82,    83,    84,    85,   139,   109,
   110,   111,   112,   113,   114,   138,   385,   282,   139,   282,
   374,   282,   384,   157,    70,   541,   407,   139,   139,   174,
   180,   860,   282,   409,   224,   349,   204,   146,   488,   212,
   412,   139,    48,   156,   139,   490,   491,   897,   299,   369,
   179,   160,   236,   237,   321,   899,   326,   950,   603,   642,
   643,   644,   645,   646,    60,   369,   222,   229,   188,   228,
   529,   385,   264,  1070,   140,   292,   261,   262,   606,   411,
   266,   346,    58,   346,   189,   574,   275,   578,   128,   224,
   583,   190,    94,   140,   140,   308,   128,   264,   197,   297,
    94,   205,   516,   313,   222,    89,    89,   140,   164,   206,
   140,   255,   256,   257,   258,   259,   819,   820,   347,    51,
    51,   157,   333,   430,   473,   178,    70,   358,   492,   157,
   174,   115,   308,   371,   201,   173,   173,   173,   475,  1097,
   576,   346,   346,   639,   295,   458,   308,   133,   308,   156,
   222,   334,  1070,   335,   652,   352,   180,   160,   142,   160,
   360,    70,    70,    70,   224,   149,   276,   277,   278,   279,
    70,    70,    70,    70,   207,   156,   179,   579,    48,   386,
   375,   389,   391,   393,   396,   399,   581,    61,   165,   577,
   236,   237,   116,   117,   282,   118,   222,   148,   551,   203,
   431,   119,   120,   139,   369,   402,   424,   433,   434,   264,
   301,   584,   172,   695,   401,   442,   201,   121,  1071,   446,
   447,   321,   376,   282,   444,   445,   580,   166,   506,   228,
   155,    61,   139,   181,   282,   582,   224,   510,   511,   351,
   555,   222,   903,   139,   202,   363,   364,   365,   474,   478,
   481,   170,   171,   609,   378,   379,   380,   381,   651,   182,
   585,   303,    51,   304,   264,    89,   422,   282,   157,   140,
   726,   264,   729,   183,   732,   733,   139,    70,   173,    51,
   222,   203,   617,   174,   632,   346,  1068,   308,   464,   801,
   282,   815,   816,   741,   473,   173,   157,   375,   140,   139,
   174,   139,   597,   222,   639,   556,   778,   649,   375,   140,
   736,   406,   737,   236,   237,    70,   156,   639,   555,  1096,
   548,   184,   308,   190,   160,   128,   746,   185,   157,   282,
   671,   160,   383,    61,   139,   530,   155,   424,   196,   902,
   160,   160,   140,   869,   229,   312,   202,   349,   156,   751,
   572,   629,   488,   408,   411,   464,   160,   878,   879,   880,
   586,   470,    61,   554,   691,   140,   522,   189,    61,    61,
    61,   177,   991,   992,   276,   278,     3,    61,    61,    61,
    61,   204,   312,   556,   188,   591,   172,     4,     5,     6,
     7,   395,   398,   206,   139,   709,   312,   208,   312,   512,
   189,     8,   587,   588,   139,   735,   749,   550,   506,   224,
   330,-32768,     9,   236,   237,    10,   359,   739,   474,   630,
   186,    51,   332,   224,   889,   187,   178,   282,   170,   485,
   347,   308,   690,   280,   592,   572,   322,   173,    86,   486,
   357,   157,   139,   829,   771,    87,   205,   139,   282,   663,
   222,   264,   323,   666,   188,   222,   593,   296,   207,   170,
   189,   464,   222,   437,   440,   346,    51,    11,    12,    13,
   189,    14,    15,    16,    17,    18,   302,    19,    20,   303,
   331,   304,   173,   222,    61,   340,   667,   597,   308,   806,
    51,   693,   188,   341,   277,   178,   961,   465,   476,   480,
   483,   484,    48,   155,   344,   594,   173,   530,   189,   653,
   686,   160,    89,   189,   139,   984,   654,   655,   985,   139,
   754,   139,    61,   758,   201,    90,   305,   464,   636,    91,
   187,   201,   206,   701,   704,   155,   598,   312,   236,   237,
   960,   282,    58,   128,   282,    92,    93,    94,   963,   986,
   406,    51,   167,   329,   168,    28,   408,   405,   577,   202,
   329,   906,   488,   545,   517,   580,   585,   173,   951,   615,
   640,   624,   312,   454,    40,    41,   877,    42,    43,    44,
   518,   169,   776,   201,   224,   140,   777,   189,    86,   203,
   206,    28,   874,   224,  1005,    87,   203,   207,    70,   656,
   346,   411,   532,   926,   410,   657,   845,   593,  1019,   532,
    40,    41,   533,    42,    43,    44,   222,   455,   927,   535,
   236,   237,   808,   809,   403,   222,   477,   236,   237,   303,
   558,   304,   560,   561,   562,   563,   564,   565,   709,   566,
   567,   721,   568,   569,   345,   201,   270,    70,   203,    59,
   658,   722,    48,   827,   723,   207,   661,   761,   198,   199,
   236,   237,    89,   858,   298,   591,   593,   423,   476,   417,
    86,   727,   418,   202,   329,    90,    51,    87,   282,    91,
   730,   312,   768,   456,   282,   457,   271,   710,   272,   421,
   577,   419,    58,   128,   420,    92,    93,    94,   794,    28,
   580,   826,   336,   585,   795,   796,  -112,  -112,    88,   867,
   203,   299,   871,   964,   724,   725,   346,   593,    40,    41,
   728,    42,    43,    44,   346,   449,   134,   876,   135,   731,
   282,   805,   224,   204,    48,   224,   121,   224,   312,   206,
   700,   703,   531,   696,    89,   432,   968,   577,   798,   332,
  1107,   180,   345,   580,   585,   236,   237,    90,    51,   460,
   838,    91,   330,   839,   222,   886,   797,   222,   332,   222,
   346,   406,   408,   406,    58,    86,   459,    92,    93,    94,
   466,    72,    87,   408,   346,    70,  1006,   467,  1007,   236,
   237,   450,   593,   451,  -113,  -113,   469,   731,   205,  1010,
  -110,  -110,   503,  1011,   207,    61,   920,   593,   406,   728,
   141,   408,   731,   302,   731,   925,   303,   136,   304,   137,
   970,   971,   974,   488,   161,    72,  1041,   224,  1045,   224,
   176,    72,   975,   224,   404,   577,   779,   580,   191,    48,
    70,  1008,  1048,   504,  1049,   191,   593,  1082,   577,    89,
   520,    70,   580,   521,    61,  1004,  1012,  1015,   507,   222,
  1016,   222,    90,   305,   489,   222,    91,   226,   232,   894,
   328,   508,   965,   765,   271,   731,   272,   731,   513,    58,
   128,   973,    92,    93,    94,   977,   978,   224,   193,   194,
   195,   577,    70,   580,   282,  1050,   731,   236,   237,   993,
   994,   995,   198,   199,   271,   226,   272,   336,   766,   589,
   803,   804,   590,   191,   191,   191,   191,   509,   281,   222,
   651,   284,   161,   303,   921,   304,   987,    72,  1018,   988,
   161,   324,   236,   237,  1026,   928,    70,  1027,   514,  -111,
  -111,   523,  1032,  1033,   822,   823,   435,   824,   825,   589,
   589,   226,   772,   972,   239,   589,   355,    72,   976,   118,
   989,   361,    72,    72,    72,   119,   120,   191,  1028,   448,
   210,    72,    72,    72,    72,   271,   959,   272,   240,   241,
   387,   121,   390,   392,   394,   397,   400,   273,   274,   248,
   249,   337,    61,   250,   251,   252,   537,   226,   271,   167,
   272,   168,    28,    86,   338,   542,    71,   427,   116,   117,
    87,   118,   544,   337,   468,    28,  1073,   119,   120,   547,
   998,   497,    41,   195,   498,    43,    44,   552,   169,   192,
   193,   194,   195,   121,    40,    41,   553,    42,    43,    44,
   559,   302,   226,   271,   303,   272,   304,    61,   554,   158,
    71,   192,   193,   194,   195,   175,    71,   571,    61,  1123,
  1124,   595,  1126,  1127,   117,   573,   118,    48,   345,   161,
   191,  1134,   119,   120,  1137,  1138,  1139,   366,    72,   596,
   599,   226,   186,   907,   176,   600,  1149,   187,   121,   209,
    90,   305,   223,   230,    91,   272,    59,   161,   952,    61,
   602,   502,   589,   327,   226,  1017,   501,    58,   128,   367,
    92,    93,    94,   612,   186,   908,    72,   116,   117,   187,
   118,   191,   191,   519,   119,   120,   119,   120,   665,   161,
   223,   192,   193,   194,   195,   334,   355,   335,   427,   342,
   121,   135,   121,    61,   613,   232,   167,   158,   168,    28,
   620,   343,    71,   137,   191,   158,   175,   334,   623,   335,
   186,   956,   438,   441,   281,   187,   904,   328,    40,    41,
   635,    42,    43,    44,   634,   169,   223,   342,   -62,   462,
   637,   353,    71,   134,   528,   462,   230,    71,    71,    71,
   930,   116,   117,   271,   118,   272,    71,    71,    71,    71,
   119,   120,    49,    50,   640,   692,   -62,   -62,   -62,   -62,
   650,    86,   192,   193,   194,   195,   121,   538,    87,   271,
   662,   272,   223,  1072,   539,   192,   193,   194,   195,   605,
   608,   611,   425,   239,   664,   614,   616,   619,   669,   622,
   335,   191,   161,    59,   191,   192,   193,   194,   195,    88,
   672,   226,   192,   193,   194,   195,   226,   240,   241,   673,
   540,   697,   674,   226,   736,  1067,   737,   223,   248,   249,
   236,   237,   250,   251,   252,    48,   676,   186,   957,   677,
   678,    80,   187,   688,   226,    89,   679,   668,   192,   193,
   194,   195,   680,   689,   158,   694,   675,   375,    90,    51,
   329,   706,    91,    71,   714,   716,   223,   756,   355,   175,
   718,   687,   720,   770,   735,    58,   773,   774,    92,    93,
    94,   775,   158,   471,   163,    80,   175,   967,   783,   223,
   485,    80,   780,   781,   702,   705,   782,    86,   787,   784,
   785,    71,   810,   999,   123,   799,   429,   807,   192,   193,
   194,   195,   124,   125,   158,   192,   193,   194,   195,   811,
   812,   353,   814,   425,   813,   532,   821,   227,   233,   829,
   230,   192,   193,   194,   195,   126,   800,   841,   843,   802,
   846,   740,   743,   847,   848,   748,   863,   167,   753,   168,
    28,   873,   757,   862,   760,    86,   764,   882,   884,    72,
   885,    48,    87,   191,   890,   227,   818,   891,   191,   499,
    41,    89,   500,    43,    44,   892,   169,   226,   900,   901,
   913,  1034,   163,   914,    90,    51,   226,    80,    91,   915,
   163,   127,   682,    88,   923,   683,   929,   684,   931,   529,
   947,    58,   128,   935,    92,    93,    94,   939,    72,   192,
   193,   194,   195,   942,   893,   940,   356,    80,   943,    48,
   944,   362,    80,    80,    80,   633,   685,   158,   946,    89,
   948,    80,    80,    80,    80,    89,   223,   192,   193,   194,
   195,   223,    90,    51,    59,   872,    91,   953,   223,    51,
   192,   193,   194,   195,   178,   159,   954,   227,   955,    58,
   835,   945,    92,    93,    94,   173,   958,   428,   962,   223,
   192,   193,   194,   195,   575,   969,   575,   982,   983,   575,
   850,   895,   990,  1020,    86,   854,   192,   193,   194,   195,
   857,    87,   996,   353,   997,  1000,    28,  1002,   225,   231,
  1021,  1022,   227,  1025,  1023,  1038,  1024,  1042,  1046,  1047,
   191,  1052,    72,  1053,  1054,    40,    41,  1055,    42,    43,
    44,  1056,    88,  1058,  1057,   226,  1059,  1060,   226,   163,
   226,  1061,    28,   835,  1062,  1063,   225,  1064,    80,  1074,
   167,   227,   168,    28,  1075,  1077,    72,  1078,    48,   345,
  1084,    40,    41,   225,    42,    43,    44,   163,    89,  1083,
  1085,   225,   659,    41,   227,   660,    43,    44,  1086,   169,
  1094,    90,    51,  1087,  1090,    91,    80,   267,   268,   244,
   245,   246,   247,  1088,    71,   236,   237,   354,    58,   163,
  1089,    92,    93,    94,  1091,  1092,   356,  1093,   428,   202,
  1113,    72,   223,  1095,  1098,   233,  1099,  1100,  1101,  1102,
  1103,   223,    72,  1104,  1105,  1112,  1114,  1108,  1109,  1110,
   226,  1111,   226,  1115,  1116,  1117,   226,  1118,   225,  1119,
  1120,  1121,  1122,    71,  1131,  1157,  1125,    59,   426,  1128,
  1129,  1130,  1140,  1158,   575,  1141,  1009,   575,  1142,   575,
  1013,  1014,   575,    72,  1144,    86,  1145,  1150,  1151,   575,
  1152,   575,    87,   575,   575,   575,  1029,  1030,  1031,  1153,
  1155,   570,   699,   225,   648,   711,   254,   604,   607,   610,
   226,   817,   769,   670,   788,   618,     0,     0,     0,     0,
     0,  1051,     0,   143,     0,     0,     0,    72,     0,     0,
   225,     0,   163,     0,     0,  1065,  1066,     0,     0,     0,
     0,   227,   225,     0,     0,     0,   227,     0,     0,    48,
     0,   575,   575,   575,     0,     0,     0,     0,   225,    89,
     0,     0,     0,     0,     0,   225,     0,    71,     0,     0,
     0,     0,    90,    51,   227,   835,    91,     0,     0,   835,
   223,     0,     0,   223,     0,   223,     0,     0,     0,    58,
   225,     0,    92,    93,    94,     0,     0,   354,   356,   354,
     0,    71,     0,     0,     0,     0,   231,   575,     0,   830,
     0,     0,   575,     0,   575,     0,   575,   835,   575,   575,
   575,   575,     0,     0,     0,   575,  1132,  1133,   575,  1135,
  1136,     0,   167,   575,   168,    28,     0,  1143,     0,     0,
  1146,  1147,  1148,   422,     0,     0,     0,     0,     0,     0,
     0,     0,  1154,     0,    40,    41,    71,   681,    43,    44,
   742,   169,   745,   747,     0,   750,   752,    71,   755,     0,
     0,   759,     0,   762,   763,   223,   767,   223,     0,     0,
     0,   223,   267,   268,   244,   245,   246,   247,     0,    80,
   236,   237,   575,   575,   575,     0,   575,     0,     0,     0,
     0,     0,     0,   225,     0,     0,     0,   227,    71,     0,
     0,     0,   225,   715,     0,   717,   227,   225,   719,     0,
     0,    86,     0,     0,     0,     0,     0,   575,    87,    59,
     0,   734,     0,     0,     0,   223,   575,   575,    80,   575,
     0,   575,     0,     0,     0,   225,     0,     0,     0,     0,
     0,     0,    71,     0,     0,     0,     0,     0,     0,   477,
     0,     0,   303,     0,   304,     0,     0,     0,     0,   426,
     0,     0,     0,     0,     0,    86,     0,     0,     0,     0,
     0,     0,   123,     0,   575,    48,     0,     0,   715,   719,
   124,   125,     0,     0,     0,    89,     0,     0,   849,     0,
   851,   852,     0,   853,     0,   855,   856,     0,    90,    51,
   859,   861,    91,    88,     0,   864,     0,   865,   866,     0,
     0,   868,   870,     0,     0,    58,   128,     0,    92,    93,
    94,     0,     0,     0,     0,     0,     0,     0,     0,    48,
     0,     0,    80,   828,     0,     0,     0,     0,   831,    89,
   832,     0,   833,     0,   834,   227,   715,   719,   227,     0,
   227,   840,    90,    51,   842,     0,    91,     0,     0,   844,
     0,     0,     0,     0,     0,     0,    80,     0,   225,    58,
   128,     0,    92,    93,    94,     0,     0,   225,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   575,   575,     0,   916,   575,   575,
     0,   917,     0,     0,   918,   919,     0,     0,     0,     0,
     0,     0,     0,     0,   924,     0,    86,     0,     0,   715,
   719,    80,   842,    87,     0,   285,     0,   168,    28,   575,
     0,     0,    80,   575,     0,     0,   575,   575,     0,     0,
   227,     0,   227,     0,     0,     0,   227,   286,    41,     0,
   287,   288,   289,   905,   290,     0,     0,     0,     0,     0,
     0,     0,   840,   842,     0,   911,     0,   912,     0,     0,
   575,     0,     0,    80,   966,     0,     0,     0,     0,     0,
    48,   219,   220,     0,     0,     0,     0,     0,     0,     0,
    89,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   227,     0,   239,    90,    51,     0,     0,    91,  1001,   178,
   842,  1003,     0,     0,     0,     0,   225,    80,     0,   225,
    58,   225,   291,    92,    93,    94,   240,   241,     0,     0,
     0,   242,   243,   244,   245,   246,   247,   248,   249,     0,
     0,   250,   251,   252,     0,     0,    22,  1035,     0,  1036,
   150,  1037,    24,    25,     0,     0,     0,   123,     0,    26,
     0,    27,    28,    29,    30,   124,   125,    31,    32,    33,
    34,     0,    35,    36,    37,     0,    38,    39,     0,     0,
     0,    40,    41,     0,    42,    43,    44,     0,   151,     0,
     0,    46,     0,     0,     0,    47,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   225,     0,   225,    48,    49,    50,   225,     0,     0,
     0,     0,     0,     0,    89,     0,     0,     0,     0,     0,
     0,   715,     0,     0,     0,   715,     0,    90,   152,     0,
     0,    91,     0,    52,   153,    53,    54,    55,    56,    57,
     0,     0,     0,     0,    58,   128,    59,    92,    93,    94,
     0,     0,     0,     0,     0,   842,     0,     0,     0,   842,
     0,   225,    22,   715,     0,     0,   150,     0,    24,    25,
     0,     0,     0,   123,     0,   314,     0,    27,    28,    29,
    30,   124,   125,    31,    32,    33,    34,     0,    35,    36,
    37,     0,    38,    39,     0,     0,   842,   315,    41,     0,
   316,   288,   317,     0,   318,     0,     0,    46,     0,     0,
     0,    47,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    48,   319,   320,     0,     0,     0,     0,     0,     0,     0,
    89,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    90,   152,     0,     0,    91,     0,    52,
   153,    53,    54,    55,    56,    57,     0,     0,     0,     0,
    58,   128,   291,    92,    93,    94,    22,     0,     0,     0,
   150,     0,    24,    25,     0,     0,     0,   123,     0,   314,
     0,    27,    28,    29,    30,   124,   125,    31,    32,    33,
    34,     0,    35,    36,    37,     0,    38,    39,     0,     0,
     0,   493,    41,     0,   494,   288,   495,     0,   318,     0,
     0,    46,     0,     0,     0,    47,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    48,   496,   320,     0,     0,     0,
     0,     0,     0,     0,    89,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    90,   152,     0,
     0,    91,     0,    52,   153,    53,    54,    55,    56,    57,
     0,     0,     0,     0,    58,   128,   291,    92,    93,    94,
    22,     0,     0,     0,   150,     0,    24,    25,     0,     0,
     0,   123,     0,    26,     0,    27,    28,    29,    30,   124,
   125,    31,    32,    33,    34,     0,    35,    36,    37,     0,
    38,    39,     0,     0,     0,   524,    41,     0,   525,    43,
   526,     0,   151,     0,     0,    46,     0,     0,     0,    47,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    48,   527,
    50,     0,     0,     0,     0,     0,     0,     0,    89,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    90,   152,     0,    87,    91,     0,    52,   153,    53,
    54,    55,    56,    57,     0,     0,     0,     0,    58,   128,
    59,    92,    93,    94,    22,     0,     0,     0,    23,     0,
    24,    25,     0,     0,     0,    88,     0,    26,     0,    27,
    28,    29,    30,     0,     0,    31,    32,    33,    34,     0,
    35,    36,    37,     0,    38,    39,     0,     0,     0,    40,
    41,    48,    42,    43,    44,     0,   350,     0,     0,    46,
     0,    89,     0,    47,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    90,    51,     0,     0,    91,     0,
     0,     0,    48,    49,    50,     0,     0,     0,     0,     0,
     0,    58,    89,     0,    92,    93,    94,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    51,     0,     0,     0,
     0,    52,     0,    53,    54,    55,    56,    57,     0,    22,
     0,     0,    58,    23,    59,    24,    25,     0,     0,     0,
     0,     0,    26,     0,    27,    28,    29,    30,     0,     0,
    31,    32,    33,    34,     0,    35,    36,    37,     0,    38,
    39,     0,     0,     0,    40,    41,     0,    42,    43,    44,
    86,    45,     0,     0,    46,     0,     0,   123,    47,   213,
     0,     0,     0,     0,     0,   124,   125,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    48,    49,    50,
     0,   214,     0,     0,   215,   216,   217,    86,   263,     0,
     0,     0,     0,     0,   123,     0,   213,     0,     0,     0,
     0,    51,   124,   125,     0,     0,    52,     0,    53,    54,
    55,    56,    57,     0,    48,   219,   220,    58,   413,    59,
     0,   414,   216,   415,    89,   263,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,    90,    51,     0,
   123,    91,   213,     0,   127,     0,     0,     0,   124,   125,
     0,    48,   416,   220,    58,   128,   221,    92,    93,    94,
     0,    89,     0,     0,   214,     0,     0,   215,   216,   217,
    86,   505,     0,     0,    90,    51,     0,   123,    91,   213,
     0,   127,     0,     0,     0,   124,   125,     0,     0,     0,
     0,    58,   128,   221,    92,    93,    94,    48,   219,   220,
     0,   413,     0,     0,   414,   216,   415,    89,   505,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    90,    51,     0,     0,    91,     0,     0,   153,     0,     0,
     0,     0,     0,     0,    48,   416,   220,    58,   128,   221,
    92,    93,    94,     0,    89,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,    90,    51,     0,
    87,    91,   213,     0,   153,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    58,   128,   221,    92,    93,    94,
     0,     0,     0,     0,   214,     0,     0,   215,   216,   217,
    86,   472,     0,     0,   303,     0,   304,    87,     0,   213,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    48,   219,   220,
     0,   413,     0,     0,   414,   216,   415,    89,   472,     0,
     0,   303,     0,   304,     0,     0,     0,     0,     0,     0,
    90,   305,     0,     0,    91,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    48,   416,   220,    58,   128,   221,
    92,    93,    94,     0,    89,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,    90,   305,     0,
    87,    91,   213,     0,    86,     0,     0,     0,     0,     0,
     0,    87,     0,   213,    58,   128,   221,    92,    93,    94,
     0,     0,     0,     0,   214,     0,     0,   215,   216,   217,
     0,   638,     0,     0,   303,   413,   304,     0,   414,   216,
   415,    86,   638,     0,     0,   303,     0,   304,    87,     0,
   213,     0,     0,     0,     0,     0,     0,    48,   219,   220,
     0,     0,     0,     0,     0,     0,     0,    89,    48,   416,
   220,     0,   413,     0,     0,   414,   216,   415,    89,   463,
    90,    51,     0,     0,    91,     0,     0,    86,     0,     0,
     0,    90,    51,     0,    87,    91,   213,    58,     0,   221,
    92,    93,    94,     0,     0,    48,   416,   220,    58,     0,
   221,    92,    93,    94,     0,    89,     0,     0,   625,     0,
     0,   626,   216,   627,    86,   463,     0,     0,    90,   152,
     0,    87,    91,   213,   178,    86,     0,     0,     0,     0,
     0,     0,    87,     0,   213,    58,     0,   221,    92,    93,
    94,    48,   628,   220,     0,   214,     0,     0,   215,   216,
   217,    89,   218,     0,     0,     0,   413,     0,     0,   414,
   216,   415,    86,   218,    90,    51,     0,     0,    91,    87,
   178,   213,     0,     0,     0,     0,     0,     0,    48,   219,
   220,    58,     0,   221,    92,    93,    94,     0,    89,    48,
   416,   220,     0,   214,     0,     0,   215,   216,   217,    89,
   786,    90,    51,     0,     0,    91,     0,     0,    86,     0,
     0,     0,    90,    51,     0,    87,    91,   213,    58,     0,
   221,    92,    93,    94,     0,     0,    48,   219,   220,    58,
     0,   221,    92,    93,    94,     0,    89,     0,     0,   625,
     0,     0,   626,   216,   627,    86,   218,     0,     0,    90,
    51,     0,    87,    91,   213,     0,    86,     0,     0,     0,
     0,     0,     0,    87,     0,   213,    58,     0,   221,    92,
    93,    94,    48,   628,   220,     0,   214,     0,     0,   215,
   216,   217,    89,   881,     0,     0,     0,   214,     0,     0,
   215,   216,   217,    86,   883,    90,    51,     0,     0,    91,
    87,     0,   213,     0,     0,     0,     0,     0,     0,    48,
   219,   220,    58,     0,   221,    92,    93,    94,     0,    89,
    48,   219,   220,     0,   932,     0,     0,   933,   216,   415,
    89,   218,    90,    51,     0,     0,    91,     0,     0,    86,
     0,     0,     0,    90,    51,     0,    87,    91,   213,    58,
     0,   221,    92,    93,    94,     0,     0,    48,   934,   220,
    58,     0,   221,    92,    93,    94,     0,    89,     0,     0,
   936,     0,     0,   937,   216,   415,    86,   218,     0,     0,
    90,    51,     0,    87,    91,   213,     0,    86,     0,     0,
     0,     0,     0,     0,    87,     0,   213,    58,     0,   221,
    92,    93,    94,    48,   938,   220,     0,   214,     0,     0,
   215,   216,   217,    89,   941,     0,     0,     0,   979,     0,
     0,   980,   216,   415,    86,   218,    90,    51,     0,     0,
    91,    87,     0,     0,     0,     0,    28,     0,     0,     0,
    48,   219,   220,    58,     0,   221,    92,    93,    94,     0,
    89,    48,   981,   220,     0,    40,    41,     0,    42,    43,
    44,    89,   647,    90,    51,     0,     0,    91,     0,     0,
    87,     0,     0,     0,    90,    51,     0,     0,    91,     0,
    58,     0,   221,    92,    93,    94,     0,     0,    48,   345,
     0,    58,    86,   221,    92,    93,    94,     0,    89,   123,
     0,   789,     0,     0,     0,     0,     0,   124,   125,     0,
     0,    90,    51,     0,     0,    91,     0,     0,     0,     0,
     0,     0,     0,     0,    87,     0,     0,    48,    58,     0,
   325,    92,    93,    94,     0,     0,     0,    89,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    90,    51,     0,    87,    91,   791,    48,     0,     0,     0,
     0,    87,     0,     0,     0,     0,    89,    58,     0,     0,
   790,    93,    94,     0,     0,     0,     0,     0,     0,    90,
    51,    48,     0,    91,    88,     0,   153,     0,     0,     0,
     0,    89,    88,     0,     0,     0,    58,   128,     0,    92,
    93,    94,     0,     0,    90,    51,     0,    87,    91,     0,
    48,     0,     0,    87,     0,     0,     0,     0,    48,     0,
    89,    58,     0,     0,   792,    93,    94,     0,    89,     0,
     0,     0,     0,    90,    51,     0,     0,    91,    88,     0,
     0,    90,    51,     0,   791,    91,     0,     0,     0,     0,
    58,     0,     0,   793,    93,    94,     0,     0,   836,    87,
     0,    92,    93,    94,    48,    87,     0,     0,     0,     0,
    48,    87,     0,     0,    89,     0,     0,     0,     0,     0,
    89,     0,     0,     0,     0,     0,     0,    90,    51,     0,
    88,    91,     0,    90,    51,     0,   887,    91,     0,     0,
     0,     0,    88,     0,   837,     0,     0,    92,    93,    94,
   836,     0,     0,   792,    93,    94,    48,    87,     0,     0,
     0,     0,    48,    87,     0,     0,    89,     0,    48,     0,
     0,     0,    89,     0,     0,     0,     0,     0,    89,    90,
    51,     0,     0,    91,     0,    90,    51,     0,    88,    91,
     0,    90,    51,     0,   887,    91,   837,     0,     0,   793,
    93,    94,    58,     0,    87,   888,    93,    94,   909,     0,
     0,    92,    93,    94,    48,    87,     0,     0,     0,     0,
    48,     0,     0,     0,    89,     0,     0,     0,     0,     0,
    89,     0,     0,     0,     0,    88,     0,    90,    51,     0,
     0,    91,     0,    90,    51,     0,    88,    91,     0,     0,
     0,     0,    87,     0,   910,     0,     0,    92,    93,    94,
   910,    48,     0,   888,    93,    94,     0,    87,     0,     0,
     0,    89,    48,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    89,    88,    90,    51,     0,     0,    91,     0,
     0,     0,     0,     0,     0,    90,    51,     0,    88,    91,
     0,    58,     0,     0,  1039,    93,    94,     0,    87,    48,
     0,     0,   836,     0,    87,  1040,    93,    94,     0,    89,
     0,     0,     0,     0,    48,     0,     0,     0,     0,     0,
     0,     0,    90,    51,    89,     0,    91,     0,     0,    88,
     0,     0,     0,     0,     0,    88,    87,    90,    51,    58,
     0,    91,  1043,    93,    94,    87,     0,     0,     0,     0,
     0,     0,     0,     0,   836,    48,     0,  1044,    93,    94,
     0,    48,     0,     0,     0,    89,     0,    88,     0,     0,
     0,    89,     0,     0,     0,     0,    88,    87,    90,    51,
     0,     0,    91,     0,    90,    51,     0,     0,    91,     0,
     0,     0,     0,    48,     0,   910,     0,     0,  1076,    93,
    94,   910,    48,    89,  1079,    93,    94,     0,    88,     0,
     0,     0,    89,     0,     0,     0,    90,    51,     0,     0,
    91,     0,     0,     0,     0,    90,    51,     0,     0,    91,
     0,     0,     0,    58,    48,     0,  1080,    93,    94,     0,
     0,     0,   836,     0,    89,  1081,    93,    94,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    90,    51,     0,
     0,    91,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   910,     0,     0,  1106,    93,    94
};

static const short yycheck[] = {    13,
    90,    91,   143,   202,   147,   340,   361,     8,   302,   303,
   304,   149,   551,   172,     1,   196,    23,    46,    45,    33,
     2,    49,    50,     1,    46,    15,    45,   186,    45,    12,
    14,    46,   122,     1,    36,   111,    46,    46,    14,    36,
    15,     1,    45,   202,     9,    10,    11,    12,    45,    14,
    15,    16,    17,    18,    19,   111,    45,    36,    45,    36,
    50,    36,   200,    45,    46,     1,    95,    45,    45,    51,
    52,    50,    36,    95,    88,   172,    17,    45,    80,    86,
    95,    45,    71,    45,    45,    95,    95,   114,    48,   186,
    52,    45,    93,    94,   151,   114,   153,   114,    95,   479,
   480,   481,   482,   483,     2,   202,    88,    89,    95,    45,
    45,    45,   126,    45,   111,   143,    85,    86,    95,    46,
   127,   280,   111,   282,   111,   406,   133,   408,   112,   143,
   411,    59,   116,   111,   111,   149,   112,   151,    66,   146,
   116,    82,   341,   150,   126,    81,    81,   111,    46,    17,
   111,   116,   117,   118,   119,   120,   695,   696,   172,    95,
    95,   143,    46,   253,   302,   100,   148,   181,    95,   151,
   152,    13,   186,   187,    17,   111,   111,   111,   472,   111,
    46,   340,   341,   477,    47,   282,   200,    45,   202,   151,
   172,    75,    45,    77,   488,   177,   178,   151,    45,   153,
   182,   183,   184,   185,   218,    45,   134,   135,   136,   137,
   192,   193,   194,   195,    82,   177,   178,    46,    71,   201,
    36,   203,   204,   205,   206,   207,    46,     2,   111,    95,
    93,    94,    74,    75,    36,    77,   218,    48,   376,    82,
   254,    83,    84,    45,   341,   210,   228,   261,   262,   263,
   148,    46,    45,   547,   208,   269,    17,    99,   111,   273,
   274,   318,    78,    36,   271,   272,    95,   111,   325,    45,
    45,    46,    45,    45,    36,    95,   290,   334,   335,   177,
    17,   263,   821,    45,    45,   183,   184,   185,   302,   303,
   304,   319,   320,    95,   192,   193,   194,   195,    45,    45,
    95,    48,    95,    50,   318,    81,    46,    36,   290,   111,
   591,   325,   593,    45,   595,   596,    45,   299,   111,    95,
   302,    82,    95,   305,   467,   484,  1034,   341,   290,   664,
    36,   686,   687,    95,   472,   111,   318,    36,   111,    45,
   322,    45,    46,   325,   638,    82,   640,   485,    36,   111,
     4,    46,     6,    93,    94,   337,   318,   651,    17,  1067,
   374,    45,   376,   291,   318,   112,    95,    45,   350,    36,
   513,   325,   553,   148,    45,   357,   151,   359,    48,    78,
   334,   335,   111,    50,   366,   149,    45,   484,   350,    95,
   404,    95,    80,    46,    46,   357,   350,   777,   778,   779,
    95,   299,   177,   385,   542,   111,    46,   111,   183,   184,
   185,    45,   951,   952,   342,   343,     9,   192,   193,   194,
   195,    17,   186,    82,    95,    46,    45,    20,    21,    22,
    23,   206,   207,    17,    45,    46,   200,    37,   202,   337,
   111,    34,    95,    95,    45,    46,    15,   375,   505,   463,
    46,    99,    45,    93,    94,    48,    45,   600,   472,   466,
    45,    95,    46,   477,   799,    50,   100,    36,   496,    36,
   484,   485,     1,    45,    95,   489,    95,   111,     7,    46,
    45,   463,    45,    46,    95,    14,    82,    45,    36,   503,
   472,   505,   111,   507,    95,   477,    46,    46,    82,   527,
   111,   463,   484,   267,   268,   664,    95,   100,   101,   102,
   111,   104,   105,   106,   107,   108,    45,   110,   111,    48,
    46,    50,   111,   505,   299,    45,   508,    46,   542,   672,
    95,   545,    95,    45,   462,   100,    51,    95,   302,   303,
   304,    45,    71,   318,    95,    95,   111,   529,   111,    46,
   532,   505,    81,   111,    45,    38,    46,    46,    41,    45,
    15,    45,   337,    15,    17,    94,    95,   529,    46,    98,
    50,    17,    17,   555,   556,   350,    95,   341,    93,    94,
   915,    36,   111,   112,    36,   114,   115,   116,   923,    72,
    46,    95,    16,    46,    18,    19,    46,   113,    95,    45,
    46,    46,    80,    36,    95,    95,    95,   111,   902,    95,
    36,    95,   376,     1,    38,    39,   775,    41,    42,    43,
   111,    45,     1,    17,   638,   111,   640,   111,     7,    82,
    17,    19,   773,   647,   969,    14,    82,    82,   620,    95,
   799,    46,    36,    36,    95,    95,   736,    46,   983,    36,
    38,    39,    46,    41,    42,    43,   638,    45,    51,    46,
    93,    94,   676,   677,    49,   647,    45,    93,    94,    48,
   387,    50,   389,   390,   391,   392,   393,   394,    46,   396,
   397,    46,   399,   400,    72,    17,    35,   669,    82,   113,
    95,    46,    71,   707,    46,    82,    95,    15,    78,    79,
    93,    94,    81,    15,     1,    46,    46,    46,   472,    38,
     7,    46,    41,    45,    46,    94,    95,    14,    36,    98,
    46,   485,   620,   111,    36,   113,    75,    95,    77,    95,
    95,    38,   111,   112,    41,   114,   115,   116,    46,    19,
    95,   706,    46,    95,    46,    46,    78,    79,    45,    15,
    82,    48,   766,    51,    95,    95,   915,    46,    38,    39,
    95,    41,    42,    43,   923,    45,   111,   774,   113,    95,
    36,   669,   786,    17,    71,   789,    99,   791,   542,    17,
   555,   556,    46,   547,    81,    46,   929,    95,    46,    46,
  1084,   773,    72,    95,    95,    93,    94,    94,    95,    36,
    46,    98,    46,    46,   786,    46,    95,   789,    46,   791,
   969,    46,    46,    46,   111,     7,    37,   114,   115,   116,
    36,     2,    14,    46,   983,   807,    46,    28,    46,    93,
    94,   111,    46,   113,    78,    79,    49,    95,    82,    46,
    78,    79,    50,    46,    82,   620,   860,    46,    46,    95,
    31,    46,    95,    45,    95,   869,    48,   111,    50,   113,
    95,    95,    95,    80,    45,    46,    46,   881,    46,   883,
    51,    52,    95,   887,    35,    95,   640,    95,    59,    71,
   862,    95,    46,    46,    46,    66,    46,    46,    95,    81,
    38,   873,    95,    41,   669,    51,    95,    95,    50,   881,
    95,   883,    94,    95,    35,   887,    98,    88,    89,   807,
    46,    82,   926,    15,    75,    95,    77,    95,    11,   111,
   112,   935,   114,   115,   116,   939,   940,   941,    75,    76,
    77,    95,   914,    95,    36,    95,    95,    93,    94,   953,
   954,   955,    78,    79,    75,   126,    77,    46,    50,    38,
   667,   668,    41,   134,   135,   136,   137,    82,   139,   941,
    45,   142,   143,    48,   862,    50,    38,   148,   982,    41,
   151,   152,    93,    94,    38,   873,   958,    41,    49,    78,
    79,    95,   996,   997,   701,   702,    46,   704,   705,    38,
    38,   172,    41,    41,    56,    38,   177,   178,    41,    77,
    72,   182,   183,   184,   185,    83,    84,   188,    72,    46,
    36,   192,   193,   194,   195,    75,   914,    77,    80,    81,
   201,    99,   203,   204,   205,   206,   207,    85,    86,    91,
    92,    36,   807,    95,    96,    97,    46,   218,    75,    16,
    77,    18,    19,     7,    49,    36,     2,   228,    74,    75,
    14,    77,    46,    36,    46,    19,  1038,    83,    84,    78,
   958,    38,    39,    77,    41,    42,    43,    49,    45,    74,
    75,    76,    77,    99,    38,    39,    77,    41,    42,    43,
    46,    45,   263,    75,    48,    77,    50,   862,  1070,    45,
    46,    74,    75,    76,    77,    51,    52,    11,   873,  1113,
  1114,    46,  1116,  1117,    75,    95,    77,    71,    72,   290,
   291,  1125,    83,    84,  1128,  1129,  1130,    81,   299,    46,
    48,   302,    45,    46,   305,     8,  1140,    50,    99,    46,
    94,    95,    88,    89,    98,    77,   113,   318,   902,   914,
    95,   322,    38,    46,   325,    41,    46,   111,   112,   113,
   114,   115,   116,    46,    45,    46,   337,    74,    75,    50,
    77,   342,   343,   344,    83,    84,    83,    84,    46,   350,
   126,    74,    75,    76,    77,    75,   357,    77,   359,   111,
    99,   113,    99,   958,    95,   366,    16,   143,    18,    19,
    48,   111,   148,   113,   375,   151,   152,    75,    46,    77,
    45,    46,   267,   268,   385,    50,    49,    46,    38,    39,
    46,    41,    42,    43,    32,    45,   172,   111,    46,   113,
    46,   177,   178,   111,    46,   113,   182,   183,   184,   185,
    46,    74,    75,    75,    77,    77,   192,   193,   194,   195,
    83,    84,    72,    73,    36,     1,    74,    75,    76,    77,
    46,     7,    74,    75,    76,    77,    99,    46,    14,    75,
    46,    77,   218,  1038,    46,    74,    75,    76,    77,   450,
   451,   452,   228,    56,    45,   456,   457,   458,    50,   460,
    77,   462,   463,   113,   465,    74,    75,    76,    77,    45,
    11,   472,    74,    75,    76,    77,   477,    80,    81,    46,
    46,   548,    46,   484,     4,     5,     6,   263,    91,    92,
    93,    94,    95,    96,    97,    71,    50,    45,    46,    46,
    95,     2,    50,    46,   505,    81,    95,   508,    74,    75,
    76,    77,    95,    46,   290,    51,   517,    36,    94,    95,
    46,    48,    98,   299,    46,    46,   302,    78,   529,   305,
    46,   532,    46,    77,    46,   111,    36,    45,   114,   115,
   116,    45,   318,    49,    45,    46,   322,    46,    51,   325,
    36,    52,    49,    49,   555,   556,    49,     7,    46,    51,
    51,   337,    46,    46,    14,    45,   238,    48,    74,    75,
    76,    77,    22,    23,   350,    74,    75,    76,    77,    46,
    46,   357,    41,   359,    95,    36,    51,    88,    89,    46,
   366,    74,    75,    76,    77,    45,   663,    46,    46,   666,
    37,   602,   603,    49,    46,   606,    46,    16,   609,    18,
    19,    45,   613,    48,   615,     7,   617,    46,    46,   620,
    46,    71,    14,   624,    51,   126,   693,    46,   629,    38,
    39,    81,    41,    42,    43,    51,    45,   638,   114,    46,
    37,    46,   143,    45,    94,    95,   647,   148,    98,    45,
   151,   101,    38,    45,    45,    41,    46,    43,    46,    45,
    45,   111,   112,    50,   114,   115,   116,    50,   669,    74,
    75,    76,    77,    46,    51,    50,   177,   178,    46,    71,
    46,   182,   183,   184,   185,    49,    72,   463,    51,    81,
    45,   192,   193,   194,   195,    81,   472,    74,    75,    76,
    77,   477,    94,    95,   113,    49,    98,    50,   484,    95,
    74,    75,    76,    77,   100,    45,    50,   218,    50,   111,
   721,    49,   114,   115,   116,   111,    45,   228,    49,   505,
    74,    75,    76,    77,   406,    45,   408,    50,    45,   411,
   741,   808,    45,    95,     7,   746,    74,    75,    76,    77,
   751,    14,    50,   529,    50,    46,    19,    46,    88,    89,
    95,    41,   263,    41,    95,    46,    95,    51,    51,    51,
   771,    46,   773,    46,    46,    38,    39,    95,    41,    42,
    43,    46,    45,    95,    46,   786,    95,    95,   789,   290,
   791,    41,    19,   794,    51,    51,   126,    51,   299,    46,
    16,   302,    18,    19,    46,    46,   807,    46,    71,    72,
    78,    38,    39,   143,    41,    42,    43,   318,    81,    51,
   114,   151,    38,    39,   325,    41,    42,    43,   114,    45,
    51,    94,    95,    46,    46,    98,   337,    85,    86,    87,
    88,    89,    90,   114,   620,    93,    94,   177,   111,   350,
   114,   114,   115,   116,    46,    46,   357,    95,   359,    45,
    50,   862,   638,    51,    46,   366,    46,    46,    46,    46,
    46,   647,   873,    46,    46,    46,    50,   114,   114,   114,
   881,   114,   883,    46,    50,    50,   887,    46,   218,    46,
    46,    46,   114,   669,    46,     0,    50,   113,   228,    50,
    50,    50,    50,     0,   576,    51,   973,   579,    51,   581,
   977,   978,   584,   914,    51,     7,    51,    51,    51,   591,
    51,   593,    14,   595,   596,   597,   993,   994,   995,    51,
    51,   402,   553,   263,   484,   575,   100,   450,   451,   452,
   941,   691,   622,   512,   649,   458,    -1,    -1,    -1,    -1,
    -1,  1018,    -1,    45,    -1,    -1,    -1,   958,    -1,    -1,
   290,    -1,   463,    -1,    -1,  1032,  1033,    -1,    -1,    -1,
    -1,   472,   302,    -1,    -1,    -1,   477,    -1,    -1,    71,
    -1,   653,   654,   655,    -1,    -1,    -1,    -1,   318,    81,
    -1,    -1,    -1,    -1,    -1,   325,    -1,   773,    -1,    -1,
    -1,    -1,    94,    95,   505,  1006,    98,    -1,    -1,  1010,
   786,    -1,    -1,   789,    -1,   791,    -1,    -1,    -1,   111,
   350,    -1,   114,   115,   116,    -1,    -1,   357,   529,   359,
    -1,   807,    -1,    -1,    -1,    -1,   366,   709,    -1,   711,
    -1,    -1,   714,    -1,   716,    -1,   718,  1048,   720,   721,
   722,   723,    -1,    -1,    -1,   727,  1123,  1124,   730,  1126,
  1127,    -1,    16,   735,    18,    19,    -1,  1134,    -1,    -1,
  1137,  1138,  1139,    46,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1149,    -1,    38,    39,   862,    41,    42,    43,
   603,    45,   605,   606,    -1,   608,   609,   873,   611,    -1,
    -1,   614,    -1,   616,   617,   881,   619,   883,    -1,    -1,
    -1,   887,    85,    86,    87,    88,    89,    90,    -1,   620,
    93,    94,   794,   795,   796,    -1,   798,    -1,    -1,    -1,
    -1,    -1,    -1,   463,    -1,    -1,    -1,   638,   914,    -1,
    -1,    -1,   472,   579,    -1,   581,   647,   477,   584,    -1,
    -1,     7,    -1,    -1,    -1,    -1,    -1,   829,    14,   113,
    -1,   597,    -1,    -1,    -1,   941,   838,   839,   669,   841,
    -1,   843,    -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,
    -1,    -1,   958,    -1,    -1,    -1,    -1,    -1,    -1,    45,
    -1,    -1,    48,    -1,    50,    -1,    -1,    -1,    -1,   529,
    -1,    -1,    -1,    -1,    -1,     7,    -1,    -1,    -1,    -1,
    -1,    -1,    14,    -1,   886,    71,    -1,    -1,   654,   655,
    22,    23,    -1,    -1,    -1,    81,    -1,    -1,   741,    -1,
   743,   744,    -1,   746,    -1,   748,   749,    -1,    94,    95,
   753,   754,    98,    45,    -1,   758,    -1,   760,   761,    -1,
    -1,   764,   765,    -1,    -1,   111,   112,    -1,   114,   115,
   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    -1,    -1,   773,   709,    -1,    -1,    -1,    -1,   714,    81,
   716,    -1,   718,    -1,   720,   786,   722,   723,   789,    -1,
   791,   727,    94,    95,   730,    -1,    98,    -1,    -1,   735,
    -1,    -1,    -1,    -1,    -1,    -1,   807,    -1,   638,   111,
   112,    -1,   114,   115,   116,    -1,    -1,   647,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1006,  1007,    -1,   850,  1010,  1011,
    -1,   854,    -1,    -1,   857,   858,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   867,    -1,     7,    -1,    -1,   795,
   796,   862,   798,    14,    -1,    16,    -1,    18,    19,  1041,
    -1,    -1,   873,  1045,    -1,    -1,  1048,  1049,    -1,    -1,
   881,    -1,   883,    -1,    -1,    -1,   887,    38,    39,    -1,
    41,    42,    43,   829,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   838,   839,    -1,   841,    -1,   843,    -1,    -1,
  1082,    -1,    -1,   914,   927,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   941,    -1,    56,    94,    95,    -1,    -1,    98,   961,   100,
   886,   964,    -1,    -1,    -1,    -1,   786,   958,    -1,   789,
   111,   791,   113,   114,   115,   116,    80,    81,    -1,    -1,
    -1,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
    -1,    95,    96,    97,    -1,    -1,     3,  1000,    -1,  1002,
     7,  1004,     9,    10,    -1,    -1,    -1,    14,    -1,    16,
    -1,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    -1,    29,    30,    31,    -1,    33,    34,    -1,    -1,
    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
    -1,    48,    -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   881,    -1,   883,    71,    72,    73,   887,    -1,    -1,
    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
    -1,  1007,    -1,    -1,    -1,  1011,    -1,    94,    95,    -1,
    -1,    98,    -1,   100,   101,   102,   103,   104,   105,   106,
    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
    -1,    -1,    -1,    -1,    -1,  1041,    -1,    -1,    -1,  1045,
    -1,   941,     3,  1049,    -1,    -1,     7,    -1,     9,    10,
    -1,    -1,    -1,    14,    -1,    16,    -1,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
    31,    -1,    33,    34,    -1,    -1,  1082,    38,    39,    -1,
    41,    42,    43,    -1,    45,    -1,    -1,    48,    -1,    -1,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,   100,
   101,   102,   103,   104,   105,   106,    -1,    -1,    -1,    -1,
   111,   112,   113,   114,   115,   116,     3,    -1,    -1,    -1,
     7,    -1,     9,    10,    -1,    -1,    -1,    14,    -1,    16,
    -1,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    -1,    29,    30,    31,    -1,    33,    34,    -1,    -1,
    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
    -1,    48,    -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,
    -1,    98,    -1,   100,   101,   102,   103,   104,   105,   106,
    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
     3,    -1,    -1,    -1,     7,    -1,     9,    10,    -1,    -1,
    -1,    14,    -1,    16,    -1,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
    33,    34,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
    43,    -1,    45,    -1,    -1,    48,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    94,    95,    -1,    14,    98,    -1,   100,   101,   102,
   103,   104,   105,   106,    -1,    -1,    -1,    -1,   111,   112,
   113,   114,   115,   116,     3,    -1,    -1,    -1,     7,    -1,
     9,    10,    -1,    -1,    -1,    45,    -1,    16,    -1,    18,
    19,    20,    21,    -1,    -1,    24,    25,    26,    27,    -1,
    29,    30,    31,    -1,    33,    34,    -1,    -1,    -1,    38,
    39,    71,    41,    42,    43,    -1,    45,    -1,    -1,    48,
    -1,    81,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
    -1,   111,    81,    -1,   114,   115,   116,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,    -1,
    -1,   100,    -1,   102,   103,   104,   105,   106,    -1,     3,
    -1,    -1,   111,     7,   113,     9,    10,    -1,    -1,    -1,
    -1,    -1,    16,    -1,    18,    19,    20,    21,    -1,    -1,
    24,    25,    26,    27,    -1,    29,    30,    31,    -1,    33,
    34,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
     7,    45,    -1,    -1,    48,    -1,    -1,    14,    52,    16,
    -1,    -1,    -1,    -1,    -1,    22,    23,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
    -1,    38,    -1,    -1,    41,    42,    43,     7,    45,    -1,
    -1,    -1,    -1,    -1,    14,    -1,    16,    -1,    -1,    -1,
    -1,    95,    22,    23,    -1,    -1,   100,    -1,   102,   103,
   104,   105,   106,    -1,    71,    72,    73,   111,    38,   113,
    -1,    41,    42,    43,    81,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     7,    -1,    -1,    -1,    94,    95,    -1,
    14,    98,    16,    -1,   101,    -1,    -1,    -1,    22,    23,
    -1,    71,    72,    73,   111,   112,   113,   114,   115,   116,
    -1,    81,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
     7,    45,    -1,    -1,    94,    95,    -1,    14,    98,    16,
    -1,   101,    -1,    -1,    -1,    22,    23,    -1,    -1,    -1,
    -1,   111,   112,   113,   114,   115,   116,    71,    72,    73,
    -1,    38,    -1,    -1,    41,    42,    43,    81,    45,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    -1,    -1,    98,    -1,    -1,   101,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,   111,   112,   113,
   114,   115,   116,    -1,    81,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     7,    -1,    -1,    -1,    94,    95,    -1,
    14,    98,    16,    -1,   101,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   111,   112,   113,   114,   115,   116,
    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
     7,    45,    -1,    -1,    48,    -1,    50,    14,    -1,    16,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
    -1,    38,    -1,    -1,    41,    42,    43,    81,    45,    -1,
    -1,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    72,    73,   111,   112,   113,
   114,   115,   116,    -1,    81,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     7,    -1,    -1,    -1,    94,    95,    -1,
    14,    98,    16,    -1,     7,    -1,    -1,    -1,    -1,    -1,
    -1,    14,    -1,    16,   111,   112,   113,   114,   115,   116,
    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
    -1,    45,    -1,    -1,    48,    38,    50,    -1,    41,    42,
    43,     7,    45,    -1,    -1,    48,    -1,    50,    14,    -1,
    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    71,    72,
    73,    -1,    38,    -1,    -1,    41,    42,    43,    81,    45,
    94,    95,    -1,    -1,    98,    -1,    -1,     7,    -1,    -1,
    -1,    94,    95,    -1,    14,    98,    16,   111,    -1,   113,
   114,   115,   116,    -1,    -1,    71,    72,    73,   111,    -1,
   113,   114,   115,   116,    -1,    81,    -1,    -1,    38,    -1,
    -1,    41,    42,    43,     7,    45,    -1,    -1,    94,    95,
    -1,    14,    98,    16,   100,     7,    -1,    -1,    -1,    -1,
    -1,    -1,    14,    -1,    16,   111,    -1,   113,   114,   115,
   116,    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,
    43,    81,    45,    -1,    -1,    -1,    38,    -1,    -1,    41,
    42,    43,     7,    45,    94,    95,    -1,    -1,    98,    14,
   100,    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
    73,   111,    -1,   113,   114,   115,   116,    -1,    81,    71,
    72,    73,    -1,    38,    -1,    -1,    41,    42,    43,    81,
    45,    94,    95,    -1,    -1,    98,    -1,    -1,     7,    -1,
    -1,    -1,    94,    95,    -1,    14,    98,    16,   111,    -1,
   113,   114,   115,   116,    -1,    -1,    71,    72,    73,   111,
    -1,   113,   114,   115,   116,    -1,    81,    -1,    -1,    38,
    -1,    -1,    41,    42,    43,     7,    45,    -1,    -1,    94,
    95,    -1,    14,    98,    16,    -1,     7,    -1,    -1,    -1,
    -1,    -1,    -1,    14,    -1,    16,   111,    -1,   113,   114,
   115,   116,    71,    72,    73,    -1,    38,    -1,    -1,    41,
    42,    43,    81,    45,    -1,    -1,    -1,    38,    -1,    -1,
    41,    42,    43,     7,    45,    94,    95,    -1,    -1,    98,
    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    71,
    72,    73,   111,    -1,   113,   114,   115,   116,    -1,    81,
    71,    72,    73,    -1,    38,    -1,    -1,    41,    42,    43,
    81,    45,    94,    95,    -1,    -1,    98,    -1,    -1,     7,
    -1,    -1,    -1,    94,    95,    -1,    14,    98,    16,   111,
    -1,   113,   114,   115,   116,    -1,    -1,    71,    72,    73,
   111,    -1,   113,   114,   115,   116,    -1,    81,    -1,    -1,
    38,    -1,    -1,    41,    42,    43,     7,    45,    -1,    -1,
    94,    95,    -1,    14,    98,    16,    -1,     7,    -1,    -1,
    -1,    -1,    -1,    -1,    14,    -1,    16,   111,    -1,   113,
   114,   115,   116,    71,    72,    73,    -1,    38,    -1,    -1,
    41,    42,    43,    81,    45,    -1,    -1,    -1,    38,    -1,
    -1,    41,    42,    43,     7,    45,    94,    95,    -1,    -1,
    98,    14,    -1,    -1,    -1,    -1,    19,    -1,    -1,    -1,
    71,    72,    73,   111,    -1,   113,   114,   115,   116,    -1,
    81,    71,    72,    73,    -1,    38,    39,    -1,    41,    42,
    43,    81,    45,    94,    95,    -1,    -1,    98,    -1,    -1,
    14,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    -1,
   111,    -1,   113,   114,   115,   116,    -1,    -1,    71,    72,
    -1,   111,     7,   113,   114,   115,   116,    -1,    81,    14,
    -1,    45,    -1,    -1,    -1,    -1,    -1,    22,    23,    -1,
    -1,    94,    95,    -1,    -1,    98,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    14,    -1,    -1,    71,   111,    -1,
    45,   114,   115,   116,    -1,    -1,    -1,    81,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    -1,    14,    98,    45,    71,    -1,    -1,    -1,
    -1,    14,    -1,    -1,    -1,    -1,    81,   111,    -1,    -1,
   114,   115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    94,
    95,    71,    -1,    98,    45,    -1,   101,    -1,    -1,    -1,
    -1,    81,    45,    -1,    -1,    -1,   111,   112,    -1,   114,
   115,   116,    -1,    -1,    94,    95,    -1,    14,    98,    -1,
    71,    -1,    -1,    14,    -1,    -1,    -1,    -1,    71,    -1,
    81,   111,    -1,    -1,   114,   115,   116,    -1,    81,    -1,
    -1,    -1,    -1,    94,    95,    -1,    -1,    98,    45,    -1,
    -1,    94,    95,    -1,    45,    98,    -1,    -1,    -1,    -1,
   111,    -1,    -1,   114,   115,   116,    -1,    -1,   111,    14,
    -1,   114,   115,   116,    71,    14,    -1,    -1,    -1,    -1,
    71,    14,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
    81,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,
    45,    98,    -1,    94,    95,    -1,    45,    98,    -1,    -1,
    -1,    -1,    45,    -1,   111,    -1,    -1,   114,   115,   116,
   111,    -1,    -1,   114,   115,   116,    71,    14,    -1,    -1,
    -1,    -1,    71,    14,    -1,    -1,    81,    -1,    71,    -1,
    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    81,    94,
    95,    -1,    -1,    98,    -1,    94,    95,    -1,    45,    98,
    -1,    94,    95,    -1,    45,    98,   111,    -1,    -1,   114,
   115,   116,   111,    -1,    14,   114,   115,   116,   111,    -1,
    -1,   114,   115,   116,    71,    14,    -1,    -1,    -1,    -1,
    71,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
    81,    -1,    -1,    -1,    -1,    45,    -1,    94,    95,    -1,
    -1,    98,    -1,    94,    95,    -1,    45,    98,    -1,    -1,
    -1,    -1,    14,    -1,   111,    -1,    -1,   114,   115,   116,
   111,    71,    -1,   114,   115,   116,    -1,    14,    -1,    -1,
    -1,    81,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    81,    45,    94,    95,    -1,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,    45,    98,
    -1,   111,    -1,    -1,   114,   115,   116,    -1,    14,    71,
    -1,    -1,   111,    -1,    14,   114,   115,   116,    -1,    81,
    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    81,    -1,    98,    -1,    -1,    45,
    -1,    -1,    -1,    -1,    -1,    45,    14,    94,    95,   111,
    -1,    98,   114,   115,   116,    14,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   111,    71,    -1,   114,   115,   116,
    -1,    71,    -1,    -1,    -1,    81,    -1,    45,    -1,    -1,
    -1,    81,    -1,    -1,    -1,    -1,    45,    14,    94,    95,
    -1,    -1,    98,    -1,    94,    95,    -1,    -1,    98,    -1,
    -1,    -1,    -1,    71,    -1,   111,    -1,    -1,   114,   115,
   116,   111,    71,    81,   114,   115,   116,    -1,    45,    -1,
    -1,    -1,    81,    -1,    -1,    -1,    94,    95,    -1,    -1,
    98,    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    98,
    -1,    -1,    -1,   111,    71,    -1,   114,   115,   116,    -1,
    -1,    -1,   111,    -1,    81,   114,   115,   116,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,
    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   111,    -1,    -1,   114,   115,   116
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 149 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 179 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 180 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 186 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 187 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 189 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 200 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 201 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 209 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 210 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 212 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 215 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 217 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 221 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 222 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 227 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 230 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 237 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 245 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 350 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 351 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 357 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 358 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 360 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 361 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 368 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 374 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 375 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 379 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 382 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 385 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 391 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 395 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 401 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 409 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 420 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 63:
#line 423 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 64:
#line 436 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 65:
#line 441 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 66:
#line 445 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 67:
#line 451 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 68:
#line 452 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 69:
#line 458 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 70:
#line 463 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 71:
#line 468 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 72:
#line 477 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 73:
#line 485 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 74:
#line 496 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 75:
#line 509 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 76:
#line 510 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 77:
#line 511 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 516 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 79:
#line 520 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 80:
#line 524 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 81:
#line 528 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 82:
#line 532 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 83:
#line 536 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 84:
#line 542 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 85:
#line 544 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 86:
#line 547 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 87:
#line 552 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 88:
#line 563 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 89:
#line 564 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 90:
#line 565 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 91:
#line 568 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 92:
#line 569 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 93:
#line 570 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 94:
#line 578 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 95:
#line 582 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 96:
#line 586 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 97:
#line 591 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 98:
#line 597 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 99:
#line 602 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 100:
#line 609 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 101:
#line 615 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 102:
#line 626 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 103:
#line 627 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 104:
#line 628 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 105:
#line 633 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 106:
#line 640 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 107:
#line 643 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 108:
#line 644 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 653 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
										CSyntaxNode* tmp=yyval.tnode;
										tmp=NULL;
										;
    break;}
case 110:
#line 659 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 111:
#line 660 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 112:
#line 661 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 662 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 663 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 115:
#line 664 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 116:
#line 665 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 117:
#line 669 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 118:
#line 671 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 119:
#line 673 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 120:
#line 675 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 121:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 122:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 123:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 125:
#line 685 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 126:
#line 687 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 689 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 128:
#line 691 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 129:
#line 693 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 697 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 131:
#line 698 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 132:
#line 701 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 133:
#line 702 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 134:
#line 703 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 135:
#line 706 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 136:
#line 707 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 137:
#line 708 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 138:
#line 711 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 139:
#line 715 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 140:
#line 716 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 141:
#line 721 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, new CSyntaxNode(IDENT_EXP,yyvsp[-5].tnode,NULL,VOIDTYPE), INTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 142:
#line 726 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, new CSyntaxNode(IDENT_EXP,yyvsp[-5].cString,NULL,VOIDTYPE), UINTPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 143:
#line 731 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, new CSyntaxNode(IDENT_EXP,yyvsp[-5].cString,NULL,VOIDTYPE), FLOATPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 144:
#line 736 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, new CSyntaxNode(IDENT_EXP,yyvsp[-5].cString,NULL,VOIDTYPE),CHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 145:
#line 741 "msv.y"
{
		   CSyntaxNode* child0=new CSyntaxNode(TYPE_CAST_STA, new CSyntaxNode(IDENT_EXP,yyvsp[-5].cString,NULL,VOIDTYPE), UCHARPTYPE);
		   yyval.tnode=new CSyntaxNode(ARRAY_CAST_EXP, child0, yyvsp[-2].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 146:
#line 748 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 147:
#line 749 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 148:
#line 750 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 149:
#line 756 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 150:
#line 757 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 151:
#line 759 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 152:
#line 761 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 153:
#line 763 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 154:
#line 765 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 155:
#line 766 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 156:
#line 772 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 157:
#line 773 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 158:
#line 775 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 159:
#line 777 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 160:
#line 782 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 161:
#line 783 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 162:
#line 787 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 163:
#line 788 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 164:
#line 792 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 165:
#line 793 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 166:
#line 797 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 167:
#line 798 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 168:
#line 799 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 169:
#line 800 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 170:
#line 801 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 171:
#line 803 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 172:
#line 804 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 805 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 806 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 807 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 176:
#line 808 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 809 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 810 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 811 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 812 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 181:
#line 815 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 182:
#line 816 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 183:
#line 817 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 184:
#line 818 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 185:
#line 819 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 186:
#line 820 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 187:
#line 821 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 188:
#line 822 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 189:
#line 825 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 190:
#line 826 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 191:
#line 830 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 192:
#line 831 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 193:
#line 832 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 194:
#line 833 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 195:
#line 840 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 196:
#line 844 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 197:
#line 852 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 198:
#line 864 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 199:
#line 868 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 200:
#line 877 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 201:
#line 889 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 202:
#line 893 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 203:
#line 901 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 204:
#line 904 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 205:
#line 905 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 206:
#line 910 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			   CSyntaxNode*tmp=yyval.tnode;
			   tmp=NULL;
			;
    break;}
case 207:
#line 916 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 208:
#line 920 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 209:
#line 925 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 210:
#line 928 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 211:
#line 937 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 212:
#line 938 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 213:
#line 939 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 214:
#line 942 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 215:
#line 943 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 216:
#line 946 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 217:
#line 947 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 218:
#line 950 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 219:
#line 951 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 220:
#line 952 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 221:
#line 953 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 222:
#line 954 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 223:
#line 955 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 224:
#line 958 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 225:
#line 959 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 226:
#line 960 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 227:
#line 961 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 228:
#line 962 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 229:
#line 963 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 230:
#line 965 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 231:
#line 966 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 232:
#line 968 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 233:
#line 969 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 234:
#line 971 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 235:
#line 979 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 236:
#line 980 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 237:
#line 981 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 238:
#line 982 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 239:
#line 983 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 240:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 241:
#line 991 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 242:
#line 992 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 243:
#line 995 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 244:
#line 996 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 245:
#line 997 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 246:
#line 1000 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 1001 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 248:
#line 1004 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 249:
#line 1005 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 250:
#line 1008 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 251:
#line 1009 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 1012 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 1013 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 254:
#line 1018 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 255:
#line 1019 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 256:
#line 1020 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 257:
#line 1021 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 258:
#line 1022 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 259:
#line 1023 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 260:
#line 1031 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 261:
#line 1032 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 262:
#line 1036 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 263:
#line 1037 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 264:
#line 1044 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 265:
#line 1048 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 266:
#line 1053 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 267:
#line 1059 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 268:
#line 1065 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 269:
#line 1071 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 270:
#line 1081 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 271:
#line 1087 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 272:
#line 1093 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 273:
#line 1099 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_ARRAY_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 274:
#line 1107 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 275:
#line 1111 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 276:
#line 1115 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 277:
#line 1121 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 278:
#line 1125 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 279:
#line 1129 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 280:
#line 1135 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 281:
#line 1141 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(POINTER_ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 282:
#line 1148 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 283:
#line 1154 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 284:
#line 1160 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 285:
#line 1164 "msv.y"
{
		  CSyntaxNode* pChild00=new CSyntaxNode(ADDRESS_DECLARE_STA, yyvsp[-1].tnode, VOIDTYPE);
		  CSyntaxNode* pChild0= new CSyntaxNode(ADDRESS_DECLARE_STA, pChild00, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 286:
#line 1172 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 287:
#line 1177 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 288:
#line 1181 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 289:
#line 1185 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 290:
#line 1189 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 291:
#line 1195 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 292:
#line 1201 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 293:
#line 1207 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 294:
#line 1214 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 295:
#line 1222 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 296:
#line 1228 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 297:
#line 1243 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 298:
#line 1248 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 299:
#line 1253 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 300:
#line 1261 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 301:
#line 1268 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 302:
#line 1274 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 303:
#line 1280 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 304:
#line 1283 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 305:
#line 1293 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 306:
#line 1304 "msv.y"
{
	       yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].returntype);
	   ;
    break;}
case 307:
#line 1308 "msv.y"
{
	      yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[0].cString, NULL, STRUCTTYPE);
	   ;
    break;}
case 308:
#line 1311 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 309:
#line 1312 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 310:
#line 1317 "msv.y"
{
			yyval.tnode = new CSyntaxNode(ACTUAL_PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 311:
#line 1330 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 312:
#line 1331 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 313:
#line 1339 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 314:
#line 1341 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 315:
#line 1348 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 316:
#line 1350 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 317:
#line 1356 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 318:
#line 1357 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 319:
#line 1361 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 320:
#line 1366 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 321:
#line 1371 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 322:
#line 1376 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 323:
#line 1383 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 324:
#line 1386 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 325:
#line 1387 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 326:
#line 1393 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 327:
#line 1395 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 328:
#line 1415 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 329:
#line 1416 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 330:
#line 1418 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 331:
#line 1420 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 332:
#line 1421 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 333:
#line 1427 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 334:
#line 1434 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 335:
#line 1442 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 336:
#line 1450 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 337:
#line 1454 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 338:
#line 1458 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 339:
#line 1464 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 340:
#line 1468 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 341:
#line 1474 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 342:
#line 1478 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 343:
#line 1485 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 344:
#line 1489 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 345:
#line 1493 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 346:
#line 1500 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 347:
#line 1504 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 348:
#line 1507 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 349:
#line 1512 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 350:
#line 1521 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 351:
#line 1522 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 352:
#line 1528 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 353:
#line 1529 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 354:
#line 1533 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 355:
#line 1534 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 356:
#line 1539 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 357:
#line 1540 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 358:
#line 1541 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1542 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 360:
#line 1543 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 361:
#line 1546 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 362:
#line 1547 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 363:
#line 1548 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 364:
#line 1554 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 365:
#line 1555 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 366:
#line 1556 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 367:
#line 1558 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1559 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1560 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1562 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1563 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1564 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1565 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1567 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1568 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1569 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1570 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1571 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1572 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 380:
#line 1573 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 381:
#line 1577 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 382:
#line 1578 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 383:
#line 1579 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 384:
#line 1580 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 385:
#line 1581 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 386:
#line 1582 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 387:
#line 1583 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1585 "msv.y"
