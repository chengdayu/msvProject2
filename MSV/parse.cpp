
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	RETURN	262
#define	IF	263
#define	ELSE	264
#define	EMPTY	265
#define	AWAIT	266
#define	PROJECTION	267
#define	PBEGIN	268
#define	PEND	269
#define	POINTERNULL	270
#define	ARRAY	271
#define	STRUCT	272
#define	DOT	273
#define	UNION	274
#define	FOPEN	275
#define	FCLOSE	276
#define	FILEDECLARATION	277
#define	FGETS	278
#define	FPUTS	279
#define	FGETC	280
#define	FPUTC	281
#define	MORE	282
#define	DEFINE	283
#define	MY_TRUE	284
#define	MY_FALSE	285
#define	EXIST	286
#define	FRAME	287
#define	FOR	288
#define	WHILE	289
#define	DO	290
#define	TRUE	291
#define	FALSE	292
#define	REPEAT	293
#define	UNTIL	294
#define	DISPLAY	295
#define	SKIP	296
#define	THEN	297
#define	COMMA	298
#define	COLON	299
#define	INTDECLARATION	300
#define	STRDECLARATION	301
#define	POINTERDECLARATION	302
#define	CHARDECLARATION	303
#define	VOIDDECLARATION	304
#define	FLOATDECLARATION	305
#define	LISTDECLARATION	306
#define	OPEN_PAR	307
#define	CLOSE_PAR	308
#define	TIMES	309
#define	OPEN_BPAR	310
#define	CLOSE_BPAR	311
#define	OPEN_MPAR	312
#define	CLOSE_MPAR	313
#define	FUNCTION	314
#define	OVER	315
#define	CYLINDER	316
#define	OVEREP	317
#define	INTER_OR	318
#define	NON_DETERMINED	319
#define	SEND	320
#define	RECEIVE	321
#define	PROCESS	322
#define	CHANNEL	323
#define	PUT	324
#define	GET	325
#define	ERROR_TOKEN	326
#define	STRFUNCHEAD	327
#define	STRFUNCTAIL	328
#define	STRFUNCCAT	329
#define	STRFUNCCMP	330
#define	STRFUNCCPY	331
#define	STRFUNCLEN	332
#define	SIZEOF	333
#define	SYSTEM	334
#define	EXTERN	335
#define	CEIL	336
#define	FLOOR	337
#define	ROUND	338
#define	SIN	339
#define	COS	340
#define	TAN	341
#define	ASIN	342
#define	ACOS	343
#define	ATAN	344
#define	SINH	345
#define	COSH	346
#define	TANH	347
#define	EXP	348
#define	LOG	349
#define	LOG10	350
#define	SQRT	351
#define	ATAN2	352
#define	POW	353
#define	ABS	354
#define	FABS	355
#define	LABS	356
#define	FMOD	357
#define	MODF	358
#define	LDEXP	359
#define	FREXP	360
#define	UNSIGNED	361
#define	SIGNED	362
#define	MALLOC	363
#define	FREE	364
#define	CHOP	365
#define	IMPLY	366
#define	IFF	367
#define	PROPIMPLY	368
#define	OR	369
#define	PARALLEL	370
#define	AND	371
#define	ASS_P	372
#define	ASS_N	373
#define	CON	374
#define	ADDRESS	375
#define	NE	376
#define	EQ	377
#define	GE	378
#define	LE	379
#define	GT	380
#define	LT	381
#define	LST	382
#define	RST	383
#define	ADD	384
#define	SUB	385
#define	MUL	386
#define	DIV	387
#define	MOD	388
#define	BNE	389
#define	CHOPSTAR	390
#define	NEXT	391
#define	NEGATION	392
#define	LENGTH	393
#define	REQUEST	394
#define	FINAL	395
#define	KEEP	396
#define	ALWAYS	397
#define	HALT	398
#define	W_NEXT	399
#define	PREFIX	400
#define	SOMETIMES	401
#define	ID	402
#define	STRLITERAL	403
#define	STRUCT_TYPE	404
#define	INTLITERAL	405
#define	FLOATLITERAL	406
#define	CHARLITERAL	407

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1384
#define	YYFLAG		-32768
#define	YYNTBASE	153

#define YYTRANSLATE(x) ((unsigned)(x) <= 407 ? yytranslate[x] : 239)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,   152
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   114,   116,   118,   120,
   122,   127,   132,   137,   142,   151,   153,   155,   157,   162,
   164,   166,   168,   170,   175,   179,   187,   197,   204,   210,
   220,   229,   239,   241,   246,   251,   253,   261,   265,   267,
   271,   273,   274,   279,   285,   290,   292,   294,   299,   302,
   305,   308,   311,   313,   316,   319,   323,   327,   331,   335,
   343,   352,   364,   378,   380,   382,   384,   386,   388,   390,
   393,   400,   405,   411,   417,   426,   435,   438,   441,   444,
   445,   452,   460,   461,   464,   471,   480,   485,   492,   499,
   506,   511,   515,   517,   519,   521,   523,   527,   530,   532,
   544,   557,   569,   581,   599,   618,   636,   655,   675,   694,
   712,   731,   749,   751,   753,   755,   757,   759,   770,   774,
   776,   781,   787,   799,   812,   824,   836,   849,   853,   857,
   860,   861,   864,   867,   870,   878,   885,   890,   894,   896,
   900,   904,   910,   912,   916,   919,   920,   922,   926,   928,
   931,   934,   936,   938,   940,   942,   944,   946,   950,   952,
   954,   956,   958,   960,   962,   964,   966,   968,   970,   972,
   974,   976,   978,   980,   982,   986,   988,   990,   994,   999,
  1004,  1009,  1014,  1019,  1024,  1028,  1032,  1036,  1037,  1040,
  1043,  1046,  1049,  1052,  1056,  1061,  1066,  1071,  1077,  1083,
  1089,  1095,  1101,  1108,  1114,  1120,  1127,  1133,  1140,  1148,
  1155,  1162,  1170,  1177,  1184,  1190,  1198,  1205,  1207,  1212,
  1214,  1217,  1220,  1223,  1227,  1231,  1235,  1238,  1243,  1248,
  1253,  1258,  1260,  1262,  1264,  1266,  1268,  1270,  1275,  1280,
  1287,  1294,  1301,  1306,  1308,  1310,  1312,  1314,  1316,  1318,
  1321,  1324,  1327,  1330,  1333,  1336,  1339,  1342,  1345,  1348,
  1351,  1354,  1357,  1360,  1363,  1366,  1373,  1380,  1387,  1394,
  1401,  1404,  1407,  1410,  1412,  1415,  1419,  1423,  1427,  1431,
  1433,  1435,  1437,  1441,  1445,  1449,  1453,  1457,  1461,  1465,
  1469,  1473,  1477,  1479,  1481,  1483,  1485,  1487,  1489,  1492,
  1495,  1497,  1499,  1503,  1506,  1510,  1515,  1521,  1526,  1530,
  1535,  1541,  1546,  1549,  1553,  1558,  1561,  1565,  1570,  1575,
  1581,  1588,  1597,  1605,  1610,  1614,  1620,  1629,  1630,  1635,
  1639,  1644,  1649,  1655,  1661,  1667,  1673,  1680,  1690,  1691,
  1699,  1709,  1718,  1724,  1729,  1732,  1735,  1741,  1742,  1745,
  1749,  1756,  1757,  1760,  1764,  1767,  1771,  1774,  1776,  1780,
  1782,  1784,  1786,  1788,  1792,  1793,  1796,  1797,  1801,  1803,
  1806,  1810,  1814,  1818,  1822,  1828,  1838,  1840,  1842,  1843,
  1845,  1846,  1848,  1849,  1857,  1865,  1871,  1874,  1876,  1877,
  1883,  1886,  1887,  1892,  1898,  1899,  1903,  1908,  1914,  1919,
  1925,  1930,  1931,  1935,  1939,  1944,  1949,  1954,  1959,  1964,
  1969,  1974,  1979,  1986,  1991,  1996,  2001,  2008,  2012,  2016,
  2021,  2025,  2026,  2030,  2034,  2038,  2042,  2045
};

static const short yyrhs[] = {   154,
   157,     0,    13,   155,    14,     0,     0,   155,   116,   155,
     0,   155,   114,   155,     0,   155,   112,   155,     0,   155,
   113,   155,     0,   155,   110,   155,     0,   142,   155,     0,
   141,   155,     0,   146,   155,     0,   144,   155,     0,   136,
   155,     0,    41,     0,    29,     0,    30,     0,   138,   178,
     0,    10,     0,    27,     0,   143,   155,     0,   140,   155,
     0,   137,   155,     0,    55,   155,   156,    56,    12,    55,
   155,    56,     0,   147,     0,    28,   147,    44,   204,     0,
   155,   135,     0,    52,   155,    53,     0,    43,   155,   156,
     0,     0,   157,   116,   157,     0,   157,   114,   157,     0,
   157,   110,   157,     0,   169,     0,   163,     0,   228,     0,
     7,   147,     0,   231,     0,   222,     0,   223,     0,   224,
     0,   136,    52,   157,    53,     0,   141,    52,   157,    53,
     0,   142,    52,   157,    53,     0,    11,    52,   203,    53,
     0,    38,    55,   157,    56,    39,    52,   203,    53,     0,
    41,     0,    10,     0,    27,     0,   138,    52,   178,    53,
     0,   235,     0,   233,     0,    36,     0,    37,     0,   140,
    52,   157,    53,     0,   157,   115,   157,     0,    52,   221,
    53,   111,    57,   157,    58,     0,    32,    52,   214,   219,
    53,   116,    52,   157,    53,     0,    55,   157,   220,    56,
    12,   212,     0,    55,   157,    56,    12,   212,     0,    28,
   147,    52,   208,    53,   117,    55,   159,    56,     0,   165,
   147,    52,   208,    53,    55,   157,    56,     0,    67,   147,
    52,   208,    53,   117,    55,   159,    56,     0,   161,     0,
   109,    52,   214,    53,     0,    79,    52,   201,    53,     0,
   160,     0,    31,   214,   209,    44,    55,   157,    56,     0,
    52,   157,    53,     0,   163,     0,   163,   116,   158,     0,
   157,     0,     0,   147,    52,   210,    53,     0,    80,   147,
    52,   210,    53,     0,   175,    52,   210,    53,     0,   168,
     0,   194,     0,   162,    55,   158,    56,     0,    17,   147,
     0,    19,   147,     0,   107,   164,     0,   106,   164,     0,
   164,     0,   165,   166,     0,   149,   166,     0,    17,   147,
   166,     0,    19,   147,   166,     0,    17,   149,   166,     0,
    19,   149,   166,     0,    52,   131,   214,    53,    52,   208,
    53,     0,    52,   131,   131,   214,    53,    52,   208,    53,
     0,    52,   131,   147,    57,   178,   176,    58,    53,    52,
   208,    53,     0,    52,   131,   147,    57,   178,   176,    58,
    53,    52,   208,    53,   117,   185,     0,    45,     0,    50,
     0,    48,     0,    46,     0,    49,     0,    22,     0,   214,
   167,     0,   147,    57,   178,   176,    58,   167,     0,   214,
   117,   173,   167,     0,   147,    16,   117,   185,   167,     0,
   147,    16,   117,   215,   167,     0,   147,    57,   178,   176,
    58,   117,   185,   167,     0,   147,    57,   178,   176,    58,
   117,   215,   167,     0,   131,   166,     0,    43,   166,     0,
    43,     1,     0,     0,   147,    57,   178,   176,    58,     0,
     0,    43,   147,    57,   178,   176,    58,     0,     0,     0,
    43,     1,     0,    20,    52,   170,    43,   215,    53,     0,
    23,    52,   214,    43,   216,    43,   214,    53,     0,    25,
    52,   214,    53,     0,    24,    52,   214,    43,   214,    53,
     0,    26,    52,   214,    43,   214,    53,     0,    26,    52,
   175,    43,   214,    53,     0,    21,    52,   214,    53,     0,
   170,   172,   173,     0,   214,     0,   237,     0,   175,     0,
   177,     0,    52,   170,    53,     0,   136,   170,     0,   171,
     0,    52,    52,    48,   131,    53,   150,    53,    57,   178,
   176,    58,     0,    52,    52,   106,    48,   131,    53,   150,
    53,    57,   178,   176,    58,     0,    52,    52,    45,   131,
    53,   150,    53,    57,   178,   176,    58,     0,    52,    52,
    50,   131,    53,   150,    53,    57,   178,   176,    58,     0,
    52,    52,    48,   131,    53,    52,    52,    48,   131,    53,
   150,    53,    53,    57,   178,   176,    58,     0,    52,    52,
    48,   131,    53,    52,    52,   106,    48,   131,    53,   150,
    53,    53,    57,   178,   176,    58,     0,    52,    52,    48,
   131,    53,    52,    52,    45,   131,    53,   150,    53,    53,
    57,   178,   176,    58,     0,    52,    52,   106,    48,   131,
    53,    52,    52,    48,   131,    53,   150,    53,    53,    57,
   178,   176,    58,     0,    52,    52,   106,    48,   131,    53,
    52,    52,   106,    48,   131,    53,   150,    53,    53,    57,
   178,   176,    58,     0,    52,    52,   106,    48,   131,    53,
    52,    52,    45,   131,    53,   150,    53,    53,    57,   178,
   176,    58,     0,    52,    52,    45,   131,    53,    52,    52,
    48,   131,    53,   150,    53,    53,    57,   178,   176,    58,
     0,    52,    52,    45,   131,    53,    52,    52,   106,    48,
   131,    53,   150,    53,    53,    57,   178,   176,    58,     0,
    52,    52,    45,   131,    53,    52,    52,    45,   131,    53,
   150,    53,    53,    57,   178,   176,    58,     0,   117,     0,
   118,     0,   178,     0,   185,     0,   215,     0,    52,   215,
    53,    52,   165,    53,    52,   208,    53,   160,     0,    52,
   173,    53,     0,   174,     0,   131,    52,   171,    53,     0,
   147,    57,   178,   176,    58,     0,    52,    52,    45,   131,
    53,   147,    53,    57,   178,   176,    58,     0,    52,    52,
   106,    45,   131,    53,   147,    53,    57,   178,   176,    58,
     0,    52,    52,    50,   131,    53,   147,    53,    57,   178,
   176,    58,     0,    52,    52,    48,   131,    53,   147,    53,
    57,   178,   176,    58,     0,    52,    52,   106,    48,   131,
    53,   147,    53,    57,   178,   176,    58,     0,    52,   175,
    53,     0,    43,   178,   176,     0,    43,     1,     0,     0,
   131,   214,     0,   131,   177,     0,   131,   175,     0,    52,
   177,    53,    57,   178,   176,    58,     0,   131,    52,   207,
   131,    53,   178,     0,   131,    52,   178,    53,     0,    52,
   177,    53,     0,   181,     0,   181,   205,   178,     0,   178,
   184,   181,     0,     8,   203,    42,   178,   180,     0,   181,
     0,   181,   184,   181,     0,     9,   178,     0,     0,   182,
     0,   181,   183,   182,     0,   216,     0,   130,   182,     0,
   134,   182,     0,    15,     0,   218,     0,   214,     0,   175,
     0,   177,     0,   160,     0,    52,   178,    53,     0,   202,
     0,   217,     0,   189,     0,   190,     0,   237,     0,   193,
     0,   131,     0,   132,     0,   133,     0,   127,     0,   128,
     0,   120,     0,    63,     0,   119,     0,   129,     0,   130,
     0,   185,   119,   185,     0,   186,     0,   187,     0,    52,
   185,    53,     0,    57,   178,   188,    58,     0,    57,   215,
   188,    58,     0,    57,   185,   188,    58,     0,    55,   178,
   188,    56,     0,    55,   215,   188,    56,     0,    55,   185,
   188,    56,     0,    43,   178,   188,     0,    43,   215,   188,
     0,    43,   185,   188,     0,     0,    43,     1,     0,   120,
   214,     0,   120,   175,     0,   120,   237,     0,   120,   189,
     0,    52,   189,    53,     0,    52,    45,    53,   179,     0,
    52,    50,    53,   179,     0,    52,    48,    53,   179,     0,
    52,   107,    45,    53,   179,     0,    52,   107,    48,    53,
   179,     0,    52,   106,    45,    53,   179,     0,    52,   106,
    48,    53,   179,     0,    52,    45,   131,    53,   191,     0,
    52,   106,    45,   131,    53,   191,     0,    52,    50,   131,
    53,   191,     0,    52,    48,   131,    53,   191,     0,    52,
   106,    48,   131,    53,   191,     0,    52,    49,   131,    53,
   191,     0,    52,    45,   131,   131,    53,   191,     0,    52,
   106,    45,   131,   131,    53,   191,     0,    52,    50,   131,
   131,    53,   191,     0,    52,    48,   131,   131,    53,   191,
     0,    52,   106,    48,   131,   131,    53,   191,     0,    52,
    49,   131,   131,    53,   191,     0,    52,    17,   149,   131,
    53,   191,     0,    52,   149,   131,    53,   191,     0,    52,
    17,   149,   131,   131,    53,   191,     0,    52,   149,   131,
   131,    53,   191,     0,   179,     0,   108,    52,   178,    53,
     0,   207,     0,    45,   131,     0,    50,   131,     0,    48,
   131,     0,   106,    45,   131,     0,   106,    48,   131,     0,
    17,   149,   131,     0,   149,   131,     0,    78,    52,   178,
    53,     0,    78,    52,   192,    53,     0,    78,    52,   149,
    53,     0,    78,    52,   215,    53,     0,   195,     0,   196,
     0,   197,     0,   199,     0,   198,     0,   200,     0,    72,
    52,   201,    53,     0,    73,    52,   201,    53,     0,    74,
    52,   201,    43,   201,    53,     0,    75,    52,   201,    43,
   201,    53,     0,    76,    52,   201,    43,   201,    53,     0,
    77,    52,   201,    53,     0,   214,     0,   175,     0,   177,
     0,   215,     0,   194,     0,   237,     0,    83,   178,     0,
    81,   178,     0,    82,   178,     0,    84,   178,     0,    85,
   178,     0,    86,   178,     0,    87,   178,     0,    88,   178,
     0,    89,   178,     0,    90,   178,     0,    91,   178,     0,
    92,   178,     0,    93,   178,     0,    94,   178,     0,    95,
   178,     0,    96,   178,     0,    97,    52,   178,    43,   178,
    53,     0,    98,    52,   178,    43,   178,    53,     0,   102,
    52,   178,    43,   178,    53,     0,   103,    52,   178,    43,
   178,    53,     0,   104,    52,   178,    43,   178,    53,     0,
    99,   178,     0,   100,   178,     0,   101,   178,     0,   204,
     0,   137,   203,     0,   203,   116,   203,     0,   203,   114,
   203,     0,    52,   203,    53,     0,   178,   205,   178,     0,
    29,     0,    30,     0,   178,     0,   178,   122,   215,     0,
   178,   121,   215,     0,   215,   122,   178,     0,   215,   121,
   178,     0,   178,   122,    15,     0,   178,   121,    15,     0,
    15,   122,   178,     0,    15,   121,   178,     0,   178,   122,
   217,     0,   178,   121,   217,     0,   123,     0,   124,     0,
   121,     0,   125,     0,   126,     0,   122,     0,   106,    45,
     0,   106,    48,     0,   206,     0,   165,     0,   207,   214,
   209,     0,   207,   209,     0,   149,   214,   209,     0,   149,
   131,   214,   209,     0,   149,   131,   131,   214,   209,     0,
   149,   214,    16,   209,     0,   147,   214,   209,     0,   147,
   131,   214,   209,     0,   147,   131,   131,   214,   209,     0,
   147,   214,    16,   209,     0,   149,   209,     0,   149,   131,
   209,     0,   149,   131,   131,   209,     0,   147,   209,     0,
   147,   131,   209,     0,   147,   131,   131,   209,     0,   207,
   214,    16,   209,     0,   207,   131,   214,    16,   209,     0,
   207,   214,    57,   178,    58,   209,     0,   207,   214,    57,
   178,    43,   178,    58,   209,     0,   207,   214,    16,    57,
   178,    58,   209,     0,   207,   131,   214,   209,     0,   207,
   131,   209,     0,   207,   131,   131,   214,   209,     0,    52,
   131,   214,    53,    52,   208,    53,   209,     0,     0,    43,
   207,   214,   209,     0,    43,   207,   209,     0,    43,   147,
   214,   209,     0,    43,   149,   214,   209,     0,    43,   149,
   131,   214,   209,     0,    43,   147,   214,    16,   209,     0,
    43,   149,   214,    16,   209,     0,    43,   207,   214,    16,
   209,     0,    43,   207,   131,   214,    16,   209,     0,    43,
    52,   131,   214,    53,    52,   208,    53,   209,     0,     0,
    43,   207,   214,    57,   178,    58,   209,     0,    43,   207,
   214,    57,   178,    43,   178,    58,   209,     0,    43,   207,
   214,    16,    57,   178,    58,   209,     0,    43,   207,   131,
   214,   209,     0,    43,   207,   131,   209,     0,    43,     1,
     0,   173,   211,     0,   147,    52,   210,    53,   211,     0,
     0,   120,     1,     0,    43,   173,   211,     0,    43,   147,
    52,   210,    53,   211,     0,     0,    43,     1,     0,    55,
   157,    56,     0,     1,    56,     0,    52,   203,    53,     0,
     1,    53,     0,   147,     0,    52,   214,    53,     0,   148,
     0,   150,     0,   152,     0,   151,     0,    43,   214,   219,
     0,     0,    43,     1,     0,     0,    43,   157,   220,     0,
   204,     0,   137,   221,     0,   221,   116,   221,     0,   221,
   114,   221,     0,    52,   221,    53,     0,    34,   213,   212,
     0,    33,   178,    54,    35,   212,     0,    33,    52,   225,
    43,   226,    43,   227,    53,   212,     0,   169,     0,   164,
     0,     0,   203,     0,     0,   169,     0,     0,     3,    52,
   182,    53,    55,   229,    56,     0,     4,   182,    44,    52,
   157,    53,   230,     0,     6,    44,    52,   157,    53,     0,
     5,   229,     0,   229,     0,     0,     8,   203,    42,   212,
   232,     0,     9,   212,     0,     0,    40,    52,   173,    53,
     0,    40,    52,   173,   234,    53,     0,     0,    43,   173,
   234,     0,   139,    52,   214,    53,     0,   139,    52,   214,
   236,    53,     0,   139,    52,   175,    53,     0,   139,    52,
   175,   236,    53,     0,   139,    52,   237,    53,     0,     0,
    43,   214,   236,     0,    43,   175,   236,     0,   214,    18,
   214,   238,     0,   175,    18,   214,   238,     0,   177,    18,
   214,   238,     0,   214,    18,   175,   238,     0,   175,    18,
   175,   238,     0,   177,    18,   175,   238,     0,   214,   111,
   214,   238,     0,   175,   111,   214,   238,     0,    52,   189,
    53,   111,   214,   238,     0,   177,   111,   214,   238,     0,
   214,   111,   175,   238,     0,   175,   111,   175,   238,     0,
    52,   189,    53,   111,   175,   238,     0,   214,    18,   160,
     0,   214,   111,   160,     0,   177,   111,   175,   238,     0,
    52,   237,    53,     0,     0,    18,   214,   238,     0,    18,
   175,   238,     0,   111,   214,   238,     0,   111,   175,   238,
     0,    18,   160,     0,   111,   160,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   159,   190,   191,   195,   196,   197,   198,   199,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   217,   218,   219,
   220,   221,   222,   226,   227,   232,   233,   237,   241,   246,
   248,   255,   361,   363,   365,   366,   367,   368,   369,   370,
   371,   373,   374,   376,   377,   378,   379,   380,   381,   387,
   388,   389,   390,   391,   392,   394,   397,   403,   407,   416,
   425,   429,   433,   434,   438,   443,   445,   459,   463,   467,
   474,   475,   480,   485,   490,   495,   496,   501,   509,   520,
   534,   535,   536,   540,   544,   548,   552,   556,   560,   567,
   569,   571,   576,   588,   589,   590,   593,   594,   595,   602,
   606,   610,   615,   621,   626,   633,   639,   650,   652,   653,
   657,   664,   668,   669,   676,   678,   680,   682,   684,   686,
   688,   700,   704,   705,   706,   707,   708,   709,   710,   713,
   715,   717,   719,   721,   723,   725,   727,   729,   731,   733,
   735,   737,   742,   743,   746,   747,   748,   752,   753,   754,
   757,   761,   766,   768,   770,   772,   774,   776,   780,   782,
   783,   789,   790,   791,   793,   795,   797,   799,   805,   806,
   808,   809,   815,   816,   820,   821,   825,   826,   831,   832,
   833,   834,   835,   837,   838,   839,   840,   841,   842,   843,
   844,   845,   846,   847,   853,   854,   855,   856,   857,   858,
   859,   860,   862,   864,   868,   869,   870,   871,   877,   881,
   889,   901,   905,   914,   926,   930,   938,   942,   943,   946,
   951,   955,   960,   964,   971,   974,   975,   978,   979,   982,
   983,   986,   987,   988,   989,   990,   991,   994,   995,   996,
   997,   998,   999,  1001,  1002,  1004,  1005,  1007,  1008,  1012,
  1014,  1015,  1016,  1017,  1018,  1019,  1020,  1024,  1026,  1027,
  1028,  1033,  1035,  1036,  1037,  1038,  1039,  1042,  1049,  1056,
  1063,  1070,  1077,  1085,  1086,  1087,  1088,  1089,  1090,  1096,
  1100,  1103,  1106,  1107,  1108,  1109,  1110,  1111,  1114,  1115,
  1116,  1119,  1120,  1121,  1122,  1125,  1126,  1129,  1130,  1133,
  1135,  1136,  1137,  1143,  1144,  1145,  1146,  1147,  1153,  1155,
  1156,  1159,  1162,  1163,  1166,  1167,  1170,  1171,  1174,  1175,
  1178,  1179,  1184,  1185,  1186,  1187,  1188,  1189,  1196,  1198,
  1201,  1203,  1209,  1213,  1218,  1224,  1230,  1236,  1246,  1252,
  1258,  1264,  1273,  1277,  1281,  1287,  1291,  1295,  1301,  1307,
  1314,  1322,  1330,  1336,  1342,  1346,  1353,  1359,  1362,  1366,
  1370,  1376,  1382,  1388,  1395,  1403,  1409,  1424,  1430,  1433,
  1441,  1449,  1455,  1461,  1465,  1474,  1478,  1488,  1489,  1493,
  1497,  1507,  1508,  1516,  1518,  1525,  1527,  1533,  1534,  1538,
  1543,  1548,  1553,  1559,  1563,  1564,  1570,  1571,  1582,  1593,
  1594,  1596,  1598,  1604,  1610,  1618,  1626,  1630,  1634,  1640,
  1644,  1650,  1654,  1661,  1665,  1669,  1676,  1680,  1684,  1688,
  1698,  1699,  1705,  1706,  1710,  1711,  1716,  1717,  1718,  1719,
  1720,  1723,  1724,  1725,  1731,  1732,  1733,  1735,  1736,  1737,
  1739,  1740,  1741,  1742,  1744,  1745,  1746,  1747,  1748,  1749,
  1750,  1754,  1755,  1756,  1757,  1758,  1759,  1760
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","RETURN","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN",
"PEND","POINTERNULL","ARRAY","STRUCT","DOT","UNION","FOPEN","FCLOSE","FILEDECLARATION",
"FGETS","FPUTS","FGETC","FPUTC","MORE","DEFINE","MY_TRUE","MY_FALSE","EXIST",
"FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT","UNTIL","DISPLAY","SKIP",
"THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION","POINTERDECLARATION",
"CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION","LISTDECLARATION","OPEN_PAR",
"CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR","CLOSE_MPAR","FUNCTION",
"OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED","SEND","RECEIVE","PROCESS",
"CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD","STRFUNCTAIL","STRFUNCCAT",
"STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","SIZEOF","SYSTEM","EXTERN","CEIL","FLOOR",
"ROUND","SIN","COS","TAN","ASIN","ACOS","ATAN","SINH","COSH","TANH","EXP","LOG",
"LOG10","SQRT","ATAN2","POW","ABS","FABS","LABS","FMOD","MODF","LDEXP","FREXP",
"UNSIGNED","SIGNED","MALLOC","FREE","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL",
"AND","ASS_P","ASS_N","CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST",
"ADD","SUB","MUL","DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST",
"FINAL","KEEP","ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL",
"STRUCT_TYPE","INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition",
"complexProposition","poptional_projection","statement","option_struct_declaration",
"empty_statement","function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"file_statement","ass_statement","ass_left","leftaddrshift","assign_operator",
"ass_right","rightaddrshift","array","option_ari_exp","point_exp","ari_exp",
"type_cast_alg_exp","option_exp_else_statement","simple_ari_exp","member_in_exp",
"bi_operator","ari_operator","array_exp","option_list_value","option_struct_list_value",
"inner_option_list_value","address_exp","type_cast","casted_element","all_sizeof_type",
"size_of","String_Function","String_Function_head","String_Function_tail","String_Function_cat",
"String_Function_cmp","String_Function_cpy","String_Function_len","str_func_parameter",
"math_function","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   153,   154,   154,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   156,   156,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   158,   158,
   159,   159,   160,   160,   160,   160,   160,   161,   162,   162,
   163,   163,   163,   164,   164,   164,   164,   164,   164,   164,
   164,   164,   164,   165,   165,   165,   165,   165,   165,   166,
   166,   166,   166,   166,   166,   166,   166,   167,   167,   167,
    -1,    -1,    -1,    -1,   168,   168,   168,   168,   168,   168,
   168,   169,   170,   170,   170,   170,   170,   170,   170,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   172,   172,   173,   173,   173,   173,   173,   173,
   174,   175,   175,   175,   175,   175,   175,   175,   176,   176,
   176,   177,   177,   177,   177,   177,   177,   177,   178,   178,
   178,   178,   179,   179,   180,   180,   181,   181,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   183,   183,   183,   183,   183,   183,
   183,   183,   184,   184,   185,   185,   185,   185,   186,   186,
   186,   187,   187,   187,   188,   188,   188,   188,   188,   189,
   189,   189,   189,   189,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   191,   191,   192,
   192,   192,   192,   192,   192,   192,   192,   193,   193,   193,
   193,   194,   194,   194,   194,   194,   194,   195,   196,   197,
   198,   199,   200,   201,   201,   201,   201,   201,   201,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   203,   203,   203,   203,   203,   204,   204,
   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
   204,   204,   205,   205,   205,   205,   205,   205,   206,   206,
   207,   207,   208,   208,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   208,   208,   208,   208,   208,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   210,   210,   210,   210,   211,
   211,   211,   211,   212,   212,   213,   213,   214,   214,   215,
   216,   217,   218,   219,   219,   219,   220,   220,   221,   221,
   221,   221,   221,   222,   223,   224,   225,   225,   225,   226,
   226,   227,   227,   228,   229,   229,   230,   230,   230,   231,
   232,   232,   233,   233,   234,   234,   235,   235,   235,   235,
   235,   236,   236,   236,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   237,   238,   238,   238,   238,   238,   238,   238
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     2,     1,     1,     1,     1,
     4,     4,     4,     4,     8,     1,     1,     1,     4,     1,
     1,     1,     1,     4,     3,     7,     9,     6,     5,     9,
     8,     9,     1,     4,     4,     1,     7,     3,     1,     3,
     1,     0,     4,     5,     4,     1,     1,     4,     2,     2,
     2,     2,     1,     2,     2,     3,     3,     3,     3,     7,
     8,    11,    13,     1,     1,     1,     1,     1,     1,     2,
     6,     4,     5,     5,     8,     8,     2,     2,     2,     0,
     6,     7,     0,     2,     6,     8,     4,     6,     6,     6,
     4,     3,     1,     1,     1,     1,     3,     2,     1,    11,
    12,    11,    11,    17,    18,    17,    18,    19,    18,    17,
    18,    17,     1,     1,     1,     1,     1,    10,     3,     1,
     4,     5,    11,    12,    11,    11,    12,     3,     3,     2,
     0,     2,     2,     2,     7,     6,     4,     3,     1,     3,
     3,     5,     1,     3,     2,     0,     1,     3,     1,     2,
     2,     1,     1,     1,     1,     1,     1,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     3,     1,     1,     3,     4,     4,
     4,     4,     4,     4,     3,     3,     3,     0,     2,     2,
     2,     2,     2,     3,     4,     4,     4,     5,     5,     5,
     5,     5,     6,     5,     5,     6,     5,     6,     7,     6,
     6,     7,     6,     6,     5,     7,     6,     1,     4,     1,
     2,     2,     2,     3,     3,     3,     2,     4,     4,     4,
     4,     1,     1,     1,     1,     1,     1,     4,     4,     6,
     6,     6,     4,     1,     1,     1,     1,     1,     1,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     6,     6,     6,     6,     6,
     2,     2,     2,     1,     2,     3,     3,     3,     3,     1,
     1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     2,     2,
     1,     1,     3,     2,     3,     4,     5,     4,     3,     4,
     5,     4,     2,     3,     4,     2,     3,     4,     4,     5,
     6,     8,     7,     4,     3,     5,     8,     0,     4,     3,
     4,     4,     5,     5,     5,     5,     6,     9,     0,     7,
     9,     8,     5,     4,     2,     2,     5,     0,     2,     3,
     6,     0,     2,     3,     2,     3,     2,     1,     3,     1,
     1,     1,     1,     3,     0,     2,     0,     3,     1,     2,
     3,     3,     3,     3,     5,     9,     1,     1,     0,     1,
     0,     1,     0,     7,     7,     5,     2,     1,     0,     5,
     2,     0,     4,     5,     0,     3,     4,     5,     4,     5,
     4,     0,     3,     3,     4,     4,     4,     4,     4,     4,
     4,     4,     6,     4,     4,     4,     6,     3,     3,     4,
     3,     0,     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,     0,    47,     0,     0,     0,     0,     0,
    99,     0,     0,     0,     0,    48,     0,     0,     0,     0,
     0,    52,    53,     0,     0,    46,    94,    97,    96,    98,
    95,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   388,     0,     1,    66,    63,     0,    34,    83,
     0,    76,    33,     0,   129,   125,   126,    77,   262,   263,
   264,   266,   265,   267,   123,    38,    39,    40,    35,    37,
    51,    50,   124,     0,     0,    29,    13,    22,     0,   182,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   391,
   393,   392,   187,   185,   186,    17,   169,   177,   191,   192,
   194,   189,   184,   179,   190,   183,   193,    21,    10,     9,
    20,    12,    11,     2,     0,     0,     0,     0,     0,    26,
     0,    36,   182,   310,   311,     0,     0,   390,   312,     0,
   304,     0,     0,    79,     0,    80,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   388,   369,     0,   409,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   187,     0,   185,   186,   191,   399,   184,     0,   193,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    82,     0,    81,     0,     0,   388,   164,   163,
   162,     0,     0,   128,   125,     0,     0,     0,     0,     0,
   378,     0,     0,   388,    85,   110,     0,     0,     0,     0,
     0,   388,    84,   143,   144,     0,     0,   378,     0,     0,
     0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   185,   186,     0,
   191,   184,   193,     0,   281,   282,   280,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     0,     0,   301,   302,   303,     0,     0,     0,     0,   221,
     0,   223,   220,   222,   180,   181,   203,   204,     0,   201,
   202,   200,   325,   328,   323,   324,   326,   327,   198,   199,
   195,   196,   197,     0,     0,     8,     6,     7,     5,     4,
     0,     0,     0,     0,   312,     0,   305,   325,   328,     0,
     0,     0,     0,     0,     0,     0,    86,    88,    87,    89,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   358,
     0,     0,     0,   395,     0,    94,    96,    98,    95,     0,
     0,   408,   407,     0,     0,   387,     0,     0,     0,   404,
     0,     0,     0,     0,     0,     0,   150,   145,   146,   206,
   207,   147,     0,     0,    94,    96,    95,     0,     0,     0,
     0,   388,   162,     0,   400,    68,   127,   158,   168,     0,
   389,     0,     0,     0,   451,     0,     0,     0,   358,     0,
   275,   276,   278,     0,   274,   277,   279,     0,     0,     0,
     0,     0,     0,   378,     0,     0,     0,     0,     0,   332,
     0,   331,     0,     0,     0,   125,   126,     0,   123,   124,
     0,     0,     0,     0,     0,     0,     0,     0,   388,   382,
     0,   161,   107,     0,     0,     0,     0,   100,    32,    31,
    55,    30,     0,    69,   358,   122,   452,   452,     0,   452,
   452,   452,   452,   452,   452,   448,   452,   452,   449,   452,
   452,    25,    29,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   188,   224,     0,    94,    96,    95,     0,     0,
     0,     0,   250,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   171,   178,   170,     0,   320,
   319,   308,   318,   314,   322,   317,   313,   321,   309,   422,
   307,   306,   316,   315,    44,     0,     0,     0,     0,   121,
     0,     0,   117,     0,     0,     0,     0,     0,   369,   369,
   369,     0,   375,     0,     0,     0,   369,     0,     0,     0,
     0,     0,     0,   411,     0,   386,   385,     0,     0,     0,
     0,     0,     0,     0,     0,   218,   218,   218,   218,   218,
   218,     0,     0,   423,     0,     0,     0,     0,     0,     0,
    94,    96,    94,    96,   403,   162,     0,     0,     0,     0,
     0,     0,     0,   402,   401,   397,     0,     0,     0,   268,
   269,     0,     0,     0,   273,    65,     0,     0,   388,     0,
    64,   329,   330,   167,     0,    94,    96,    95,     0,    41,
    49,     0,   429,     0,   427,     0,   431,    54,    42,    43,
   379,   378,     0,   376,    73,     0,     0,     0,   161,   109,
   108,   110,    78,     0,     0,     0,     0,   439,   436,    75,
   446,   442,   440,   437,   450,   444,   438,   435,   445,   441,
    28,     0,   176,     0,   225,   173,     0,     0,   227,     0,
     0,     0,     0,   226,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   251,   253,   252,   329,   330,   260,   257,   258,   259,   261,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   420,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   369,   346,   369,   369,   343,   369,   369,   334,
   369,     0,     0,   369,     0,   369,   369,   360,   369,     0,
   396,   395,     0,     0,     0,     0,     0,     0,     0,   410,
     0,   405,   384,     0,   149,   208,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   425,   424,
     0,   205,     0,     0,     0,     0,     0,     0,   161,   358,
   403,   161,   452,   452,     0,   398,    59,     0,     0,     0,
     0,     0,    74,     0,     0,     0,     0,     0,     0,    94,
    96,   432,   432,   430,   428,     0,   383,   388,   382,   160,
   161,   152,   110,   110,     0,   102,    70,     0,   457,   452,
   452,   458,   452,   452,     0,     0,   172,     0,     0,     0,
     0,   248,   232,     0,   235,     0,   237,     0,   234,     0,
     0,     0,     0,     0,   230,     0,     0,   231,     0,     0,
   228,   229,   245,     0,   256,   254,   255,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   421,     0,   115,     0,   118,   120,   119,     0,   369,   347,
   369,   369,   339,   369,   344,   369,   369,   335,     0,   355,
   369,   369,     0,   333,     0,     0,   369,   361,   369,   369,
   362,   374,   369,   369,     0,   359,     0,   394,     0,     0,
     0,   413,     0,     0,   219,   218,   218,   218,   212,   214,
   213,   209,   211,   210,     0,   151,   426,     0,   388,   391,
     0,   388,   391,   388,   391,     0,     0,   358,     0,     0,
     0,   447,   443,     0,    58,     0,   270,   271,   272,   161,
   166,     0,     0,     0,     0,     0,   434,   433,    73,   378,
   380,   159,   103,   104,   110,     0,   454,   453,   456,   455,
     0,   175,   244,     0,   174,     0,   238,   241,   243,   240,
     0,   233,     0,   236,     0,   247,   296,   297,   298,   299,
   300,     0,     0,     0,     0,     0,     0,   414,     0,     0,
   348,   369,   340,   342,   345,   369,   336,   338,   369,   369,
   354,     0,   349,     0,    72,     0,   364,   363,   365,   369,
   373,     0,   366,     0,    67,     0,   412,     0,     0,     0,
   215,   217,   216,     0,     0,     0,     0,     0,     0,     0,
     0,   388,     0,   388,   391,     0,   152,    90,   165,    56,
    72,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   377,     0,     0,   101,     0,    23,   246,     0,
   239,   242,     0,     0,     0,   116,   358,   341,   337,   356,
   350,     0,     0,   369,    71,     0,   358,   367,     0,     0,
   369,     0,     0,    45,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    91,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    73,   110,   110,    61,   249,     0,     0,     0,   369,
     0,   351,    60,     0,   369,     0,   370,    57,   406,   358,
     0,     0,     0,   161,   161,     0,     0,     0,   161,   161,
   161,   161,     0,     0,     0,     0,     0,     0,   358,    62,
     0,     0,     0,     0,     0,     0,     0,   381,   105,   106,
     0,   416,   369,   353,   369,   369,   372,   369,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   161,     0,     0,     0,   161,   161,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   419,   357,   352,
   368,   371,     0,   391,   391,     0,   153,   132,   391,   391,
     0,   156,   130,   155,   133,     0,     0,     0,     0,     0,
     0,    92,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   418,   415,     0,     0,   148,     0,     0,     0,
   391,     0,     0,   391,   154,   391,   391,     0,   157,   131,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   417,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   391,    93,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   161,   161,
     0,   161,   161,     0,     0,     0,     0,     0,     0,   161,
     0,     0,   161,   161,   161,     0,   142,   140,     0,   136,
   134,     0,     0,     0,   161,   141,   135,   139,   137,     0,
   138,     0,     0,     0
};

static const short yydefgoto[] = {  1382,
     2,    21,   277,   210,   493,  1136,   143,    77,    78,    79,
    80,    81,   483,   488,    82,    83,    84,    85,   266,   480,
   407,   144,   687,   145,   179,   882,   877,   147,   148,   344,
   329,   409,   410,   411,   811,   149,   150,   883,   542,   151,
    88,    89,    90,    91,    92,    93,    94,   444,   152,   356,
   181,   360,   462,   591,   592,   383,   481,   684,   570,   203,
   153,   182,   154,   155,   156,   600,   438,   218,    96,    97,
    98,   394,   801,  1078,    99,   920,  1294,   100,   762,   101,
   625,   102,   674,   157,   698
};

static const short yypact[] = {    57,
   817,  4099,-32768,-32768,   -22,-32768,-32768,-32768,   817,   817,
   817,   817,  7707,   817,   817,   817,   817,   817,   817,-32768,
   424,   217,   202,  7097,-32768,   272,   281,   519,   279,   366,
-32768,   370,   387,   438,   449,-32768,   321,     4,   462,  7808,
    82,-32768,-32768,   480,   505,-32768,-32768,-32768,-32768,-32768,
-32768,  3506,  4099,   434,   533,   539,   552,   693,   703,   733,
   739,   649,   126,   126,   765,   298,   224,   818,   836,   855,
   872,   889,   249,   431,  1386,-32768,-32768,   811,-32768,-32768,
   446,-32768,-32768,   144,-32768,   435,    66,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   256,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   908,   809,   792,   744,   744,  7097,-32768,
  5698,   904,  7707,  7707,  7707,  7707,  7707,  7707,  7707,  7707,
  7707,  7707,  7707,  7707,  7707,  7707,  7707,  7707,   914,   924,
  7707,  7707,  7707,   934,   965,   969,   132,  9608,  9608,-32768,
-32768,-32768,-32768,   435,    66,   805,  1167,-32768,-32768,-32768,
-32768,-32768,   256,-32768,-32768,-32768,-32768,   744,   744,   744,
   744,   744,   744,-32768,   817,   817,   817,   817,   817,-32768,
  9608,-32768,   644,-32768,-32768,  4202,  7097,-32768,  1345,   664,
-32768,  1203,  7097,   431,   431,   431,   431,   548,     4,     4,
     4,     4,    10,   973,     4,-32768,  1052,     4,  4340,   961,
  1046,  7097,   827,  4099,  7301,  7097,  3656,   587,  7200,  1107,
  1129,  1012,   169,   108,  1047,-32768,   205,    14,  1036,  1091,
  1063,  1009,  1009,  1009,  1009,  1009,  1009,  1009,  1067,   926,
  1028,   900,-32768,   431,-32768,     4,  6877,  1094,-32768,-32768,
-32768,  3956,   548,-32768,   295,  7707,   600,  4099,  4099,  4099,
  7402,  7707,   431,   416,-32768,    29,  4099,  4099,  4099,  4099,
   463,    65,-32768,-32768,-32768,  7301,    10,  7402,    10,    10,
    10,   967,   967,  7505,-32768,   817,  1050,   857,  1010,   129,
   163,  1038,   184,  5816,   526,   770,  1061,   492,   167,   196,
  1161,   284,  1175,  5108,   805,   805,   805,   805,   805,   805,
   805,   805,   805,   805,   805,   805,   805,   805,   805,   805,
  7707,  7707,   805,   805,   805,  7707,  7707,  7707,   199,  1229,
    66,-32768,  1259,-32768,-32768,-32768,-32768,-32768,  9608,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  9608,  7707,  1347,   989,   989,   440,  1148,
  1243,  7707,  7707,  4478,  1041,   952,-32768,    53,    56,  7707,
   827,  7097,  7097,  7707,  7707,  1075,-32768,-32768,-32768,-32768,
   528,  1288,  1257,  1306,  1327,  1330,    11,  1333,  1351,   538,
  1337,   161,  1359,  1361,  1135,   129,   163,  1038,   184,  5462,
   602,-32768,-32768,  1362,  1371,-32768,  1321,  1356,  4099,-32768,
  1241,  4872,  7606,  7606,   629,   343,-32768,   805,  1309,-32768,
-32768,-32768,   953,  1188,   197,   230,   433,   443,   601,  1322,
   298,  1350,  1365,  4616,-32768,-32768,-32768,-32768,  1368,  1319,
-32768,  1328,  7200,  7200,-32768,  4099,  1430,  1392,   538,   199,
   295,    66,-32768,  1400,   256,-32768,-32768,  1401,  1412,  1413,
  1419,  1411,  1423,  7402,   431,   431,   636,  1428,   935,-32768,
   243,-32768,  1360,  3806,  1158,   492,   167,  1047,   284,  1175,
   893,   500,   662,  1437,  1165,  1193,  1206,    13,   260,  1449,
  1450,   239,-32768,  1387,  7707,    34,  7301,-32768,  1069,  1391,
  1391,-32768,  1456,  1403,   538,-32768,   389,   389,  1470,   389,
   389,   389,   389,   389,   389,-32768,   659,   389,-32768,   659,
   389,-32768,   792,  1512,  7707,  1396,  9608,   488,  9608,   543,
   572,  9608,   578,   643,   672,   679,  1078,   690,   695,  1487,
  1488,   706,-32768,  1319,  1384,  1415,  1416,  1417,  1090,   710,
   947,  1490,-32768,  1491,   421,   476,   584,   628,   677,   678,
   510,   167,  1161,   284,  1175,  1186,-32768,   805,  1494,   805,
   805,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   805,  1541,
  1436,-32768,   805,   805,-32768,   615,  1500,   510,  1406,-32768,
  1405,     4,-32768,    43,  1503,     4,     4,  1426,     9,    84,
   189,  1505,-32768,  1429,     4,   655,   266,  1504,    89,  1508,
   658,  5580,   555,  7097,   827,-32768,-32768,  1363,  1523,  4990,
  1510,   196,   247,  1514,  5226,   694,   -20,  1525,   694,   -20,
  1525,  6994,  7301,-32768,  1516,  1055,  3251,   737,   740,   747,
   755,   758,  1487,  1488,  1328,  1517,  7707,  1519,  4754,  1335,
  7707,    10,  1515,  1459,-32768,  1088,   827,  1565,  1527,-32768,
-32768,  1009,  1009,  1009,-32768,-32768,  1528,     4,  1521,  1365,
-32768,-32768,-32768,-32768,  1529,  1452,  1453,  1454,   835,-32768,
-32768,    10,-32768,  1533,-32768,  1534,-32768,-32768,-32768,-32768,
-32768,  7402,  3017,-32768,-32768,  3368,  1530,   307,   239,-32768,
-32768,  1546,-32768,   463,  1537,   967,   967,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1536,    73,   767,-32768,  1105,  7898,  1539,-32768,  7898,
  1540,  7898,  1543,-32768,  7898,  1544,   769,   783,   785,   755,
   786,  9608,   795,  9608,   797,  9608,  9608,  7898,  1548,  1468,
-32768,-32768,-32768,  1471,  1472,-32768,-32768,-32768,-32768,-32768,
  7707,  7707,  7707,  7707,  7707,  1473,  1474,  1475,  1151,  1389,
   827,-32768,  1452,  1453,  1454,  1171,  1554,  1551,  1555,  1556,
  1558,     4,   286,-32768,   248,   411,-32768,   268,   509,-32768,
  1054,  1495,     4,   415,     4,   523,    17,-32768,  1172,  4099,
-32768,  1361,  1497,   577,   197,   230,   433,  1215,   605,  1263,
  1572,-32768,-32768,  1564,-32768,-32768,  1567,  5344,   247,  3134,
  1561,  1566,  1568,  1562,  1563,  1569,  5934,  1570,  1582,-32768,
  1055,-32768,  7988,  8078,  8168,   798,   800,  1574,   239,   538,
-32768,   239,   389,   389,  4099,-32768,-32768,   827,  1511,  1579,
  1580,  1581,-32768,  1517,  7707,  7707,  1583,  1584,  1587,  1513,
  1518,  1592,  1592,-32768,-32768,  1588,-32768,   640,  1449,-32768,
   239,-32768,    -3,  1546,  1585,-32768,-32768,  1590,-32768,   659,
   389,-32768,   659,   389,   817,  7707,-32768,  7898,  1589,  9608,
  1594,-32768,-32768,  7898,-32768,  7898,-32768,  7898,-32768,  7898,
  8258,  8348,  8438,   806,-32768,  7898,  1595,-32768,  7898,  1597,
-32768,-32768,-32768,  7898,-32768,-32768,-32768,   992,  1003,  1019,
  1043,  1049,  1600,  1601,  1602,  1513,  1526,  9608,  1603,  1605,
-32768,  1518,-32768,     4,-32768,-32768,-32768,  1610,    17,-32768,
  1052,  1052,-32768,    17,-32768,  1052,  1052,-32768,     4,-32768,
   556,   -15,  7707,-32768,  1604,  1611,  1052,-32768,  1052,  1052,
-32768,-32768,   579,    96,  7707,-32768,  1370,-32768,  1613,   641,
   758,   548,  7097,  1489,-32768,   694,   -20,  1525,-32768,-32768,
-32768,-32768,-32768,-32768,  6052,-32768,-32768,  6170,   858,  1615,
  6288,  1156,  1616,  1461,  1619,  8528,  8618,   538,  1598,  1620,
  1608,-32768,-32768,  1142,-32768,  1621,-32768,-32768,-32768,   239,
   805,   -18,     5,  1104,  1622,  1624,-32768,-32768,  1449,  7402,
-32768,-32768,-32768,-32768,    30,  4099,-32768,-32768,-32768,-32768,
   922,   805,-32768,  7898,  1186,  7707,-32768,-32768,-32768,-32768,
  8708,-32768,  7898,-32768,  7898,-32768,-32768,-32768,-32768,-32768,
-32768,  1531,  1532,  1535,  1627,  1614,  1629,-32768,  1630,  1632,
-32768,  1052,-32768,-32768,-32768,  1052,-32768,-32768,  1052,  1052,
-32768,  7707,-32768,   340,  4099,  1640,-32768,-32768,-32768,  1052,
-32768,  7707,-32768,   713,-32768,  4099,-32768,  1641,  1336,  1642,
-32768,-32768,-32768,  6406,  1617,  1636,  6524,  1639,  1644,  1645,
  1646,  1469,  6642,  1479,  1651,  1654,  1655,-32768,-32768,-32768,
  4099,  1656,  1647,  1662,  1615,  1657,  1663,  1616,  1664,  1619,
  1550,   107,-32768,  1665,   307,-32768,  1373,-32768,-32768,  1051,
-32768,-32768,  1578,  1667,  4099,-32768,   538,-32768,-32768,-32768,
-32768,   949,  7707,  1052,  1386,  1670,   538,-32768,   958,  7707,
  1052,  1218,   827,-32768,  1675,   807,   808,  1256,  7707,  7707,
   812,   814,  1267,  7707,  7707,  7707,  7707,  1671,  6760,  1672,
  1673,-32768,  1679,  1676,  1655,   671,   864,  1680,  1682,  1683,
  1651,  1449,    -3,  1546,-32768,-32768,  4099,  1270,  1684,  1052,
   979,-32768,-32768,  1685,  1052,   988,-32768,-32768,-32768,   538,
   838,   841,   848,   239,   239,   850,   865,   879,   239,   239,
   239,   239,  7707,   880,   883,  1323,  7707,  7707,   538,-32768,
  1609,  1612,  1650,  1618,  1623,  1687,  1068,-32768,-32768,-32768,
  1299,-32768,  1052,-32768,  1052,  1052,-32768,  1052,  1686,  8798,
  8888,   887,  1688,  1690,  8978,  9068,   895,  1693,  1694,  1695,
  1697,   239,   896,   897,   898,   239,   239,  1689,  1691,  1692,
  1626,  1706,  1709,  1635,  1637,  1643,  1719,  1261,-32768,-32768,
-32768,-32768,   978,  1725,  1726,  9158,-32768,-32768,  1727,  1728,
  9248,-32768,-32768,-32768,-32768,  1714,  9338,  9428,   929,  1729,
  1730,  1666,  1591,  1648,  1732,  1649,  1652,  1733,  1737,  1738,
  1661,  1389,-32768,-32768,   146,   249,-32768,  1741,  1742,  1744,
  1747,  1748,  1750,  1751,-32768,  1752,  1753,  9518,-32768,-32768,
  1055,  1725,  1726,  1658,  1727,  1728,  1660,  1668,  1669,  1754,
-32768,    44,  1094,  1755,  1757,  1758,  1763,  1764,  1762,  1769,
  1770,  1771,  1309,  1747,  1751,  1752,  1753,  1681,  7707,  7707,
  1768,  7707,  7707,  1772,  1773,  1776,  1782,  1771,   239,   239,
  7707,   239,   239,  7707,  7707,  7707,  1779,  1736,  1780,   239,
  1781,  1783,   239,   239,   239,  7707,-32768,-32768,  1784,-32768,
-32768,  1785,  1786,  1787,   239,-32768,-32768,-32768,-32768,  1789,
-32768,  1837,  1840,-32768
};

static const short yypgoto[] = {-32768,
-32768,     1,  1338,   441,  1154,   748,    85,-32768,-32768,  -235,
   -26,    60,    61,  -667,-32768,  -198,    -8,  1228,-32768,  -202,
-32768,   177,   145,  1463,   -13,  -464,-32768,  1480,  -117,-32768,
  1136,  -398,-32768,-32768,  -588,  1838,-32768,  1606,-32768,-32768,
  -177,-32768,-32768,-32768,-32768,-32768,-32768,  -149,-32768,    12,
    33,  1707,-32768,  -228,  -415,  1831,  -266,  -816,  -196,-32768,
  1174,   410,  1274,   650,-32768,  1064,  1211,  -168,-32768,-32768,
-32768,-32768,-32768,-32768,-32768, -1161,-32768,-32768,-32768,-32768,
  1039,-32768,  -465,  1919,    22
};


#define	YYLAST		9760


static const short yytable[] = {   146,
   393,   499,   406,   613,   617,   620,   400,   676,   463,   105,
   106,   107,   108,   681,   158,   159,   160,   161,   162,   163,
   325,   326,   810,   649,   866,   494,   200,   382,   812,   813,
   814,   815,   816,  1103,   690,   180,   233,   235,   420,   486,
   425,  1062,  1011,   212,   443,   443,   443,   443,   443,   443,
   443,   382,   715,   351,   719,   195,  1106,   724,   244,   382,
   195,   377,   584,   496,   319,   543,   432,   563,   195,     1,
   566,   486,   486,   448,   449,   450,   451,   452,   453,   695,
   484,   876,   201,   270,   216,   195,    76,   756,   756,   791,
   757,   757,   758,   758,   584,  1322,  1293,   290,   626,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   626,   495,   313,   314,   315,
   278,   485,   234,   234,   104,   270,   382,   433,  1104,   434,
  1321,  1105,   137,   202,   255,   195,   211,    76,   382,   773,
   195,   263,   230,    66,   231,   487,  1115,    31,   759,   759,
   196,  1107,  1072,   597,  1108,   196,   238,   238,  1169,   238,
   429,   593,   355,   196,   253,   346,   347,   348,   349,   350,
    47,    48,   392,    49,    50,    51,   271,   232,    86,   372,
   254,   517,    31,   319,   270,   290,   267,   657,   357,   238,
  1323,   408,  1113,   355,   366,  1013,  1014,  1322,   212,   611,
   178,   327,   328,   178,   142,    47,    48,   142,    49,    50,
    51,   613,   594,   397,   776,   519,   809,   413,   271,   429,
   268,   428,   272,   461,  -126,  -126,   557,   822,   213,    86,
   196,   382,   471,   212,   244,   196,   522,   408,   482,   216,
   195,   216,   239,   245,   367,   368,   369,   370,   533,   517,
   550,   137,   408,  1170,   408,   640,  1171,   431,   234,   518,
   264,   265,    66,   932,   644,   645,   459,   895,   171,   898,
   290,   901,   902,   272,    74,   242,   513,   271,   238,   269,
   541,   686,   519,   937,   692,  -125,  -125,   288,    76,   863,
   382,   211,  1323,   520,   263,   664,   460,   545,   546,   806,
   251,   272,   547,   548,   549,   252,   512,   595,   382,   596,
   382,   682,   267,   320,   523,   273,   252,   195,   137,   779,
   234,  -123,  -123,   183,   327,   328,    76,   628,   382,    66,
   188,   558,    76,    76,    76,   196,   431,   195,   560,   561,
   355,    76,    76,    76,    76,   238,   569,  1116,   172,   237,
   573,   574,   288,   460,    66,  1218,   506,   509,   821,   243,
   629,   403,   577,   404,   245,   626,   273,   327,   328,   378,
   238,   327,   328,   571,   572,   213,   290,  1081,  1082,  1083,
    86,   577,  1133,   213,   239,   623,  1007,  1008,   612,   616,
   619,   233,   235,   463,   273,   624,   787,  1134,   441,   441,
   441,   441,   441,   441,   441,   269,   696,   611,   802,   809,
   355,   967,   196,   288,   990,   856,   929,   189,   466,   245,
   819,   190,   809,   472,    86,    86,    86,   184,    66,   185,
   947,   484,   196,    86,    86,    86,    86,   164,   191,   460,
   408,   460,    75,   497,   238,   500,   502,   504,   507,   510,
   837,   255,   267,   382,   178,   212,   216,   382,   494,   230,
   288,   231,   195,   751,    31,   216,   216,   194,   327,   328,
   640,   689,   485,   408,   443,   443,   443,   234,   234,   230,
   859,   231,   195,    76,    31,   522,   268,   631,    48,   192,
   632,    50,    51,   220,   232,   551,   216,   195,   460,   697,
   193,   713,   840,   841,   842,  1219,  1220,    47,    48,   267,
    49,    50,    51,   198,   232,   367,   369,   267,   752,   699,
    76,   701,   702,   703,   704,   705,   706,   267,   707,   708,
   288,   709,   710,   165,   204,   166,   167,   168,   950,   169,
   717,   934,   672,   268,   428,   269,   691,   578,   211,   327,
   328,   382,   673,   585,   460,   169,   205,   196,   170,    31,
   195,   253,   428,   630,   921,   382,   213,   577,    63,    64,
   528,  1060,  1096,   529,   170,    86,   253,   254,   288,   576,
   221,   239,    47,    48,   222,    49,    50,    51,   290,   588,
   223,    74,   262,   577,  1070,   720,   612,   239,   382,   371,
   288,   290,   269,   224,   327,   328,   195,   738,   461,   408,
   269,    74,    86,   713,   412,   800,   551,   230,   718,   231,
   269,   382,    31,   829,   722,   355,   753,   832,   195,   878,
   725,   446,   446,   446,   446,   446,   446,   446,   237,   939,
   213,   995,   233,   459,   401,   633,    48,   137,   634,    50,
    51,   440,   232,   195,   320,   196,   195,   904,    66,   763,
   412,   368,   764,   243,   765,   186,   576,   187,   408,   408,
   754,   216,   861,   721,   238,   412,   696,   412,    66,   272,
   622,   460,   465,   243,   589,   799,   590,   195,   475,   476,
   477,  1010,   195,  1024,   238,   517,   252,   489,   490,   491,
   492,   254,   723,   544,   672,   361,   195,   960,   726,   195,
   268,  1179,   327,   328,   675,  1211,  1173,   421,  1212,   755,
   766,  1184,   756,   254,   519,   757,   551,   758,   234,   550,
    66,   522,   603,   422,   137,   253,   810,   908,   909,   910,
   911,   912,   732,  1114,   225,    66,   238,   734,   254,    74,
   243,   254,   578,   234,   226,  1140,   327,   328,   738,    66,
   585,   238,   746,  1077,   352,   353,   658,   564,   567,   697,
  1141,   253,   273,   727,  1229,   238,  1213,   362,   213,   363,
   869,   872,   659,   759,   227,   785,   288,   254,   794,   823,
   228,   288,   824,  1248,   290,   229,   966,   137,   288,   825,
  1046,   196,   728,   290,   254,   327,   328,   732,    66,   729,
   734,   614,   618,   621,   530,   288,   236,   531,   833,   878,
   733,   891,   327,   328,   238,   735,     3,   398,   441,   441,
   441,  1000,  1001,   865,   276,   892,   739,   893,   734,   608,
   747,   327,   328,     4,     5,     6,     7,   896,   852,   899,
   986,   230,   987,   231,   992,   993,    31,     8,  1031,   517,
   519,   275,  1022,   412,   517,   261,   519,   718,     9,   246,
   721,    10,   870,   873,    76,  1021,   646,   726,-32768,   850,
    48,   399,   851,    50,    51,   826,   232,   247,   827,   460,
  1230,  1017,  1018,  1231,  1019,  1020,   412,   879,   515,   718,
   734,   165,  1235,   166,   167,   168,   248,   169,  1214,   251,
  1085,  1215,  1333,   721,   252,   726,   894,  1236,   165,    76,
   166,   167,   168,   249,   169,   897,   170,   900,   897,  1064,
   900,   734,   517,   327,   328,   519,   900,  1191,  1192,  1266,
   250,  1074,  1196,   170,  1197,   671,  1189,  1271,  1277,  1278,
   734,   274,    11,    12,    13,   294,    14,    15,    16,    17,
    18,   290,    19,    20,   290,   311,    86,   290,   718,  1216,
   362,   721,   363,   989,  1079,   312,   991,  1118,  1232,   662,
   718,  1308,   663,    74,   288,   316,    29,    30,   767,    32,
    33,    34,    35,   288,   627,   721,   408,    29,    30,   748,
    32,    33,    34,    35,   562,  1012,  1180,   565,   568,  1237,
  1243,    86,  1120,  1244,   395,  1185,   317,   900,   377,   614,
   318,   327,   328,  1080,   380,   900,   718,   721,  1279,  1295,
   457,   165,   412,   166,   167,   168,  1225,   169,    55,    56,
    57,    58,    59,    60,  1037,  1228,    62,   460,  1132,    55,
    56,    57,    58,    59,    60,  1038,   170,    62,  1139,   900,
   440,   446,   446,   446,   427,   362,   362,   363,   363,   942,
   290,  1039,   455,   290,   185,   327,   328,   327,   328,   290,
    55,    56,    57,    58,    59,    60,   327,   328,   435,   327,
   328,   412,   412,   533,   382,  1040,   382,   864,   396,   430,
    76,  1041,   168,  1176,   169,   514,   821,   327,   328,   403,
   943,   404,  1255,    73,   439,  1256,   327,   328,   454,  1181,
   327,   328,   730,   170,  1296,   731,  1186,   575,   264,   265,
   436,   327,   328,   436,   744,  1194,  1195,   745,   245,    66,
  1199,  1200,  1201,  1202,  1102,   290,   437,   327,   328,    76,
   252,   288,  -124,  -124,   288,   238,   178,   288,   516,   426,
    76,   358,   359,   335,   336,   337,   338,   330,   521,   327,
   328,   327,   328,  1257,   456,    95,   187,   327,   328,   327,
   328,   -66,   258,   259,   260,    76,   460,   954,   362,  1242,
   363,   532,    86,  1246,  1247,   916,   460,   257,   917,  1100,
   257,   258,   259,   260,   258,   259,   260,   251,  1088,    76,
   670,   197,   252,   534,   382,   916,   257,   678,   922,   968,
   258,   259,   260,   331,   332,   217,    95,   435,   955,   330,
   957,   339,   340,   327,   328,   341,   342,   343,   -66,   241,
    95,    86,   -66,   -66,   -66,   679,   267,   256,   330,   460,
  1109,   257,    86,  1110,   256,   258,   259,   260,   680,   730,
   288,    76,   961,   288,   918,  1292,   919,   257,   460,   288,
  1188,   258,   259,   260,   257,   994,   272,    86,   258,   259,
   260,   455,   170,   601,   292,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   559,   609,   341,   342,   343,
   730,    86,   257,  1193,   331,   332,   258,   259,   260,   580,
   323,   730,   339,   340,  1198,   257,   341,   342,   343,   258,
   259,   260,  1222,   364,   365,  1349,  1350,   257,  1352,  1353,
   579,   258,   259,   260,   184,   288,   601,  1360,  1233,  1234,
  1363,  1364,  1365,  1238,  1239,  1240,  1241,  1297,   581,   292,
   257,  1258,  1375,    86,   258,   259,   260,   256,   256,   256,
   256,    95,   373,   374,   375,   376,   379,   730,   381,   582,
  1245,   384,   217,   606,   635,   586,   362,    95,   363,   257,
   217,   423,   583,   258,   259,   260,  1276,   831,  1144,   431,
  1280,  1281,   918,   587,   919,   445,   445,   445,   445,   445,
   445,   445,   598,   599,   604,   605,   637,   256,   257,   458,
   292,   607,   258,   259,   260,   469,    95,   638,   803,   412,
   473,    95,    95,    95,   641,  1075,   256,   626,  1175,   642,
    95,    95,    95,    95,   362,   433,   363,   434,   643,  1298,
   498,   647,   501,   503,   505,   508,   511,   648,   433,   362,
   434,   363,   650,   651,   652,   653,  1117,   292,   166,   167,
   168,   654,   169,   655,    87,   358,   359,   335,   336,   337,
   338,   585,   257,   327,   328,   656,   258,   259,   260,   257,
   661,   170,   257,   258,   259,   260,   258,   259,   260,   677,
   665,   683,   554,  1358,  1359,   257,  1361,  1362,   585,   258,
   259,   260,   685,   688,  1369,  1135,   260,  1372,  1373,  1374,
    31,   693,   251,  1090,   214,    87,  1142,   252,   694,  1380,
   251,  1158,   700,   712,  1174,   252,   714,   292,   240,    87,
   251,  1160,   740,    47,    48,   252,    49,    50,    51,   736,
   737,  1135,   749,   750,   469,   741,   742,   743,   760,   761,
   381,   363,   427,   178,   140,   428,   772,   782,   790,   783,
   793,   804,   805,   217,   256,  1178,   807,   810,   820,   828,
   830,   835,    95,   289,   434,   292,   838,   845,   241,   839,
   843,   846,   847,   848,   849,   854,   855,   862,   486,   868,
   875,   884,   886,   924,   636,   888,   890,   292,   905,   321,
   904,   906,   907,   913,   914,   915,   923,   925,   926,    95,
   927,   945,   959,   554,   962,   963,   969,  1221,   964,   972,
   973,   970,   976,   971,   623,   988,   974,   996,   256,   256,
   660,   997,   998,   999,   672,  1002,  1003,   217,   289,  1004,
  1009,  1024,  1015,  1005,  1016,  1026,  1047,  1033,  1006,  1035,
    87,   323,  1042,  1043,  1044,  1097,  1045,  1124,  1065,   256,
  1048,   214,  1050,  1066,  1076,  1099,    87,  1086,  1089,   214,
   240,  1091,  1098,  1149,  1111,  1101,  1112,  1104,  1107,  1123,
  1125,  1109,  1126,  1127,   442,   442,   442,   442,   442,   442,
   442,  1137,  1150,  1143,  1145,  1154,  1168,  1251,  1166,   289,
  1155,  1156,  1157,  1161,   467,    87,  1162,  1163,  1167,   321,
    87,    87,    87,  1165,  1085,  1088,  1090,  1172,  1177,    87,
    87,    87,    87,   554,  1170,  1183,  1190,  1203,  1207,  1208,
  1209,  1210,  1158,  1217,  1254,  1160,  1223,  1226,  1263,  1249,
  1312,  1282,  1250,  1283,  1284,  1267,   289,  1268,  1252,   469,
  1272,  1273,  1274,  1253,  1275,   769,  1285,   381,  1286,   770,
   771,  1287,   775,   778,   781,  1288,  1291,  1289,   784,   786,
   789,  1305,   792,  1290,   256,   217,   256,  1299,  1300,  1302,
  1303,   552,  1311,   292,  1314,  1317,  1309,  1310,   292,  1318,
  1319,  1320,   268,  1367,  1324,   292,  1325,  1313,  1315,  1326,
  1327,  1316,  1328,  1329,  1330,  1331,  1338,  1334,   556,  1335,
  1341,  1339,   292,  1340,  1344,   834,   289,  1336,  1337,  1342,
  1343,  1345,  1346,  1347,  1351,   445,   445,   445,  1354,  1355,
  1348,   844,  1356,   467,  1357,  1366,  1383,  1368,  1370,  1384,
  1371,  1376,  1377,  1378,  1379,   853,  1381,   867,  1164,   818,
   711,   880,   214,   345,   768,   958,   836,   977,     0,     0,
     0,    87,     0,     0,   289,     0,     0,   240,     0,   871,
   874,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   240,     0,     0,   289,     0,     0,   215,
     0,     0,     0,     0,     0,     0,     0,     0,    87,     0,
     0,     0,   552,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   103,     0,     0,     0,     0,     0,   214,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   321,     0,     0,     0,     0,   928,   931,     0,   291,   936,
     0,     0,   941,     0,     0,     0,   946,     0,   949,     0,
   953,     0,     0,    95,     0,     0,     0,   256,     0,     0,
   219,   103,   256,     0,   322,     0,     0,     0,     0,     0,
     0,   292,     0,     0,     0,   103,     0,     0,     0,     0,
   292,     0,     0,     0,     0,     0,   716,     0,   716,     0,
     0,   716,     0,     0,     0,     0,     0,     0,    95,     0,
     0,     0,   552,   291,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   293,
     0,     0,     0,     0,     0,     0,   291,     0,   467,     0,
     0,     0,     0,     0,   291,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   324,     0,     0,     0,     0,
     0,     0,     0,     0,   214,     0,     0,     0,     0,     0,
     0,     0,   289,     0,     0,     0,     0,   289,     0,   468,
     0,     0,     0,     0,   289,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   293,     0,     0,  1049,     0,     0,
     0,   289,  1052,     0,     0,     0,   103,  1056,     0,     0,
     0,     0,  1059,     0,   442,   442,   442,   219,     0,     0,
     0,   291,   103,     0,     0,   219,     0,     0,     0,     0,
     0,     0,     0,   256,     0,    95,     0,     0,     0,     0,
   447,   447,   447,   447,   447,   447,   447,     0,   292,     0,
     0,   292,     0,     0,   292,     0,   553,     0,     0,     0,
   470,   103,     0,     0,     0,   474,   103,   103,   103,     0,
     0,     0,     0,     0,     0,   103,   103,   103,   103,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    95,
     0,   291,     0,     0,     0,     0,   716,     0,     0,   716,
     0,   716,   293,     0,   716,     0,     0,     0,   468,     0,
     0,   716,     0,   716,     0,   716,   716,   716,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   291,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   555,    95,   291,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    95,
     0,     0,    87,     0,     0,     0,     0,   292,     0,     0,
   292,   291,     0,     0,     0,     0,   292,     0,     0,     0,
   289,     0,   293,     0,    95,     0,     0,   468,     0,   289,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   470,
     0,     0,     0,     0,     0,     0,     0,    87,    95,     0,
     0,   291,   716,   716,   716,     0,     0,     0,   219,     0,
     0,     0,     0,     0,     0,   322,     0,   103,     0,     0,
   293,     0,     0,     0,     0,   885,     0,   887,     0,     0,
   889,     0,   292,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   293,   903,     0,     0,     0,     0,     0,     0,
    95,     0,     0,     0,   103,     0,     0,   716,   555,  1025,
     0,     0,     0,   716,     0,   716,     0,   716,     0,   716,
   716,   716,   716,     0,     0,   716,     0,     0,   716,     0,
     0,     0,   219,   716,     0,     0,     0,   553,     0,     0,
     0,     0,     0,     0,     0,     0,   324,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   553,     0,     0,     0,     0,     0,   774,
   777,   780,     0,     0,    87,     0,     0,   788,     0,   885,
   889,     0,     0,     0,     0,     0,     0,   289,     0,   291,
   289,     0,     0,   289,     0,     0,     0,   291,     0,     0,
     0,     0,   291,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   716,   716,     0,   555,     0,
     0,     0,     0,     0,     0,     0,   291,     0,    87,     0,
     0,     0,     0,  1023,     0,     0,     0,     0,     0,  1027,
     0,  1028,     0,  1029,   470,  1030,     0,   885,   889,     0,
     0,  1032,     0,   716,  1034,     0,     0,     0,     0,  1036,
   716,     0,   716,     0,   716,     0,     0,     0,     0,     0,
   219,     0,     0,     0,     0,     0,     0,    87,   293,     0,
     0,     0,     0,   293,     0,     0,     0,     0,    87,     0,
     0,     0,     0,     0,     0,     0,   289,     0,     0,   289,
     0,     0,     0,     0,     0,   289,     0,   293,     0,     0,
     0,     0,     0,    87,     0,     0,     0,     0,     0,     0,
   447,   447,   447,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    87,     0,     0,
     0,  1032,  1034,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   930,     0,   933,   935,     0,   938,   940,
     0,   944,     0,     0,   948,     0,   951,   952,     0,   956,
     0,   289,     0,     0,     0,     0,     0,     0,     0,  1119,
     0,     0,     0,     0,     0,     0,  1034,     0,  1121,    87,
  1122,     0,     0,     0,     0,   291,     0,     0,     0,     0,
     0,     0,     0,     0,   291,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   103,   716,
   716,     0,     0,     0,   716,   716,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   293,     0,     0,     0,
     0,     0,     0,     0,     0,   293,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   716,     0,     0,     0,     0,
   716,     0,     0,   103,     0,     0,   716,   716,     0,  1051,
     0,  1053,  1054,     0,  1055,     0,  1057,  1058,     0,     0,
     0,  1061,  1063,     0,     0,     0,     0,  1067,     0,  1068,
  1069,     0,     0,  1071,  1073,     0,     0,   716,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   291,     0,     0,   291,     0,     0,   291,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   885,     0,     0,     0,
     0,   885,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  1034,     0,     0,     0,     0,  1034,     0,     0,     0,
   103,     0,  1128,   885,     0,     0,  1129,     0,     0,  1130,
  1131,     0,     0,   293,     0,     0,   293,     0,     0,   293,
  1138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1034,     0,     0,     0,     0,     0,     0,
     0,   291,     0,     0,   291,     0,     0,     0,     0,     0,
   291,     0,     0,     0,   103,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1182,     0,     0,     0,     0,     0,
     0,  1187,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   103,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   103,     0,   291,     0,     0,     0,
     0,     0,   293,     0,     0,   293,     0,     0,     0,     0,
  1224,   293,     0,     0,     0,  1227,     0,   857,     0,   103,
     0,     0,     0,     0,   109,     0,     0,     0,     0,     0,
     0,   110,     0,     0,     0,     0,    29,    30,     0,    32,
    33,    34,    35,   103,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1259,     0,  1260,  1261,     0,  1262,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   402,     0,
     0,   403,     0,   404,     0,     0,     0,   293,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   112,   103,    62,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   965,     0,   137,     0,     0,     0,
     0,   109,     0,     0,     0,     0,   138,   405,   110,     0,
   139,     0,     0,    29,    30,     0,    32,    33,    34,    35,
     0,     0,     0,   858,   178,     0,   140,   141,   142,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   615,     0,     0,   403,     0,
   404,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   398,     0,   137,     0,     0,     0,     0,   109,     0,
     0,     0,     0,   138,    66,   110,     0,   139,     0,     0,
    29,    30,     0,    32,    33,    34,    35,     0,     0,     0,
    73,   178,     0,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   111,     0,     0,   399,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   112,     0,
    62,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   860,     0,
   137,     0,     0,     0,     0,   109,     0,     0,     0,     0,
   138,    66,   110,     0,   139,     0,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,    73,     0,     0,
   140,   141,   142,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,    22,     0,
     0,     0,    23,   206,    73,    25,    26,   140,   141,   142,
   173,     0,    27,     0,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,   174,   175,    38,    39,    40,    41,
     0,    42,    43,    44,     0,    45,    46,     0,     0,     0,
    47,    48,     0,    49,    50,    51,     0,   207,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    54,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,    61,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,    63,    64,     0,    65,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   138,   208,     0,     0,   139,
     0,    67,   209,    68,    69,    70,    71,    72,     0,     0,
     0,     0,    73,   178,    74,   140,   141,   142,    22,     0,
     0,     0,    23,   206,     0,    25,    26,     0,     0,     0,
   173,     0,   414,     0,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,   174,   175,    38,    39,    40,    41,
     0,    42,    43,    44,     0,    45,    46,     0,     0,     0,
   415,    48,     0,   416,   388,   417,     0,   207,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    54,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,    61,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,   418,   419,     0,    65,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   138,   208,     0,     0,   139,
     0,    67,   209,    68,    69,    70,    71,    72,     0,     0,
     0,     0,    73,   178,   391,   140,   141,   142,    22,     0,
     0,     0,    23,   206,     0,    25,    26,     0,     0,     0,
   173,     0,    27,     0,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,   174,   175,    38,    39,    40,    41,
     0,    42,    43,    44,     0,    45,    46,     0,     0,     0,
   666,    48,     0,   667,    50,   668,     0,   207,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    54,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,    61,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,   669,    64,     0,    65,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   138,   208,     0,     0,   139,
     0,    67,   209,    68,    69,    70,    71,    72,     0,     0,
     0,     0,    73,   178,    74,   140,   141,   142,    22,     0,
     0,     0,    23,    24,     0,    25,    26,     0,     0,     0,
     0,     0,    27,     0,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,     0,     0,    38,    39,    40,    41,
     0,    42,    43,    44,     0,    45,    46,     0,     0,     0,
    47,    48,     0,    49,    50,    51,     0,   464,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    54,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,     0,    61,    62,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    63,    64,     0,    65,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    66,     0,     0,     0,
     0,    67,     0,    68,    69,    70,    71,    72,     0,     0,
     0,    22,    73,     0,    74,    23,    24,     0,    25,    26,
     0,     0,     0,     0,     0,    27,     0,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,     0,     0,    38,
    39,    40,    41,     0,    42,    43,    44,     0,    45,    46,
     0,     0,     0,    47,    48,     0,    49,    50,    51,     0,
    52,     0,     0,    53,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    54,     0,     0,     0,     0,
    55,    56,    57,    58,    59,    60,     0,    61,    62,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    63,    64,     0,    65,     0,   109,
     0,     0,     0,     0,     0,     0,   173,     0,   279,     0,
     0,    29,    30,     0,    32,    33,    34,    35,     0,    66,
   174,   175,     0,     0,    67,     0,    68,    69,    70,    71,
    72,     0,     0,     0,     0,    73,   280,    74,     0,   281,
   282,   283,     0,   354,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,   285,   286,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   138,    66,     0,     0,   139,     0,     0,   177,     0,
     0,     0,     0,     0,     0,     0,     0,   109,    73,   178,
   287,   140,   141,   142,   110,     0,   385,     0,   231,    29,
    30,    31,    32,    33,    34,    35,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   386,    48,     0,   387,   388,   389,
     0,   390,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,   285,   286,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   138,
    66,     0,     0,   139,     0,   243,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   109,    73,     0,   391,   140,
   141,   142,   173,     0,   279,     0,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,   174,   175,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   524,     0,     0,   525,   282,   526,     0,   354,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,   527,   286,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,   177,     0,     0,     0,     0,     0,
     0,     0,     0,   109,    73,   178,   287,   140,   141,   142,
   173,     0,   279,     0,     0,    29,    30,     0,    32,    33,
    34,    35,     0,     0,   174,   175,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   280,     0,     0,   281,   282,   283,     0,   639,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,   285,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   138,    66,     0,     0,   139,
     0,     0,   209,     0,     0,     0,     0,     0,     0,     0,
     0,   109,    73,   178,   287,   140,   141,   142,   173,     0,
   279,     0,     0,    29,    30,     0,    32,    33,    34,    35,
     0,     0,   174,   175,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   524,     0,
     0,   525,   282,   526,     0,   639,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,   527,
   286,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,     0,     0,     0,     0,     0,   109,
     0,     0,     0,   138,    66,     0,   110,   139,   279,     0,
   209,    29,    30,     0,    32,    33,    34,    35,     0,     0,
    73,   178,   287,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   280,     0,     0,   281,
   282,   283,     0,   610,     0,     0,   403,     0,   404,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,   285,   286,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,   109,     0,     0,
     0,   138,   405,     0,   110,   139,   279,     0,     0,    29,
    30,     0,    32,    33,    34,    35,     0,     0,    73,   178,
   287,   140,   141,   142,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   524,     0,     0,   525,   282,   526,
     0,   610,     0,     0,   403,     0,   404,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,   527,   286,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,     0,   109,     0,     0,     0,   138,
   405,     0,   110,   139,   535,     0,     0,    29,    30,    31,
    32,    33,    34,    35,     0,     0,    73,   178,   287,   140,
   141,   142,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   536,    48,     0,   537,    50,   538,     0,   111,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,   539,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,     0,   109,     0,     0,     0,   138,    66,     0,
   110,   139,   279,     0,     0,    29,    30,     0,    32,    33,
    34,    35,     0,     0,    73,   178,   540,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   280,     0,     0,   281,   282,   283,     0,   808,     0,     0,
   403,     0,   404,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,   285,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,   109,     0,     0,     0,   138,    66,     0,   110,   139,
   279,     0,     0,    29,    30,     0,    32,    33,    34,    35,
     0,     0,    73,     0,   287,   140,   141,   142,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   524,     0,
     0,   525,   282,   526,     0,   808,     0,     0,   403,     0,
   404,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,   527,
   286,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,     0,     0,     0,     0,     0,   109,
     0,     0,     0,   138,    66,     0,   110,   139,   279,     0,
     0,    29,    30,     0,    32,    33,    34,    35,     0,     0,
    73,     0,   287,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   524,     0,     0,   525,
   282,   526,     0,   602,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,   527,   286,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,   109,     0,     0,
     0,   138,   208,     0,   110,   139,   279,   243,     0,    29,
    30,     0,    32,    33,    34,    35,     0,     0,    73,     0,
   287,   140,   141,   142,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   795,     0,     0,   796,   282,   797,
     0,   602,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,   798,   286,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,     0,   109,     0,     0,     0,   138,
    66,     0,   110,   139,   279,   243,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,    73,     0,   287,   140,
   141,   142,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   280,     0,     0,   281,   282,   283,     0,   284,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,   285,   286,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,     0,   109,     0,     0,     0,   138,    66,     0,
   110,   139,   279,     0,     0,    29,    30,     0,    32,    33,
    34,    35,     0,     0,    73,     0,   287,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   524,     0,     0,   525,   282,   526,     0,   284,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,   527,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,   109,     0,     0,     0,   138,    66,     0,   110,   139,
   279,     0,     0,    29,    30,     0,    32,    33,    34,    35,
     0,     0,    73,     0,   287,   140,   141,   142,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   524,     0,
     0,   525,   282,   526,     0,   975,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,   527,
   286,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,     0,     0,     0,     0,     0,   109,
     0,     0,     0,   138,    66,     0,   110,   139,   279,     0,
     0,    29,    30,     0,    32,    33,    34,    35,     0,     0,
    73,     0,   287,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   795,     0,     0,   796,
   282,   797,     0,   284,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,   798,   286,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,   109,     0,     0,
     0,   138,    66,     0,   110,   139,   279,     0,     0,    29,
    30,     0,    32,    33,    34,    35,     0,     0,    73,     0,
   287,   140,   141,   142,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   280,     0,     0,   281,   282,   283,
     0,  1084,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,   285,   286,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,     0,   109,     0,     0,     0,   138,
    66,     0,   110,   139,   279,     0,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,    73,     0,   287,   140,
   141,   142,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   280,     0,     0,   281,   282,   283,     0,  1087,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,   285,   286,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,     0,   109,     0,     0,     0,   138,    66,     0,
   110,   139,   279,     0,     0,    29,    30,     0,    32,    33,
    34,    35,     0,     0,    73,     0,   287,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1146,     0,     0,  1147,   282,   526,     0,   284,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,  1148,   286,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,   109,     0,     0,     0,   138,    66,     0,   110,   139,
   279,     0,     0,    29,    30,     0,    32,    33,    34,    35,
     0,     0,    73,     0,   287,   140,   141,   142,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1151,     0,
     0,  1152,   282,   526,     0,   284,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,  1153,
   286,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,     0,     0,     0,     0,     0,   109,
     0,     0,     0,   138,    66,     0,   110,   139,   279,     0,
     0,    29,    30,     0,    32,    33,    34,    35,     0,     0,
    73,     0,   287,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   280,     0,     0,   281,
   282,   283,     0,  1159,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,   285,   286,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,   109,     0,     0,
     0,   138,    66,     0,   110,   139,   279,     0,     0,    29,
    30,     0,    32,    33,    34,    35,     0,     0,    73,     0,
   287,   140,   141,   142,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1204,     0,     0,  1205,   282,   526,
     0,   284,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,  1206,   286,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,   109,     0,     0,     0,     0,   138,
    66,   110,     0,   139,     0,     0,    29,    30,    31,    32,
    33,    34,    35,     0,     0,     0,    73,     0,   287,   140,
   141,   142,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    47,    48,     0,    49,    50,    51,     0,   284,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   112,     0,    62,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,     0,   459,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   137,     0,     0,     0,
     0,   109,     0,     0,     0,     0,   138,    66,   110,     0,
   139,     0,     0,    29,    30,    31,    32,    33,    34,    35,
     0,     0,     0,    73,     0,     0,   140,   141,   142,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    47,    48,
     0,    49,    50,    51,     0,   817,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,   459,
     0,     0,     0,     0,   109,     0,     0,     0,     0,     0,
     0,   173,     0,   137,     0,     0,    29,    30,     0,    32,
    33,    34,    35,   138,    66,   174,   175,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    73,     0,     0,   140,   141,   142,     0,     0,   176,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   112,     0,    62,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,     0,     0,     0,     0,     0,     0,   109,     0,     0,
     0,     0,     0,     0,   173,     0,   137,     0,     0,    29,
    30,     0,    32,    33,    34,    35,   138,    66,   174,   175,
   139,     0,     0,   177,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    73,   178,     0,   140,   141,   142,     0,
     0,   424,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,     0,     0,     0,   109,     0,
     0,     0,     0,     0,     0,   110,     0,     0,     0,   137,
    29,    30,     0,    32,    33,    34,    35,     0,     0,   138,
    66,     0,     0,   139,     0,     0,   209,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    73,   178,     0,   140,
   141,   142,   402,     0,     0,   403,     0,   404,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   112,     0,
    62,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,     0,     0,     0,     0,   109,
     0,     0,     0,     0,     0,     0,   110,     0,     0,     0,
   137,    29,    30,     0,    32,    33,    34,    35,     0,     0,
   138,   405,     0,     0,   139,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    73,   178,     0,
   140,   141,   142,   402,     0,     0,   403,     0,   404,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,     0,     0,     0,
     0,     0,   109,     0,     0,     0,     0,     0,     0,   173,
     0,   478,     0,     0,    29,    30,     0,    32,    33,    34,
    35,   138,   405,   174,   175,   139,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   479,   178,
     0,   140,   141,   142,     0,     0,   111,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   112,     0,    62,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
     0,     0,     0,   109,     0,     0,     0,     0,     0,     0,
   110,     0,     0,     0,   137,    29,    30,     0,    32,    33,
    34,    35,     0,     0,   138,    66,     0,     0,   139,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    73,   178,     0,   140,   141,   142,   615,     0,     0,
   403,     0,   404,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,     0,     0,     0,   109,     0,     0,     0,     0,     0,
     0,   110,     0,     0,     0,   137,    29,    30,     0,    32,
    33,    34,    35,     0,     0,   138,    66,     0,     0,   139,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    73,   178,     0,   140,   141,   142,   111,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   112,     0,    62,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,     0,     0,     0,     0,   109,     0,     0,     0,     0,
     0,     0,   110,     0,     0,     0,   137,    29,    30,     0,
    32,    33,    34,    35,     0,     0,   138,    66,     0,     0,
   139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    73,     0,     0,   140,   141,   142,   199,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,     0,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,    73,     0,     0,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   978,
     0,     0,     0,     0,    73,     0,     0,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   981,
     0,     0,     0,     0,   979,     0,     0,   980,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,   982,     0,     0,   983,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,   984,     0,     0,   985,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,   979,     0,     0,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,   982,     0,     0,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,   984,     0,     0,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,  1093,
     0,     0,     0,     0,  1092,     0,     0,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,  1094,     0,     0,  1095,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,  1094,     0,     0,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,   979,     0,     0,  1264,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,   982,     0,     0,  1265,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,   979,     0,     0,  1269,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,   982,     0,     0,  1270,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,  1094,     0,     0,  1301,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,  1094,     0,     0,  1304,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,   979,     0,     0,  1306,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,   982,     0,     0,  1307,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   110,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,   111,
     0,     0,     0,     0,  1094,     0,     0,  1332,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    73,     0,     0,   140,   141,   142
};

static const short yycheck[] = {    13,
   199,   268,   205,   402,   403,   404,   203,   473,   237,     9,
    10,    11,    12,     1,    14,    15,    16,    17,    18,    19,
   138,   139,    43,   439,   692,   261,    40,    43,   617,   618,
   619,   620,   621,    52,     1,    24,    63,    64,   207,    43,
   209,    57,   859,    52,   222,   223,   224,   225,   226,   227,
   228,    43,   517,   171,   519,    52,    52,   522,    67,    43,
    52,    52,    52,   266,    52,   294,    53,    15,    52,    13,
    15,    43,    43,   223,   224,   225,   226,   227,   228,   495,
    16,     9,     1,    18,    52,    52,     2,    45,    45,     1,
    48,    48,    50,    50,    52,    52,  1258,   111,   119,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   119,    52,   131,   132,   133,
   109,    57,    63,    64,   147,    18,    43,   114,   147,   116,
  1292,   150,   120,    52,    74,    52,    52,    53,    43,   131,
    52,    81,    17,   131,    19,   117,   117,    22,   106,   106,
   147,   147,    57,   382,   150,   147,   147,   147,    52,   147,
    53,     1,   176,   147,   131,   165,   166,   167,   168,   169,
    45,    46,   199,    48,    49,    50,   111,    52,     2,   188,
   147,    53,    22,    52,    18,   199,    18,   454,   177,   147,
   147,   205,  1009,   207,   183,   863,   864,    52,   207,   402,
   148,   129,   130,   148,   152,    45,    46,   152,    48,    49,
    50,   610,    52,   202,   131,    53,   615,   206,   111,    53,
    52,    53,    18,   237,   117,   118,   344,   626,    52,    53,
   147,    43,   246,   242,   243,   147,    53,   251,   252,   207,
    52,   209,    66,    67,   184,   185,   186,   187,    53,    53,
    52,   120,   266,   147,   268,   424,   150,    53,   199,   131,
   117,   118,   131,    16,   433,   434,   106,   732,    52,   734,
   284,   736,   737,    18,   149,    52,   276,   111,   147,   111,
   294,    43,    53,    16,   487,   117,   118,   111,   204,   688,
    43,   207,   147,   131,   234,    53,   237,   311,   312,    53,
    52,    18,   316,   317,   318,    57,   274,   147,    43,   149,
    43,    52,    18,   137,   131,   111,    57,    52,   120,   131,
   261,   117,   118,    52,   129,   130,   242,   131,    43,   131,
    52,   345,   248,   249,   250,   147,    53,    52,   352,   353,
   354,   257,   258,   259,   260,   147,   360,  1015,   147,    52,
   364,   365,   176,   294,   131,  1172,   272,   273,    52,   136,
   131,    55,   371,    57,   188,   119,   111,   129,   130,   193,
   147,   129,   130,   362,   363,   199,   390,   966,   967,   968,
   204,   390,    43,   207,   208,    43,   852,   853,   402,   403,
   404,   418,   419,   622,   111,    53,   131,    58,   222,   223,
   224,   225,   226,   227,   228,   111,    18,   610,   605,   808,
   424,   810,   147,   237,   830,   682,   131,    52,   242,   243,
   623,    52,   821,   247,   248,   249,   250,   147,   131,   149,
    16,    16,   147,   257,   258,   259,   260,    14,    52,   380,
   454,   382,     2,   267,   147,   269,   270,   271,   272,   273,
   647,   391,    18,    43,   148,   464,   424,    43,   694,    17,
   284,    19,    52,    43,    22,   433,   434,   147,   129,   130,
   639,   485,    57,   487,   652,   653,   654,   418,   419,    17,
   683,    19,    52,   399,    22,    53,    52,    45,    46,    52,
    48,    49,    50,    53,    52,   319,   464,    52,   439,   111,
    52,   515,   652,   653,   654,  1173,  1174,    45,    46,    18,
    48,    49,    50,    52,    52,   455,   456,    18,    43,   498,
   436,   500,   501,   502,   503,   504,   505,    18,   507,   508,
   354,   510,   511,   110,    55,   112,   113,   114,    16,   116,
    53,   131,    43,    52,    53,   111,   486,   371,   464,   129,
   130,    43,    53,   377,   495,   116,    52,   147,   135,    22,
    52,   131,    53,   131,   761,    43,   390,   576,   106,   107,
    45,    16,   988,    48,   135,   399,   131,   147,   402,    52,
   147,   405,    45,    46,    52,    48,    49,    50,   602,    52,
    52,   149,   147,   602,    16,    53,   610,   421,    43,    52,
   424,   615,   111,    52,   129,   130,    52,    53,   622,   623,
   111,   149,   436,   627,   205,   604,   440,    17,   131,    19,
   111,    43,    22,   637,    53,   639,    43,   641,    52,    53,
    53,   222,   223,   224,   225,   226,   227,   228,    52,   131,
   464,   838,   669,   106,   204,    45,    46,   120,    48,    49,
    50,    52,    52,    52,   478,   147,    52,    53,   131,    45,
   251,   601,    48,   136,    50,   147,    52,   149,   682,   683,
    43,   639,   686,   131,   147,   266,    18,   268,   131,    18,
    52,   622,   242,   136,   147,   131,   149,    52,   248,   249,
   250,    52,    52,    53,   147,    53,    57,   257,   258,   259,
   260,   147,   131,   294,    43,    42,    52,   131,   131,    52,
    52,  1127,   129,   130,    53,    45,  1115,   131,    48,    43,
   106,  1137,    45,   147,    53,    48,   550,    50,   669,    52,
   131,    53,   131,   147,   120,   131,    43,   751,   752,   753,
   754,   755,    53,  1010,    52,   131,   147,    53,   147,   149,
   136,   147,   576,   694,    52,    43,   129,   130,    53,   131,
   584,   147,    53,   962,   121,   122,   131,   358,   359,   111,
    58,   131,   111,   131,  1190,   147,   106,   114,   602,   116,
   696,   697,   147,   106,    52,   131,   610,   147,   131,    53,
    52,   615,    53,  1209,   808,   147,   810,   120,   622,    53,
   918,   147,   131,   817,   147,   129,   130,    53,   131,   131,
    53,   402,   403,   404,    45,   639,    52,    48,   642,    53,
   131,    53,   129,   130,   147,   131,    10,     1,   652,   653,
   654,   845,   846,   689,    43,    53,   131,    53,    53,   399,
   131,   129,   130,    27,    28,    29,    30,    53,   672,    53,
    53,    17,    53,    19,   833,   834,    22,    41,    53,    53,
    53,    53,   876,   454,    53,    55,    53,   131,    52,    52,
   131,    55,   696,   697,   790,   875,   436,   131,   135,    45,
    46,    55,    48,    49,    50,   131,    52,    52,   131,   830,
    53,   870,   871,    53,   873,   874,   487,   131,    42,   131,
    53,   110,    53,   112,   113,   114,    52,   116,    45,    52,
    53,    48,  1311,   131,    57,   131,   131,    53,   110,   835,
   112,   113,   114,    52,   116,   131,   135,   131,   131,   943,
   131,    53,    53,   129,   130,    53,   131,   131,   131,    53,
    52,   955,   131,   135,   131,    53,  1143,    53,    53,    53,
    53,    44,   136,   137,   138,    52,   140,   141,   142,   143,
   144,   975,   146,   147,   978,    52,   790,   981,   131,   106,
   114,   131,   116,   829,   963,    52,   832,    56,   131,    45,
   131,    53,    48,   149,   808,    52,    20,    21,   579,    23,
    24,    25,    26,   817,    42,   131,  1010,    20,    21,    53,
    23,    24,    25,    26,    53,   861,    58,   358,   359,   131,
   131,   835,  1026,   131,    54,    58,    52,   131,    52,   610,
    52,   129,   130,   964,    52,   131,   131,   131,   131,    52,
   131,   110,   623,   112,   113,   114,    58,   116,    72,    73,
    74,    75,    76,    77,    53,    58,    80,   988,  1062,    72,
    73,    74,    75,    76,    77,    53,   135,    80,  1072,   131,
    52,   652,   653,   654,    53,   114,   114,   116,   116,    16,
  1084,    53,   147,  1087,   149,   129,   130,   129,   130,  1093,
    72,    73,    74,    75,    76,    77,   129,   130,    53,   129,
   130,   682,   683,    53,    43,    53,    43,   688,    53,    53,
  1016,    53,   114,    53,   116,    56,    52,   129,   130,    55,
    57,    57,    45,   147,    52,    48,   129,   130,    52,  1133,
   129,   130,    45,   135,   147,    48,  1140,    53,   117,   118,
    43,   129,   130,    43,    45,  1149,  1150,    48,   962,   131,
  1154,  1155,  1156,  1157,  1000,  1159,    56,   129,   130,  1065,
    57,   975,   117,   118,   978,   147,   148,   981,   149,    53,
  1076,   121,   122,   123,   124,   125,   126,    63,   131,   129,
   130,   129,   130,   106,   147,     2,   149,   129,   130,   129,
   130,    53,   114,   115,   116,  1101,  1127,    16,   114,  1203,
   116,   131,  1016,  1207,  1208,    45,  1137,   110,    48,    58,
   110,   114,   115,   116,   114,   115,   116,    52,    53,  1125,
    53,    38,    57,    53,    43,    45,   110,    53,    48,   810,
   114,   115,   116,   119,   120,    52,    53,    53,    57,    63,
   790,   127,   128,   129,   130,   131,   132,   133,   110,    66,
    67,  1065,   114,   115,   116,    53,    18,    74,    63,  1190,
   147,   110,  1076,   150,    81,   114,   115,   116,    53,    45,
  1084,  1177,    48,  1087,     4,     5,     6,   110,  1209,  1093,
    53,   114,   115,   116,   110,   835,    18,  1101,   114,   115,
   116,   147,   135,   149,   111,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,    53,    56,   131,   132,   133,
    45,  1125,   110,    48,   119,   120,   114,   115,   116,    53,
   137,    45,   127,   128,    48,   110,   131,   132,   133,   114,
   115,   116,    53,   121,   122,  1339,  1340,   110,  1342,  1343,
    43,   114,   115,   116,   147,  1159,   149,  1351,  1194,  1195,
  1354,  1355,  1356,  1199,  1200,  1201,  1202,  1263,    43,   176,
   110,    53,  1366,  1177,   114,   115,   116,   184,   185,   186,
   187,   188,   189,   190,   191,   192,   193,    45,   195,    43,
    48,   198,   199,    53,    53,    43,   114,   204,   116,   110,
   207,   208,    53,   114,   115,   116,  1242,    53,    53,    53,
  1246,  1247,     4,    43,     6,   222,   223,   224,   225,   226,
   227,   228,    44,    43,    43,    35,    57,   234,   110,   236,
   237,    56,   114,   115,   116,   242,   243,    53,    56,  1010,
   247,   248,   249,   250,    57,    56,   253,   119,    56,   111,
   257,   258,   259,   260,   114,   114,   116,   116,   111,  1263,
   267,    12,   269,   270,   271,   272,   273,    56,   114,   114,
   116,   116,    53,    53,    43,    43,  1016,   284,   112,   113,
   114,    43,   116,    53,     2,   121,   122,   123,   124,   125,
   126,  1295,   110,   129,   130,    53,   114,   115,   116,   110,
    53,   135,   110,   114,   115,   116,   114,   115,   116,    53,
   131,    43,   319,  1349,  1350,   110,  1352,  1353,  1322,   114,
   115,   116,    53,   117,  1360,  1065,   116,  1363,  1364,  1365,
    22,    56,    52,    53,    52,    53,  1076,    57,   116,  1375,
    52,    53,    53,    12,  1115,    57,   131,   354,    66,    67,
    52,    53,   149,    45,    46,    57,    48,    49,    50,    53,
    53,  1101,    53,    53,   371,   131,   131,   131,    55,     9,
   377,   116,    53,   148,   150,    53,   131,    53,    55,   131,
    53,    39,    53,   390,   391,  1125,    53,    43,    53,    53,
    52,    57,   399,   111,   116,   402,    12,    57,   405,    53,
    53,    53,   131,   131,   131,    53,    53,    58,    43,    53,
    55,    53,    53,    43,   421,    53,    53,   424,   131,   137,
    53,   131,   131,   131,   131,   131,    53,    53,    53,   436,
    53,   117,   116,   440,    43,    52,    56,  1177,    52,    58,
    58,    56,    53,    56,    43,    52,    58,   117,   455,   456,
   457,    53,    53,    53,    43,    53,    53,   464,   176,    53,
    53,    53,    58,   131,    55,    52,    44,    53,   131,    53,
   188,   478,    53,    53,    53,    58,   131,    44,    55,   486,
    56,   199,    53,    53,    52,    58,   204,    53,    53,   207,
   208,    53,    53,    57,    53,    55,    53,   147,   147,    53,
    52,   147,    53,    52,   222,   223,   224,   225,   226,   227,
   228,    52,    57,    53,    53,    57,   147,    48,    52,   237,
    57,    57,    57,    53,   242,   243,    53,    53,    52,   247,
   248,   249,   250,    58,    53,    53,    53,    53,    52,   257,
   258,   259,   260,   550,   147,    56,    52,    57,    57,    57,
    52,    56,    53,    52,    48,    53,    53,    53,    53,   131,
   150,    53,   131,    53,    53,    58,   284,    58,   131,   576,
    58,    58,    58,   131,    58,   582,   131,   584,    53,   586,
   587,    53,   589,   590,   591,   131,    48,   131,   595,   596,
   597,    58,   599,   131,   601,   602,   603,    53,    53,    53,
    53,   319,   117,   610,    53,    53,    58,    58,   615,    53,
    53,   131,    52,    58,    53,   622,    53,   150,   150,    53,
    53,   150,    53,    53,    53,    53,    53,   150,   329,   150,
    53,    57,   639,    57,    53,   642,   354,   150,   150,    57,
    57,    53,    53,    53,    57,   652,   653,   654,    57,    57,
   150,   658,    57,   371,    53,    57,     0,    58,    58,     0,
    58,    58,    58,    58,    58,   672,    58,   694,  1101,   622,
   513,   716,   390,   147,   581,   792,   646,   819,    -1,    -1,
    -1,   399,    -1,    -1,   402,    -1,    -1,   405,    -1,   696,
   697,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   421,    -1,    -1,   424,    -1,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   436,    -1,
    -1,    -1,   440,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     2,    -1,    -1,    -1,    -1,    -1,   464,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   478,    -1,    -1,    -1,    -1,   772,   773,    -1,   111,   776,
    -1,    -1,   779,    -1,    -1,    -1,   783,    -1,   785,    -1,
   787,    -1,    -1,   790,    -1,    -1,    -1,   794,    -1,    -1,
    52,    53,   799,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,   808,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
   817,    -1,    -1,    -1,    -1,    -1,   517,    -1,   519,    -1,
    -1,   522,    -1,    -1,    -1,    -1,    -1,    -1,   835,    -1,
    -1,    -1,   550,   176,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
    -1,    -1,    -1,    -1,    -1,    -1,   199,    -1,   576,    -1,
    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   602,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   610,    -1,    -1,    -1,    -1,   615,    -1,   242,
    -1,    -1,    -1,    -1,   622,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   176,    -1,    -1,   924,    -1,    -1,
    -1,   639,   929,    -1,    -1,    -1,   188,   934,    -1,    -1,
    -1,    -1,   939,    -1,   652,   653,   654,   199,    -1,    -1,
    -1,   284,   204,    -1,    -1,   207,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   960,    -1,   962,    -1,    -1,    -1,    -1,
   222,   223,   224,   225,   226,   227,   228,    -1,   975,    -1,
    -1,   978,    -1,    -1,   981,    -1,   319,    -1,    -1,    -1,
   242,   243,    -1,    -1,    -1,   247,   248,   249,   250,    -1,
    -1,    -1,    -1,    -1,    -1,   257,   258,   259,   260,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1016,
    -1,   354,    -1,    -1,    -1,    -1,   717,    -1,    -1,   720,
    -1,   722,   284,    -1,   725,    -1,    -1,    -1,   371,    -1,
    -1,   732,    -1,   734,    -1,   736,   737,   738,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   319,  1065,   402,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1076,
    -1,    -1,   790,    -1,    -1,    -1,    -1,  1084,    -1,    -1,
  1087,   424,    -1,    -1,    -1,    -1,  1093,    -1,    -1,    -1,
   808,    -1,   354,    -1,  1101,    -1,    -1,   440,    -1,   817,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   835,  1125,    -1,
    -1,   464,   823,   824,   825,    -1,    -1,    -1,   390,    -1,
    -1,    -1,    -1,    -1,    -1,   478,    -1,   399,    -1,    -1,
   402,    -1,    -1,    -1,    -1,   720,    -1,   722,    -1,    -1,
   725,    -1,  1159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   424,   738,    -1,    -1,    -1,    -1,    -1,    -1,
  1177,    -1,    -1,    -1,   436,    -1,    -1,   878,   440,   880,
    -1,    -1,    -1,   884,    -1,   886,    -1,   888,    -1,   890,
   891,   892,   893,    -1,    -1,   896,    -1,    -1,   899,    -1,
    -1,    -1,   464,   904,    -1,    -1,    -1,   550,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   576,    -1,    -1,    -1,    -1,    -1,   589,
   590,   591,    -1,    -1,   962,    -1,    -1,   597,    -1,   824,
   825,    -1,    -1,    -1,    -1,    -1,    -1,   975,    -1,   602,
   978,    -1,    -1,   981,    -1,    -1,    -1,   610,    -1,    -1,
    -1,    -1,   615,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   986,   987,    -1,   550,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   639,    -1,  1016,    -1,
    -1,    -1,    -1,   878,    -1,    -1,    -1,    -1,    -1,   884,
    -1,   886,    -1,   888,   576,   890,    -1,   892,   893,    -1,
    -1,   896,    -1,  1024,   899,    -1,    -1,    -1,    -1,   904,
  1031,    -1,  1033,    -1,  1035,    -1,    -1,    -1,    -1,    -1,
   602,    -1,    -1,    -1,    -1,    -1,    -1,  1065,   610,    -1,
    -1,    -1,    -1,   615,    -1,    -1,    -1,    -1,  1076,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1084,    -1,    -1,  1087,
    -1,    -1,    -1,    -1,    -1,  1093,    -1,   639,    -1,    -1,
    -1,    -1,    -1,  1101,    -1,    -1,    -1,    -1,    -1,    -1,
   652,   653,   654,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1125,    -1,    -1,
    -1,   986,   987,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   773,    -1,   775,   776,    -1,   778,   779,
    -1,   781,    -1,    -1,   784,    -1,   786,   787,    -1,   789,
    -1,  1159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1024,
    -1,    -1,    -1,    -1,    -1,    -1,  1031,    -1,  1033,  1177,
  1035,    -1,    -1,    -1,    -1,   808,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   817,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   790,  1230,
  1231,    -1,    -1,    -1,  1235,  1236,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   808,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   817,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1266,    -1,    -1,    -1,    -1,
  1271,    -1,    -1,   835,    -1,    -1,  1277,  1278,    -1,   929,
    -1,   931,   932,    -1,   934,    -1,   936,   937,    -1,    -1,
    -1,   941,   942,    -1,    -1,    -1,    -1,   947,    -1,   949,
   950,    -1,    -1,   953,   954,    -1,    -1,  1308,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   975,    -1,    -1,   978,    -1,    -1,   981,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1231,    -1,    -1,    -1,
    -1,  1236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1266,    -1,    -1,    -1,    -1,  1271,    -1,    -1,    -1,
   962,    -1,  1052,  1278,    -1,    -1,  1056,    -1,    -1,  1059,
  1060,    -1,    -1,   975,    -1,    -1,   978,    -1,    -1,   981,
  1070,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1308,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1084,    -1,    -1,  1087,    -1,    -1,    -1,    -1,    -1,
  1093,    -1,    -1,    -1,  1016,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1134,    -1,    -1,    -1,    -1,    -1,
    -1,  1141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1065,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1076,    -1,  1159,    -1,    -1,    -1,
    -1,    -1,  1084,    -1,    -1,  1087,    -1,    -1,    -1,    -1,
  1180,  1093,    -1,    -1,    -1,  1185,    -1,     1,    -1,  1101,
    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    15,    -1,    -1,    -1,    -1,    20,    21,    -1,    23,
    24,    25,    26,  1125,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1223,    -1,  1225,  1226,    -1,  1228,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,
    -1,    55,    -1,    57,    -1,    -1,    -1,  1159,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,
    74,    75,    76,    77,    78,  1177,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     1,    -1,   120,    -1,    -1,    -1,
    -1,     8,    -1,    -1,    -1,    -1,   130,   131,    15,    -1,
   134,    -1,    -1,    20,    21,    -1,    23,    24,    25,    26,
    -1,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    55,    -1,
    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
    77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     1,    -1,   120,    -1,    -1,    -1,    -1,     8,    -1,
    -1,    -1,    -1,   130,   131,    15,    -1,   134,    -1,    -1,
    20,    21,    -1,    23,    24,    25,    26,    -1,    -1,    -1,
   147,   148,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,    75,    76,    77,    78,    -1,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   120,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,
   130,   131,    15,    -1,   134,    -1,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   147,    -1,    -1,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    -1,    -1,     7,     8,   147,    10,    11,   150,   151,   152,
    15,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,    -1,
    45,    46,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,   134,
    -1,   136,   137,   138,   139,   140,   141,   142,    -1,    -1,
    -1,    -1,   147,   148,   149,   150,   151,   152,     3,    -1,
    -1,    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,
    15,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,    -1,
    45,    46,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,   134,
    -1,   136,   137,   138,   139,   140,   141,   142,    -1,    -1,
    -1,    -1,   147,   148,   149,   150,   151,   152,     3,    -1,
    -1,    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,
    15,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,    -1,
    45,    46,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,   134,
    -1,   136,   137,   138,   139,   140,   141,   142,    -1,    -1,
    -1,    -1,   147,   148,   149,   150,   151,   152,     3,    -1,
    -1,    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,
    -1,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    -1,    -1,    31,    32,    33,    34,
    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,    -1,
    45,    46,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    -1,    79,    80,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   106,   107,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,
    -1,   136,    -1,   138,   139,   140,   141,   142,    -1,    -1,
    -1,     3,   147,    -1,   149,     7,     8,    -1,    10,    11,
    -1,    -1,    -1,    -1,    -1,    17,    -1,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    -1,    -1,    31,
    32,    33,    34,    -1,    36,    37,    38,    -1,    40,    41,
    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
    72,    73,    74,    75,    76,    77,    -1,    79,    80,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   106,   107,    -1,   109,    -1,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    15,    -1,    17,    -1,
    -1,    20,    21,    -1,    23,    24,    25,    26,    -1,   131,
    29,    30,    -1,    -1,   136,    -1,   138,   139,   140,   141,
   142,    -1,    -1,    -1,    -1,   147,    45,   149,    -1,    48,
    49,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
    -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,    -1,   106,   107,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   130,   131,    -1,    -1,   134,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,   147,   148,
   149,   150,   151,   152,    15,    -1,    17,    -1,    19,    20,
    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,    -1,   106,   107,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
   131,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     8,   147,    -1,   149,   150,
   151,   152,    15,    -1,    17,    -1,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    29,    30,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    45,    -1,    -1,    48,    49,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     8,   147,   148,   149,   150,   151,   152,
    15,    -1,    17,    -1,    -1,    20,    21,    -1,    23,    24,
    25,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,   134,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     8,   147,   148,   149,   150,   151,   152,    15,    -1,
    17,    -1,    -1,    20,    21,    -1,    23,    24,    25,    26,
    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
    -1,    48,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
    77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,    -1,   106,
   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    -1,    -1,   130,   131,    -1,    15,   134,    17,    -1,
   137,    20,    21,    -1,    23,    24,    25,    26,    -1,    -1,
   147,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,
    49,    50,    -1,    52,    -1,    -1,    55,    -1,    57,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
    -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,    -1,   106,   107,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,   130,   131,    -1,    15,   134,    17,    -1,    -1,    20,
    21,    -1,    23,    24,    25,    26,    -1,    -1,   147,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,    49,    50,
    -1,    52,    -1,    -1,    55,    -1,    57,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,    -1,   106,   107,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,   130,
   131,    -1,    15,   134,    17,    -1,    -1,    20,    21,    22,
    23,    24,    25,    26,    -1,    -1,   147,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,     8,    -1,    -1,    -1,   130,   131,    -1,
    15,   134,    17,    -1,    -1,    20,    21,    -1,    23,    24,
    25,    26,    -1,    -1,   147,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    -1,    -1,   130,   131,    -1,    15,   134,
    17,    -1,    -1,    20,    21,    -1,    23,    24,    25,    26,
    -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
    -1,    48,    49,    50,    -1,    52,    -1,    -1,    55,    -1,
    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
    77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,    -1,   106,
   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    -1,    -1,   130,   131,    -1,    15,   134,    17,    -1,
    -1,    20,    21,    -1,    23,    24,    25,    26,    -1,    -1,
   147,    -1,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,
    49,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
    -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,    -1,   106,   107,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,   130,   131,    -1,    15,   134,    17,   136,    -1,    20,
    21,    -1,    23,    24,    25,    26,    -1,    -1,   147,    -1,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,    49,    50,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,    -1,   106,   107,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,   130,
   131,    -1,    15,   134,    17,   136,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,   147,    -1,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    45,    -1,    -1,    48,    49,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,     8,    -1,    -1,    -1,   130,   131,    -1,
    15,   134,    17,    -1,    -1,    20,    21,    -1,    23,    24,
    25,    26,    -1,    -1,   147,    -1,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    -1,    -1,   130,   131,    -1,    15,   134,
    17,    -1,    -1,    20,    21,    -1,    23,    24,    25,    26,
    -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
    -1,    48,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
    77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,    -1,   106,
   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    -1,    -1,   130,   131,    -1,    15,   134,    17,    -1,
    -1,    20,    21,    -1,    23,    24,    25,    26,    -1,    -1,
   147,    -1,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,
    49,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
    -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,    -1,   106,   107,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,   130,   131,    -1,    15,   134,    17,    -1,    -1,    20,
    21,    -1,    23,    24,    25,    26,    -1,    -1,   147,    -1,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,    49,    50,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,    -1,   106,   107,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,   130,
   131,    -1,    15,   134,    17,    -1,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,   147,    -1,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    45,    -1,    -1,    48,    49,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,     8,    -1,    -1,    -1,   130,   131,    -1,
    15,   134,    17,    -1,    -1,    20,    21,    -1,    23,    24,
    25,    26,    -1,    -1,   147,    -1,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    -1,    -1,   130,   131,    -1,    15,   134,
    17,    -1,    -1,    20,    21,    -1,    23,    24,    25,    26,
    -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
    -1,    48,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
    77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,    -1,   106,
   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    -1,    -1,   130,   131,    -1,    15,   134,    17,    -1,
    -1,    20,    21,    -1,    23,    24,    25,    26,    -1,    -1,
   147,    -1,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,
    49,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
    -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,    -1,   106,   107,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,   130,   131,    -1,    15,   134,    17,    -1,    -1,    20,
    21,    -1,    23,    24,    25,    26,    -1,    -1,   147,    -1,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,    49,    50,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,    -1,   106,   107,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,   130,
   131,    15,    -1,   134,    -1,    -1,    20,    21,    22,    23,
    24,    25,    26,    -1,    -1,    -1,   147,    -1,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,
    74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,
    -1,     8,    -1,    -1,    -1,    -1,   130,   131,    15,    -1,
   134,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
    -1,    48,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
    77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,    -1,   106,
    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    15,    -1,   120,    -1,    -1,    20,    21,    -1,    23,
    24,    25,    26,   130,   131,    29,    30,   134,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   147,    -1,    -1,   150,   151,   152,    -1,    -1,    52,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,
    74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,    -1,    -1,    -1,    15,    -1,   120,    -1,    -1,    20,
    21,    -1,    23,    24,    25,    26,   130,   131,    29,    30,
   134,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,    -1,    -1,    -1,    -1,     8,    -1,
    -1,    -1,    -1,    -1,    -1,    15,    -1,    -1,    -1,   120,
    20,    21,    -1,    23,    24,    25,    26,    -1,    -1,   130,
   131,    -1,    -1,   134,    -1,    -1,   137,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,    -1,   150,
   151,   152,    52,    -1,    -1,    55,    -1,    57,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,    75,    76,    77,    78,    -1,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,    -1,    -1,    -1,    -1,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    15,    -1,    -1,    -1,
   120,    20,    21,    -1,    23,    24,    25,    26,    -1,    -1,
   130,   131,    -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,    -1,
   150,   151,   152,    52,    -1,    -1,    55,    -1,    57,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
    -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,    -1,    -1,    -1,    -1,
    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,    -1,    15,
    -1,   120,    -1,    -1,    20,    21,    -1,    23,    24,    25,
    26,   130,   131,    29,    30,   134,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,
    -1,   150,   151,   152,    -1,    -1,    52,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    75,
    76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,    -1,
    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,    -1,
    15,    -1,    -1,    -1,   120,    20,    21,    -1,    23,    24,
    25,    26,    -1,    -1,   130,   131,    -1,    -1,   134,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   147,   148,    -1,   150,   151,   152,    52,    -1,    -1,
    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,    -1,
    -1,    15,    -1,    -1,    -1,   120,    20,    21,    -1,    23,
    24,    25,    26,    -1,    -1,   130,   131,    -1,    -1,   134,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   147,   148,    -1,   150,   151,   152,    52,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,
    74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,
    -1,    -1,    15,    -1,    -1,    -1,   120,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,   130,   131,    -1,    -1,
   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,    -1,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    15,    -1,    -1,   108,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 160 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 190 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 191 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 200 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 209 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 210 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 211 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 212 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 217 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 218 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 220 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 221 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 223 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 226 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 228 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 232 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 233 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 238 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 241 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 246 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 248 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 256 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 361 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 363 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 365 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(RETURN_STA, yyvsp[0].cString,NULL,VOIDTYPE);;
    break;}
case 37:
#line 367 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 368 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 369 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 370 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 41:
#line 371 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 373 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 374 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 46:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 47:
#line 379 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 48:
#line 380 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 49:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 50:
#line 387 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 388 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 52:
#line 389 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 390 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 54:
#line 391 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 55:
#line 392 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 56:
#line 395 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 57:
#line 398 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 58:
#line 404 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 59:
#line 408 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 60:
#line 417 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 61:
#line 426 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 62:
#line 430 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 64:
#line 435 "msv.y"
{
            yyval.tnode=new CSyntaxNode(FREE_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 65:
#line 439 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(SYSTEM_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 66:
#line 443 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 67:
#line 446 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 68:
#line 459 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 69:
#line 464 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 70:
#line 468 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 71:
#line 474 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 72:
#line 475 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 73:
#line 481 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 74:
#line 486 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 75:
#line 491 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 76:
#line 495 "msv.y"
{ yyval.tnode=yyvsp[0].tnode; ;
    break;}
case 77:
#line 496 "msv.y"
{ yyval.tnode=yyvsp[0].tnode; ;
    break;}
case 78:
#line 502 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 79:
#line 510 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 80:
#line 521 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 81:
#line 534 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 82:
#line 535 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 83:
#line 536 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 84:
#line 541 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 85:
#line 545 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 86:
#line 549 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 87:
#line 553 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 88:
#line 557 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 89:
#line 561 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 90:
#line 567 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 91:
#line 569 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 92:
#line 572 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 93:
#line 577 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 94:
#line 588 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 95:
#line 589 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 96:
#line 590 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 97:
#line 593 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 98:
#line 594 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 99:
#line 595 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 100:
#line 603 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 101:
#line 607 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 102:
#line 611 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 103:
#line 616 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 104:
#line 622 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 105:
#line 627 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 106:
#line 634 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 107:
#line 640 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 108:
#line 651 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 109:
#line 652 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 110:
#line 653 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 111:
#line 658 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 112:
#line 665 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 113:
#line 668 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 114:
#line 669 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 115:
#line 677 "msv.y"
{yyval.tnode=new CSyntaxNode(FOPEN_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 116:
#line 679 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETS_EXP,yyvsp[-5].tnode,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 117:
#line 681 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETC_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 118:
#line 683 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTS_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 119:
#line 685 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 120:
#line 687 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 121:
#line 689 "msv.y"
{yyval.tnode=new CSyntaxNode(FCLOSE_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 122:
#line 701 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 123:
#line 704 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 124:
#line 705 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 125:
#line 706 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 126:
#line 707 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 127:
#line 708 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 128:
#line 709 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 129:
#line 710 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 130:
#line 714 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 131:
#line 716 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 132:
#line 718 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 133:
#line 720 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 134:
#line 722 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 135:
#line 724 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 136:
#line 726 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 137:
#line 728 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 138:
#line 730 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 139:
#line 732 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 140:
#line 734 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 141:
#line 736 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 142:
#line 738 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 143:
#line 742 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 144:
#line 743 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 145:
#line 746 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 146:
#line 747 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 147:
#line 748 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 148:
#line 752 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 149:
#line 753 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 150:
#line 754 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 151:
#line 757 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 152:
#line 761 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 153:
#line 767 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 154:
#line 769 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 155:
#line 771 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 156:
#line 773 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 157:
#line 775 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 158:
#line 776 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 159:
#line 781 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 160:
#line 782 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 161:
#line 783 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 162:
#line 789 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 163:
#line 790 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 164:
#line 792 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 165:
#line 794 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 166:
#line 796 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 167:
#line 798 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 168:
#line 799 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 169:
#line 805 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 170:
#line 806 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 171:
#line 808 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 172:
#line 810 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 173:
#line 815 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 816 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 175:
#line 820 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 821 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 177:
#line 825 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 826 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 179:
#line 831 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 832 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 181:
#line 833 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 182:
#line 834 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 183:
#line 835 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 184:
#line 837 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 185:
#line 838 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 186:
#line 839 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 187:
#line 840 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 188:
#line 841 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 189:
#line 842 "msv.y"
{yyval.tnode=yyvsp[0].tnode;
    break;}
case 190:
#line 843 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 191:
#line 844 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 192:
#line 845 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 193:
#line 846 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 194:
#line 847 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 195:
#line 853 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 196:
#line 854 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 197:
#line 855 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 198:
#line 856 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 199:
#line 857 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 200:
#line 858 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 201:
#line 859 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 202:
#line 860 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 203:
#line 863 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 204:
#line 864 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 205:
#line 868 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 206:
#line 869 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 207:
#line 870 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 208:
#line 871 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 209:
#line 878 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 210:
#line 882 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 211:
#line 890 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 212:
#line 902 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 213:
#line 906 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 214:
#line 915 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 215:
#line 927 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 216:
#line 931 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 217:
#line 939 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 218:
#line 942 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 219:
#line 943 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 220:
#line 948 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 221:
#line 952 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 222:
#line 956 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 223:
#line 961 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 224:
#line 964 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 225:
#line 973 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 226:
#line 974 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 227:
#line 975 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 228:
#line 978 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 229:
#line 979 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 230:
#line 982 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 231:
#line 983 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 232:
#line 986 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 233:
#line 987 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 234:
#line 988 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 235:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 236:
#line 990 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 237:
#line 991 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 238:
#line 994 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 239:
#line 995 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 240:
#line 996 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 241:
#line 997 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 242:
#line 998 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 243:
#line 999 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 244:
#line 1001 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 245:
#line 1002 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 246:
#line 1004 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 247:
#line 1005 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 248:
#line 1007 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 249:
#line 1008 "msv.y"
{yyval.tnode=new CSyntaxNode(MALLOC_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 250:
#line 1013 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 251:
#line 1014 "msv.y"
{yyval.returntype=INTPTYPE;;
    break;}
case 252:
#line 1015 "msv.y"
{yyval.returntype=FLOATPTYPE;;
    break;}
case 253:
#line 1016 "msv.y"
{yyval.returntype=CHARPTYPE;;
    break;}
case 254:
#line 1017 "msv.y"
{yyval.returntype=UINTPTYPE;;
    break;}
case 255:
#line 1018 "msv.y"
{yyval.returntype=UCHARPTYPE;;
    break;}
case 256:
#line 1019 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 257:
#line 1020 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 258:
#line 1025 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 259:
#line 1026 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].returntype);;
    break;}
case 260:
#line 1027 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].cString, STRUCTTYPE);;
    break;}
case 261:
#line 1028 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, STRTYPE);;
    break;}
case 262:
#line 1034 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 263:
#line 1035 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 264:
#line 1036 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 265:
#line 1037 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 266:
#line 1038 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 267:
#line 1039 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 268:
#line 1044 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCHEAD_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 269:
#line 1051 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCTAIL_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 270:
#line 1058 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCAT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 271:
#line 1065 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCMP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 272:
#line 1072 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCPY_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 273:
#line 1079 "msv.y"
{
						yyval.tnode=new CSyntaxNode(STRFUNCLEN_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 274:
#line 1085 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 275:
#line 1086 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 276:
#line 1087 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 277:
#line 1088 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 278:
#line 1089 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 279:
#line 1090 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 280:
#line 1097 "msv.y"
{yyval.tnode=new CSyntaxNode(ROUND_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 281:
#line 1100 "msv.y"
{yyval.tnode=new CSyntaxNode(CEIL_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 282:
#line 1103 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOOR_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 283:
#line 1106 "msv.y"
{yyval.tnode=new CSyntaxNode(SIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 284:
#line 1107 "msv.y"
{yyval.tnode=new CSyntaxNode(COS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 285:
#line 1108 "msv.y"
{yyval.tnode=new CSyntaxNode(TAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 286:
#line 1109 "msv.y"
{yyval.tnode=new CSyntaxNode(ASIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 287:
#line 1110 "msv.y"
{yyval.tnode=new CSyntaxNode(ACOS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 288:
#line 1111 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 289:
#line 1114 "msv.y"
{yyval.tnode=new CSyntaxNode(SINH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 290:
#line 1115 "msv.y"
{yyval.tnode=new CSyntaxNode(COSH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 291:
#line 1116 "msv.y"
{yyval.tnode=new CSyntaxNode(TANH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 292:
#line 1119 "msv.y"
{yyval.tnode=new CSyntaxNode(EXP_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 293:
#line 1120 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 294:
#line 1121 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG10_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 295:
#line 1122 "msv.y"
{yyval.tnode=new CSyntaxNode(SQRT_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 296:
#line 1125 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN2_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 297:
#line 1126 "msv.y"
{yyval.tnode=new CSyntaxNode(POW_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 298:
#line 1129 "msv.y"
{yyval.tnode=new CSyntaxNode(FMOD_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 299:
#line 1130 "msv.y"
{yyval.tnode=new CSyntaxNode(MODF_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 300:
#line 1133 "msv.y"
{yyval.tnode=new CSyntaxNode(LDEXP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 301:
#line 1135 "msv.y"
{yyval.tnode=new CSyntaxNode(ABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 302:
#line 1136 "msv.y"
{yyval.tnode=new CSyntaxNode(FABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 303:
#line 1137 "msv.y"
{yyval.tnode=new CSyntaxNode(LABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 304:
#line 1143 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 305:
#line 1144 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 306:
#line 1145 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 307:
#line 1146 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 308:
#line 1147 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 309:
#line 1153 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 310:
#line 1155 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 311:
#line 1156 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 312:
#line 1159 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 313:
#line 1162 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 314:
#line 1163 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 315:
#line 1166 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 316:
#line 1167 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 317:
#line 1170 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 318:
#line 1171 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 319:
#line 1174 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 320:
#line 1175 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 321:
#line 1178 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 322:
#line 1179 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 323:
#line 1184 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 324:
#line 1185 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 325:
#line 1186 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 326:
#line 1187 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 327:
#line 1188 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 328:
#line 1189 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 329:
#line 1197 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 330:
#line 1198 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 331:
#line 1202 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 332:
#line 1203 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 333:
#line 1210 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 334:
#line 1214 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 335:
#line 1219 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 336:
#line 1225 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 337:
#line 1231 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 338:
#line 1237 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 339:
#line 1247 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 340:
#line 1253 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 341:
#line 1259 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 342:
#line 1265 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 343:
#line 1274 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 344:
#line 1278 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 345:
#line 1282 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 346:
#line 1288 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 347:
#line 1292 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 348:
#line 1296 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 349:
#line 1302 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 350:
#line 1308 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 351:
#line 1316 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 352:
#line 1324 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 353:
#line 1331 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 354:
#line 1337 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 355:
#line 1343 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 356:
#line 1347 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 357:
#line 1354 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 358:
#line 1359 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 359:
#line 1363 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 360:
#line 1367 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 361:
#line 1371 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 362:
#line 1377 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 363:
#line 1383 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 364:
#line 1389 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 365:
#line 1396 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 366:
#line 1404 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 367:
#line 1410 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 368:
#line 1425 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 369:
#line 1430 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 370:
#line 1435 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 371:
#line 1443 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 372:
#line 1450 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 373:
#line 1456 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 374:
#line 1462 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 375:
#line 1465 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 376:
#line 1475 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 377:
#line 1479 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 378:
#line 1488 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 379:
#line 1489 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 380:
#line 1494 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 381:
#line 1498 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 382:
#line 1507 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 383:
#line 1508 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 384:
#line 1516 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 385:
#line 1518 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 386:
#line 1525 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 387:
#line 1527 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 388:
#line 1533 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 389:
#line 1534 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 390:
#line 1538 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 391:
#line 1543 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 392:
#line 1548 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 393:
#line 1553 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 394:
#line 1560 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 395:
#line 1563 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 396:
#line 1564 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 397:
#line 1570 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 398:
#line 1572 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 399:
#line 1592 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 400:
#line 1593 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 401:
#line 1595 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 402:
#line 1597 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 403:
#line 1598 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 404:
#line 1604 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 405:
#line 1611 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 406:
#line 1619 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 407:
#line 1627 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 408:
#line 1631 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 409:
#line 1635 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 410:
#line 1641 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 411:
#line 1645 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 412:
#line 1651 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 413:
#line 1655 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 414:
#line 1662 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 415:
#line 1666 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 416:
#line 1670 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 417:
#line 1677 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
case 418:
#line 1681 "msv.y"
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
case 419:
#line 1684 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 420:
#line 1689 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 421:
#line 1698 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 422:
#line 1699 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 423:
#line 1705 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 424:
#line 1706 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 425:
#line 1710 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 426:
#line 1711 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 427:
#line 1716 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 428:
#line 1717 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 429:
#line 1718 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 430:
#line 1719 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 431:
#line 1720 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 432:
#line 1723 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 433:
#line 1724 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 434:
#line 1725 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 435:
#line 1731 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 436:
#line 1732 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 437:
#line 1733 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 438:
#line 1735 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 439:
#line 1736 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 440:
#line 1737 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 441:
#line 1739 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 442:
#line 1740 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 443:
#line 1741 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 444:
#line 1742 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 445:
#line 1744 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 446:
#line 1745 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 447:
#line 1746 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 448:
#line 1747 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 449:
#line 1748 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 450:
#line 1749 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 451:
#line 1750 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 452:
#line 1754 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 453:
#line 1755 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 454:
#line 1756 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 455:
#line 1757 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 456:
#line 1758 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 457:
#line 1759 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 458:
#line 1760 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1762 "msv.y"
