
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	IF	261
#define	ELSE	262
#define	EMPTY	263
#define	AWAIT	264
#define	PROJECTION	265
#define	PBEGIN	266
#define	PEND	267
#define	POINTERNULL	268
#define	ARRAY	269
#define	STRUCT	270
#define	DOT	271
#define	UNION	272
#define	FOPEN	273
#define	FCLOSE	274
#define	FILEDECLARATION	275
#define	FGETS	276
#define	FPUTS	277
#define	FGETC	278
#define	FPUTC	279
#define	MORE	280
#define	DEFINE	281
#define	MY_TRUE	282
#define	MY_FALSE	283
#define	EXIST	284
#define	FRAME	285
#define	FOR	286
#define	WHILE	287
#define	DO	288
#define	TRUE	289
#define	FALSE	290
#define	REPEAT	291
#define	UNTIL	292
#define	DISPLAY	293
#define	SKIP	294
#define	THEN	295
#define	COMMA	296
#define	COLON	297
#define	INTDECLARATION	298
#define	STRDECLARATION	299
#define	POINTERDECLARATION	300
#define	CHARDECLARATION	301
#define	VOIDDECLARATION	302
#define	FLOATDECLARATION	303
#define	LISTDECLARATION	304
#define	OPEN_PAR	305
#define	CLOSE_PAR	306
#define	TIMES	307
#define	OPEN_BPAR	308
#define	CLOSE_BPAR	309
#define	OPEN_MPAR	310
#define	CLOSE_MPAR	311
#define	FUNCTION	312
#define	OVER	313
#define	CYLINDER	314
#define	OVEREP	315
#define	INTER_OR	316
#define	NON_DETERMINED	317
#define	SEND	318
#define	RECEIVE	319
#define	PROCESS	320
#define	CHANNEL	321
#define	PUT	322
#define	GET	323
#define	ERROR_TOKEN	324
#define	STRFUNCHEAD	325
#define	STRFUNCTAIL	326
#define	STRFUNCCAT	327
#define	STRFUNCCMP	328
#define	STRFUNCCPY	329
#define	STRFUNCLEN	330
#define	SIZEOF	331
#define	SYSTEM	332
#define	EXTERN	333
#define	CEIL	334
#define	FLOOR	335
#define	ROUND	336
#define	SIN	337
#define	COS	338
#define	TAN	339
#define	ASIN	340
#define	ACOS	341
#define	ATAN	342
#define	SINH	343
#define	COSH	344
#define	TANH	345
#define	EXP	346
#define	LOG	347
#define	LOG10	348
#define	SQRT	349
#define	ATAN2	350
#define	POW	351
#define	ABS	352
#define	FABS	353
#define	LABS	354
#define	FMOD	355
#define	MODF	356
#define	LDEXP	357
#define	FREXP	358
#define	UNSIGNED	359
#define	SIGNED	360
#define	MALLOC	361
#define	FREE	362
#define	CHOP	363
#define	IMPLY	364
#define	IFF	365
#define	PROPIMPLY	366
#define	OR	367
#define	PARALLEL	368
#define	AND	369
#define	ASS_P	370
#define	ASS_N	371
#define	CON	372
#define	ADDRESS	373
#define	NE	374
#define	EQ	375
#define	GE	376
#define	LE	377
#define	GT	378
#define	LT	379
#define	LST	380
#define	RST	381
#define	ADD	382
#define	SUB	383
#define	MUL	384
#define	DIV	385
#define	MOD	386
#define	BNE	387
#define	CHOPSTAR	388
#define	NEXT	389
#define	NEGATION	390
#define	LENGTH	391
#define	REQUEST	392
#define	FINAL	393
#define	KEEP	394
#define	ALWAYS	395
#define	HALT	396
#define	W_NEXT	397
#define	PREFIX	398
#define	SOMETIMES	399
#define	ID	400
#define	STRLITERAL	401
#define	STRUCT_TYPE	402
#define	INTLITERAL	403
#define	FLOATLITERAL	404
#define	CHARLITERAL	405

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1377
#define	YYFLAG		-32768
#define	YYNTBASE	151

#define YYTRANSLATE(x) ((unsigned)(x) <= 405 ? yytranslate[x] : 237)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   113,   115,   117,   119,
   124,   129,   134,   139,   148,   150,   152,   154,   159,   161,
   163,   165,   167,   172,   176,   184,   194,   201,   207,   217,
   226,   236,   238,   243,   248,   250,   258,   262,   264,   268,
   270,   271,   276,   282,   287,   289,   291,   296,   299,   302,
   305,   308,   310,   313,   316,   320,   324,   328,   332,   340,
   349,   361,   375,   377,   379,   381,   383,   385,   387,   390,
   397,   402,   408,   414,   423,   432,   435,   438,   441,   442,
   449,   457,   458,   461,   468,   477,   482,   489,   496,   503,
   508,   512,   514,   516,   518,   520,   524,   527,   529,   541,
   554,   566,   578,   596,   615,   633,   652,   672,   691,   709,
   728,   746,   748,   750,   752,   754,   756,   767,   771,   773,
   778,   784,   796,   809,   821,   833,   846,   850,   854,   857,
   858,   861,   864,   867,   875,   882,   887,   891,   893,   897,
   901,   907,   909,   913,   916,   917,   919,   923,   925,   928,
   931,   933,   935,   937,   939,   941,   943,   947,   949,   951,
   953,   955,   957,   959,   961,   963,   965,   967,   969,   971,
   973,   975,   977,   979,   983,   985,   987,   991,   996,  1001,
  1006,  1011,  1016,  1021,  1025,  1029,  1033,  1034,  1037,  1040,
  1043,  1046,  1049,  1053,  1058,  1063,  1068,  1074,  1080,  1086,
  1092,  1098,  1105,  1111,  1117,  1124,  1130,  1137,  1145,  1152,
  1159,  1167,  1174,  1181,  1187,  1195,  1202,  1204,  1209,  1211,
  1214,  1217,  1220,  1224,  1228,  1232,  1235,  1240,  1245,  1250,
  1255,  1257,  1259,  1261,  1263,  1265,  1267,  1272,  1277,  1284,
  1291,  1298,  1303,  1305,  1307,  1309,  1311,  1313,  1315,  1318,
  1321,  1324,  1327,  1330,  1333,  1336,  1339,  1342,  1345,  1348,
  1351,  1354,  1357,  1360,  1363,  1370,  1377,  1384,  1391,  1398,
  1401,  1404,  1407,  1409,  1412,  1416,  1420,  1424,  1428,  1430,
  1432,  1434,  1438,  1442,  1446,  1450,  1454,  1458,  1462,  1466,
  1470,  1474,  1476,  1478,  1480,  1482,  1484,  1486,  1489,  1492,
  1494,  1496,  1500,  1503,  1507,  1512,  1518,  1523,  1527,  1532,
  1538,  1543,  1546,  1550,  1555,  1558,  1562,  1567,  1572,  1578,
  1585,  1594,  1602,  1607,  1611,  1617,  1626,  1627,  1632,  1636,
  1641,  1646,  1652,  1658,  1664,  1670,  1677,  1687,  1688,  1696,
  1706,  1715,  1721,  1726,  1729,  1732,  1738,  1739,  1742,  1746,
  1753,  1754,  1757,  1761,  1764,  1768,  1771,  1773,  1777,  1779,
  1781,  1783,  1785,  1789,  1790,  1793,  1794,  1798,  1800,  1803,
  1807,  1811,  1815,  1819,  1825,  1835,  1837,  1839,  1840,  1842,
  1843,  1845,  1846,  1854,  1862,  1865,  1867,  1868,  1874,  1877,
  1878,  1883,  1889,  1890,  1894,  1899,  1905,  1910,  1916,  1921,
  1922,  1926,  1930,  1935,  1940,  1945,  1950,  1955,  1960,  1965,
  1970,  1977,  1982,  1987,  1992,  1999,  2003,  2007,  2012,  2016,
  2017,  2021,  2025,  2029,  2033,  2036
};

static const short yyrhs[] = {   152,
   155,     0,    11,   153,    12,     0,     0,   153,   114,   153,
     0,   153,   112,   153,     0,   153,   110,   153,     0,   153,
   111,   153,     0,   153,   108,   153,     0,   140,   153,     0,
   139,   153,     0,   144,   153,     0,   142,   153,     0,   134,
   153,     0,    39,     0,    27,     0,    28,     0,   136,   176,
     0,     8,     0,    25,     0,   141,   153,     0,   138,   153,
     0,   135,   153,     0,    53,   153,   154,    54,    10,    53,
   153,    54,     0,   145,     0,    26,   145,    42,   202,     0,
   153,   133,     0,    50,   153,    51,     0,    41,   153,   154,
     0,     0,   155,   114,   155,     0,   155,   112,   155,     0,
   155,   108,   155,     0,   167,     0,   161,     0,   226,     0,
   229,     0,   220,     0,   221,     0,   222,     0,   134,    50,
   155,    51,     0,   139,    50,   155,    51,     0,   140,    50,
   155,    51,     0,     9,    50,   201,    51,     0,    36,    53,
   155,    54,    37,    50,   201,    51,     0,    39,     0,     8,
     0,    25,     0,   136,    50,   176,    51,     0,   233,     0,
   231,     0,    34,     0,    35,     0,   138,    50,   155,    51,
     0,   155,   113,   155,     0,    50,   219,    51,   109,    55,
   155,    56,     0,    30,    50,   212,   217,    51,   114,    50,
   155,    51,     0,    53,   155,   218,    54,    10,   210,     0,
    53,   155,    54,    10,   210,     0,    26,   145,    50,   206,
    51,   115,    53,   157,    54,     0,    57,   145,    50,   206,
    51,    53,   155,    54,     0,    65,   145,    50,   206,    51,
   115,    53,   157,    54,     0,   159,     0,   107,    50,   212,
    51,     0,    77,    50,   199,    51,     0,   158,     0,    29,
   212,   207,    42,    53,   155,    54,     0,    50,   155,    51,
     0,   161,     0,   161,   114,   156,     0,   155,     0,     0,
   145,    50,   208,    51,     0,    78,   145,    50,   208,    51,
     0,   173,    50,   208,    51,     0,   166,     0,   192,     0,
   160,    53,   156,    54,     0,    15,   145,     0,    17,   145,
     0,   105,   162,     0,   104,   162,     0,   162,     0,   163,
   164,     0,   147,   164,     0,    15,   145,   164,     0,    17,
   145,   164,     0,    15,   147,   164,     0,    17,   147,   164,
     0,    50,   129,   212,    51,    50,   206,    51,     0,    50,
   129,   129,   212,    51,    50,   206,    51,     0,    50,   129,
   145,    55,   176,   174,    56,    51,    50,   206,    51,     0,
    50,   129,   145,    55,   176,   174,    56,    51,    50,   206,
    51,   115,   183,     0,    43,     0,    48,     0,    46,     0,
    44,     0,    47,     0,    20,     0,   212,   165,     0,   145,
    55,   176,   174,    56,   165,     0,   212,   115,   171,   165,
     0,   145,    14,   115,   183,   165,     0,   145,    14,   115,
   213,   165,     0,   145,    55,   176,   174,    56,   115,   183,
   165,     0,   145,    55,   176,   174,    56,   115,   213,   165,
     0,   129,   164,     0,    41,   164,     0,    41,     1,     0,
     0,   145,    55,   176,   174,    56,     0,     0,    41,   145,
    55,   176,   174,    56,     0,     0,     0,    41,     1,     0,
    18,    50,   168,    41,   213,    51,     0,    21,    50,   212,
    41,   214,    41,   212,    51,     0,    23,    50,   212,    51,
     0,    22,    50,   212,    41,   212,    51,     0,    24,    50,
   212,    41,   212,    51,     0,    24,    50,   173,    41,   212,
    51,     0,    19,    50,   212,    51,     0,   168,   170,   171,
     0,   212,     0,   235,     0,   173,     0,   175,     0,    50,
   168,    51,     0,   134,   168,     0,   169,     0,    50,    50,
    46,   129,    51,   148,    51,    55,   176,   174,    56,     0,
    50,    50,   104,    46,   129,    51,   148,    51,    55,   176,
   174,    56,     0,    50,    50,    43,   129,    51,   148,    51,
    55,   176,   174,    56,     0,    50,    50,    48,   129,    51,
   148,    51,    55,   176,   174,    56,     0,    50,    50,    46,
   129,    51,    50,    50,    46,   129,    51,   148,    51,    51,
    55,   176,   174,    56,     0,    50,    50,    46,   129,    51,
    50,    50,   104,    46,   129,    51,   148,    51,    51,    55,
   176,   174,    56,     0,    50,    50,    46,   129,    51,    50,
    50,    43,   129,    51,   148,    51,    51,    55,   176,   174,
    56,     0,    50,    50,   104,    46,   129,    51,    50,    50,
    46,   129,    51,   148,    51,    51,    55,   176,   174,    56,
     0,    50,    50,   104,    46,   129,    51,    50,    50,   104,
    46,   129,    51,   148,    51,    51,    55,   176,   174,    56,
     0,    50,    50,   104,    46,   129,    51,    50,    50,    43,
   129,    51,   148,    51,    51,    55,   176,   174,    56,     0,
    50,    50,    43,   129,    51,    50,    50,    46,   129,    51,
   148,    51,    51,    55,   176,   174,    56,     0,    50,    50,
    43,   129,    51,    50,    50,   104,    46,   129,    51,   148,
    51,    51,    55,   176,   174,    56,     0,    50,    50,    43,
   129,    51,    50,    50,    43,   129,    51,   148,    51,    51,
    55,   176,   174,    56,     0,   115,     0,   116,     0,   176,
     0,   183,     0,   213,     0,    50,   213,    51,    50,   163,
    51,    50,   206,    51,   158,     0,    50,   171,    51,     0,
   172,     0,   129,    50,   169,    51,     0,   145,    55,   176,
   174,    56,     0,    50,    50,    43,   129,    51,   145,    51,
    55,   176,   174,    56,     0,    50,    50,   104,    43,   129,
    51,   145,    51,    55,   176,   174,    56,     0,    50,    50,
    48,   129,    51,   145,    51,    55,   176,   174,    56,     0,
    50,    50,    46,   129,    51,   145,    51,    55,   176,   174,
    56,     0,    50,    50,   104,    46,   129,    51,   145,    51,
    55,   176,   174,    56,     0,    50,   173,    51,     0,    41,
   176,   174,     0,    41,     1,     0,     0,   129,   212,     0,
   129,   175,     0,   129,   173,     0,    50,   175,    51,    55,
   176,   174,    56,     0,   129,    50,   205,   129,    51,   176,
     0,   129,    50,   176,    51,     0,    50,   175,    51,     0,
   179,     0,   179,   203,   176,     0,   176,   182,   179,     0,
     6,   201,    40,   176,   178,     0,   179,     0,   179,   182,
   179,     0,     7,   176,     0,     0,   180,     0,   179,   181,
   180,     0,   214,     0,   128,   180,     0,   132,   180,     0,
    13,     0,   216,     0,   212,     0,   173,     0,   175,     0,
   158,     0,    50,   176,    51,     0,   200,     0,   215,     0,
   187,     0,   188,     0,   235,     0,   191,     0,   129,     0,
   130,     0,   131,     0,   125,     0,   126,     0,   118,     0,
    61,     0,   117,     0,   127,     0,   128,     0,   183,   117,
   183,     0,   184,     0,   185,     0,    50,   183,    51,     0,
    55,   176,   186,    56,     0,    55,   213,   186,    56,     0,
    55,   183,   186,    56,     0,    53,   176,   186,    54,     0,
    53,   213,   186,    54,     0,    53,   183,   186,    54,     0,
    41,   176,   186,     0,    41,   213,   186,     0,    41,   183,
   186,     0,     0,    41,     1,     0,   118,   212,     0,   118,
   173,     0,   118,   235,     0,   118,   187,     0,    50,   187,
    51,     0,    50,    43,    51,   177,     0,    50,    48,    51,
   177,     0,    50,    46,    51,   177,     0,    50,   105,    43,
    51,   177,     0,    50,   105,    46,    51,   177,     0,    50,
   104,    43,    51,   177,     0,    50,   104,    46,    51,   177,
     0,    50,    43,   129,    51,   189,     0,    50,   104,    43,
   129,    51,   189,     0,    50,    48,   129,    51,   189,     0,
    50,    46,   129,    51,   189,     0,    50,   104,    46,   129,
    51,   189,     0,    50,    47,   129,    51,   189,     0,    50,
    43,   129,   129,    51,   189,     0,    50,   104,    43,   129,
   129,    51,   189,     0,    50,    48,   129,   129,    51,   189,
     0,    50,    46,   129,   129,    51,   189,     0,    50,   104,
    46,   129,   129,    51,   189,     0,    50,    47,   129,   129,
    51,   189,     0,    50,    15,   147,   129,    51,   189,     0,
    50,   147,   129,    51,   189,     0,    50,    15,   147,   129,
   129,    51,   189,     0,    50,   147,   129,   129,    51,   189,
     0,   177,     0,   106,    50,   176,    51,     0,   205,     0,
    43,   129,     0,    48,   129,     0,    46,   129,     0,   104,
    43,   129,     0,   104,    46,   129,     0,    15,   147,   129,
     0,   147,   129,     0,    76,    50,   176,    51,     0,    76,
    50,   190,    51,     0,    76,    50,   147,    51,     0,    76,
    50,   213,    51,     0,   193,     0,   194,     0,   195,     0,
   197,     0,   196,     0,   198,     0,    70,    50,   199,    51,
     0,    71,    50,   199,    51,     0,    72,    50,   199,    41,
   199,    51,     0,    73,    50,   199,    41,   199,    51,     0,
    74,    50,   199,    41,   199,    51,     0,    75,    50,   199,
    51,     0,   212,     0,   173,     0,   175,     0,   213,     0,
   192,     0,   235,     0,    81,   176,     0,    79,   176,     0,
    80,   176,     0,    82,   176,     0,    83,   176,     0,    84,
   176,     0,    85,   176,     0,    86,   176,     0,    87,   176,
     0,    88,   176,     0,    89,   176,     0,    90,   176,     0,
    91,   176,     0,    92,   176,     0,    93,   176,     0,    94,
   176,     0,    95,    50,   176,    41,   176,    51,     0,    96,
    50,   176,    41,   176,    51,     0,   100,    50,   176,    41,
   176,    51,     0,   101,    50,   176,    41,   176,    51,     0,
   102,    50,   176,    41,   176,    51,     0,    97,   176,     0,
    98,   176,     0,    99,   176,     0,   202,     0,   135,   201,
     0,   201,   114,   201,     0,   201,   112,   201,     0,    50,
   201,    51,     0,   176,   203,   176,     0,    27,     0,    28,
     0,   176,     0,   176,   120,   213,     0,   176,   119,   213,
     0,   213,   120,   176,     0,   213,   119,   176,     0,   176,
   120,    13,     0,   176,   119,    13,     0,    13,   120,   176,
     0,    13,   119,   176,     0,   176,   120,   215,     0,   176,
   119,   215,     0,   121,     0,   122,     0,   119,     0,   123,
     0,   124,     0,   120,     0,   104,    43,     0,   104,    46,
     0,   204,     0,   163,     0,   205,   212,   207,     0,   205,
   207,     0,   147,   212,   207,     0,   147,   129,   212,   207,
     0,   147,   129,   129,   212,   207,     0,   147,   212,    14,
   207,     0,   145,   212,   207,     0,   145,   129,   212,   207,
     0,   145,   129,   129,   212,   207,     0,   145,   212,    14,
   207,     0,   147,   207,     0,   147,   129,   207,     0,   147,
   129,   129,   207,     0,   145,   207,     0,   145,   129,   207,
     0,   145,   129,   129,   207,     0,   205,   212,    14,   207,
     0,   205,   129,   212,    14,   207,     0,   205,   212,    55,
   176,    56,   207,     0,   205,   212,    55,   176,    41,   176,
    56,   207,     0,   205,   212,    14,    55,   176,    56,   207,
     0,   205,   129,   212,   207,     0,   205,   129,   207,     0,
   205,   129,   129,   212,   207,     0,    50,   129,   212,    51,
    50,   206,    51,   207,     0,     0,    41,   205,   212,   207,
     0,    41,   205,   207,     0,    41,   145,   212,   207,     0,
    41,   147,   212,   207,     0,    41,   147,   129,   212,   207,
     0,    41,   145,   212,    14,   207,     0,    41,   147,   212,
    14,   207,     0,    41,   205,   212,    14,   207,     0,    41,
   205,   129,   212,    14,   207,     0,    41,    50,   129,   212,
    51,    50,   206,    51,   207,     0,     0,    41,   205,   212,
    55,   176,    56,   207,     0,    41,   205,   212,    55,   176,
    41,   176,    56,   207,     0,    41,   205,   212,    14,    55,
   176,    56,   207,     0,    41,   205,   129,   212,   207,     0,
    41,   205,   129,   207,     0,    41,     1,     0,   171,   209,
     0,   145,    50,   208,    51,   209,     0,     0,   118,     1,
     0,    41,   171,   209,     0,    41,   145,    50,   208,    51,
   209,     0,     0,    41,     1,     0,    53,   155,    54,     0,
     1,    54,     0,    50,   201,    51,     0,     1,    51,     0,
   145,     0,    50,   212,    51,     0,   146,     0,   148,     0,
   150,     0,   149,     0,    41,   212,   217,     0,     0,    41,
     1,     0,     0,    41,   155,   218,     0,   202,     0,   135,
   219,     0,   219,   114,   219,     0,   219,   112,   219,     0,
    50,   219,    51,     0,    32,   211,   210,     0,    31,   176,
    52,    33,   210,     0,    31,    50,   223,    41,   224,    41,
   225,    51,   210,     0,   167,     0,   162,     0,     0,   201,
     0,     0,   167,     0,     0,     3,    50,   180,    51,    53,
   227,    54,     0,     4,   180,    42,    50,   155,    51,   228,
     0,     5,   227,     0,   227,     0,     0,     6,   201,    40,
   210,   230,     0,     7,   210,     0,     0,    38,    50,   171,
    51,     0,    38,    50,   171,   232,    51,     0,     0,    41,
   171,   232,     0,   137,    50,   212,    51,     0,   137,    50,
   212,   234,    51,     0,   137,    50,   173,    51,     0,   137,
    50,   173,   234,    51,     0,   137,    50,   235,    51,     0,
     0,    41,   212,   234,     0,    41,   173,   234,     0,   212,
    16,   212,   236,     0,   173,    16,   212,   236,     0,   175,
    16,   212,   236,     0,   212,    16,   173,   236,     0,   173,
    16,   173,   236,     0,   175,    16,   173,   236,     0,   212,
   109,   212,   236,     0,   173,   109,   212,   236,     0,    50,
   187,    51,   109,   212,   236,     0,   175,   109,   212,   236,
     0,   212,   109,   173,   236,     0,   173,   109,   173,   236,
     0,    50,   187,    51,   109,   173,   236,     0,   212,    16,
   158,     0,   212,   109,   158,     0,   175,   109,   173,   236,
     0,    50,   235,    51,     0,     0,    16,   212,   236,     0,
    16,   173,   236,     0,   109,   212,   236,     0,   109,   173,
   236,     0,    16,   158,     0,   109,   158,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   159,   190,   191,   195,   196,   197,   198,   199,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   217,   218,   219,
   220,   221,   222,   226,   227,   232,   233,   237,   241,   246,
   248,   255,   361,   363,   365,   366,   367,   368,   369,   370,
   372,   373,   375,   376,   377,   378,   379,   380,   386,   387,
   388,   389,   390,   391,   393,   396,   402,   406,   415,   424,
   428,   432,   433,   437,   442,   444,   458,   462,   466,   473,
   474,   479,   484,   489,   494,   495,   500,   508,   519,   533,
   534,   535,   539,   543,   547,   551,   555,   559,   566,   568,
   570,   575,   587,   588,   589,   592,   593,   594,   601,   605,
   609,   614,   620,   625,   632,   638,   649,   651,   652,   656,
   663,   667,   668,   675,   677,   679,   681,   683,   685,   687,
   699,   703,   704,   705,   706,   707,   708,   709,   712,   714,
   716,   718,   720,   722,   724,   726,   728,   730,   732,   734,
   736,   741,   742,   745,   746,   747,   751,   752,   753,   756,
   760,   765,   767,   769,   771,   773,   775,   779,   781,   782,
   788,   789,   790,   792,   794,   796,   798,   804,   805,   807,
   808,   814,   815,   819,   820,   824,   825,   830,   831,   832,
   833,   834,   836,   837,   838,   839,   840,   841,   842,   843,
   844,   845,   846,   852,   853,   854,   855,   856,   857,   858,
   859,   861,   863,   867,   868,   869,   870,   876,   880,   888,
   900,   904,   913,   925,   929,   937,   941,   942,   945,   950,
   954,   959,   963,   970,   973,   974,   977,   978,   981,   982,
   985,   986,   987,   988,   989,   990,   993,   994,   995,   996,
   997,   998,  1000,  1001,  1003,  1004,  1006,  1007,  1011,  1013,
  1014,  1015,  1016,  1017,  1018,  1019,  1023,  1025,  1026,  1027,
  1032,  1034,  1035,  1036,  1037,  1038,  1041,  1048,  1055,  1062,
  1069,  1076,  1084,  1085,  1086,  1087,  1088,  1089,  1095,  1099,
  1102,  1105,  1106,  1107,  1108,  1109,  1110,  1113,  1114,  1115,
  1118,  1119,  1120,  1121,  1124,  1125,  1128,  1129,  1132,  1134,
  1135,  1136,  1142,  1143,  1144,  1145,  1146,  1152,  1154,  1155,
  1158,  1161,  1162,  1165,  1166,  1169,  1170,  1173,  1174,  1177,
  1178,  1183,  1184,  1185,  1186,  1187,  1188,  1195,  1197,  1200,
  1202,  1208,  1212,  1217,  1223,  1229,  1235,  1245,  1251,  1257,
  1263,  1272,  1276,  1280,  1286,  1290,  1294,  1300,  1306,  1313,
  1321,  1329,  1335,  1341,  1345,  1352,  1358,  1361,  1365,  1369,
  1375,  1381,  1387,  1394,  1402,  1408,  1423,  1429,  1432,  1440,
  1448,  1454,  1460,  1464,  1473,  1477,  1487,  1488,  1492,  1496,
  1506,  1507,  1515,  1517,  1524,  1526,  1532,  1533,  1537,  1542,
  1547,  1552,  1558,  1562,  1563,  1569,  1570,  1581,  1592,  1593,
  1595,  1597,  1603,  1609,  1617,  1625,  1629,  1633,  1639,  1643,
  1649,  1653,  1659,  1665,  1671,  1672,  1673,  1676,  1686,  1687,
  1693,  1694,  1698,  1699,  1704,  1705,  1706,  1707,  1708,  1711,
  1712,  1713,  1719,  1720,  1721,  1723,  1724,  1725,  1727,  1728,
  1729,  1730,  1732,  1733,  1734,  1735,  1736,  1737,  1738,  1742,
  1743,  1744,  1745,  1746,  1747,  1748
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN","PEND","POINTERNULL",
"ARRAY","STRUCT","DOT","UNION","FOPEN","FCLOSE","FILEDECLARATION","FGETS","FPUTS",
"FGETC","FPUTC","MORE","DEFINE","MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE",
"DO","TRUE","FALSE","REPEAT","UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON",
"INTDECLARATION","STRDECLARATION","POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION",
"FLOATDECLARATION","LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR",
"CLOSE_BPAR","OPEN_MPAR","CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP",
"INTER_OR","NON_DETERMINED","SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET",
"ERROR_TOKEN","STRFUNCHEAD","STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY",
"STRFUNCLEN","SIZEOF","SYSTEM","EXTERN","CEIL","FLOOR","ROUND","SIN","COS","TAN",
"ASIN","ACOS","ATAN","SINH","COSH","TANH","EXP","LOG","LOG10","SQRT","ATAN2",
"POW","ABS","FABS","LABS","FMOD","MODF","LDEXP","FREXP","UNSIGNED","SIGNED",
"MALLOC","FREE","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P",
"ASS_N","CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB",
"MUL","DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL",
"KEEP","ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"file_statement","ass_statement","ass_left","leftaddrshift","assign_operator",
"ass_right","rightaddrshift","array","option_ari_exp","point_exp","ari_exp",
"type_cast_alg_exp","option_exp_else_statement","simple_ari_exp","member_in_exp",
"bi_operator","ari_operator","array_exp","option_list_value","option_struct_list_value",
"inner_option_list_value","address_exp","type_cast","casted_element","all_sizeof_type",
"size_of","String_Function","String_Function_head","String_Function_tail","String_Function_cat",
"String_Function_cmp","String_Function_cpy","String_Function_len","str_func_parameter",
"math_function","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","option_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   151,   152,   152,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   154,   154,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   156,   156,   157,
   157,   158,   158,   158,   158,   158,   159,   160,   160,   161,
   161,   161,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   163,   163,   163,   163,   163,   163,   164,   164,
   164,   164,   164,   164,   164,   164,   165,   165,   165,    -1,
    -1,    -1,    -1,   166,   166,   166,   166,   166,   166,   166,
   167,   168,   168,   168,   168,   168,   168,   168,   169,   169,
   169,   169,   169,   169,   169,   169,   169,   169,   169,   169,
   169,   170,   170,   171,   171,   171,   171,   171,   171,   172,
   173,   173,   173,   173,   173,   173,   173,   174,   174,   174,
   175,   175,   175,   175,   175,   175,   175,   176,   176,   176,
   176,   177,   177,   178,   178,   179,   179,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   181,   181,   181,   181,   181,   181,   181,
   181,   182,   182,   183,   183,   183,   183,   184,   184,   184,
   185,   185,   185,   186,   186,   186,   186,   186,   187,   187,
   187,   187,   187,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   189,   189,   190,   190,
   190,   190,   190,   190,   190,   190,   191,   191,   191,   191,
   192,   192,   192,   192,   192,   192,   193,   194,   195,   196,
   197,   198,   199,   199,   199,   199,   199,   199,   200,   200,
   200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
   200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
   200,   200,   201,   201,   201,   201,   201,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   203,   203,   203,   203,   203,   203,   204,   204,   205,
   205,   206,   206,   206,   206,   206,   206,   206,   206,   206,
   206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
   206,   206,   206,   206,   206,   206,   206,   207,   207,   207,
   207,   207,   207,   207,   207,   207,   207,   207,   207,   207,
   207,   207,   207,   207,   208,   208,   208,   208,   209,   209,
   209,   209,   210,   210,   211,   211,   212,   212,   213,   214,
   215,   216,   217,   217,   217,   218,   218,   219,   219,   219,
   219,   219,   220,   221,   222,   223,   223,   223,   224,   224,
   225,   225,   226,   227,   228,   228,   228,   229,   230,   230,
   231,   231,   232,   232,   233,   233,   233,   233,   233,   234,
   234,   234,   235,   235,   235,   235,   235,   235,   235,   235,
   235,   235,   235,   235,   235,   235,   235,   235,   235,   236,
   236,   236,   236,   236,   236,   236
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     1,     1,     1,     1,     4,
     4,     4,     4,     8,     1,     1,     1,     4,     1,     1,
     1,     1,     4,     3,     7,     9,     6,     5,     9,     8,
     9,     1,     4,     4,     1,     7,     3,     1,     3,     1,
     0,     4,     5,     4,     1,     1,     4,     2,     2,     2,
     2,     1,     2,     2,     3,     3,     3,     3,     7,     8,
    11,    13,     1,     1,     1,     1,     1,     1,     2,     6,
     4,     5,     5,     8,     8,     2,     2,     2,     0,     6,
     7,     0,     2,     6,     8,     4,     6,     6,     6,     4,
     3,     1,     1,     1,     1,     3,     2,     1,    11,    12,
    11,    11,    17,    18,    17,    18,    19,    18,    17,    18,
    17,     1,     1,     1,     1,     1,    10,     3,     1,     4,
     5,    11,    12,    11,    11,    12,     3,     3,     2,     0,
     2,     2,     2,     7,     6,     4,     3,     1,     3,     3,
     5,     1,     3,     2,     0,     1,     3,     1,     2,     2,
     1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     1,     1,     3,     4,     4,     4,
     4,     4,     4,     3,     3,     3,     0,     2,     2,     2,
     2,     2,     3,     4,     4,     4,     5,     5,     5,     5,
     5,     6,     5,     5,     6,     5,     6,     7,     6,     6,
     7,     6,     6,     5,     7,     6,     1,     4,     1,     2,
     2,     2,     3,     3,     3,     2,     4,     4,     4,     4,
     1,     1,     1,     1,     1,     1,     4,     4,     6,     6,
     6,     4,     1,     1,     1,     1,     1,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     6,     6,     6,     6,     6,     2,
     2,     2,     1,     2,     3,     3,     3,     3,     1,     1,
     1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     1,     1,     1,     1,     1,     1,     2,     2,     1,
     1,     3,     2,     3,     4,     5,     4,     3,     4,     5,
     4,     2,     3,     4,     2,     3,     4,     4,     5,     6,
     8,     7,     4,     3,     5,     8,     0,     4,     3,     4,
     4,     5,     5,     5,     5,     6,     9,     0,     7,     9,
     8,     5,     4,     2,     2,     5,     0,     2,     3,     6,
     0,     2,     3,     2,     3,     2,     1,     3,     1,     1,
     1,     1,     3,     0,     2,     0,     3,     1,     2,     3,
     3,     3,     3,     5,     9,     1,     1,     0,     1,     0,
     1,     0,     7,     7,     2,     1,     0,     5,     2,     0,
     4,     5,     0,     3,     4,     5,     4,     5,     4,     0,
     3,     3,     4,     4,     4,     4,     4,     4,     4,     4,
     6,     4,     4,     4,     6,     3,     3,     4,     3,     0,
     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     0,     0,     0,    46,     0,     0,     0,     0,     0,    98,
     0,     0,     0,     0,    47,     0,     0,     0,     0,     0,
    51,    52,     0,     0,    45,    93,    96,    95,    97,    94,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   387,     0,     1,    65,    62,     0,    34,    82,
     0,    75,    33,     0,   128,   124,   125,    76,   261,   262,
   263,   265,   264,   266,   122,    37,    38,    39,    35,    36,
    50,    49,   123,     0,     0,    29,    13,    22,     0,   181,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   390,
   392,   391,   186,   184,   185,    17,   168,   176,   190,   191,
   193,   188,   183,   178,   189,   182,   192,    21,    10,     9,
    20,    12,    11,     2,     0,     0,     0,     0,     0,    26,
     0,   181,   309,   310,     0,     0,   389,   311,     0,   303,
     0,     0,    78,     0,    79,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   387,   368,     0,   408,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   186,
     0,   184,   185,   190,   398,   183,     0,   192,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    81,    80,     0,     0,   387,   163,   162,   161,
     0,     0,   127,   124,     0,     0,     0,     0,     0,   377,
     0,     0,   387,    84,   109,     0,     0,     0,     0,     0,
    83,   142,   143,     0,     0,   377,     0,     0,     0,     0,
     0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   184,   185,     0,   190,   183,
   192,     0,   280,   281,   279,   282,   283,   284,   285,   286,
   287,   288,   289,   290,   291,   292,   293,   294,     0,     0,
   300,   301,   302,     0,     0,     0,     0,   220,     0,   222,
   219,   221,   179,   180,   202,   203,     0,   200,   201,   199,
   324,   327,   322,   323,   325,   326,   197,   198,   194,   195,
   196,     0,     0,     8,     6,     7,     5,     4,     0,     0,
     0,     0,   311,     0,   304,   324,   327,     0,     0,     0,
     0,     0,     0,     0,    85,    87,    86,    88,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   357,     0,     0,
     0,   394,     0,    93,    95,    97,    94,     0,     0,   407,
   406,     0,     0,   386,     0,     0,     0,   403,     0,     0,
     0,     0,     0,     0,   149,   144,   145,   205,   206,   146,
     0,     0,    93,    95,    94,     0,     0,     0,     0,   387,
   161,     0,   399,    67,   126,   157,   167,     0,   388,     0,
     0,     0,   449,     0,     0,     0,   357,   357,     0,   274,
   275,   277,     0,   273,   276,   278,     0,     0,     0,     0,
     0,     0,   377,     0,     0,     0,     0,     0,   331,     0,
   330,     0,     0,     0,   124,   125,     0,   122,   123,     0,
     0,     0,     0,     0,     0,     0,     0,   387,   381,     0,
   160,   106,     0,     0,     0,     0,    99,    32,    31,    54,
    30,     0,    68,   121,   450,   450,     0,   450,   450,   450,
   450,   450,   450,   446,   450,   450,   447,   450,   450,    25,
    29,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   187,   223,     0,    93,    95,    94,     0,     0,     0,     0,
   249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   170,   177,   169,     0,   319,   318,   307,
   317,   313,   321,   316,   312,   320,   308,   420,   306,   305,
   315,   314,    43,     0,     0,     0,     0,   120,     0,     0,
   116,     0,     0,     0,     0,     0,   368,   368,   368,     0,
   374,     0,     0,     0,   368,     0,     0,     0,     0,     0,
     0,   410,     0,   385,   384,     0,     0,     0,     0,     0,
     0,     0,     0,   217,   217,   217,   217,   217,   217,     0,
     0,   421,     0,     0,     0,     0,     0,     0,    93,    95,
    93,    95,   402,   161,     0,     0,     0,     0,     0,     0,
     0,   401,   400,   396,     0,     0,     0,     0,   267,   268,
     0,     0,     0,   272,    64,     0,     0,   387,     0,    63,
   328,   329,   166,     0,    93,    95,    94,     0,    40,    48,
     0,   427,     0,   425,     0,   429,    53,    41,    42,   378,
   377,     0,   375,    72,     0,     0,     0,   160,   108,   107,
   109,    77,     0,     0,     0,   437,   434,    74,   444,   440,
   438,   435,   448,   442,   436,   433,   443,   439,    28,     0,
   175,     0,   224,   172,     0,     0,   226,     0,     0,     0,
     0,   225,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   250,   252,
   251,   328,   329,   259,   256,   257,   258,   260,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   418,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   368,   345,   368,   368,   342,   368,   368,   333,   368,     0,
     0,   368,     0,   368,   368,   359,   368,     0,   395,   394,
     0,     0,     0,     0,     0,     0,     0,   409,     0,   404,
   383,     0,   148,   207,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   423,   422,     0,   204,
     0,     0,     0,     0,     0,     0,   160,   357,   402,   160,
   450,   450,     0,   397,    58,     0,     0,     0,     0,     0,
     0,    73,     0,     0,     0,     0,     0,     0,    93,    95,
   430,   430,   428,   426,     0,   382,   387,   381,   159,   160,
   151,   109,   109,     0,   101,    69,   455,   450,   450,   456,
   450,   450,     0,     0,   171,     0,     0,     0,     0,   247,
   231,     0,   234,     0,   236,     0,   233,     0,     0,     0,
     0,     0,   229,     0,     0,   230,     0,     0,   227,   228,
   244,     0,   255,   253,   254,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   419,     0,   114,
     0,   117,   119,   118,     0,   368,   346,   368,   368,   338,
   368,   343,   368,   368,   334,     0,   354,   368,   368,     0,
   332,     0,     0,   368,   360,   368,   368,   361,   373,   368,
   368,     0,   358,     0,   393,     0,     0,     0,   412,     0,
     0,   218,   217,   217,   217,   211,   213,   212,   208,   210,
   209,     0,   150,   424,     0,   387,   390,     0,   387,   390,
   387,   390,     0,     0,   357,     0,     0,     0,   445,   441,
     0,    57,     0,     0,   269,   270,   271,   160,   165,     0,
     0,     0,     0,     0,   432,   431,    72,   377,   379,   158,
   102,   103,   109,   452,   451,   454,   453,     0,   174,   243,
     0,   173,     0,   237,   240,   242,   239,     0,   232,     0,
   235,     0,   246,   295,   296,   297,   298,   299,     0,     0,
     0,     0,     0,   413,     0,     0,   347,   368,   339,   341,
   344,   368,   335,   337,   368,   368,   353,     0,   348,     0,
    71,     0,   363,   362,   364,   368,   372,     0,   365,     0,
    66,     0,   411,     0,     0,     0,   214,   216,   215,     0,
     0,     0,     0,     0,     0,     0,     0,   387,     0,   387,
   390,     0,   151,    89,   164,    55,     0,    71,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   376,
     0,     0,   100,    23,   245,     0,   238,   241,     0,     0,
   115,   357,   340,   336,   355,   349,     0,     0,   368,    70,
     0,   357,   366,     0,     0,   368,     0,     0,    44,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    90,     0,    60,     0,
     0,     0,     0,     0,     0,     0,     0,    72,   109,   109,
   248,     0,     0,   368,     0,   350,    59,     0,   368,     0,
   369,    56,   405,   357,     0,     0,     0,   160,   160,     0,
     0,     0,   160,   160,   160,   160,     0,     0,     0,     0,
     0,     0,   357,    61,     0,     0,     0,     0,     0,     0,
     0,   380,   104,   105,     0,   368,   352,   368,   368,   371,
   368,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   160,     0,     0,     0,   160,   160,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   417,   356,   351,   367,   370,     0,   390,   390,     0,   152,
   131,   390,   390,     0,   155,   129,   154,   132,     0,     0,
     0,     0,     0,     0,    91,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   416,   414,     0,     0,   147,
     0,     0,     0,   390,     0,     0,   390,   153,   390,   390,
     0,   156,   130,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   415,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   390,    92,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   160,   160,     0,   160,   160,     0,     0,     0,     0,
     0,     0,   160,     0,     0,   160,   160,   160,     0,   141,
   139,     0,   135,   133,     0,     0,     0,   160,   140,   134,
   138,   136,     0,   137,     0,     0,     0
};

static const short yydefgoto[] = {  1375,
     2,    21,   275,   209,   492,  1131,   143,    77,    78,    79,
    80,    81,   482,   487,    82,    83,    84,    85,   264,   479,
   405,   144,   686,   145,   178,   880,   875,   147,   148,   342,
   327,   407,   408,   409,   809,   149,   150,   881,   540,   151,
    88,    89,    90,    91,    92,    93,    94,   443,   152,   354,
   180,   358,   461,   589,   590,   381,   480,   683,   568,   202,
   153,   181,   154,   155,   156,   598,   436,   217,    96,    97,
    98,   392,   799,  1074,    99,   917,  1287,   100,   760,   101,
   623,   102,   673,   157,   696
};

static const short yypact[] = {    24,
   883,  6782,-32768,-32768,   -92,-32768,-32768,-32768,   883,   883,
   883,   883,  7485,   883,   883,   883,   883,   883,   883,-32768,
   221,    11,  6875,-32768,    15,   688,   748,    75,    99,-32768,
   138,   154,   160,   198,-32768,   167,    14,   249,  7586,   166,
-32768,-32768,   263,   270,-32768,-32768,-32768,-32768,-32768,-32768,
  3278,  6782,   197,   222,   326,   354,   360,   399,   422,   435,
   459,   390,   809,   809,   505,   318,   115,   544,   560,   607,
   665,   669,   202,   407,  1294,-32768,-32768,   628,-32768,-32768,
   407,-32768,-32768,    56,-32768,   303,    72,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   186,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   702,   975,   768,   625,   625,  6875,-32768,
  5208,   674,  7485,  7485,  7485,  7485,  7485,  7485,  7485,  7485,
  7485,  7485,  7485,  7485,  7485,  7485,  7485,  7485,   718,   733,
  7485,  7485,  7485,   740,   754,   777,   218,  9386,  9386,-32768,
-32768,-32768,-32768,   303,    72,   365,  1395,-32768,-32768,-32768,
-32768,-32768,   186,-32768,-32768,-32768,-32768,   625,   625,   625,
   625,   625,   625,-32768,   883,   883,   883,   883,   883,-32768,
  9386,   508,-32768,-32768,  3712,  6875,-32768,  1511,   682,-32768,
   870,  6875,   407,   407,   407,   407,   189,    14,    14,    14,
    14,    84,   813,    14,-32768,   832,    14,  3850,  1017,   747,
  6875,    80,  6782,  7079,  6875,  3426,   425,  6978,  1136,  1176,
   658,    71,   277,   848,-32768,   395,   716,   868,  1099,   904,
   917,   775,   775,   775,   775,   775,   775,   775,   928,  1024,
  1059,   805,-32768,-32768,    14,  6387,   959,-32768,-32768,-32768,
  6642,   189,-32768,   282,  7485,   436,  6782,  6782,  6782,  7180,
  7485,   407,   869,-32768,   128,  6782,  6782,  6782,  6782,   586,
-32768,-32768,-32768,  7079,    84,  7180,    84,    84,    84,  1480,
  1480,  7283,-32768,   883,   955,   746,   893,    41,    86,   902,
   184,  5326,   661,   962,   931,   569,   528,   620,  1023,   637,
  1037,  4618,   365,   365,   365,   365,   365,   365,   365,   365,
   365,   365,   365,   365,   365,   365,   365,   365,  7485,  7485,
   365,   365,   365,  7485,  7485,  7485,   233,  1079,    72,-32768,
  1102,-32768,-32768,-32768,-32768,-32768,  9386,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  9386,  7485,  1272,  1110,  1110,   -97,  1001,  1101,  7485,
  7485,  3988,  1058,  1021,-32768,   -10,    -8,  7485,    80,  6875,
  6875,  7485,  7485,  1125,-32768,-32768,-32768,-32768,   113,  1122,
  1172,  1199,  1205,  1181,   146,  1212,  1228,   903,  1209,   771,
  1237,  1231,  1194,    41,    86,   902,   184,  4972,   437,-32768,
-32768,  1241,  1250,-32768,  1215,  1252,  6782,-32768,  1144,  4382,
  7384,  7384,   444,   319,-32768,   365,  1201,-32768,-32768,-32768,
   773,  1207,   315,   322,   333,   821,   954,  1235,   318,  1262,
  1273,  4126,-32768,-32768,-32768,-32768,  1277,  1224,-32768,  1256,
  6978,  6978,-32768,  6782,  1318,  1291,   903,   903,   233,   282,
    72,-32768,  1323,   186,-32768,-32768,  1337,  1348,  1362,  1363,
  1368,  1370,  7180,   407,   407,   476,  1376,  1038,-32768,   626,
-32768,  1306,  3574,  1183,   569,   528,   848,   637,  1037,   866,
   632,   643,  1394,  1191,  1230,  1243,    21,   369,  1417,  1408,
   157,-32768,  1321,  7485,    12,  7079,-32768,  1283,  1351,  1351,
-32768,  1415,  1356,-32768,   339,   339,  1430,   339,   339,   339,
   339,   339,   339,-32768,   324,   339,-32768,   324,   339,-32768,
   768,  1461,  7485,  1357,  9386,   379,  9386,   402,   496,  9386,
   502,   516,   521,   546,  1157,   547,   567,  1436,  1437,   588,
-32768,  1224,  1342,  1361,  1371,  1377,  1219,   591,   906,  1441,
-32768,  1454,   237,   274,   448,   570,   572,  1054,   654,   528,
  1023,   637,  1037,  1100,-32768,   365,  1456,   365,   365,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   365,  1500,  1396,-32768,
   365,   365,-32768,  1025,  1460,   654,  1381,-32768,  1374,    14,
-32768,   606,  1472,    14,    14,  1399,    39,    44,    45,  1478,
-32768,  1404,    14,   506,    85,  1485,    33,  1488,   518,  5090,
   212,  6875,    80,-32768,-32768,  1254,  1503,  4500,  1490,   620,
   -35,  1491,  4736,   574,   -20,  1504,   574,   -20,  1504,  6504,
  7079,-32768,  1493,  1218,  3038,   592,   613,   631,   636,   642,
  1436,  1437,  1256,  1496,  7485,  1499,  4264,  1236,  7485,    84,
  1501,  1443,-32768,  1052,    80,  1549,  1509,  1510,-32768,-32768,
   775,   775,   775,-32768,-32768,  1514,    14,  1507,  1273,-32768,
-32768,-32768,-32768,  1517,  1435,  1440,  1446,  1015,-32768,-32768,
    84,-32768,  1525,-32768,  1528,-32768,-32768,-32768,-32768,-32768,
  7180,  2818,-32768,-32768,  3140,  1526,   -22,   157,-32768,-32768,
  1540,-32768,   586,  1480,  1480,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1536,
    20,   676,-32768,  1184,  7676,  1541,-32768,  7676,  1548,  7676,
  1551,-32768,  7676,  1552,   678,   694,   705,   636,   710,  9386,
   713,  9386,   715,  9386,  9386,  7676,  1553,  1471,-32768,-32768,
-32768,  1476,  1477,-32768,-32768,-32768,-32768,-32768,  7485,  7485,
  7485,  7485,  7485,  1479,  1481,  1482,  1385,  1605,    80,-32768,
  1435,  1440,  1446,  1401,  1561,  1575,  1568,  1573,  1576,    14,
   142,-32768,   938,   232,-32768,   998,   240,-32768,   466,  1521,
    14,  1080,    14,  1085,    49,-32768,   829,  6782,-32768,  1231,
  1523,   271,   315,   322,   333,  1414,   329,  1246,  1587,-32768,
-32768,  1590,-32768,-32768,  1591,  4854,   -35,  2920,  1588,  1589,
  1592,  1593,  1596,  1597,  5444,  1603,  1606,-32768,  1218,-32768,
  7766,  7856,  7946,   725,   757,  1594,   157,   903,-32768,   157,
   339,   339,  6782,-32768,-32768,    80,  1602,  1542,  1608,  1610,
  1611,-32768,  1496,  7485,  7485,  1612,  1613,  1615,  1538,  1539,
  1628,  1628,-32768,-32768,  1619,-32768,   487,  1417,-32768,   157,
-32768,    27,  1540,  1616,-32768,-32768,-32768,   324,   339,-32768,
   324,   339,   883,  7485,-32768,  7676,  1620,  9386,  1623,-32768,
-32768,  7676,-32768,  7676,-32768,  7676,-32768,  7676,  8036,  8126,
  8216,   759,-32768,  7676,  1624,-32768,  7676,  1625,-32768,-32768,
-32768,  7676,-32768,-32768,-32768,   909,   919,   964,   978,   992,
  1626,  1627,  1632,  1538,  1545,  9386,  1630,-32768,  1539,-32768,
    14,-32768,-32768,-32768,  1634,    49,-32768,   832,   832,-32768,
    49,-32768,   832,   832,-32768,    14,-32768,  1195,     5,  7485,
-32768,  1633,  1636,   832,-32768,   832,   832,-32768,-32768,  1200,
   199,  7485,-32768,  1286,-32768,  1629,   377,   642,   189,  6875,
  1550,-32768,   574,   -20,  1504,-32768,-32768,-32768,-32768,-32768,
-32768,  5562,-32768,-32768,  5680,  1027,  1637,  5798,  1062,  1639,
  1204,  1640,  8306,  8396,   903,  1638,  1641,  1642,-32768,-32768,
  1329,-32768,  6782,  1643,-32768,-32768,-32768,   157,   365,    -2,
    13,   580,  1644,  1646,-32768,-32768,  1417,  7180,-32768,-32768,
-32768,-32768,   284,-32768,-32768,-32768,-32768,   689,   365,-32768,
  7676,  1100,  7485,-32768,-32768,-32768,-32768,  8486,-32768,  7676,
-32768,  7676,-32768,-32768,-32768,-32768,-32768,-32768,  1554,  1555,
  1556,  1651,  1662,-32768,  1654,  1656,-32768,   832,-32768,-32768,
-32768,   832,-32768,-32768,   832,   832,-32768,  7485,-32768,   385,
  6782,  1658,-32768,-32768,-32768,   832,-32768,  7485,-32768,   489,
-32768,  6782,-32768,  1659,  1247,  1661,-32768,-32768,-32768,  5916,
  1660,  1663,  6034,  1664,  1667,  1670,  1671,  1225,  6152,  1375,
  1665,  1666,  1676,-32768,-32768,-32768,  1326,  6782,  1653,  1678,
  1679,  1637,  1682,  1686,  1639,  1687,  1640,  1569,    34,-32768,
  1688,   -22,-32768,-32768,-32768,  1000,-32768,-32768,  1584,  1683,
-32768,   903,-32768,-32768,-32768,-32768,   996,  7485,   832,  1294,
  1689,   903,-32768,  1040,  7485,   832,  1265,    80,-32768,  1690,
   760,   761,  1420,  7485,  7485,   765,   769,  1433,  7485,  7485,
  7485,  7485,  1692,  6270,  1693,  1694,-32768,  1691,-32768,  1696,
  1676,   945,   953,  1700,  1695,  1701,  1665,  1417,    27,  1540,
-32768,  6782,  1702,   832,  1047,-32768,-32768,  1703,   832,  1074,
-32768,-32768,-32768,   903,   786,   811,   826,   157,   157,   846,
   851,   852,   157,   157,   157,   157,  7485,   856,   863,  1434,
  7485,  7485,   903,-32768,  1564,  1631,  1698,  1635,  1647,  1709,
  1010,-32768,-32768,-32768,  1279,   832,-32768,   832,   832,-32768,
   832,  1707,  8576,  8666,   877,  1657,  1706,  8756,  8846,   884,
  1710,  1711,  1712,  1713,   157,   887,   891,   913,   157,   157,
  1708,  1714,  1719,  1649,  1722,  1724,  1650,  1652,  1655,  1715,
  1152,-32768,-32768,-32768,-32768,  1513,  1729,  1731,  8936,-32768,
-32768,  1732,  1734,  9026,-32768,-32768,-32768,-32768,  1730,  9116,
  9206,   925,  1733,  1735,  1648,  1645,  1669,  1736,  1674,  1680,
  1737,  1739,  1741,  1668,  1605,-32768,-32768,   147,   202,-32768,
  1744,  1745,  1747,  1748,  1750,  1751,  1752,-32768,  1753,  1754,
  9296,-32768,-32768,  1218,  1729,  1731,  1681,  1732,  1734,  1684,
  1685,  1697,  1756,-32768,   612,   959,  1740,  1757,  1758,  1763,
  1769,  1779,  1780,  1784,  1785,  1201,  1748,  1752,  1753,  1754,
  1699,  7485,  7485,  1782,  7485,  7485,  1783,  1786,  1788,  1789,
  1785,   157,   157,  7485,   157,   157,  7485,  7485,  7485,  1793,
  1794,  1795,   157,  1796,  1797,   157,   157,   157,  7485,-32768,
-32768,  1798,-32768,-32768,  1799,  1800,  1801,   157,-32768,-32768,
-32768,-32768,  1802,-32768,  1742,  1844,-32768
};

static const short yypgoto[] = {-32768,
-32768,    40,  1338,   149,  1166,   762,    18,-32768,-32768,  -254,
   -45,  -226,    42,  -687,-32768,  -197,   -42,  1242,-32768,   -44,
-32768,   292,   378,  1705,   -13,  -424,-32768,  -298,  -124,-32768,
  1147,  -363,-32768,-32768,  -487,    66,-32768,  1515,-32768,-32768,
  -150,-32768,-32768,-32768,-32768,-32768,-32768,  -183,-32768,   104,
    28,  1717,-32768,  -225,  -414,  1439,  -258,  -851,  -190,-32768,
  1226,   969,  1288,   859,-32768,  1075,  1227,  -176,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -981,-32768,-32768,-32768,-32768,
  1051,-32768,  -470,  1873,   279
};


#define	YYLAST		9536


static const short yytable[] = {   146,
   391,   675,   561,   865,   564,   493,  1009,   497,   211,   459,
   462,   398,   689,   323,   324,   804,   169,   233,   234,    76,
   808,   680,   647,   648,   243,   199,   874,   819,   554,   418,
   401,   423,   402,   789,     1,   170,   611,   615,   618,   447,
   448,   449,   450,   451,   452,   380,   349,  1100,   105,   106,
   107,   108,   104,   158,   159,   160,   161,   162,   163,  1058,
   171,   194,  1103,   194,   182,   459,   541,   485,   210,    76,
   317,   442,   442,   442,   442,   442,   442,   442,   215,   380,
   396,   624,   194,  1165,   380,   380,   265,   268,   194,   380,
   713,   515,   717,   194,   194,   722,   624,   288,   194,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,   308,   254,   214,   311,   312,   313,
   266,   426,   261,   177,   187,   380,   179,   810,   811,   812,
   813,   814,   397,   375,   194,   177,   517,   177,   137,   142,
   252,   142,  1101,   624,   370,  1102,   325,   326,   188,    66,
    75,   459,   390,   459,   595,  1110,   253,  1104,   195,   404,
  1105,   353,   574,   211,   241,   237,   200,   771,   485,   516,
   262,   263,   774,   777,  1011,  1012,   289,   195,  1166,   267,
   269,  1167,   380,   195,   288,  -124,  -124,   189,   195,   195,
   406,   194,   353,   195,   656,   582,  1315,   685,   211,   243,
   219,   270,   320,   190,   344,   345,   346,   347,   348,   191,
   459,   459,   276,   785,   518,   201,   714,   555,   714,   494,
    76,   714,   460,   210,   365,   366,   367,   368,   237,   195,
   137,   470,   164,   215,   520,   215,   406,   481,   369,   380,
   289,    66,   486,    66,   611,   638,   242,   192,   242,   807,
   406,   250,   406,  1068,   642,   643,   251,   237,    76,   237,
   820,   194,   736,   289,    76,    76,    76,   317,   288,  1286,
   926,   289,   380,    76,    76,    76,    76,   749,   539,   355,
   380,   194,   548,   325,   326,   364,   195,   504,   507,   194,
   237,  1316,   268,    86,   271,   543,   544,   265,   197,   510,
   545,   546,   547,  1314,   395,   893,   467,   896,   411,   899,
   900,   193,   521,   511,   750,   203,  1212,    66,   265,   204,
   194,   876,   242,   862,   485,  1113,   575,   427,   165,   556,
   166,   167,   168,   237,   169,   137,   558,   559,   353,   694,
   797,   220,   212,    86,   567,   575,    66,   289,   571,   572,
   137,   399,   266,   170,   694,   609,   253,   238,   244,   621,
   931,    66,   237,   325,   326,   515,   221,   236,   936,   622,
   233,   234,   517,   266,   288,   222,   195,   237,   194,   902,
  1005,  1006,   551,   520,   195,   269,   610,   614,   617,   464,
   267,  -125,  -125,   459,   462,   474,   475,   476,  1112,   957,
   325,   326,   286,   223,   488,   489,   490,   491,   353,   224,
   270,   267,   800,   987,    76,   253,   714,   289,   681,   714,
   211,   714,   855,   251,   714,  1128,   194,  1021,   318,   715,
   254,   714,   695,   714,   467,   714,   714,   714,   493,   406,
  1129,   691,   807,   626,   964,   429,    66,   695,   225,   215,
   627,    76,   718,   289,   835,   807,   194,   252,   215,   215,
   638,   628,   237,   569,   570,   289,   286,   839,   840,   841,
   688,   226,   406,   253,   236,  1077,  1078,  1079,   244,   939,
   210,  1213,  1214,   376,   227,   439,   194,   289,   751,   212,
   215,   325,   326,   620,    86,   365,   367,   212,   238,   711,
   442,   442,   442,   271,   467,   252,   380,   716,   228,  -122,
  -122,   325,   326,   440,   440,   440,   440,   440,   440,   440,
   940,   253,   714,   714,   714,   194,   690,   286,   289,  1135,
   719,   575,   465,   244,   229,   252,  1008,   471,    86,    86,
    86,   251,   320,   268,  1136,   606,   720,    86,    86,    86,
    86,   253,   723,   419,   235,   194,   495,   575,   498,   500,
   502,   505,   508,   609,    66,   601,   515,   194,   918,   420,
  1092,   517,    66,   286,   325,   326,   817,   714,   427,  1022,
   237,   253,   644,   714,   265,   714,   288,   714,   237,   714,
   714,   714,   714,   245,   610,   714,   520,   730,   714,   288,
   230,   459,   231,   714,   657,    30,   460,   406,   549,   246,
   752,   711,   753,   551,   808,   325,   326,   732,   266,   426,
   658,   827,   233,   353,   721,   830,   350,   351,    46,    47,
   724,    48,    49,    50,   783,   232,   269,   858,   736,   551,
   366,   744,   821,   286,   725,   992,   792,   265,   754,   726,
   195,   755,   270,   756,   754,   582,   247,   755,   270,   756,
   576,  1315,   253,   822,   215,   289,   583,   406,   406,   265,
   531,   860,   671,   289,   727,   731,   663,   267,   289,   212,
   260,   823,   672,   671,   714,   714,   730,   429,    86,    63,
    64,   286,   732,   674,   238,   733,   325,   326,   325,   326,
   325,   326,   289,   526,   426,   798,   527,  1173,   425,   757,
   238,   867,   870,   286,   248,   757,   737,  1178,   249,   745,
   716,   359,   714,   292,  1106,    86,   876,  1107,   889,   714,
   549,   714,    74,   714,  1076,   906,   907,   908,   909,   910,
   267,   719,  1114,   272,   890,   271,   325,   326,  1169,  1111,
   237,   271,   325,   326,   212,   891,  1316,-32768,   459,   724,
   732,  1073,   267,   894,   824,   897,   430,   309,   318,  1222,
   825,   591,   262,   263,   697,   983,   699,   700,   701,   702,
   703,   704,   310,   705,   706,   513,   707,   708,  1241,   314,
    30,  1043,   288,   360,   963,   361,   165,   394,   166,   167,
   168,   288,   169,   315,   877,    76,   716,   984,   274,  1028,
   515,   517,   625,    46,    47,   515,    48,    49,    50,   517,
   592,   170,   719,   230,   439,   231,   316,   431,    30,   432,
   998,   999,   183,   724,   184,   230,  1223,   231,   892,   549,
    30,   895,   951,   898,    55,    56,    57,    58,    59,    60,
    76,    46,    47,   895,    48,    49,    50,   360,   232,   361,
  1019,  1224,   378,   629,    47,   576,   630,    49,    50,   380,
   232,   289,   380,   583,   458,   165,   732,   166,   167,   168,
   289,   169,   483,   952,   360,   898,   361,   898,  1185,  1186,
     3,   212,   185,  1190,   186,   459,  1228,  1191,   428,   286,
   170,  1229,   732,    66,   286,   459,   515,     4,     5,     6,
     7,   286,  1018,   517,   716,   593,   670,   594,   433,   237,
   177,     8,    30,   484,   714,   714,  1060,  1259,   286,   714,
   714,   831,     9,   456,  1264,    10,   954,  1270,  1070,   719,
  1326,  1271,   440,   440,   440,    46,    47,  1183,    48,    49,
    50,   929,   586,   437,  1225,    74,   746,   459,   288,  1034,
   714,   288,   851,   732,   288,   714,   438,    74,   230,  1035,
   231,   714,   714,    30,   716,  1301,   459,   453,   380,   719,
  1230,   991,  -123,  -123,  1236,   868,   871,  1205,   362,   363,
  1206,  1237,   325,   326,   406,  1208,   631,    47,  1209,   632,
    49,    50,   714,   232,   528,   898,   458,   529,   512,  1116,
    76,   934,   898,   251,  1036,   716,    11,    12,    13,   719,
    14,    15,    16,    17,    18,   273,    19,    20,  1037,   230,
   519,   231,   325,   326,    30,   325,   326,   289,   380,   514,
   289,  1272,  1038,   289,  1127,   325,   326,   587,  1207,   588,
  1171,  1174,  1248,   898,  1134,  1249,  1210,   849,    47,   530,
   850,    49,    50,  1075,   232,   864,   288,   761,   393,   288,
   762,   560,   763,   532,   574,   288,   250,  1081,    76,    86,
   661,   251,   165,   662,   166,   167,   168,   433,   169,    76,
   325,   326,   434,   944,   265,  1179,   754,   286,   947,   755,
    74,   756,  1218,   548,   325,   326,   286,   170,   531,   989,
   990,   250,  1084,  1250,  1175,    76,   251,   270,   325,   326,
   380,  1180,   325,   326,    86,   380,   325,   326,   764,  1221,
  1188,  1189,   360,   170,   361,  1193,  1194,  1195,  1196,   434,
   288,  1097,   137,   325,   326,   289,  1014,  1015,   289,  1016,
  1017,   557,   435,    66,   289,   916,  1285,   757,   242,   256,
   328,    74,   577,   257,   258,   259,   325,   326,   454,   237,
   184,   137,   410,   325,   326,   573,   356,   357,   333,   334,
   335,   336,    66,  1235,   325,   326,   424,  1239,  1240,    76,
   445,   445,   445,   445,   445,   445,   445,   607,   237,   728,
   325,   326,   729,   455,   986,   186,   256,   988,  1056,  1130,
   257,   258,   259,  1066,   563,   566,   329,   330,   410,   289,
  1137,   168,   578,   169,   337,   338,   -65,    95,   339,   340,
   341,   581,   410,   669,   410,   380,   360,  1010,   361,   579,
   380,   677,   170,   256,   328,   580,  1130,   257,   258,   259,
   244,   256,   584,   250,  1086,   257,   258,   259,   251,   429,
   542,   742,   196,   286,   743,   604,   286,   819,   585,   286,
   401,   597,   402,  1290,   250,  1153,   216,    95,   596,   251,
   678,   602,   603,   -65,    86,   633,   829,   -65,   -65,   -65,
   256,   240,    95,   679,   257,   258,   259,  1139,   256,   255,
   329,   330,   257,   258,   259,   605,   255,   801,   337,   338,
   325,   326,   339,   340,   341,  1182,   635,   624,  1342,  1343,
  1215,  1345,  1346,   636,   562,   565,   360,   645,   361,  1251,
  1353,   639,   640,  1356,  1357,  1358,   290,   256,   454,  1071,
   599,   257,   258,   259,   646,  1368,   431,   431,   432,   432,
   256,   183,    86,   599,   257,   258,   259,   360,   360,   361,
   361,   256,   321,    86,   641,   257,   258,   259,   612,   616,
   619,   286,   256,   649,   286,  1099,   257,   258,   259,  1159,
   286,   166,   167,   168,  1096,   169,   256,   650,   651,    86,
   257,   258,   259,   256,   257,   258,   259,   257,   258,   259,
   290,   256,   652,   653,   170,   257,   258,   259,   255,   255,
   255,   255,    95,   371,   372,   373,   374,   377,   654,   379,
   655,   410,   382,   216,   250,  1155,   660,   914,    95,   251,
   915,   216,   421,   256,   664,   687,   256,   257,   258,   259,
   257,   258,   259,   914,   676,   286,   919,   444,   444,   444,
   444,   444,   444,   444,   410,   328,   728,   682,   684,   958,
   457,   290,   728,    86,   259,  1187,   468,    95,   692,   693,
   710,   472,    95,    95,    95,   728,   728,   255,  1192,  1238,
   698,    95,    95,    95,    95,   712,   734,   735,   738,   739,
   496,   747,   499,   501,   503,   506,   509,    28,    29,   740,
    31,    32,    33,    34,   748,   741,   759,   290,   758,   361,
   425,   329,   330,   331,   332,   333,   334,   335,   336,   337,
   338,   140,   426,   339,   340,   341,   177,   770,   780,   375,
    28,    29,   781,    31,    32,    33,    34,   788,   791,   802,
   803,   805,   552,   818,   808,   765,   826,  1291,   828,    55,
    56,    57,    58,    59,    60,   833,   432,    62,   836,   837,
   838,   844,  1288,   846,   842,  1226,  1227,   845,   847,    30,
  1231,  1232,  1233,  1234,   848,   853,   612,   290,   854,   583,
   485,   861,    55,    56,    57,    58,    59,    60,   873,   410,
    62,   882,    46,    47,   468,    48,    49,    50,   884,   903,
   379,   886,   888,   902,   904,   905,   583,   911,   916,   912,
   913,   920,  1269,   216,   255,   921,  1273,  1274,   922,   445,
   445,   445,    95,   923,    73,   290,   924,   959,   240,   356,
   357,   333,   334,   335,   336,   942,   956,   325,   326,   960,
   961,   966,   967,   985,   634,   968,   621,   290,   969,   410,
   410,   970,   971,   973,   993,   863,   994,  1289,   995,    95,
   996,   997,  1000,  1001,   552,  1002,  1003,  1004,   671,  1007,
  1021,  1013,  1023,  1042,  1030,  1032,  1039,  1040,  1072,   255,
   255,   659,  1041,  1044,  1046,  1061,  1062,  1082,   216,  1085,
  1087,  1094,  1242,  1093,  1108,  1098,  1109,  1095,  1101,  1104,
  1106,  1119,   321,  1120,  1121,  1122,    87,  1132,  1161,  1138,
   255,  1140,  1260,  1164,  1144,  1156,  1157,  1145,  1149,  1351,
  1352,  1150,  1354,  1355,  1151,  1152,  1158,  1162,  1166,  1081,
  1362,  1163,  1172,  1365,  1366,  1367,  1084,  1086,  1168,  1184,
  1203,  1376,  1177,  1244,  1211,  1373,  1197,  1201,  1202,  1204,
  1153,  1155,  1216,  1219,  1247,   213,    87,  1256,  1275,  1243,
  1284,  1261,  1304,  1245,  1276,  1265,  1266,  1267,  1268,  1277,
   239,    87,  1279,   552,  1280,  1246,   965,  1278,  1281,  1292,
  1282,  1293,  1295,  1283,  1296,  1298,  1307,  1310,  1302,  1311,
  1303,  1312,  1305,   266,  1332,  1317,  1313,  1318,  1319,   468,
  1320,  1321,  1322,  1323,  1324,   767,  1331,   379,  1334,   768,
   769,  1333,   773,   776,   779,   287,  1306,  1335,   782,   784,
   787,  1308,   790,  1336,   255,   216,   255,  1309,  1327,  1337,
  1338,  1328,  1329,   290,  1339,  1340,  1344,  1347,   290,  1350,
  1348,   319,  1349,  1377,  1330,   290,  1341,  1359,   709,  1360,
  1361,  1363,  1364,  1369,  1370,  1371,  1372,  1374,   866,  1160,
   878,   816,   290,   343,   955,   832,   766,   974,     0,     0,
   834,     0,     0,     0,   103,     0,   444,   444,   444,   287,
     0,     0,   843,     0,     0,     0,     0,     0,     0,     0,
     0,    87,     0,     0,     0,     0,   852,     0,     0,     0,
     0,     0,   213,     0,     0,     0,     0,    87,     0,     0,
   213,   239,     0,     0,     0,     0,     0,     0,     0,   869,
   872,     0,     0,   218,   103,     0,   441,   441,   441,   441,
   441,   441,   441,     0,     0,     0,     0,     0,     0,   103,
   287,     0,     0,     0,     0,   466,    87,     0,     0,     0,
   319,    87,    87,    87,     0,     0,     0,     0,     0,     0,
    87,    87,    87,    87,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   410,     0,     0,     0,
     0,     0,     0,   291,     0,     0,   287,     0,     0,     0,
     0,     0,     0,     0,     0,   925,   928,     0,     0,   933,
     0,     0,   938,     0,     0,     0,   943,     0,   946,   322,
   950,     0,     0,    95,     0,     0,     0,   255,     0,     0,
     0,   550,   255,     0,     0,   772,   775,   778,     0,     0,
     0,   290,     0,   786,     0,     0,     0,     0,     0,     0,
   290,     0,     0,     0,     0,     0,     0,   291,     0,     0,
     0,     0,     0,     0,     0,     0,   287,     0,    95,   103,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   218,     0,     0,   466,     0,   103,     0,     0,   218,     0,
  1170,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   213,     0,   446,   446,   446,   446,   446,   446,
   446,    87,     0,     0,   287,     0,     0,   239,     0,     0,
     0,     0,     0,   469,   103,     0,     0,     0,   473,   103,
   103,   103,     0,   239,     0,     0,   287,     0,   103,   103,
   103,   103,     0,     0,     0,     0,     0,     0,    87,     0,
     0,     0,     0,   550,     0,     0,  1045,     0,     0,     0,
     0,  1048,     0,     0,   291,     0,  1052,     0,     0,     0,
     0,  1055,     0,     0,     0,     0,     0,   213,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   319,   255,     0,    95,     0,     0,     0,     0,   553,
     0,     0,     0,     0,     0,     0,     0,   290,     0,     0,
   290,     0,     0,   290,     0,     0,     0,     0,     0,   927,
     0,   930,   932,     0,   935,   937,     0,   941,    95,     0,
   945,     0,   948,   949,   291,   953,     0,     0,     0,     0,
     0,     0,   883,     0,   885,     0,     0,   887,     0,     0,
     0,   469,     0,     0,     0,     0,     0,     0,     0,     0,
   901,     0,   550,     0,     0,     0,     0,     0,     0,     0,
   218,     0,     0,     0,     0,     0,     0,     0,     0,   103,
     0,     0,   291,     0,     0,     0,     0,     0,   466,     0,
     0,     0,     0,     0,     0,     0,    95,     0,     0,     0,
     0,     0,     0,     0,   291,     0,     0,    95,     0,     0,
     0,     0,     0,     0,   213,   290,   103,     0,   290,     0,
     0,   553,   287,     0,   290,     0,     0,   287,     0,     0,
     0,     0,     0,    95,   287,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   218,   883,   887,     0,     0,
     0,   287,     0,     0,     0,     0,     0,     0,     0,   322,
     0,     0,     0,     0,     0,   441,   441,   441,     0,     0,
     0,     0,     0,     0,  1047,     0,  1049,  1050,     0,  1051,
     0,  1053,  1054,     0,     0,     0,  1057,  1059,     0,   290,
     0,     0,  1063,     0,  1064,  1065,     0,     0,  1067,  1069,
  1020,     0,     0,     0,     0,     0,  1024,    95,  1025,     0,
  1026,     0,  1027,     0,   883,   887,     0,     0,  1029,     0,
     0,  1031,     0,     0,     0,     0,  1033,     0,     0,     0,
   553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   469,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   218,     0,     0,     0,     0,     0,     0,     0,
   291,     0,     0,     0,     0,   291,  1123,     0,     0,     0,
  1124,     0,    87,  1125,  1126,     0,     0,  1029,  1031,     0,
     0,     0,     0,     0,  1133,     0,     0,     0,     0,   291,
   287,     0,     0,     0,     0,     0,     0,     0,     0,   287,
     0,     0,     0,   446,   446,   446,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1115,     0,    87,     0,     0,
     0,     0,  1031,     0,  1117,     0,  1118,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,  1176,     0,     0,
     0,     0,     0,     0,  1181,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1217,     0,     0,     0,     0,  1220,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1252,     0,  1253,  1254,     0,  1255,
   103,     0,     0,    87,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   287,     0,   291,   287,
     0,     0,   287,     0,     0,     0,     0,   291,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    87,     0,     0,
     0,     0,     0,     0,     0,   103,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   883,     0,
     0,     0,     0,   883,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    87,     0,     0,     0,     0,
     0,     0,     0,  1031,     0,     0,    87,     0,  1031,     0,
     0,     0,     0,     0,   287,   883,     0,   287,     0,     0,
     0,     0,     0,   287,     0,     0,     0,     0,     0,     0,
     0,     0,    87,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  1031,     0,     0,   856,     0,
     0,     0,     0,   109,     0,     0,     0,     0,     0,     0,
   110,   103,     0,     0,     0,    28,    29,     0,    31,    32,
    33,    34,     0,     0,   291,     0,     0,   291,     0,     0,
   291,     0,     0,     0,     0,     0,     0,     0,   287,     0,
     0,     0,     0,     0,     0,   103,     0,   400,     0,     0,
   401,     0,   402,     0,     0,     0,    87,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   962,     0,     0,     0,     0,   109,     0,     0,     0,     0,
     0,     0,   110,   103,     0,   137,     0,    28,    29,     0,
    31,    32,    33,    34,   103,   138,   403,     0,     0,   139,
     0,     0,   291,     0,     0,   291,     0,     0,     0,     0,
     0,   291,   857,   177,     0,   140,   141,   142,     0,   613,
   103,     0,   401,     0,   402,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,     0,     0,     0,   291,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,   396,     0,
     0,     0,     0,   109,   103,     0,     0,   138,    66,     0,
   110,   139,     0,     0,     0,    28,    29,     0,    31,    32,
    33,    34,     0,     0,    73,   177,     0,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   111,     0,     0,
   397,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   859,     0,     0,     0,     0,   109,     0,     0,     0,     0,
     0,     0,   110,     0,     0,   137,     0,    28,    29,     0,
    31,    32,    33,    34,     0,   138,    66,     0,     0,   139,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    73,     0,     0,   140,   141,   142,     0,   111,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,     0,
    22,     0,     0,   205,    73,    24,    25,   140,   141,   142,
   172,     0,    26,     0,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,   173,   174,    37,    38,    39,    40,
     0,    41,    42,    43,     0,    44,    45,     0,     0,     0,
    46,    47,     0,    48,    49,    50,     0,   206,     0,     0,
    52,     0,     0,     0,    53,     0,     0,     0,     0,     0,
     0,     0,    54,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,    61,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,    63,    64,     0,    65,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   138,   207,     0,     0,   139,
     0,    67,   208,    68,    69,    70,    71,    72,     0,     0,
     0,     0,    73,   177,    74,   140,   141,   142,    22,     0,
     0,   205,     0,    24,    25,     0,     0,     0,   172,     0,
   412,     0,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,   173,   174,    37,    38,    39,    40,     0,    41,
    42,    43,     0,    44,    45,     0,     0,     0,   413,    47,
     0,   414,   386,   415,     0,   206,     0,     0,    52,     0,
     0,     0,    53,     0,     0,     0,     0,     0,     0,     0,
    54,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,    61,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,   416,
   417,     0,    65,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,   207,     0,     0,   139,     0,    67,
   208,    68,    69,    70,    71,    72,     0,     0,     0,     0,
    73,   177,   389,   140,   141,   142,    22,     0,     0,   205,
     0,    24,    25,     0,     0,     0,   172,     0,    26,     0,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
   173,   174,    37,    38,    39,    40,     0,    41,    42,    43,
     0,    44,    45,     0,     0,     0,   665,    47,     0,   666,
    49,   667,     0,   206,     0,     0,    52,     0,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,    54,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
    61,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,   668,    64,     0,
    65,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   138,   207,     0,     0,   139,     0,    67,   208,    68,
    69,    70,    71,    72,     0,     0,     0,   109,    73,   177,
    74,   140,   141,   142,   172,     0,   277,     0,     0,    28,
    29,     0,    31,    32,    33,    34,     0,     0,   173,   174,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   278,     0,     0,   279,   280,   281,
     0,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,   283,   284,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   138,
    66,     0,     0,   139,     0,     0,   176,     0,     0,     0,
     0,     0,     0,     0,     0,   109,    73,   177,   285,   140,
   141,   142,   110,     0,   383,     0,   231,    28,    29,    30,
    31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   384,    47,     0,   385,   386,   387,     0,   388,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,   283,   284,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,    66,     0,
     0,   139,     0,   242,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   109,    73,     0,   389,   140,   141,   142,
   172,     0,   277,     0,     0,    28,    29,     0,    31,    32,
    33,    34,     0,     0,   173,   174,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   522,     0,     0,   523,   280,   524,     0,   352,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,   525,   284,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   138,    66,     0,     0,   139,
     0,     0,   176,     0,     0,     0,     0,     0,     0,     0,
     0,   109,    73,   177,   285,   140,   141,   142,   172,     0,
   277,     0,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,   173,   174,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   278,     0,
     0,   279,   280,   281,     0,   637,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,   283,
   284,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
   208,     0,     0,     0,     0,     0,     0,     0,     0,   109,
    73,   177,   285,   140,   141,   142,   172,     0,   277,     0,
     0,    28,    29,     0,    31,    32,    33,    34,     0,     0,
   173,   174,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   522,     0,     0,   523,
   280,   524,     0,   637,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,   525,   284,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,   109,     0,     0,
     0,   138,    66,     0,   110,   139,   277,     0,   208,    28,
    29,     0,    31,    32,    33,    34,     0,     0,    73,   177,
   285,   140,   141,   142,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   278,     0,     0,   279,   280,   281,
     0,   608,     0,     0,   401,     0,   402,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,   283,   284,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,     0,   109,     0,     0,     0,   138,
   403,     0,   110,   139,   277,     0,     0,    28,    29,     0,
    31,    32,    33,    34,     0,     0,    73,   177,   285,   140,
   141,   142,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   522,     0,     0,   523,   280,   524,     0,   608,
     0,     0,   401,     0,   402,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,   525,   284,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,     0,   109,     0,     0,     0,   138,   403,     0,
   110,   139,   533,     0,     0,    28,    29,    30,    31,    32,
    33,    34,     0,     0,    73,   177,   285,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   534,    47,     0,   535,    49,   536,     0,   111,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,   537,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,   109,     0,     0,     0,   138,    66,     0,   110,   139,
   277,     0,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,    73,   177,   538,   140,   141,   142,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   278,     0,
     0,   279,   280,   281,     0,   806,     0,     0,   401,     0,
   402,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,   283,
   284,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,     0,     0,     0,     0,     0,   109,
     0,     0,     0,   138,    66,     0,   110,   139,   277,     0,
     0,    28,    29,     0,    31,    32,    33,    34,     0,     0,
    73,     0,   285,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   522,     0,     0,   523,
   280,   524,     0,   806,     0,     0,   401,     0,   402,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,   525,   284,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,   109,     0,     0,
     0,   138,    66,     0,   110,   139,   277,     0,     0,    28,
    29,     0,    31,    32,    33,    34,     0,     0,    73,     0,
   285,   140,   141,   142,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   522,     0,     0,   523,   280,   524,
     0,   600,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,   525,   284,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,     0,   109,     0,     0,     0,   138,
   207,     0,   110,   139,   277,   242,     0,    28,    29,     0,
    31,    32,    33,    34,     0,     0,    73,     0,   285,   140,
   141,   142,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   793,     0,     0,   794,   280,   795,     0,   600,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,   796,   284,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,     0,   109,     0,     0,     0,   138,    66,     0,
   110,   139,   277,   242,     0,    28,    29,     0,    31,    32,
    33,    34,     0,     0,    73,     0,   285,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   278,     0,     0,   279,   280,   281,     0,   282,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,   109,     0,     0,     0,   138,    66,     0,   110,   139,
   277,     0,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,    73,     0,   285,   140,   141,   142,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   522,     0,
     0,   523,   280,   524,     0,   282,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,   525,
   284,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,     0,     0,     0,     0,     0,   109,
     0,     0,     0,   138,    66,     0,   110,   139,   277,     0,
     0,    28,    29,     0,    31,    32,    33,    34,     0,     0,
    73,     0,   285,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   522,     0,     0,   523,
   280,   524,     0,   972,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,   525,   284,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,   109,     0,     0,
     0,   138,    66,     0,   110,   139,   277,     0,     0,    28,
    29,     0,    31,    32,    33,    34,     0,     0,    73,     0,
   285,   140,   141,   142,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   793,     0,     0,   794,   280,   795,
     0,   282,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,   796,   284,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,     0,   109,     0,     0,     0,   138,
    66,     0,   110,   139,   277,     0,     0,    28,    29,     0,
    31,    32,    33,    34,     0,     0,    73,     0,   285,   140,
   141,   142,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   278,     0,     0,   279,   280,   281,     0,  1080,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,   283,   284,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,     0,   109,     0,     0,     0,   138,    66,     0,
   110,   139,   277,     0,     0,    28,    29,     0,    31,    32,
    33,    34,     0,     0,    73,     0,   285,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   278,     0,     0,   279,   280,   281,     0,  1083,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,     0,     0,     0,
     0,   109,     0,     0,     0,   138,    66,     0,   110,   139,
   277,     0,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,    73,     0,   285,   140,   141,   142,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1141,     0,
     0,  1142,   280,   524,     0,   282,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,  1143,
   284,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,     0,     0,     0,     0,     0,   109,
     0,     0,     0,   138,    66,     0,   110,   139,   277,     0,
     0,    28,    29,     0,    31,    32,    33,    34,     0,     0,
    73,     0,   285,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  1146,     0,     0,  1147,
   280,   524,     0,   282,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,  1148,   284,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,   109,     0,     0,
     0,   138,    66,     0,   110,   139,   277,     0,     0,    28,
    29,     0,    31,    32,    33,    34,     0,     0,    73,     0,
   285,   140,   141,   142,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   278,     0,     0,   279,   280,   281,
     0,  1154,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,   112,     0,    62,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,     0,   283,   284,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,     0,   109,     0,     0,     0,   138,
    66,     0,   110,   139,   277,     0,     0,    28,    29,     0,
    31,    32,    33,    34,     0,     0,    73,     0,   285,   140,
   141,   142,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  1198,     0,     0,  1199,   280,   524,     0,   282,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,  1200,   284,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   137,     0,     0,
     0,     0,   109,     0,     0,     0,     0,   138,    66,   110,
     0,   139,     0,     0,    28,    29,    30,    31,    32,    33,
    34,     0,     0,     0,    73,     0,   285,   140,   141,   142,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    46,
    47,     0,    48,    49,    50,     0,   282,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    55,    56,    57,    58,
    59,    60,   112,     0,    62,   113,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
   458,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   137,     0,     0,     0,     0,   109,
     0,     0,     0,     0,   138,    66,   110,     0,   139,     0,
     0,    28,    29,    30,    31,    32,    33,    34,     0,     0,
     0,    73,     0,     0,   140,   141,   142,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    46,    47,     0,    48,
    49,    50,     0,   815,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,   458,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   138,    66,     0,     0,   139,     0,     0,     0,     0,
     0,     0,     0,     0,    22,     0,     0,    23,    73,    24,
    25,   140,   141,   142,     0,     0,    26,     0,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,     0,     0,
    37,    38,    39,    40,     0,    41,    42,    43,     0,    44,
    45,     0,     0,     0,    46,    47,     0,    48,    49,    50,
     0,   463,     0,     0,    52,     0,     0,     0,    53,     0,
     0,     0,     0,     0,     0,     0,    54,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,     0,    61,    62,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    63,    64,     0,    65,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    66,     0,     0,     0,     0,    67,     0,    68,    69,    70,
    71,    72,     0,     0,    22,     0,    73,    23,    74,    24,
    25,     0,     0,     0,     0,     0,    26,     0,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,     0,     0,
    37,    38,    39,    40,     0,    41,    42,    43,     0,    44,
    45,     0,     0,     0,    46,    47,     0,    48,    49,    50,
     0,    51,     0,     0,    52,     0,     0,     0,    53,     0,
     0,     0,     0,     0,     0,     0,    54,     0,     0,     0,
     0,    55,    56,    57,    58,    59,    60,     0,    61,    62,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   109,     0,     0,     0,     0,    63,    64,   172,    65,     0,
     0,     0,    28,    29,     0,    31,    32,    33,    34,     0,
     0,   173,   174,     0,     0,     0,     0,     0,     0,     0,
    66,     0,     0,     0,     0,    67,     0,    68,    69,    70,
    71,    72,     0,     0,   175,     0,    73,     0,    74,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   112,     0,    62,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,     0,     0,     0,
     0,     0,     0,   109,     0,     0,     0,     0,     0,     0,
   172,     0,   137,     0,     0,    28,    29,     0,    31,    32,
    33,    34,   138,    66,   173,   174,   139,     0,     0,   176,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    73,
   177,     0,   140,   141,   142,     0,     0,   422,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    55,    56,    57,
    58,    59,    60,   112,     0,    62,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     0,     0,     0,     0,   109,     0,     0,     0,     0,     0,
     0,   110,     0,     0,     0,   137,    28,    29,     0,    31,
    32,    33,    34,     0,     0,   138,    66,     0,     0,   139,
     0,     0,   208,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    73,   177,     0,   140,   141,   142,   400,     0,
     0,   401,     0,   402,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    55,    56,
    57,    58,    59,    60,   112,     0,    62,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,     0,     0,     0,     0,   109,     0,     0,     0,     0,
     0,     0,   110,     0,     0,     0,   137,    28,    29,     0,
    31,    32,    33,    34,     0,     0,   138,   403,     0,     0,
   139,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    73,   177,     0,   140,   141,   142,   400,
     0,     0,   401,     0,   402,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    55,
    56,    57,    58,    59,    60,   112,     0,    62,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,     0,     0,     0,     0,     0,   109,     0,
     0,     0,     0,     0,     0,   172,     0,   477,     0,     0,
    28,    29,     0,    31,    32,    33,    34,   138,   403,   173,
   174,   139,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   478,   177,     0,   140,   141,   142,
     0,     0,   111,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    55,    56,    57,    58,    59,    60,   112,     0,
    62,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,     0,     0,     0,     0,   109,
     0,     0,     0,     0,     0,     0,   110,     0,     0,     0,
   137,    28,    29,     0,    31,    32,    33,    34,     0,     0,
   138,    66,     0,     0,   139,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    73,   177,     0,
   140,   141,   142,   613,     0,     0,   401,     0,   402,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    55,    56,    57,    58,    59,    60,   112,
     0,    62,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,     0,     0,     0,     0,
   109,     0,     0,     0,     0,     0,     0,   110,     0,     0,
     0,   137,    28,    29,     0,    31,    32,    33,    34,     0,
     0,   138,    66,     0,     0,   139,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    73,   177,
     0,   140,   141,   142,   111,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    55,    56,    57,    58,    59,    60,
   112,     0,    62,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,     0,     0,     0,
     0,   109,     0,     0,     0,     0,     0,     0,   110,     0,
     0,     0,   137,    28,    29,     0,    31,    32,    33,    34,
     0,     0,   138,    66,     0,     0,   139,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    73,
     0,     0,   140,   141,   142,   198,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,     0,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
    73,     0,     0,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   975,     0,     0,     0,     0,
    73,     0,     0,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   978,     0,     0,     0,     0,
   976,     0,     0,   977,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   979,     0,     0,   980,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   981,     0,     0,   982,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   976,     0,     0,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   979,     0,     0,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   981,     0,     0,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,  1089,     0,     0,     0,     0,
  1088,     0,     0,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
  1090,     0,     0,  1091,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
  1090,     0,     0,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   976,     0,     0,  1257,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   979,     0,     0,  1258,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   976,     0,     0,  1262,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   979,     0,     0,  1263,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
  1090,     0,     0,  1294,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
  1090,     0,     0,  1297,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   976,     0,     0,  1299,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   979,     0,     0,  1300,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   110,     0,
     0,   879,     0,    28,    29,     0,    31,    32,    33,    34,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,   111,     0,     0,     0,     0,
  1090,     0,     0,  1325,   141,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    55,    56,    57,    58,    59,
    60,   112,     0,    62,   113,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,    66,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    73,     0,     0,   140,   141,   142
};

static const short yycheck[] = {    13,
   198,   472,    13,   691,    13,   260,   858,   266,    51,   236,
   236,   202,     1,   138,   139,    51,   114,    63,    64,     2,
    41,     1,   437,   438,    67,    39,     7,    50,   327,   206,
    53,   208,    55,     1,    11,   133,   400,   401,   402,   223,
   224,   225,   226,   227,   228,    41,   171,    50,     9,    10,
    11,    12,   145,    14,    15,    16,    17,    18,    19,    55,
    50,    50,    50,    50,    50,   292,   292,    41,    51,    52,
    50,   222,   223,   224,   225,   226,   227,   228,    51,    41,
     1,   117,    50,    50,    41,    41,    16,    16,    50,    41,
   515,    51,   517,    50,    50,   520,   117,   111,    50,   113,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,    74,    51,   131,   132,   133,
    50,    51,    81,   146,    50,    41,    23,   615,   616,   617,
   618,   619,    53,    50,    50,   146,    51,   146,   118,   150,
   129,   150,   145,   117,   187,   148,   127,   128,    50,   129,
     2,   378,   198,   380,   380,  1007,   145,   145,   145,   204,
   148,   175,    50,   206,    50,   145,     1,   129,    41,   129,
   115,   116,   129,   129,   862,   863,   111,   145,   145,   109,
   109,   148,    41,   145,   198,   115,   116,    50,   145,   145,
   204,    50,   206,   145,   453,    50,    50,    41,   241,   242,
    52,    16,   137,    50,   165,   166,   167,   168,   169,    50,
   437,   438,   109,   129,   129,    50,   515,   342,   517,   264,
   203,   520,   236,   206,   183,   184,   185,   186,   145,   145,
   118,   245,    12,   206,    51,   208,   250,   251,    50,    41,
   175,   129,   115,   129,   608,   422,   134,    50,   134,   613,
   264,    50,   266,    55,   431,   432,    55,   145,   241,   145,
   624,    50,    51,   198,   247,   248,   249,    50,   282,  1251,
   129,   206,    41,   256,   257,   258,   259,    41,   292,   176,
    41,    50,    50,   127,   128,   182,   145,   270,   271,    50,
   145,   145,    16,     2,   109,   309,   310,    16,    50,   272,
   314,   315,   316,  1285,   201,   730,   241,   732,   205,   734,
   735,   145,   129,   274,    41,    53,  1168,   129,    16,    50,
    50,    51,   134,   687,    41,  1013,   369,    51,   108,   343,
   110,   111,   112,   145,   114,   118,   350,   351,   352,    16,
   129,   145,    51,    52,   358,   388,   129,   282,   362,   363,
   118,   203,    50,   133,    16,   400,   145,    66,    67,    41,
   129,   129,   145,   127,   128,    51,   145,    50,   129,    51,
   416,   417,    51,    50,   388,    50,   145,   145,    50,    51,
   851,   852,   317,    51,   145,   109,   400,   401,   402,   241,
   109,   115,   116,   620,   620,   247,   248,   249,   115,   129,
   127,   128,   111,    50,   256,   257,   258,   259,   422,    50,
    16,   109,   603,   828,   397,   145,   715,   352,    50,   718,
   463,   720,   681,    55,   723,    41,    50,    51,   137,    51,
   389,   730,   109,   732,   369,   734,   735,   736,   693,   453,
    56,   486,   806,   129,   808,    51,   129,   109,    50,   422,
   129,   434,    51,   388,   645,   819,    50,   129,   431,   432,
   637,   129,   145,   360,   361,   400,   175,   651,   652,   653,
   484,    50,   486,   145,    50,   963,   964,   965,   187,    14,
   463,  1169,  1170,   192,    50,    50,    50,   422,    41,   198,
   463,   127,   128,    50,   203,   454,   455,   206,   207,   513,
   651,   652,   653,   109,   439,   129,    41,   129,    50,   115,
   116,   127,   128,   222,   223,   224,   225,   226,   227,   228,
    55,   145,   821,   822,   823,    50,   485,   236,   463,    41,
   129,   574,   241,   242,   145,   129,    50,   246,   247,   248,
   249,    55,   477,    16,    56,   397,    51,   256,   257,   258,
   259,   145,    51,   129,    50,    50,   265,   600,   267,   268,
   269,   270,   271,   608,   129,   129,    51,    50,   759,   145,
   985,    51,   129,   282,   127,   128,   621,   876,    51,   878,
   145,   145,   434,   882,    16,   884,   600,   886,   145,   888,
   889,   890,   891,    50,   608,   894,    51,    51,   897,   613,
    15,   828,    17,   902,   129,    20,   620,   621,   317,    50,
    41,   625,    41,   548,    41,   127,   128,    51,    50,    51,
   145,   635,   668,   637,   129,   639,   119,   120,    43,    44,
   129,    46,    47,    48,   129,    50,   109,   682,    51,   574,
   599,    51,    51,   352,   129,   836,   129,    16,    43,   129,
   145,    46,    16,    48,    43,    50,    50,    46,    16,    48,
   369,    50,   145,    51,   637,   600,   375,   681,   682,    16,
    51,   685,    41,   608,   129,   129,    51,   109,   613,   388,
    53,    51,    51,    41,   983,   984,    51,    51,   397,   104,
   105,   400,    51,    51,   403,   129,   127,   128,   127,   128,
   127,   128,   637,    43,    51,   602,    46,  1122,    51,   104,
   419,   694,   695,   422,    50,   104,   129,  1132,    50,   129,
   129,    40,  1021,    50,   145,   434,    51,   148,    51,  1028,
   439,  1030,   147,  1032,   961,   749,   750,   751,   752,   753,
   109,   129,    54,    42,    51,   109,   127,   128,  1112,  1008,
   145,   109,   127,   128,   463,    51,   145,   133,   985,   129,
    51,   959,   109,    51,   129,    51,    51,    50,   477,  1184,
   129,     1,   115,   116,   496,    51,   498,   499,   500,   501,
   502,   503,    50,   505,   506,    40,   508,   509,  1203,    50,
    20,   916,   806,   112,   808,   114,   108,    51,   110,   111,
   112,   815,   114,    50,   129,   788,   129,    51,    41,    51,
    51,    51,    40,    43,    44,    51,    46,    47,    48,    51,
    50,   133,   129,    15,    50,    17,    50,   112,    20,   114,
   844,   845,   145,   129,   147,    15,    51,    17,   129,   548,
    20,   129,    14,   129,    70,    71,    72,    73,    74,    75,
   833,    43,    44,   129,    46,    47,    48,   112,    50,   114,
   874,    51,    50,    43,    44,   574,    46,    47,    48,    41,
    50,   806,    41,   582,   104,   108,    51,   110,   111,   112,
   815,   114,    14,    55,   112,   129,   114,   129,   129,   129,
     8,   600,   145,   129,   147,  1122,    51,   129,    51,   608,
   133,    51,    51,   129,   613,  1132,    51,    25,    26,    27,
    28,   620,   873,    51,   129,   145,    51,   147,    51,   145,
   146,    39,    20,    55,  1223,  1224,   940,    51,   637,  1228,
  1229,   640,    50,   129,    51,    53,   788,    51,   952,   129,
  1304,    51,   651,   652,   653,    43,    44,  1138,    46,    47,
    48,    14,    50,    50,   129,   147,    51,  1184,   972,    51,
  1259,   975,   671,    51,   978,  1264,    50,   147,    15,    51,
    17,  1270,  1271,    20,   129,    51,  1203,    50,    41,   129,
   129,   833,   115,   116,   129,   694,   695,    43,   119,   120,
    46,   129,   127,   128,  1008,    43,    43,    44,    46,    46,
    47,    48,  1301,    50,    43,   129,   104,    46,    54,  1023,
   993,    14,   129,    55,    51,   129,   134,   135,   136,   129,
   138,   139,   140,   141,   142,    51,   144,   145,    51,    15,
   129,    17,   127,   128,    20,   127,   128,   972,    41,   147,
   975,   129,    51,   978,  1058,   127,   128,   145,   104,   147,
    51,    56,    43,   129,  1068,    46,   104,    43,    44,   129,
    46,    47,    48,   960,    50,   688,  1080,    43,    52,  1083,
    46,    51,    48,    51,    50,  1089,    50,    51,  1061,   788,
    43,    55,   108,    46,   110,   111,   112,    51,   114,  1072,
   127,   128,    41,    14,    16,    56,    43,   806,    14,    46,
   147,    48,    56,    50,   127,   128,   815,   133,    51,   831,
   832,    50,    51,   104,  1128,  1098,    55,    16,   127,   128,
    41,  1135,   127,   128,   833,    41,   127,   128,   104,    56,
  1144,  1145,   112,   133,   114,  1149,  1150,  1151,  1152,    41,
  1154,   993,   118,   127,   128,  1080,   868,   869,  1083,   871,
   872,    51,    54,   129,  1089,     4,     5,   104,   134,   108,
    61,   147,    41,   112,   113,   114,   127,   128,   145,   145,
   147,   118,   204,   127,   128,    51,   119,   120,   121,   122,
   123,   124,   129,  1197,   127,   128,    51,  1201,  1202,  1172,
   222,   223,   224,   225,   226,   227,   228,    54,   145,    43,
   127,   128,    46,   145,   827,   147,   108,   830,    14,  1061,
   112,   113,   114,    14,   356,   357,   117,   118,   250,  1154,
  1072,   112,    51,   114,   125,   126,    51,     2,   129,   130,
   131,    51,   264,    51,   266,    41,   112,   860,   114,    41,
    41,    51,   133,   108,    61,    41,  1098,   112,   113,   114,
   959,   108,    41,    50,    51,   112,   113,   114,    55,    51,
   292,    43,    37,   972,    46,    51,   975,    50,    41,   978,
    53,    41,    55,  1256,    50,    51,    51,    52,    42,    55,
    51,    41,    33,   108,   993,    51,    51,   112,   113,   114,
   108,    66,    67,    51,   112,   113,   114,    51,   108,    74,
   117,   118,   112,   113,   114,    54,    81,    54,   125,   126,
   127,   128,   129,   130,   131,    51,    55,   117,  1332,  1333,
  1172,  1335,  1336,    51,   356,   357,   112,    10,   114,    51,
  1344,    55,   109,  1347,  1348,  1349,   111,   108,   145,    54,
   147,   112,   113,   114,    54,  1359,   112,   112,   114,   114,
   108,   145,  1061,   147,   112,   113,   114,   112,   112,   114,
   114,   108,   137,  1072,   109,   112,   113,   114,   400,   401,
   402,  1080,   108,    51,  1083,   998,   112,   113,   114,    54,
  1089,   110,   111,   112,    56,   114,   108,    51,    41,  1098,
   112,   113,   114,   108,   112,   113,   114,   112,   113,   114,
   175,   108,    41,    41,   133,   112,   113,   114,   183,   184,
   185,   186,   187,   188,   189,   190,   191,   192,    51,   194,
    51,   453,   197,   198,    50,    51,    51,    43,   203,    55,
    46,   206,   207,   108,   129,   115,   108,   112,   113,   114,
   112,   113,   114,    43,    51,  1154,    46,   222,   223,   224,
   225,   226,   227,   228,   486,    61,    43,    41,    51,    46,
   235,   236,    43,  1172,   114,    46,   241,   242,    54,   114,
    10,   246,   247,   248,   249,    43,    43,   252,    46,    46,
    51,   256,   257,   258,   259,   129,    51,    51,   147,   129,
   265,    51,   267,   268,   269,   270,   271,    18,    19,   129,
    21,    22,    23,    24,    51,   129,     7,   282,    53,   114,
    51,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   148,    51,   129,   130,   131,   146,   129,    51,    50,
    18,    19,   129,    21,    22,    23,    24,    53,    51,    37,
    51,    51,   317,    51,    41,   577,    51,  1256,    50,    70,
    71,    72,    73,    74,    75,    55,   114,    78,    10,    51,
    51,    55,    50,   129,    51,  1188,  1189,    51,   129,    20,
  1193,  1194,  1195,  1196,   129,    51,   608,   352,    51,  1288,
    41,    56,    70,    71,    72,    73,    74,    75,    53,   621,
    78,    51,    43,    44,   369,    46,    47,    48,    51,   129,
   375,    51,    51,    51,   129,   129,  1315,   129,     4,   129,
   129,    51,  1235,   388,   389,    41,  1239,  1240,    51,   651,
   652,   653,   397,    51,   145,   400,    51,    41,   403,   119,
   120,   121,   122,   123,   124,   115,   114,   127,   128,    50,
    50,    54,    54,    50,   419,    54,    41,   422,    56,   681,
   682,    56,    56,    51,    53,   687,   115,   145,    51,   434,
    51,    51,    51,    51,   439,    51,   129,   129,    41,    51,
    51,    56,    50,   129,    51,    51,    51,    51,    50,   454,
   455,   456,    51,    54,    51,    53,    51,    51,   463,    51,
    51,    51,   129,    56,    51,    53,    51,    56,   145,   145,
   145,    51,   477,    42,    51,    50,     2,    50,    56,    51,
   485,    51,    56,   145,    55,    51,    51,    55,    55,  1342,
  1343,    55,  1345,  1346,    55,    55,    51,    50,   145,    51,
  1353,    50,    50,  1356,  1357,  1358,    51,    51,    51,    50,
    50,     0,    54,    46,    50,  1368,    55,    55,    55,    54,
    51,    51,    51,    51,    46,    51,    52,    51,    51,   129,
    46,    56,   115,   129,    51,    56,    56,    56,    56,    51,
    66,    67,    51,   548,    51,   129,   808,   129,   129,    51,
   129,    51,    51,   129,    51,    56,    51,    51,    56,    51,
    56,    51,   148,    50,    55,    51,   129,    51,    51,   574,
    51,    51,    51,    51,    51,   580,    51,   582,    51,   584,
   585,    55,   587,   588,   589,   111,   148,    55,   593,   594,
   595,   148,   597,    55,   599,   600,   601,   148,   148,    51,
    51,   148,   148,   608,    51,    51,    55,    55,   613,    51,
    55,   137,    55,     0,   148,   620,   148,    55,   511,    56,
    56,    56,    56,    56,    56,    56,    56,    56,   693,  1098,
   714,   620,   637,   147,   790,   640,   579,   817,    -1,    -1,
   644,    -1,    -1,    -1,     2,    -1,   651,   652,   653,   175,
    -1,    -1,   657,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   187,    -1,    -1,    -1,    -1,   671,    -1,    -1,    -1,
    -1,    -1,   198,    -1,    -1,    -1,    -1,   203,    -1,    -1,
   206,   207,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,
   695,    -1,    -1,    51,    52,    -1,   222,   223,   224,   225,
   226,   227,   228,    -1,    -1,    -1,    -1,    -1,    -1,    67,
   236,    -1,    -1,    -1,    -1,   241,   242,    -1,    -1,    -1,
   246,   247,   248,   249,    -1,    -1,    -1,    -1,    -1,    -1,
   256,   257,   258,   259,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1008,    -1,    -1,    -1,
    -1,    -1,    -1,   111,    -1,    -1,   282,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   770,   771,    -1,    -1,   774,
    -1,    -1,   777,    -1,    -1,    -1,   781,    -1,   783,   137,
   785,    -1,    -1,   788,    -1,    -1,    -1,   792,    -1,    -1,
    -1,   317,   797,    -1,    -1,   587,   588,   589,    -1,    -1,
    -1,   806,    -1,   595,    -1,    -1,    -1,    -1,    -1,    -1,
   815,    -1,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   352,    -1,   833,   187,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   198,    -1,    -1,   369,    -1,   203,    -1,    -1,   206,    -1,
  1112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   388,    -1,   222,   223,   224,   225,   226,   227,
   228,   397,    -1,    -1,   400,    -1,    -1,   403,    -1,    -1,
    -1,    -1,    -1,   241,   242,    -1,    -1,    -1,   246,   247,
   248,   249,    -1,   419,    -1,    -1,   422,    -1,   256,   257,
   258,   259,    -1,    -1,    -1,    -1,    -1,    -1,   434,    -1,
    -1,    -1,    -1,   439,    -1,    -1,   921,    -1,    -1,    -1,
    -1,   926,    -1,    -1,   282,    -1,   931,    -1,    -1,    -1,
    -1,   936,    -1,    -1,    -1,    -1,    -1,   463,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   477,   957,    -1,   959,    -1,    -1,    -1,    -1,   317,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   972,    -1,    -1,
   975,    -1,    -1,   978,    -1,    -1,    -1,    -1,    -1,   771,
    -1,   773,   774,    -1,   776,   777,    -1,   779,   993,    -1,
   782,    -1,   784,   785,   352,   787,    -1,    -1,    -1,    -1,
    -1,    -1,   718,    -1,   720,    -1,    -1,   723,    -1,    -1,
    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   736,    -1,   548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   388,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   397,
    -1,    -1,   400,    -1,    -1,    -1,    -1,    -1,   574,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1061,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   422,    -1,    -1,  1072,    -1,    -1,
    -1,    -1,    -1,    -1,   600,  1080,   434,    -1,  1083,    -1,
    -1,   439,   608,    -1,  1089,    -1,    -1,   613,    -1,    -1,
    -1,    -1,    -1,  1098,   620,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   463,   822,   823,    -1,    -1,
    -1,   637,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
    -1,    -1,    -1,    -1,    -1,   651,   652,   653,    -1,    -1,
    -1,    -1,    -1,    -1,   926,    -1,   928,   929,    -1,   931,
    -1,   933,   934,    -1,    -1,    -1,   938,   939,    -1,  1154,
    -1,    -1,   944,    -1,   946,   947,    -1,    -1,   950,   951,
   876,    -1,    -1,    -1,    -1,    -1,   882,  1172,   884,    -1,
   886,    -1,   888,    -1,   890,   891,    -1,    -1,   894,    -1,
    -1,   897,    -1,    -1,    -1,    -1,   902,    -1,    -1,    -1,
   548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   574,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   600,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   608,    -1,    -1,    -1,    -1,   613,  1048,    -1,    -1,    -1,
  1052,    -1,   788,  1055,  1056,    -1,    -1,   983,   984,    -1,
    -1,    -1,    -1,    -1,  1066,    -1,    -1,    -1,    -1,   637,
   806,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   815,
    -1,    -1,    -1,   651,   652,   653,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1021,    -1,   833,    -1,    -1,
    -1,    -1,  1028,    -1,  1030,    -1,  1032,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1129,    -1,    -1,
    -1,    -1,    -1,    -1,  1136,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1174,    -1,    -1,    -1,    -1,  1179,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1216,    -1,  1218,  1219,    -1,  1221,
   788,    -1,    -1,   959,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   972,    -1,   806,   975,
    -1,    -1,   978,    -1,    -1,    -1,    -1,   815,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   993,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   833,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1224,    -1,
    -1,    -1,    -1,  1229,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1061,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1259,    -1,    -1,  1072,    -1,  1264,    -1,
    -1,    -1,    -1,    -1,  1080,  1271,    -1,  1083,    -1,    -1,
    -1,    -1,    -1,  1089,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1098,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1301,    -1,    -1,     1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,
    13,   959,    -1,    -1,    -1,    18,    19,    -1,    21,    22,
    23,    24,    -1,    -1,   972,    -1,    -1,   975,    -1,    -1,
   978,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1154,    -1,
    -1,    -1,    -1,    -1,    -1,   993,    -1,    50,    -1,    -1,
    53,    -1,    55,    -1,    -1,    -1,  1172,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
    -1,    -1,    13,  1061,    -1,   118,    -1,    18,    19,    -1,
    21,    22,    23,    24,  1072,   128,   129,    -1,    -1,   132,
    -1,    -1,  1080,    -1,    -1,  1083,    -1,    -1,    -1,    -1,
    -1,  1089,   145,   146,    -1,   148,   149,   150,    -1,    50,
  1098,    -1,    53,    -1,    55,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,    -1,    -1,    -1,  1154,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,     1,    -1,
    -1,    -1,    -1,     6,  1172,    -1,    -1,   128,   129,    -1,
    13,   132,    -1,    -1,    -1,    18,    19,    -1,    21,    22,
    23,    24,    -1,    -1,   145,   146,    -1,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,
    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
    -1,    -1,    13,    -1,    -1,   118,    -1,    18,    19,    -1,
    21,    22,    23,    24,    -1,   128,   129,    -1,    -1,   132,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,    50,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     3,    -1,    -1,     6,   145,     8,     9,   148,   149,   150,
    13,    -1,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    -1,    34,    35,    36,    -1,    38,    39,    -1,    -1,    -1,
    43,    44,    -1,    46,    47,    48,    -1,    50,    -1,    -1,
    53,    -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    65,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,   104,   105,    -1,   107,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,
    -1,   134,   135,   136,   137,   138,   139,   140,    -1,    -1,
    -1,    -1,   145,   146,   147,   148,   149,   150,     3,    -1,
    -1,     6,    -1,     8,     9,    -1,    -1,    -1,    13,    -1,
    15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
    35,    36,    -1,    38,    39,    -1,    -1,    -1,    43,    44,
    -1,    46,    47,    48,    -1,    50,    -1,    -1,    53,    -1,
    -1,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    65,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,   104,
   105,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,   134,
   135,   136,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
   145,   146,   147,   148,   149,   150,     3,    -1,    -1,     6,
    -1,     8,     9,    -1,    -1,    -1,    13,    -1,    15,    -1,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
    -1,    38,    39,    -1,    -1,    -1,    43,    44,    -1,    46,
    47,    48,    -1,    50,    -1,    -1,    53,    -1,    -1,    -1,
    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,   104,   105,    -1,
   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   128,   129,    -1,    -1,   132,    -1,   134,   135,   136,
   137,   138,   139,   140,    -1,    -1,    -1,     6,   145,   146,
   147,   148,   149,   150,    13,    -1,    15,    -1,    -1,    18,
    19,    -1,    21,    22,    23,    24,    -1,    -1,    27,    28,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,    47,    48,
    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    -1,   104,   105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
   129,    -1,    -1,   132,    -1,    -1,   135,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     6,   145,   146,   147,   148,
   149,   150,    13,    -1,    15,    -1,    17,    18,    19,    20,
    21,    22,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
    -1,   132,    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     6,   145,    -1,   147,   148,   149,   150,
    13,    -1,    15,    -1,    -1,    18,    19,    -1,    21,    22,
    23,    24,    -1,    -1,    27,    28,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,    -1,    46,    47,    48,    -1,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     6,   145,   146,   147,   148,   149,   150,    13,    -1,
    15,    -1,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
    -1,    46,    47,    48,    -1,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,   104,
   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,
   145,   146,   147,   148,   149,   150,    13,    -1,    15,    -1,
    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,
    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,
    47,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,   104,   105,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   118,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
    -1,   128,   129,    -1,    13,   132,    15,    -1,   135,    18,
    19,    -1,    21,    22,    23,    24,    -1,    -1,   145,   146,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,    47,    48,
    -1,    50,    -1,    -1,    53,    -1,    55,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    -1,   104,   105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,   128,
   129,    -1,    13,   132,    15,    -1,    -1,    18,    19,    -1,
    21,    22,    23,    24,    -1,    -1,   145,   146,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    -1,    -1,    46,    47,    48,    -1,    50,
    -1,    -1,    53,    -1,    55,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,   128,   129,    -1,
    13,   132,    15,    -1,    -1,    18,    19,    20,    21,    22,
    23,    24,    -1,    -1,   145,   146,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    44,    -1,    46,    47,    48,    -1,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
    -1,     6,    -1,    -1,    -1,   128,   129,    -1,    13,   132,
    15,    -1,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,   145,   146,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
    -1,    46,    47,    48,    -1,    50,    -1,    -1,    53,    -1,
    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,   104,
   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,   128,   129,    -1,    13,   132,    15,    -1,
    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,
   145,    -1,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,
    47,    48,    -1,    50,    -1,    -1,    53,    -1,    55,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,   104,   105,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   118,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
    -1,   128,   129,    -1,    13,   132,    15,    -1,    -1,    18,
    19,    -1,    21,    22,    23,    24,    -1,    -1,   145,    -1,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,    47,    48,
    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    -1,   104,   105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,   128,
   129,    -1,    13,   132,    15,   134,    -1,    18,    19,    -1,
    21,    22,    23,    24,    -1,    -1,   145,    -1,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    -1,    -1,    46,    47,    48,    -1,    50,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,   128,   129,    -1,
    13,   132,    15,   134,    -1,    18,    19,    -1,    21,    22,
    23,    24,    -1,    -1,   145,    -1,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,    -1,    46,    47,    48,    -1,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
    -1,     6,    -1,    -1,    -1,   128,   129,    -1,    13,   132,
    15,    -1,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,   145,    -1,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
    -1,    46,    47,    48,    -1,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,   104,
   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,   128,   129,    -1,    13,   132,    15,    -1,
    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,
   145,    -1,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,
    47,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,   104,   105,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   118,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
    -1,   128,   129,    -1,    13,   132,    15,    -1,    -1,    18,
    19,    -1,    21,    22,    23,    24,    -1,    -1,   145,    -1,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,    47,    48,
    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    -1,   104,   105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,   128,
   129,    -1,    13,   132,    15,    -1,    -1,    18,    19,    -1,
    21,    22,    23,    24,    -1,    -1,   145,    -1,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    -1,    -1,    46,    47,    48,    -1,    50,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,   128,   129,    -1,
    13,   132,    15,    -1,    -1,    18,    19,    -1,    21,    22,
    23,    24,    -1,    -1,   145,    -1,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    -1,    -1,    46,    47,    48,    -1,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
    -1,     6,    -1,    -1,    -1,   128,   129,    -1,    13,   132,
    15,    -1,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,   145,    -1,   147,   148,   149,   150,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
    -1,    46,    47,    48,    -1,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,   104,
   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,   128,   129,    -1,    13,   132,    15,    -1,
    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,
   145,    -1,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,
    47,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,   104,   105,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   118,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
    -1,   128,   129,    -1,    13,   132,    15,    -1,    -1,    18,
    19,    -1,    21,    22,    23,    24,    -1,    -1,   145,    -1,
   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    43,    -1,    -1,    46,    47,    48,
    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,    -1,   104,   105,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,   128,
   129,    -1,    13,   132,    15,    -1,    -1,    18,    19,    -1,
    21,    22,    23,    24,    -1,    -1,   145,    -1,   147,   148,
   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    -1,    -1,    46,    47,    48,    -1,    50,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,   104,   105,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
    -1,    -1,     6,    -1,    -1,    -1,    -1,   128,   129,    13,
    -1,   132,    -1,    -1,    18,    19,    20,    21,    22,    23,
    24,    -1,    -1,    -1,   145,    -1,   147,   148,   149,   150,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
    44,    -1,    46,    47,    48,    -1,    50,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,    -1,
   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,    -1,   128,   129,    13,    -1,   132,    -1,
    -1,    18,    19,    20,    21,    22,    23,    24,    -1,    -1,
    -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
    47,    48,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,   104,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     3,    -1,    -1,     6,   145,     8,
     9,   148,   149,   150,    -1,    -1,    15,    -1,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    -1,    -1,
    29,    30,    31,    32,    -1,    34,    35,    36,    -1,    38,
    39,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
    -1,    50,    -1,    -1,    53,    -1,    -1,    -1,    57,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   104,   105,    -1,   107,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,   134,    -1,   136,   137,   138,
   139,   140,    -1,    -1,     3,    -1,   145,     6,   147,     8,
     9,    -1,    -1,    -1,    -1,    -1,    15,    -1,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    -1,    -1,
    29,    30,    31,    32,    -1,    34,    35,    36,    -1,    38,
    39,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
    -1,    50,    -1,    -1,    53,    -1,    -1,    -1,    57,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    74,    75,    -1,    77,    78,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     6,    -1,    -1,    -1,    -1,   104,   105,    13,   107,    -1,
    -1,    -1,    18,    19,    -1,    21,    22,    23,    24,    -1,
    -1,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   129,    -1,    -1,    -1,    -1,   134,    -1,   136,   137,   138,
   139,   140,    -1,    -1,    50,    -1,   145,    -1,   147,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,
    76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,
    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,
    13,    -1,   118,    -1,    -1,    18,    19,    -1,    21,    22,
    23,    24,   128,   129,    27,    28,   132,    -1,    -1,   135,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,
   146,    -1,   148,   149,   150,    -1,    -1,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
    73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    13,    -1,    -1,    -1,   118,    18,    19,    -1,    21,
    22,    23,    24,    -1,    -1,   128,   129,    -1,    -1,   132,
    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   145,   146,    -1,   148,   149,   150,    50,    -1,
    -1,    53,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    74,    75,    76,    -1,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
    -1,    -1,    13,    -1,    -1,    -1,   118,    18,    19,    -1,
    21,    22,    23,    24,    -1,    -1,   128,   129,    -1,    -1,
   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   145,   146,    -1,   148,   149,   150,    50,
    -1,    -1,    53,    -1,    55,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,
    -1,    -1,    -1,    -1,    -1,    13,    -1,   118,    -1,    -1,
    18,    19,    -1,    21,    22,    23,    24,   128,   129,    27,
    28,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   145,   146,    -1,   148,   149,   150,
    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,
   118,    18,    19,    -1,    21,    22,    23,    24,    -1,    -1,
   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,    -1,
   148,   149,   150,    50,    -1,    -1,    53,    -1,    55,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,    76,
    -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
     6,    -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,
    -1,   118,    18,    19,    -1,    21,    22,    23,    24,    -1,
    -1,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,   146,
    -1,   148,   149,   150,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,    75,
    76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,
    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,
    -1,    -1,   118,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,
    -1,    -1,   148,   149,   150,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,    -1,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    13,    -1,
    -1,   106,    -1,    18,    19,    -1,    21,    22,    23,    24,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    74,
    75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   128,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,   150
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 160 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 190 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 191 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 200 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 209 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 210 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 211 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 212 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 217 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 218 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 220 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 221 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 223 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 226 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 228 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 232 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 233 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 238 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 241 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 246 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 248 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 256 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 361 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 363 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 365 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 366 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 37:
#line 367 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 368 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 369 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 370 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 41:
#line 372 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 373 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 46:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 47:
#line 379 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 48:
#line 380 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 49:
#line 386 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 50:
#line 387 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 388 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 52:
#line 389 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 390 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 54:
#line 391 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 55:
#line 394 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 56:
#line 397 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 57:
#line 403 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 58:
#line 407 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 59:
#line 416 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 60:
#line 425 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 61:
#line 429 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 63:
#line 434 "msv.y"
{
            yyval.tnode=new CSyntaxNode(FREE_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 64:
#line 438 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(SYSTEM_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 65:
#line 442 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 66:
#line 445 "msv.y"
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
case 67:
#line 458 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 68:
#line 463 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
case 69:
#line 467 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
case 70:
#line 473 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 71:
#line 474 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 72:
#line 480 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 73:
#line 485 "msv.y"
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
case 74:
#line 490 "msv.y"
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
case 75:
#line 494 "msv.y"
{ yyval.tnode=yyvsp[0].tnode; ;
    break;}
case 76:
#line 495 "msv.y"
{ yyval.tnode=yyvsp[0].tnode; ;
    break;}
case 77:
#line 501 "msv.y"
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 78:
#line 509 "msv.y"
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 79:
#line 520 "msv.y"
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
case 80:
#line 533 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 81:
#line 534 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 82:
#line 535 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 83:
#line 540 "msv.y"
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
case 84:
#line 544 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
case 85:
#line 548 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 86:
#line 552 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 87:
#line 556 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 88:
#line 560 "msv.y"
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
case 89:
#line 566 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 90:
#line 568 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 91:
#line 571 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
case 92:
#line 576 "msv.y"
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
case 93:
#line 587 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 94:
#line 588 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 95:
#line 589 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 96:
#line 592 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 97:
#line 593 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 98:
#line 594 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 99:
#line 602 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 100:
#line 606 "msv.y"
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 101:
#line 610 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 102:
#line 615 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 103:
#line 621 "msv.y"
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 104:
#line 626 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
case 105:
#line 633 "msv.y"
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
case 106:
#line 639 "msv.y"
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
case 107:
#line 650 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 108:
#line 651 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 109:
#line 652 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 110:
#line 657 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 111:
#line 664 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 112:
#line 667 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 113:
#line 668 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 114:
#line 676 "msv.y"
{yyval.tnode=new CSyntaxNode(FOPEN_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 115:
#line 678 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETS_EXP,yyvsp[-5].tnode,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 116:
#line 680 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETC_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 117:
#line 682 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTS_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 118:
#line 684 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 119:
#line 686 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 120:
#line 688 "msv.y"
{yyval.tnode=new CSyntaxNode(FCLOSE_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 121:
#line 700 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 122:
#line 703 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 123:
#line 704 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 124:
#line 705 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 125:
#line 706 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 126:
#line 707 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 127:
#line 708 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 128:
#line 709 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 129:
#line 713 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 130:
#line 715 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 131:
#line 717 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 132:
#line 719 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 133:
#line 721 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 134:
#line 723 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 135:
#line 725 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 136:
#line 727 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 137:
#line 729 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 138:
#line 731 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 139:
#line 733 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 140:
#line 735 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 141:
#line 737 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 142:
#line 741 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 143:
#line 742 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 144:
#line 745 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 145:
#line 746 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 146:
#line 747 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 147:
#line 751 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 148:
#line 752 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 149:
#line 753 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 150:
#line 756 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 151:
#line 760 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 152:
#line 766 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 153:
#line 768 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 154:
#line 770 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 155:
#line 772 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 156:
#line 774 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 157:
#line 775 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 158:
#line 780 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 159:
#line 781 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 160:
#line 782 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 161:
#line 788 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 162:
#line 789 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 163:
#line 791 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 164:
#line 793 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 165:
#line 795 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 166:
#line 797 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 167:
#line 798 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 168:
#line 804 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 169:
#line 805 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 170:
#line 807 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 171:
#line 809 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 172:
#line 814 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 815 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 174:
#line 819 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 820 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 176:
#line 824 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 825 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 178:
#line 830 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 831 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 180:
#line 832 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 181:
#line 833 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 182:
#line 834 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 183:
#line 836 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 184:
#line 837 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 185:
#line 838 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 186:
#line 839 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 187:
#line 840 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 188:
#line 841 "msv.y"
{yyval.tnode=yyvsp[0].tnode;
    break;}
case 189:
#line 842 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 190:
#line 843 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 191:
#line 844 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 192:
#line 845 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 193:
#line 846 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 194:
#line 852 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 195:
#line 853 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 196:
#line 854 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 197:
#line 855 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 198:
#line 856 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 199:
#line 857 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 200:
#line 858 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 201:
#line 859 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 202:
#line 862 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 203:
#line 863 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 204:
#line 867 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 205:
#line 868 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 206:
#line 869 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 207:
#line 870 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 208:
#line 877 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 209:
#line 881 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 210:
#line 889 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 211:
#line 901 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
case 212:
#line 905 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 213:
#line 914 "msv.y"
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
case 214:
#line 926 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
case 215:
#line 930 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 216:
#line 938 "msv.y"
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
case 217:
#line 941 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 218:
#line 942 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 219:
#line 947 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 220:
#line 951 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 221:
#line 955 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
case 222:
#line 960 "msv.y"
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
case 223:
#line 963 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 224:
#line 972 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 225:
#line 973 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 226:
#line 974 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 227:
#line 977 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 228:
#line 978 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 229:
#line 981 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 230:
#line 982 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 231:
#line 985 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 232:
#line 986 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 233:
#line 987 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 234:
#line 988 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 235:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 236:
#line 990 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 237:
#line 993 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 238:
#line 994 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 239:
#line 995 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 240:
#line 996 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 241:
#line 997 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 242:
#line 998 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 243:
#line 1000 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 244:
#line 1001 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 245:
#line 1003 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 246:
#line 1004 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 247:
#line 1006 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 248:
#line 1007 "msv.y"
{yyval.tnode=new CSyntaxNode(MALLOC_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 249:
#line 1012 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 250:
#line 1013 "msv.y"
{yyval.returntype=INTPTYPE;;
    break;}
case 251:
#line 1014 "msv.y"
{yyval.returntype=FLOATPTYPE;;
    break;}
case 252:
#line 1015 "msv.y"
{yyval.returntype=CHARPTYPE;;
    break;}
case 253:
#line 1016 "msv.y"
{yyval.returntype=UINTPTYPE;;
    break;}
case 254:
#line 1017 "msv.y"
{yyval.returntype=UCHARPTYPE;;
    break;}
case 255:
#line 1018 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 256:
#line 1019 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 257:
#line 1024 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 258:
#line 1025 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].returntype);;
    break;}
case 259:
#line 1026 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].cString, STRUCTTYPE);;
    break;}
case 260:
#line 1027 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, STRTYPE);;
    break;}
case 261:
#line 1033 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 262:
#line 1034 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 263:
#line 1035 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 264:
#line 1036 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 265:
#line 1037 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 266:
#line 1038 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 267:
#line 1043 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCHEAD_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 268:
#line 1050 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCTAIL_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 269:
#line 1057 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCAT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 270:
#line 1064 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCMP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 271:
#line 1071 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCPY_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 272:
#line 1078 "msv.y"
{
						yyval.tnode=new CSyntaxNode(STRFUNCLEN_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 273:
#line 1084 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 274:
#line 1085 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 275:
#line 1086 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 276:
#line 1087 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 277:
#line 1088 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 278:
#line 1089 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 279:
#line 1096 "msv.y"
{yyval.tnode=new CSyntaxNode(ROUND_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 280:
#line 1099 "msv.y"
{yyval.tnode=new CSyntaxNode(CEIL_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 281:
#line 1102 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOOR_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 282:
#line 1105 "msv.y"
{yyval.tnode=new CSyntaxNode(SIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 283:
#line 1106 "msv.y"
{yyval.tnode=new CSyntaxNode(COS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 284:
#line 1107 "msv.y"
{yyval.tnode=new CSyntaxNode(TAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 285:
#line 1108 "msv.y"
{yyval.tnode=new CSyntaxNode(ASIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 286:
#line 1109 "msv.y"
{yyval.tnode=new CSyntaxNode(ACOS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 287:
#line 1110 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 288:
#line 1113 "msv.y"
{yyval.tnode=new CSyntaxNode(SINH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 289:
#line 1114 "msv.y"
{yyval.tnode=new CSyntaxNode(COSH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 290:
#line 1115 "msv.y"
{yyval.tnode=new CSyntaxNode(TANH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 291:
#line 1118 "msv.y"
{yyval.tnode=new CSyntaxNode(EXP_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 292:
#line 1119 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 293:
#line 1120 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG10_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 294:
#line 1121 "msv.y"
{yyval.tnode=new CSyntaxNode(SQRT_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 295:
#line 1124 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN2_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 296:
#line 1125 "msv.y"
{yyval.tnode=new CSyntaxNode(POW_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 297:
#line 1128 "msv.y"
{yyval.tnode=new CSyntaxNode(FMOD_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 298:
#line 1129 "msv.y"
{yyval.tnode=new CSyntaxNode(MODF_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 299:
#line 1132 "msv.y"
{yyval.tnode=new CSyntaxNode(LDEXP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 300:
#line 1134 "msv.y"
{yyval.tnode=new CSyntaxNode(ABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 301:
#line 1135 "msv.y"
{yyval.tnode=new CSyntaxNode(FABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 302:
#line 1136 "msv.y"
{yyval.tnode=new CSyntaxNode(LABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 303:
#line 1142 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 304:
#line 1143 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 305:
#line 1144 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 306:
#line 1145 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 307:
#line 1146 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 308:
#line 1152 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 309:
#line 1154 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 310:
#line 1155 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 311:
#line 1158 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 312:
#line 1161 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 313:
#line 1162 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 314:
#line 1165 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 315:
#line 1166 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 316:
#line 1169 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 317:
#line 1170 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 318:
#line 1173 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 319:
#line 1174 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 320:
#line 1177 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 321:
#line 1178 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 322:
#line 1183 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 323:
#line 1184 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 324:
#line 1185 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 325:
#line 1186 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 326:
#line 1187 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 327:
#line 1188 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 328:
#line 1196 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 329:
#line 1197 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 330:
#line 1201 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 331:
#line 1202 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 332:
#line 1209 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
case 333:
#line 1213 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 334:
#line 1218 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 335:
#line 1224 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 336:
#line 1230 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 337:
#line 1236 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 338:
#line 1246 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
case 339:
#line 1252 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 340:
#line 1258 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 341:
#line 1264 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 342:
#line 1273 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 343:
#line 1277 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 344:
#line 1281 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 345:
#line 1287 "msv.y"
{
	        yyval.tnode=NULL;
		;
    break;}
case 346:
#line 1291 "msv.y"
{
	        yyval.tnode=NULL;
	   ;
    break;}
case 347:
#line 1295 "msv.y"
{
			yyval.tnode=NULL;
	   ;
    break;}
case 348:
#line 1301 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
case 349:
#line 1307 "msv.y"
{
            CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
case 350:
#line 1315 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 351:
#line 1323 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 352:
#line 1330 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 353:
#line 1336 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 354:
#line 1342 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 355:
#line 1346 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
case 356:
#line 1353 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 357:
#line 1358 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 358:
#line 1362 "msv.y"
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
case 359:
#line 1366 "msv.y"
{ 
		   yyval.tnode = NULL;
		;
    break;}
case 360:
#line 1370 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 361:
#line 1376 "msv.y"
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
case 362:
#line 1382 "msv.y"
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
case 363:
#line 1388 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 364:
#line 1395 "msv.y"
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
case 365:
#line 1403 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
case 366:
#line 1409 "msv.y"
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
case 367:
#line 1424 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
case 368:
#line 1429 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 369:
#line 1434 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
case 370:
#line 1442 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
case 371:
#line 1449 "msv.y"
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
case 372:
#line 1455 "msv.y"
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
case 373:
#line 1461 "msv.y"
{
	      yyval.tnode=NULL;
		;
    break;}
case 374:
#line 1464 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 375:
#line 1474 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 376:
#line 1478 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 377:
#line 1487 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 378:
#line 1488 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 379:
#line 1493 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 380:
#line 1497 "msv.y"
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
case 381:
#line 1506 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 382:
#line 1507 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 383:
#line 1515 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 384:
#line 1517 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 385:
#line 1524 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 386:
#line 1526 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 387:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 388:
#line 1533 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 389:
#line 1537 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 390:
#line 1542 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 391:
#line 1547 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 392:
#line 1552 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 393:
#line 1559 "msv.y"
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
case 394:
#line 1562 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 395:
#line 1563 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 396:
#line 1569 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 397:
#line 1571 "msv.y"
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 398:
#line 1591 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 399:
#line 1592 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 400:
#line 1594 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 401:
#line 1596 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 402:
#line 1597 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 403:
#line 1603 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 404:
#line 1610 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 405:
#line 1618 "msv.y"
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
case 406:
#line 1626 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 407:
#line 1630 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
case 408:
#line 1634 "msv.y"
{
	      yyval.tnode=NULL;
	   ;
    break;}
case 409:
#line 1640 "msv.y"
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 410:
#line 1644 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 411:
#line 1650 "msv.y"
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
case 412:
#line 1654 "msv.y"
{
	      yyval.tnode=NULL;
	  ;
    break;}
case 413:
#line 1660 "msv.y"
{
			yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 414:
#line 1666 "msv.y"
{
			yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 415:
#line 1671 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 416:
#line 1672 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 417:
#line 1673 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 418:
#line 1677 "msv.y"
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
case 419:
#line 1686 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 420:
#line 1687 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 421:
#line 1693 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 422:
#line 1694 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 423:
#line 1698 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 424:
#line 1699 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 425:
#line 1704 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 426:
#line 1705 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 427:
#line 1706 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 428:
#line 1707 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 429:
#line 1708 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 430:
#line 1711 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 431:
#line 1712 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 432:
#line 1713 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 433:
#line 1719 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 434:
#line 1720 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 435:
#line 1721 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 436:
#line 1723 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 437:
#line 1724 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 438:
#line 1725 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 439:
#line 1727 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 440:
#line 1728 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 441:
#line 1729 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 442:
#line 1730 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 443:
#line 1732 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 444:
#line 1733 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 445:
#line 1734 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 446:
#line 1735 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 447:
#line 1736 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 448:
#line 1737 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 449:
#line 1738 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 450:
#line 1742 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 451:
#line 1743 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 452:
#line 1744 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 453:
#line 1745 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 454:
#line 1746 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 455:
#line 1747 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 456:
#line 1748 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1750 "msv.y"
