
/*  A Bison parser, made from msv.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	SWITCH	258
#define	CASE	259
#define	BREAK	260
#define	DEFAULT	261
#define	RETURN	262
#define	IF	263
#define	ELSE	264
#define	EMPTY	265
#define	AWAIT	266
#define	PROJECTION	267
#define	PBEGIN	268
#define	PEND	269
#define	POINTERNULL	270
#define	ARRAY	271
#define	STRUCT	272
#define	DOT	273
#define	UNION	274
#define	FILEDECLARATION	275
#define	MORE	276
#define	DEFINE	277
#define	MY_TRUE	278
#define	MY_FALSE	279
#define	EXIST	280
#define	FRAME	281
#define	FOR	282
#define	WHILE	283
#define	DO	284
#define	TRUE	285
#define	FALSE	286
#define	REPEAT	287
#define	UNTIL	288
#define	DISPLAY	289
#define	SKIP	290
#define	THEN	291
#define	COMMA	292
#define	COLON	293
#define	INTDECLARATION	294
#define	STRDECLARATION	295
#define	POINTERDECLARATION	296
#define	CHARDECLARATION	297
#define	VOIDDECLARATION	298
#define	FLOATDECLARATION	299
#define	LISTDECLARATION	300
#define	OPEN_PAR	301
#define	CLOSE_PAR	302
#define	TIMES	303
#define	OPEN_BPAR	304
#define	CLOSE_BPAR	305
#define	OPEN_MPAR	306
#define	CLOSE_MPAR	307
#define	FUNCTION	308
#define	OVER	309
#define	CYLINDER	310
#define	OVEREP	311
#define	INTER_OR	312
#define	NON_DETERMINED	313
#define	SEND	314
#define	RECEIVE	315
#define	PROCESS	316
#define	CHANNEL	317
#define	PUT	318
#define	GET	319
#define	ERROR_TOKEN	320
#define	STRFUNCHEAD	321
#define	STRFUNCTAIL	322
#define	STRFUNCCAT	323
#define	STRFUNCCMP	324
#define	STRFUNCCPY	325
#define	STRFUNCLEN	326
#define	EXTERN	327
#define	UNSIGNED	328
#define	SIGNED	329
#define	CHOP	330
#define	IMPLY	331
#define	IFF	332
#define	PROPIMPLY	333
#define	OR	334
#define	PARALLEL	335
#define	AND	336
#define	ASS_P	337
#define	ASS_N	338
#define	CON	339
#define	ADDRESS	340
#define	NE	341
#define	EQ	342
#define	GE	343
#define	LE	344
#define	GT	345
#define	LT	346
#define	LST	347
#define	RST	348
#define	ADD	349
#define	SUB	350
#define	MUL	351
#define	DIV	352
#define	MOD	353
#define	BNE	354
#define	CHOPSTAR	355
#define	NEXT	356
#define	NEGATION	357
#define	LENGTH	358
#define	REQUEST	359
#define	FINAL	360
#define	KEEP	361
#define	ALWAYS	362
#define	HALT	363
#define	W_NEXT	364
#define	PREFIX	365
#define	SOMETIMES	366
#define	ID	367
#define	STRLITERAL	368
#define	STRUCT_TYPE	369
#define	INTLITERAL	370
#define	FLOATLITERAL	371
#define	CHARLITERAL	372

#line 1 "msv.y"

#include "function.h"
#include "MyMap.h"
#include <malloc.h>
#include <string.h>      // strcpy

//#include "lex.h"
#include "SyntaxNode.h"
#include "SyntaxTree.h"
//#include "inherit.h"
//#include <afxtempl.h>
CMAP g_StructNameMap;

//类的层次关系
//typedef CArray<Inherit,Inherit> ClassHier;//这行代码相当于定义了一个数组，数组中的每个元素都是一个Inherit对象
//ClassHier classarray;//定义一个数组用来保存Tempura程序中类定义的继承关系

//******************  用来存储程序语法树以及性质树 *******************************/
/***************************************************************************/
//程序语法树节点指针
CSyntaxNode *g_syntaxTree = NULL;  
//性质语法树节点指针
CSyntaxNode *g_propositionTree=NULL; 

CSyntaxNode *function_tree=NULL, *propositionDefineTree=NULL;

CSyntaxNode *struct_tree=NULL;//存储结构体的定义

CSyntaxTree *g_tree=NULL, *g_proptree=NULL;     

map<string, string> structName; //存储定义的结构体的名字

//g_tree=new CSyntaxTree(g_syntaxTree);  
//g_proptree=new CSyntaxTree(g_propositionTree); 

int g_nErrors=0;

extern void yyerror(const char *msg );

extern int yylex(void);

#define YYDEBUG 1	          // Generate debug code; needed for YYERROR_VERBOSE
#define YYERROR_VERBOSE       // Give a more specific parse error message


#line 47 "msv.y"
typedef union{
   char     * cString;   /* A character string */
   int       nInteger;   /* An intliteral value */
   float floatval;	/* A float value added by Jane 2012-06-06 */
   char character;	/* A character added by Jane 2012-06-06*/
   CSyntaxNode *tnode;    /* Node in the syntax tree */
   enum NODETYPE  nodetype;
   enum RETURNTYPE  returntype;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



<<<<<<< HEAD
#define	YYFINAL		1380
=======
#define	YYFINAL		1194
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
#define	YYFLAG		-32768
#define	YYNTBASE	118

<<<<<<< HEAD
#define YYTRANSLATE(x) ((unsigned)(x) <= 407 ? yytranslate[x] : 240)
=======
#define YYTRANSLATE(x) ((unsigned)(x) <= 372 ? yytranslate[x] : 192)
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     7,     8,    12,    16,    20,    24,    28,    31,
    34,    37,    40,    43,    45,    47,    49,    52,    54,    56,
    59,    62,    65,    74,    76,    81,    84,    88,    92,    93,
    97,   101,   105,   107,   109,   111,   114,   116,   118,   120,
   122,   127,   132,   137,   142,   151,   153,   155,   157,   162,
   164,   166,   168,   170,   175,   179,   187,   197,   204,   210,
<<<<<<< HEAD
   220,   222,   227,   232,   234,   236,   244,   248,   250,   254,
   256,   257,   266,   271,   277,   282,   284,   286,   291,   294,
   297,   300,   303,   305,   308,   311,   315,   319,   323,   327,
   335,   344,   356,   370,   372,   374,   376,   378,   380,   382,
   385,   392,   397,   403,   409,   418,   427,   430,   433,   436,
   437,   444,   452,   453,   456,   463,   472,   477,   484,   491,
   498,   503,   507,   509,   511,   513,   515,   519,   522,   524,
   536,   549,   561,   573,   591,   610,   628,   647,   667,   686,
   704,   723,   741,   743,   745,   747,   749,   751,   762,   766,
   768,   773,   779,   791,   804,   816,   828,   841,   845,   849,
   852,   853,   856,   859,   862,   870,   877,   882,   886,   888,
   892,   896,   902,   904,   908,   911,   912,   914,   918,   920,
   923,   926,   928,   930,   932,   934,   936,   938,   942,   944,
   946,   948,   950,   952,   954,   956,   958,   960,   962,   964,
   966,   968,   970,   972,   974,   978,   980,   982,   986,   991,
   996,  1001,  1006,  1011,  1016,  1020,  1024,  1028,  1029,  1032,
  1035,  1038,  1041,  1044,  1048,  1053,  1058,  1063,  1069,  1075,
  1081,  1087,  1093,  1100,  1106,  1112,  1119,  1125,  1132,  1140,
  1147,  1154,  1162,  1169,  1176,  1182,  1190,  1197,  1199,  1204,
  1206,  1209,  1212,  1215,  1219,  1223,  1227,  1230,  1235,  1240,
  1245,  1250,  1252,  1254,  1256,  1258,  1260,  1262,  1267,  1272,
  1279,  1286,  1293,  1298,  1300,  1302,  1304,  1306,  1308,  1310,
  1313,  1316,  1319,  1322,  1325,  1328,  1331,  1334,  1337,  1340,
  1343,  1346,  1349,  1352,  1355,  1358,  1365,  1372,  1379,  1386,
  1393,  1396,  1399,  1402,  1404,  1407,  1411,  1415,  1419,  1423,
  1425,  1427,  1429,  1433,  1437,  1441,  1445,  1449,  1453,  1457,
  1461,  1465,  1469,  1471,  1473,  1475,  1477,  1479,  1481,  1484,
  1487,  1489,  1491,  1495,  1498,  1502,  1507,  1513,  1518,  1522,
  1527,  1533,  1538,  1541,  1545,  1550,  1553,  1557,  1562,  1567,
  1573,  1580,  1589,  1597,  1602,  1606,  1612,  1621,  1622,  1627,
  1631,  1636,  1641,  1647,  1653,  1659,  1665,  1672,  1682,  1683,
  1691,  1701,  1710,  1716,  1721,  1724,  1727,  1733,  1734,  1737,
  1741,  1748,  1749,  1752,  1756,  1759,  1763,  1766,  1768,  1772,
  1774,  1776,  1778,  1780,  1784,  1785,  1788,  1789,  1793,  1795,
  1798,  1802,  1806,  1810,  1814,  1820,  1830,  1832,  1834,  1835,
  1837,  1838,  1840,  1841,  1849,  1857,  1863,  1866,  1868,  1869,
  1875,  1878,  1879,  1884,  1890,  1891,  1895,  1900,  1906,  1911,
  1917,  1922,  1923,  1927,  1931,  1936,  1941,  1946,  1951,  1956,
  1961,  1966,  1971,  1978,  1983,  1988,  1993,  2000,  2004,  2008,
  2013,  2017,  2018,  2022,  2026,  2030,  2034,  2037
};

static const short yyrhs[] = {   154,
   157,     0,    13,   155,    14,     0,     0,   155,   116,   155,
     0,   155,   114,   155,     0,   155,   112,   155,     0,   155,
   113,   155,     0,   155,   110,   155,     0,   142,   155,     0,
   141,   155,     0,   146,   155,     0,   144,   155,     0,   136,
   155,     0,    41,     0,    29,     0,    30,     0,   138,   179,
     0,    10,     0,    27,     0,   143,   155,     0,   140,   155,
     0,   137,   155,     0,    55,   155,   156,    56,    12,    55,
   155,    56,     0,   147,     0,    28,   147,    44,   205,     0,
   155,   135,     0,    52,   155,    53,     0,    43,   155,   156,
     0,     0,   157,   116,   157,     0,   157,   114,   157,     0,
   157,   110,   157,     0,   170,     0,   164,     0,   229,     0,
     7,   147,     0,   232,     0,   223,     0,   224,     0,   225,
     0,   136,    52,   157,    53,     0,   141,    52,   157,    53,
     0,   142,    52,   157,    53,     0,    11,    52,   204,    53,
     0,    38,    55,   157,    56,    39,    52,   204,    53,     0,
    41,     0,    10,     0,    27,     0,   138,    52,   179,    53,
     0,   236,     0,   234,     0,    36,     0,    37,     0,   140,
    52,   157,    53,     0,   157,   115,   157,     0,    52,   222,
    53,   111,    57,   157,    58,     0,    32,    52,   215,   220,
    53,   116,    52,   157,    53,     0,    55,   157,   221,    56,
    12,   213,     0,    55,   157,    56,    12,   213,     0,    28,
   147,    52,   209,    53,   117,    55,   159,    56,     0,   162,
     0,   109,    52,   215,    53,     0,    79,    52,   202,    53,
     0,   160,     0,   161,     0,    31,   215,   210,    44,    55,
   157,    56,     0,    52,   157,    53,     0,   164,     0,   164,
   116,   158,     0,   157,     0,     0,   208,   147,    52,   209,
    53,    55,   157,    56,     0,   147,    52,   211,    53,     0,
    80,   147,    52,   211,    53,     0,   176,    52,   211,    53,
     0,   169,     0,   195,     0,   163,    55,   158,    56,     0,
    17,   147,     0,    19,   147,     0,   107,   165,     0,   106,
   165,     0,   165,     0,   166,   167,     0,   149,   167,     0,
    17,   147,   167,     0,    19,   147,   167,     0,    17,   149,
   167,     0,    19,   149,   167,     0,    52,   131,   215,    53,
    52,   209,    53,     0,    52,   131,   131,   215,    53,    52,
   209,    53,     0,    52,   131,   147,    57,   179,   177,    58,
    53,    52,   209,    53,     0,    52,   131,   147,    57,   179,
   177,    58,    53,    52,   209,    53,   117,   186,     0,    45,
     0,    50,     0,    48,     0,    46,     0,    49,     0,    22,
     0,   215,   168,     0,   147,    57,   179,   177,    58,   168,
     0,   215,   117,   174,   168,     0,   147,    16,   117,   186,
   168,     0,   147,    16,   117,   216,   168,     0,   147,    57,
   179,   177,    58,   117,   186,   168,     0,   147,    57,   179,
   177,    58,   117,   216,   168,     0,   131,   167,     0,    43,
   167,     0,    43,     1,     0,     0,   147,    57,   179,   177,
    58,     0,     0,    43,   147,    57,   179,   177,    58,     0,
     0,     0,    43,     1,     0,    20,    52,   171,    43,   216,
    53,     0,    23,    52,   215,    43,   217,    43,   215,    53,
     0,    25,    52,   215,    53,     0,    24,    52,   215,    43,
   215,    53,     0,    26,    52,   215,    43,   215,    53,     0,
    26,    52,   176,    43,   215,    53,     0,    21,    52,   215,
    53,     0,   171,   173,   174,     0,   215,     0,   238,     0,
   176,     0,   178,     0,    52,   171,    53,     0,   136,   171,
     0,   172,     0,    52,    52,    48,   131,    53,   150,    53,
    57,   179,   177,    58,     0,    52,    52,   106,    48,   131,
    53,   150,    53,    57,   179,   177,    58,     0,    52,    52,
    45,   131,    53,   150,    53,    57,   179,   177,    58,     0,
    52,    52,    50,   131,    53,   150,    53,    57,   179,   177,
    58,     0,    52,    52,    48,   131,    53,    52,    52,    48,
   131,    53,   150,    53,    53,    57,   179,   177,    58,     0,
    52,    52,    48,   131,    53,    52,    52,   106,    48,   131,
    53,   150,    53,    53,    57,   179,   177,    58,     0,    52,
    52,    48,   131,    53,    52,    52,    45,   131,    53,   150,
    53,    53,    57,   179,   177,    58,     0,    52,    52,   106,
    48,   131,    53,    52,    52,    48,   131,    53,   150,    53,
    53,    57,   179,   177,    58,     0,    52,    52,   106,    48,
   131,    53,    52,    52,   106,    48,   131,    53,   150,    53,
    53,    57,   179,   177,    58,     0,    52,    52,   106,    48,
   131,    53,    52,    52,    45,   131,    53,   150,    53,    53,
    57,   179,   177,    58,     0,    52,    52,    45,   131,    53,
    52,    52,    48,   131,    53,   150,    53,    53,    57,   179,
   177,    58,     0,    52,    52,    45,   131,    53,    52,    52,
   106,    48,   131,    53,   150,    53,    53,    57,   179,   177,
    58,     0,    52,    52,    45,   131,    53,    52,    52,    45,
   131,    53,   150,    53,    53,    57,   179,   177,    58,     0,
   117,     0,   118,     0,   179,     0,   186,     0,   216,     0,
    52,   216,    53,    52,   166,    53,    52,   209,    53,   161,
     0,    52,   174,    53,     0,   175,     0,   131,    52,   172,
    53,     0,   147,    57,   179,   177,    58,     0,    52,    52,
    45,   131,    53,   147,    53,    57,   179,   177,    58,     0,
    52,    52,   106,    45,   131,    53,   147,    53,    57,   179,
   177,    58,     0,    52,    52,    50,   131,    53,   147,    53,
    57,   179,   177,    58,     0,    52,    52,    48,   131,    53,
   147,    53,    57,   179,   177,    58,     0,    52,    52,   106,
    48,   131,    53,   147,    53,    57,   179,   177,    58,     0,
    52,   176,    53,     0,    43,   179,   177,     0,    43,     1,
     0,     0,   131,   215,     0,   131,   178,     0,   131,   176,
     0,    52,   178,    53,    57,   179,   177,    58,     0,   131,
    52,   208,   131,    53,   179,     0,   131,    52,   179,    53,
     0,    52,   178,    53,     0,   182,     0,   182,   206,   179,
     0,   179,   185,   182,     0,     8,   204,    42,   179,   181,
     0,   182,     0,   182,   185,   182,     0,     9,   179,     0,
     0,   183,     0,   182,   184,   183,     0,   217,     0,   130,
   183,     0,   134,   183,     0,    15,     0,   219,     0,   215,
     0,   176,     0,   178,     0,   161,     0,    52,   179,    53,
     0,   203,     0,   218,     0,   190,     0,   191,     0,   238,
     0,   194,     0,   131,     0,   132,     0,   133,     0,   127,
     0,   128,     0,   120,     0,    63,     0,   119,     0,   129,
     0,   130,     0,   186,   119,   186,     0,   187,     0,   188,
     0,    52,   186,    53,     0,    57,   179,   189,    58,     0,
    57,   216,   189,    58,     0,    57,   186,   189,    58,     0,
    55,   179,   189,    56,     0,    55,   216,   189,    56,     0,
    55,   186,   189,    56,     0,    43,   179,   189,     0,    43,
   216,   189,     0,    43,   186,   189,     0,     0,    43,     1,
     0,   120,   215,     0,   120,   176,     0,   120,   238,     0,
   120,   190,     0,    52,   190,    53,     0,    52,    45,    53,
   180,     0,    52,    50,    53,   180,     0,    52,    48,    53,
   180,     0,    52,   107,    45,    53,   180,     0,    52,   107,
    48,    53,   180,     0,    52,   106,    45,    53,   180,     0,
    52,   106,    48,    53,   180,     0,    52,    45,   131,    53,
   192,     0,    52,   106,    45,   131,    53,   192,     0,    52,
    50,   131,    53,   192,     0,    52,    48,   131,    53,   192,
     0,    52,   106,    48,   131,    53,   192,     0,    52,    49,
   131,    53,   192,     0,    52,    45,   131,   131,    53,   192,
     0,    52,   106,    45,   131,   131,    53,   192,     0,    52,
    50,   131,   131,    53,   192,     0,    52,    48,   131,   131,
    53,   192,     0,    52,   106,    48,   131,   131,    53,   192,
     0,    52,    49,   131,   131,    53,   192,     0,    52,    17,
   149,   131,    53,   192,     0,    52,   149,   131,    53,   192,
     0,    52,    17,   149,   131,   131,    53,   192,     0,    52,
   149,   131,   131,    53,   192,     0,   180,     0,   108,    52,
   179,    53,     0,   208,     0,    45,   131,     0,    50,   131,
     0,    48,   131,     0,   106,    45,   131,     0,   106,    48,
   131,     0,    17,   149,   131,     0,   149,   131,     0,    78,
    52,   179,    53,     0,    78,    52,   193,    53,     0,    78,
    52,   149,    53,     0,    78,    52,   216,    53,     0,   196,
     0,   197,     0,   198,     0,   200,     0,   199,     0,   201,
     0,    72,    52,   202,    53,     0,    73,    52,   202,    53,
     0,    74,    52,   202,    43,   202,    53,     0,    75,    52,
   202,    43,   202,    53,     0,    76,    52,   202,    43,   202,
    53,     0,    77,    52,   202,    53,     0,   215,     0,   176,
     0,   178,     0,   216,     0,   195,     0,   238,     0,    83,
   179,     0,    81,   179,     0,    82,   179,     0,    84,   179,
     0,    85,   179,     0,    86,   179,     0,    87,   179,     0,
    88,   179,     0,    89,   179,     0,    90,   179,     0,    91,
   179,     0,    92,   179,     0,    93,   179,     0,    94,   179,
     0,    95,   179,     0,    96,   179,     0,    97,    52,   179,
    43,   179,    53,     0,    98,    52,   179,    43,   179,    53,
     0,   102,    52,   179,    43,   179,    53,     0,   103,    52,
   179,    43,   179,    53,     0,   104,    52,   179,    43,   179,
    53,     0,    99,   179,     0,   100,   179,     0,   101,   179,
     0,   205,     0,   137,   204,     0,   204,   116,   204,     0,
   204,   114,   204,     0,    52,   204,    53,     0,   179,   206,
   179,     0,    29,     0,    30,     0,   179,     0,   179,   122,
   216,     0,   179,   121,   216,     0,   216,   122,   179,     0,
   216,   121,   179,     0,   179,   122,    15,     0,   179,   121,
    15,     0,    15,   122,   179,     0,    15,   121,   179,     0,
   179,   122,   218,     0,   179,   121,   218,     0,   123,     0,
   124,     0,   121,     0,   125,     0,   126,     0,   122,     0,
   106,    45,     0,   106,    48,     0,   207,     0,   166,     0,
   208,   215,   210,     0,   208,   210,     0,   149,   215,   210,
     0,   149,   131,   215,   210,     0,   149,   131,   131,   215,
   210,     0,   149,   215,    16,   210,     0,   147,   215,   210,
     0,   147,   131,   215,   210,     0,   147,   131,   131,   215,
   210,     0,   147,   215,    16,   210,     0,   149,   210,     0,
   149,   131,   210,     0,   149,   131,   131,   210,     0,   147,
   210,     0,   147,   131,   210,     0,   147,   131,   131,   210,
     0,   208,   215,    16,   210,     0,   208,   131,   215,    16,
   210,     0,   208,   215,    57,   179,    58,   210,     0,   208,
   215,    57,   179,    43,   179,    58,   210,     0,   208,   215,
    16,    57,   179,    58,   210,     0,   208,   131,   215,   210,
     0,   208,   131,   210,     0,   208,   131,   131,   215,   210,
     0,    52,   131,   215,    53,    52,   209,    53,   210,     0,
     0,    43,   208,   215,   210,     0,    43,   208,   210,     0,
    43,   147,   215,   210,     0,    43,   149,   215,   210,     0,
    43,   149,   131,   215,   210,     0,    43,   147,   215,    16,
   210,     0,    43,   149,   215,    16,   210,     0,    43,   208,
   215,    16,   210,     0,    43,   208,   131,   215,    16,   210,
     0,    43,    52,   131,   215,    53,    52,   209,    53,   210,
     0,     0,    43,   208,   215,    57,   179,    58,   210,     0,
    43,   208,   215,    57,   179,    43,   179,    58,   210,     0,
    43,   208,   215,    16,    57,   179,    58,   210,     0,    43,
   208,   131,   215,   210,     0,    43,   208,   131,   210,     0,
    43,     1,     0,   174,   212,     0,   147,    52,   211,    53,
   212,     0,     0,   120,     1,     0,    43,   174,   212,     0,
    43,   147,    52,   211,    53,   212,     0,     0,    43,     1,
     0,    55,   157,    56,     0,     1,    56,     0,    52,   204,
    53,     0,     1,    53,     0,   147,     0,    52,   215,    53,
     0,   148,     0,   150,     0,   152,     0,   151,     0,    43,
   215,   220,     0,     0,    43,     1,     0,     0,    43,   157,
   221,     0,   205,     0,   137,   222,     0,   222,   116,   222,
     0,   222,   114,   222,     0,    52,   222,    53,     0,    34,
   214,   213,     0,    33,   179,    54,    35,   213,     0,    33,
    52,   226,    43,   227,    43,   228,    53,   213,     0,   170,
     0,   165,     0,     0,   204,     0,     0,   170,     0,     0,
     3,    52,   183,    53,    55,   230,    56,     0,     4,   183,
    44,    52,   157,    53,   231,     0,     6,    44,    52,   157,
    53,     0,     5,   230,     0,   230,     0,     0,     8,   204,
    42,   213,   233,     0,     9,   213,     0,     0,    40,    52,
   174,    53,     0,    40,    52,   174,   235,    53,     0,     0,
    43,   174,   235,     0,   139,    52,   215,    53,     0,   139,
    52,   215,   237,    53,     0,   139,    52,   176,    53,     0,
   139,    52,   176,   237,    53,     0,   139,    52,   238,    53,
     0,     0,    43,   215,   237,     0,    43,   176,   237,     0,
   215,    18,   215,   239,     0,   176,    18,   215,   239,     0,
   178,    18,   215,   239,     0,   215,    18,   176,   239,     0,
   176,    18,   176,   239,     0,   178,    18,   176,   239,     0,
   215,   111,   215,   239,     0,   176,   111,   215,   239,     0,
    52,   190,    53,   111,   215,   239,     0,   178,   111,   215,
   239,     0,   215,   111,   176,   239,     0,   176,   111,   176,
   239,     0,    52,   190,    53,   111,   176,   239,     0,   215,
    18,   161,     0,   215,   111,   161,     0,   178,   111,   176,
   239,     0,    52,   238,    53,     0,     0,    18,   215,   239,
     0,    18,   176,   239,     0,   111,   215,   239,     0,   111,
   176,   239,     0,    18,   161,     0,   111,   161,     0
=======
   220,   229,   239,   241,   243,   251,   255,   257,   261,   263,
   264,   269,   275,   280,   285,   288,   291,   294,   297,   299,
   302,   305,   309,   313,   317,   321,   329,   338,   350,   364,
   366,   368,   370,   372,   374,   376,   379,   386,   391,   397,
   403,   412,   421,   424,   427,   430,   431,   438,   446,   447,
   450,   454,   456,   458,   460,   462,   466,   469,   471,   483,
   496,   508,   520,   538,   557,   575,   594,   614,   633,   651,
   670,   688,   690,   692,   694,   696,   698,   709,   713,   715,
   720,   726,   738,   751,   763,   775,   788,   792,   796,   799,
   800,   803,   806,   809,   817,   824,   829,   833,   835,   839,
   843,   849,   851,   855,   858,   859,   861,   865,   867,   870,
   873,   875,   877,   879,   881,   883,   885,   889,   891,   893,
   895,   897,   899,   901,   903,   905,   907,   909,   911,   913,
   915,   917,   921,   923,   925,   929,   934,   939,   944,   949,
   954,   959,   963,   967,   971,   972,   975,   978,   981,   984,
   987,   991,   996,  1001,  1006,  1012,  1018,  1024,  1030,  1036,
  1043,  1049,  1055,  1062,  1068,  1075,  1083,  1090,  1097,  1105,
  1112,  1119,  1125,  1133,  1140,  1142,  1144,  1147,  1151,  1155,
  1159,  1163,  1165,  1167,  1169,  1173,  1177,  1181,  1185,  1189,
  1193,  1197,  1201,  1205,  1209,  1211,  1213,  1215,  1217,  1219,
  1221,  1224,  1227,  1229,  1231,  1235,  1238,  1242,  1247,  1253,
  1258,  1262,  1267,  1273,  1278,  1281,  1285,  1290,  1293,  1297,
  1302,  1307,  1313,  1320,  1329,  1337,  1342,  1346,  1352,  1361,
  1362,  1367,  1371,  1376,  1381,  1387,  1393,  1399,  1405,  1412,
  1422,  1423,  1431,  1441,  1450,  1456,  1461,  1464,  1467,  1473,
  1474,  1477,  1481,  1488,  1489,  1492,  1496,  1499,  1503,  1506,
  1508,  1512,  1514,  1516,  1518,  1520,  1524,  1525,  1528,  1529,
  1533,  1535,  1538,  1542,  1546,  1550,  1554,  1560,  1570,  1572,
  1574,  1575,  1577,  1578,  1580,  1581,  1589,  1597,  1603,  1606,
  1608,  1609,  1615,  1618,  1619,  1624,  1630,  1631,  1635,  1640,
  1646,  1651,  1657,  1662,  1663,  1667,  1671,  1676,  1681,  1686,
  1691,  1696,  1701,  1706,  1711,  1718,  1723,  1728,  1733,  1740,
  1744,  1748,  1753,  1757,  1758,  1762,  1766,  1770,  1774,  1777
};

static const short yyrhs[] = {   119,
   122,     0,    13,   120,    14,     0,     0,   120,    81,   120,
     0,   120,    79,   120,     0,   120,    77,   120,     0,   120,
    78,   120,     0,   120,    75,   120,     0,   107,   120,     0,
   106,   120,     0,   111,   120,     0,   109,   120,     0,   101,
   120,     0,    35,     0,    23,     0,    24,     0,   103,   142,
     0,    10,     0,    21,     0,   108,   120,     0,   105,   120,
     0,   102,   120,     0,    49,   120,   121,    50,    12,    49,
   120,    50,     0,   112,     0,    22,   112,    38,   157,     0,
   120,   100,     0,    46,   120,    47,     0,    37,   120,   121,
     0,     0,   122,    81,   122,     0,   122,    79,   122,     0,
   122,    75,   122,     0,   133,     0,   128,     0,   181,     0,
     7,   112,     0,   184,     0,   175,     0,   176,     0,   177,
     0,   101,    46,   122,    47,     0,   106,    46,   122,    47,
     0,   107,    46,   122,    47,     0,    11,    46,   156,    47,
     0,    32,    49,   122,    50,    33,    46,   156,    47,     0,
    35,     0,    10,     0,    21,     0,   103,    46,   142,    47,
     0,   188,     0,   186,     0,    30,     0,    31,     0,   105,
    46,   122,    47,     0,   122,    80,   122,     0,    46,   174,
    47,    76,    51,   122,    52,     0,    26,    46,   167,   172,
    47,    81,    46,   122,    47,     0,    49,   122,   173,    50,
    12,   165,     0,    49,   122,    50,    12,   165,     0,    22,
   112,    46,   161,    47,    82,    49,   124,    50,     0,   130,
   112,    46,   161,    47,    49,   122,    50,     0,    61,   112,
    46,   161,    47,    82,    49,   124,    50,     0,   126,     0,
   125,     0,    25,   167,   162,    38,    49,   122,    50,     0,
    46,   122,    47,     0,   128,     0,   128,    81,   123,     0,
   122,     0,     0,   112,    46,   163,    47,     0,    72,   112,
    46,   163,    47,     0,   139,    46,   163,    47,     0,   127,
    49,   123,    50,     0,    17,   112,     0,    19,   112,     0,
    74,   129,     0,    73,   129,     0,   129,     0,   130,   131,
     0,   114,   131,     0,    17,   112,   131,     0,    19,   112,
   131,     0,    17,   114,   131,     0,    19,   114,   131,     0,
    46,    96,   167,    47,    46,   161,    47,     0,    46,    96,
    96,   167,    47,    46,   161,    47,     0,    46,    96,   112,
    51,   142,   140,    52,    47,    46,   161,    47,     0,    46,
    96,   112,    51,   142,   140,    52,    47,    46,   161,    47,
    82,   149,     0,    39,     0,    44,     0,    42,     0,    40,
     0,    43,     0,    20,     0,   167,   132,     0,   112,    51,
   142,   140,    52,   132,     0,   167,    82,   137,   132,     0,
   112,    16,    82,   149,   132,     0,   112,    16,    82,   168,
   132,     0,   112,    51,   142,   140,    52,    82,   149,   132,
     0,   112,    51,   142,   140,    52,    82,   168,   132,     0,
    96,   131,     0,    37,   131,     0,    37,     1,     0,     0,
   112,    51,   142,   140,    52,     0,     0,    37,   112,    51,
   142,   140,    52,     0,     0,     0,    37,     1,     0,   134,
   136,   137,     0,   167,     0,   190,     0,   139,     0,   141,
     0,    46,   134,    47,     0,   101,   134,     0,   135,     0,
    46,    46,    42,    96,    47,   115,    47,    51,   142,   140,
    52,     0,    46,    46,    73,    42,    96,    47,   115,    47,
    51,   142,   140,    52,     0,    46,    46,    39,    96,    47,
   115,    47,    51,   142,   140,    52,     0,    46,    46,    44,
    96,    47,   115,    47,    51,   142,   140,    52,     0,    46,
    46,    42,    96,    47,    46,    46,    42,    96,    47,   115,
    47,    47,    51,   142,   140,    52,     0,    46,    46,    42,
    96,    47,    46,    46,    73,    42,    96,    47,   115,    47,
    47,    51,   142,   140,    52,     0,    46,    46,    42,    96,
    47,    46,    46,    39,    96,    47,   115,    47,    47,    51,
   142,   140,    52,     0,    46,    46,    73,    42,    96,    47,
    46,    46,    42,    96,    47,   115,    47,    47,    51,   142,
   140,    52,     0,    46,    46,    73,    42,    96,    47,    46,
    46,    73,    42,    96,    47,   115,    47,    47,    51,   142,
   140,    52,     0,    46,    46,    73,    42,    96,    47,    46,
    46,    39,    96,    47,   115,    47,    47,    51,   142,   140,
    52,     0,    46,    46,    39,    96,    47,    46,    46,    42,
    96,    47,   115,    47,    47,    51,   142,   140,    52,     0,
    46,    46,    39,    96,    47,    46,    46,    73,    42,    96,
    47,   115,    47,    47,    51,   142,   140,    52,     0,    46,
    46,    39,    96,    47,    46,    46,    39,    96,    47,   115,
    47,    47,    51,   142,   140,    52,     0,    82,     0,    83,
     0,   142,     0,   149,     0,   168,     0,    46,   168,    47,
    46,   130,    47,    46,   161,    47,   125,     0,    46,   137,
    47,     0,   138,     0,    96,    46,   135,    47,     0,   112,
    51,   142,   140,    52,     0,    46,    46,    39,    96,    47,
   112,    47,    51,   142,   140,    52,     0,    46,    46,    73,
    39,    96,    47,   112,    47,    51,   142,   140,    52,     0,
    46,    46,    44,    96,    47,   112,    47,    51,   142,   140,
    52,     0,    46,    46,    42,    96,    47,   112,    47,    51,
   142,   140,    52,     0,    46,    46,    73,    42,    96,    47,
   112,    47,    51,   142,   140,    52,     0,    46,   139,    47,
     0,    37,   142,   140,     0,    37,     1,     0,     0,    96,
   167,     0,    96,   141,     0,    96,   139,     0,    46,   141,
    47,    51,   142,   140,    52,     0,    96,    46,   160,    96,
    47,   142,     0,    96,    46,   142,    47,     0,    46,   141,
    47,     0,   145,     0,   145,   158,   142,     0,   142,   148,
   145,     0,     8,   156,    36,   142,   144,     0,   145,     0,
   145,   148,   145,     0,     9,   142,     0,     0,   146,     0,
   145,   147,   146,     0,   169,     0,    95,   146,     0,    99,
   146,     0,    15,     0,   171,     0,   167,     0,   139,     0,
   141,     0,   125,     0,    46,   142,    47,     0,   170,     0,
   153,     0,   154,     0,   190,     0,    96,     0,    97,     0,
    98,     0,    92,     0,    93,     0,    85,     0,    57,     0,
    84,     0,    94,     0,    95,     0,   149,    84,   149,     0,
   150,     0,   151,     0,    46,   149,    47,     0,    51,   142,
   152,    52,     0,    51,   168,   152,    52,     0,    51,   149,
   152,    52,     0,    49,   142,   152,    50,     0,    49,   168,
   152,    50,     0,    49,   149,   152,    50,     0,    37,   142,
   152,     0,    37,   168,   152,     0,    37,   149,   152,     0,
     0,    37,     1,     0,    85,   167,     0,    85,   139,     0,
    85,   190,     0,    85,   153,     0,    46,   153,    47,     0,
    46,    39,    47,   143,     0,    46,    44,    47,   143,     0,
    46,    42,    47,   143,     0,    46,    74,    39,    47,   143,
     0,    46,    74,    42,    47,   143,     0,    46,    73,    39,
    47,   143,     0,    46,    73,    42,    47,   143,     0,    46,
    39,    96,    47,   155,     0,    46,    73,    39,    96,    47,
   155,     0,    46,    44,    96,    47,   155,     0,    46,    42,
    96,    47,   155,     0,    46,    73,    42,    96,    47,   155,
     0,    46,    43,    96,    47,   155,     0,    46,    39,    96,
    96,    47,   155,     0,    46,    73,    39,    96,    96,    47,
   155,     0,    46,    44,    96,    96,    47,   155,     0,    46,
    42,    96,    96,    47,   155,     0,    46,    73,    42,    96,
    96,    47,   155,     0,    46,    43,    96,    96,    47,   155,
     0,    46,    17,   114,    96,    47,   155,     0,    46,   114,
    96,    47,   155,     0,    46,    17,   114,    96,    96,    47,
   155,     0,    46,   114,    96,    96,    47,   155,     0,   143,
     0,   157,     0,   102,   156,     0,   156,    81,   156,     0,
   156,    79,   156,     0,    46,   156,    47,     0,   142,   158,
   142,     0,    23,     0,    24,     0,   142,     0,   142,    87,
   168,     0,   142,    86,   168,     0,   168,    87,   142,     0,
   168,    86,   142,     0,   142,    87,    15,     0,   142,    86,
    15,     0,    15,    87,   142,     0,    15,    86,   142,     0,
   142,    87,   170,     0,   142,    86,   170,     0,    88,     0,
    89,     0,    86,     0,    90,     0,    91,     0,    87,     0,
    73,    39,     0,    73,    42,     0,   159,     0,   130,     0,
   160,   167,   162,     0,   160,   162,     0,   114,   167,   162,
     0,   114,    96,   167,   162,     0,   114,    96,    96,   167,
   162,     0,   114,   167,    16,   162,     0,   112,   167,   162,
     0,   112,    96,   167,   162,     0,   112,    96,    96,   167,
   162,     0,   112,   167,    16,   162,     0,   114,   162,     0,
   114,    96,   162,     0,   114,    96,    96,   162,     0,   112,
   162,     0,   112,    96,   162,     0,   112,    96,    96,   162,
     0,   160,   167,    16,   162,     0,   160,    96,   167,    16,
   162,     0,   160,   167,    51,   142,    52,   162,     0,   160,
   167,    51,   142,    37,   142,    52,   162,     0,   160,   167,
    16,    51,   142,    52,   162,     0,   160,    96,   167,   162,
     0,   160,    96,   162,     0,   160,    96,    96,   167,   162,
     0,    46,    96,   167,    47,    46,   161,    47,   162,     0,
     0,    37,   160,   167,   162,     0,    37,   160,   162,     0,
    37,   112,   167,   162,     0,    37,   114,   167,   162,     0,
    37,   114,    96,   167,   162,     0,    37,   112,   167,    16,
   162,     0,    37,   114,   167,    16,   162,     0,    37,   160,
   167,    16,   162,     0,    37,   160,    96,   167,    16,   162,
     0,    37,    46,    96,   167,    47,    46,   161,    47,   162,
     0,     0,    37,   160,   167,    51,   142,    52,   162,     0,
    37,   160,   167,    51,   142,    37,   142,    52,   162,     0,
    37,   160,   167,    16,    51,   142,    52,   162,     0,    37,
   160,    96,   167,   162,     0,    37,   160,    96,   162,     0,
    37,     1,     0,   137,   164,     0,   112,    46,   163,    47,
   164,     0,     0,    85,     1,     0,    37,   137,   164,     0,
    37,   112,    46,   163,    47,   164,     0,     0,    37,     1,
     0,    49,   122,    50,     0,     1,    50,     0,    46,   156,
    47,     0,     1,    47,     0,   112,     0,    46,   167,    47,
     0,   113,     0,   115,     0,   117,     0,   116,     0,    37,
   167,   172,     0,     0,    37,     1,     0,     0,    37,   122,
   173,     0,   157,     0,   102,   174,     0,   174,    81,   174,
     0,   174,    79,   174,     0,    46,   174,    47,     0,    28,
   166,   165,     0,    27,   142,    48,    29,   165,     0,    27,
    46,   178,    37,   179,    37,   180,    47,   165,     0,   133,
     0,   129,     0,     0,   156,     0,     0,   133,     0,     0,
     3,    46,   146,    47,    49,   182,    50,     0,     4,   146,
    38,    46,   122,    47,   183,     0,     6,    38,    46,   122,
    47,     0,     5,   182,     0,   182,     0,     0,     8,   156,
    36,   165,   185,     0,     9,   165,     0,     0,    34,    46,
   137,    47,     0,    34,    46,   137,   187,    47,     0,     0,
    37,   137,   187,     0,   104,    46,   167,    47,     0,   104,
    46,   167,   189,    47,     0,   104,    46,   139,    47,     0,
   104,    46,   139,   189,    47,     0,   104,    46,   190,    47,
     0,     0,    37,   167,   189,     0,    37,   139,   189,     0,
   167,    18,   167,   191,     0,   139,    18,   167,   191,     0,
   141,    18,   167,   191,     0,   167,    18,   139,   191,     0,
   139,    18,   139,   191,     0,   141,    18,   139,   191,     0,
   167,    76,   167,   191,     0,   139,    76,   167,   191,     0,
    46,   153,    47,    76,   167,   191,     0,   141,    76,   167,
   191,     0,   167,    76,   139,   191,     0,   139,    76,   139,
   191,     0,    46,   153,    47,    76,   139,   191,     0,   167,
    18,   125,     0,   167,    76,   125,     0,   141,    76,   139,
   191,     0,    46,   190,    47,     0,     0,    18,   167,   191,
     0,    18,   139,   191,     0,    76,   167,   191,     0,    76,
   139,   191,     0,    18,   125,     0,    76,   125,     0
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
<<<<<<< HEAD
   159,   190,   191,   195,   196,   197,   198,   199,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   217,   218,   219,
   220,   221,   222,   226,   227,   232,   233,   237,   241,   246,
   248,   255,   361,   363,   365,   366,   367,   368,   369,   370,
   371,   373,   374,   376,   377,   378,   379,   380,   381,   387,
   388,   389,   390,   391,   392,   394,   397,   403,   407,   416,
   426,   427,   431,   436,   437,   439,   453,   457,   461,   468,
   469,   474,   491,   496,   501,   506,   507,   512,   520,   531,
   545,   546,   547,   551,   555,   559,   563,   567,   571,   578,
   580,   582,   587,   599,   600,   601,   604,   605,   606,   613,
   617,   621,   626,   632,   637,   644,   650,   661,   663,   664,
   668,   675,   679,   680,   687,   689,   691,   693,   695,   697,
   699,   711,   715,   716,   717,   718,   719,   720,   721,   724,
   726,   728,   730,   732,   734,   736,   738,   740,   742,   744,
   746,   748,   753,   754,   757,   758,   759,   763,   764,   765,
   768,   772,   777,   779,   781,   783,   785,   787,   791,   793,
   794,   800,   801,   802,   804,   806,   808,   810,   816,   817,
   819,   820,   826,   827,   831,   832,   836,   837,   842,   843,
   844,   845,   846,   848,   849,   850,   851,   852,   853,   854,
   855,   856,   857,   858,   864,   865,   866,   867,   868,   869,
   870,   871,   873,   875,   879,   880,   881,   882,   888,   892,
   900,   912,   916,   925,   937,   941,   949,   953,   954,   957,
   962,   966,   971,   975,   982,   985,   986,   989,   990,   993,
   994,   997,   998,   999,  1000,  1001,  1002,  1005,  1006,  1007,
  1008,  1009,  1010,  1012,  1013,  1015,  1016,  1018,  1019,  1023,
  1025,  1026,  1027,  1028,  1029,  1030,  1031,  1035,  1037,  1038,
  1039,  1044,  1046,  1047,  1048,  1049,  1050,  1053,  1060,  1067,
  1074,  1081,  1088,  1096,  1097,  1098,  1099,  1100,  1101,  1107,
  1111,  1114,  1117,  1118,  1119,  1120,  1121,  1122,  1125,  1126,
  1127,  1130,  1131,  1132,  1133,  1136,  1137,  1140,  1141,  1144,
  1146,  1147,  1148,  1154,  1155,  1156,  1157,  1158,  1164,  1166,
  1167,  1170,  1173,  1174,  1177,  1178,  1181,  1182,  1185,  1186,
  1189,  1190,  1195,  1196,  1197,  1198,  1199,  1200,  1207,  1209,
  1212,  1214,  1220,  1224,  1229,  1235,  1241,  1247,  1257,  1263,
  1269,  1275,  1284,  1288,  1292,  1298,  1302,  1306,  1312,  1318,
  1325,  1333,  1341,  1347,  1353,  1357,  1364,  1370,  1373,  1377,
  1381,  1387,  1393,  1399,  1406,  1414,  1420,  1435,  1441,  1444,
  1452,  1460,  1466,  1472,  1476,  1485,  1489,  1499,  1500,  1504,
  1508,  1518,  1519,  1527,  1529,  1536,  1538,  1544,  1545,  1549,
  1554,  1559,  1564,  1570,  1574,  1575,  1581,  1582,  1593,  1604,
  1605,  1607,  1609,  1615,  1621,  1629,  1637,  1641,  1645,  1651,
  1655,  1661,  1665,  1672,  1676,  1680,  1687,  1691,  1695,  1699,
  1709,  1710,  1716,  1717,  1721,  1722,  1727,  1728,  1729,  1730,
  1731,  1734,  1735,  1736,  1742,  1743,  1744,  1746,  1747,  1748,
  1750,  1751,  1752,  1753,  1755,  1756,  1757,  1758,  1759,  1760,
  1761,  1765,  1766,  1767,  1768,  1769,  1770,  1771
=======
   146,   177,   178,   182,   183,   184,   185,   186,   191,   192,
   193,   194,   195,   196,   197,   198,   199,   204,   205,   206,
   207,   208,   209,   213,   214,   219,   220,   224,   228,   233,
   235,   242,   348,   349,   351,   352,   353,   354,   355,   356,
   357,   359,   360,   362,   363,   364,   365,   366,   367,   373,
   374,   375,   376,   377,   378,   380,   383,   389,   393,   402,
   411,   415,   419,   420,   422,   436,   440,   444,   451,   452,
   457,   462,   467,   476,   484,   495,   509,   510,   511,   515,
   519,   523,   527,   531,   535,   542,   544,   546,   551,   563,
   564,   565,   568,   569,   570,   577,   581,   585,   590,   596,
   601,   608,   614,   625,   627,   628,   632,   639,   643,   644,
   652,   656,   657,   658,   659,   660,   661,   662,   665,   667,
   669,   671,   673,   675,   677,   679,   681,   683,   685,   687,
   689,   694,   695,   698,   699,   700,   703,   704,   705,   708,
   712,   717,   719,   721,   723,   725,   727,   731,   733,   734,
   740,   741,   742,   744,   746,   748,   750,   756,   757,   759,
   760,   766,   767,   771,   772,   776,   777,   781,   782,   783,
   784,   785,   787,   788,   789,   790,   791,   792,   793,   794,
   795,   798,   799,   800,   801,   802,   803,   804,   805,   807,
   809,   813,   814,   815,   816,   822,   826,   834,   846,   850,
   859,   871,   875,   883,   887,   888,   891,   896,   900,   905,
   909,   916,   919,   920,   923,   924,   927,   928,   931,   932,
   933,   934,   935,   936,   939,   940,   941,   942,   943,   944,
   946,   947,   949,   950,   952,   960,   961,   962,   963,   964,
   970,   972,   973,   976,   977,   978,   981,   982,   985,   986,
   989,   990,   993,   994,   999,  1000,  1001,  1002,  1003,  1004,
  1011,  1013,  1016,  1018,  1024,  1028,  1033,  1039,  1045,  1051,
  1061,  1067,  1073,  1079,  1088,  1092,  1096,  1102,  1106,  1110,
  1116,  1122,  1129,  1137,  1145,  1151,  1157,  1161,  1168,  1174,
  1177,  1181,  1185,  1191,  1197,  1203,  1210,  1218,  1224,  1239,
  1245,  1248,  1256,  1264,  1270,  1276,  1280,  1289,  1293,  1303,
  1304,  1308,  1312,  1322,  1323,  1331,  1333,  1340,  1342,  1348,
  1349,  1353,  1358,  1363,  1368,  1374,  1378,  1379,  1385,  1386,
  1397,  1408,  1409,  1411,  1413,  1419,  1425,  1433,  1441,  1445,
  1449,  1455,  1459,  1465,  1469,  1476,  1480,  1484,  1491,  1495,
  1499,  1503,  1513,  1514,  1520,  1521,  1525,  1526,  1531,  1532,
  1533,  1534,  1535,  1538,  1539,  1540,  1546,  1547,  1548,  1550,
  1551,  1552,  1554,  1555,  1556,  1557,  1559,  1560,  1561,  1562,
  1563,  1564,  1565,  1569,  1570,  1571,  1572,  1573,  1574,  1575
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
};

static const char * const yytname[] = {   "$","error","$undefined.","SWITCH",
"CASE","BREAK","DEFAULT","RETURN","IF","ELSE","EMPTY","AWAIT","PROJECTION","PBEGIN",
<<<<<<< HEAD
"PEND","POINTERNULL","ARRAY","STRUCT","DOT","UNION","FOPEN","FCLOSE","FILEDECLARATION",
"FGETS","FPUTS","FGETC","FPUTC","MORE","DEFINE","MY_TRUE","MY_FALSE","EXIST",
"FRAME","FOR","WHILE","DO","TRUE","FALSE","REPEAT","UNTIL","DISPLAY","SKIP",
"THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION","POINTERDECLARATION",
"CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION","LISTDECLARATION","OPEN_PAR",
"CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR","CLOSE_MPAR","FUNCTION",
"OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED","SEND","RECEIVE","PROCESS",
"CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD","STRFUNCTAIL","STRFUNCCAT",
"STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","SIZEOF","SYSTEM","EXTERN","CEIL","FLOOR",
"ROUND","SIN","COS","TAN","ASIN","ACOS","ATAN","SINH","COSH","TANH","EXP","LOG",
"LOG10","SQRT","ATAN2","POW","ABS","FABS","LABS","FMOD","MODF","LDEXP","FREXP",
"UNSIGNED","SIGNED","MALLOC","FREE","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL",
"AND","ASS_P","ASS_N","CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST",
"ADD","SUB","MUL","DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST",
"FINAL","KEEP","ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL",
"STRUCT_TYPE","INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition",
"complexProposition","poptional_projection","statement","option_struct_declaration",
"empty_statement","function_define","function","struct_define_statement","struct_identifier",
"sign_declaration","declaration","type_define","option_identifier_array_declaration",
"inner_option_identifier_array_declaration","file_statement","ass_statement",
"ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift","array",
"option_ari_exp","point_exp","ari_exp","type_cast_alg_exp","option_exp_else_statement",
"simple_ari_exp","member_in_exp","bi_operator","ari_operator","array_exp","option_list_value",
"option_struct_list_value","inner_option_list_value","address_exp","type_cast",
"casted_element","all_sizeof_type","size_of","String_Function","String_Function_head",
"String_Function_tail","String_Function_cat","String_Function_cmp","String_Function_cpy",
"String_Function_len","str_func_parameter","math_function","bool_exp","prime_bool_exp",
"relation_operator","sign_type_define","all_type_define","option_function_parameter_list",
"inner_option_define_identifier","option_function_identifier","inner_option_function_identifier",
"statement_bpar","bool_par","identifier","strliteral","intliteral","charliteral",
"floatliteral","option_frame_identifier","option_projection","imply_pre","while_statement",
=======
"PEND","POINTERNULL","ARRAY","STRUCT","DOT","UNION","FILEDECLARATION","MORE",
"DEFINE","MY_TRUE","MY_FALSE","EXIST","FRAME","FOR","WHILE","DO","TRUE","FALSE",
"REPEAT","UNTIL","DISPLAY","SKIP","THEN","COMMA","COLON","INTDECLARATION","STRDECLARATION",
"POINTERDECLARATION","CHARDECLARATION","VOIDDECLARATION","FLOATDECLARATION",
"LISTDECLARATION","OPEN_PAR","CLOSE_PAR","TIMES","OPEN_BPAR","CLOSE_BPAR","OPEN_MPAR",
"CLOSE_MPAR","FUNCTION","OVER","CYLINDER","OVEREP","INTER_OR","NON_DETERMINED",
"SEND","RECEIVE","PROCESS","CHANNEL","PUT","GET","ERROR_TOKEN","STRFUNCHEAD",
"STRFUNCTAIL","STRFUNCCAT","STRFUNCCMP","STRFUNCCPY","STRFUNCLEN","EXTERN","UNSIGNED",
"SIGNED","CHOP","IMPLY","IFF","PROPIMPLY","OR","PARALLEL","AND","ASS_P","ASS_N",
"CON","ADDRESS","NE","EQ","GE","LE","GT","LT","LST","RST","ADD","SUB","MUL",
"DIV","MOD","BNE","CHOPSTAR","NEXT","NEGATION","LENGTH","REQUEST","FINAL","KEEP",
"ALWAYS","HALT","W_NEXT","PREFIX","SOMETIMES","ID","STRLITERAL","STRUCT_TYPE",
"INTLITERAL","FLOATLITERAL","CHARLITERAL","program","gComplexProposition","complexProposition",
"poptional_projection","statement","option_struct_declaration","empty_statement",
"function","struct_define_statement","struct_identifier","sign_declaration",
"declaration","type_define","option_identifier_array_declaration","inner_option_identifier_array_declaration",
"ass_statement","ass_left","leftaddrshift","assign_operator","ass_right","rightaddrshift",
"array","option_ari_exp","point_exp","ari_exp","type_cast_alg_exp","option_exp_else_statement",
"simple_ari_exp","member_in_exp","bi_operator","ari_operator","array_exp","option_list_value",
"option_struct_list_value","inner_option_list_value","address_exp","type_cast",
"casted_element","bool_exp","prime_bool_exp","relation_operator","sign_type_define",
"all_type_define","option_function_parameter_list","inner_option_define_identifier",
"option_function_identifier","inner_option_function_identifier","statement_bpar",
"bool_par","identifier","strliteral","intliteral","charliteral","floatliteral",
"option_frame_identifier","option_projection","imply_pre","while_statement",
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
"for_statement","extend_for_statement","for_sta_init","for_sta_condition","for_sta_control",
"switch_statement","case_par","init_case_par","if_statement","option_else_statement",
"output_statement","option_output","input_statement","option_input","struct_member_exp",
"option_struct_member_exp","struct_member_exp"
};
#endif

static const short yyr1[] = {     0,
   118,   119,   119,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   121,   121,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   123,   123,   124,   124,
   125,   125,   125,   126,   127,   127,   128,   128,   128,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   130,
   130,   130,   130,   130,   130,   131,   131,   131,   131,   131,
   131,   131,   131,   132,   132,   132,    -1,    -1,    -1,    -1,
   133,   134,   134,   134,   134,   134,   134,   134,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   136,   136,   137,   137,   137,   137,   137,   137,   138,
   139,   139,   139,   139,   139,   139,   139,   140,   140,   140,
   141,   141,   141,   141,   141,   141,   141,   142,   142,   142,
   142,   143,   143,   144,   144,   145,   145,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   147,   147,   147,   147,   147,   147,   147,   147,   148,
   148,   149,   149,   149,   149,   150,   150,   150,   151,   151,
   151,   152,   152,   152,   152,   152,   153,   153,   153,   153,
   153,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   155,   156,   156,   156,   156,   156,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
<<<<<<< HEAD
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   158,   158,   159,
   159,   160,   161,   161,   161,   161,   161,   162,   163,   163,
   164,   164,   164,   165,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   166,   166,   166,   166,   166,   166,   167,
   167,   167,   167,   167,   167,   167,   167,   168,   168,   168,
    -1,    -1,    -1,    -1,   169,   169,   169,   169,   169,   169,
   169,   170,   171,   171,   171,   171,   171,   171,   171,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   173,   173,   174,   174,   174,   174,   174,   174,
   175,   176,   176,   176,   176,   176,   176,   176,   177,   177,
   177,   178,   178,   178,   178,   178,   178,   178,   179,   179,
   179,   179,   180,   180,   181,   181,   182,   182,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   184,   184,   184,   184,   184,   184,
   184,   184,   185,   185,   186,   186,   186,   186,   187,   187,
   187,   188,   188,   188,   189,   189,   189,   189,   189,   190,
   190,   190,   190,   190,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   192,   192,   193,
   193,   193,   193,   193,   193,   193,   193,   194,   194,   194,
   194,   195,   195,   195,   195,   195,   195,   196,   197,   198,
   199,   200,   201,   202,   202,   202,   202,   202,   202,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   204,   204,   204,   204,   204,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   206,   206,   206,   206,   206,   206,   207,   207,
   208,   208,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   211,   211,   211,   211,   212,
   212,   212,   212,   213,   213,   214,   214,   215,   215,   216,
   217,   218,   219,   220,   220,   220,   221,   221,   222,   222,
   222,   222,   222,   223,   224,   225,   226,   226,   226,   227,
   227,   228,   228,   229,   230,   230,   231,   231,   231,   232,
   233,   233,   234,   234,   235,   235,   236,   236,   236,   236,
   236,   237,   237,   237,   238,   238,   238,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
   238,   239,   239,   239,   239,   239,   239,   239
=======
   157,   157,   157,   157,   158,   158,   158,   158,   158,   158,
   159,   159,   160,   160,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   163,   163,   163,
   163,   164,   164,   164,   164,   165,   165,   166,   166,   167,
   167,   168,   169,   170,   171,   172,   172,   172,   173,   173,
   174,   174,   174,   174,   174,   175,   176,   177,   178,   178,
   178,   179,   179,   180,   180,   181,   182,   182,   183,   183,
   183,   184,   185,   185,   186,   186,   187,   187,   188,   188,
   188,   188,   188,   189,   189,   189,   190,   190,   190,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190,   191,   191,   191,   191,   191,   191,   191
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
};

static const short yyr2[] = {     0,
     2,     3,     0,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     1,     1,     2,
     2,     2,     8,     1,     4,     2,     3,     3,     0,     3,
     3,     3,     1,     1,     1,     2,     1,     1,     1,     1,
     4,     4,     4,     4,     8,     1,     1,     1,     4,     1,
     1,     1,     1,     4,     3,     7,     9,     6,     5,     9,
<<<<<<< HEAD
     1,     4,     4,     1,     1,     7,     3,     1,     3,     1,
     0,     8,     4,     5,     4,     1,     1,     4,     2,     2,
     2,     2,     1,     2,     2,     3,     3,     3,     3,     7,
     8,    11,    13,     1,     1,     1,     1,     1,     1,     2,
     6,     4,     5,     5,     8,     8,     2,     2,     2,     0,
     6,     7,     0,     2,     6,     8,     4,     6,     6,     6,
     4,     3,     1,     1,     1,     1,     3,     2,     1,    11,
    12,    11,    11,    17,    18,    17,    18,    19,    18,    17,
    18,    17,     1,     1,     1,     1,     1,    10,     3,     1,
     4,     5,    11,    12,    11,    11,    12,     3,     3,     2,
     0,     2,     2,     2,     7,     6,     4,     3,     1,     3,
     3,     5,     1,     3,     2,     0,     1,     3,     1,     2,
     2,     1,     1,     1,     1,     1,     1,     3,     1,     1,
=======
     8,     9,     1,     1,     7,     3,     1,     3,     1,     0,
     4,     5,     4,     4,     2,     2,     2,     2,     1,     2,
     2,     3,     3,     3,     3,     7,     8,    11,    13,     1,
     1,     1,     1,     1,     1,     2,     6,     4,     5,     5,
     8,     8,     2,     2,     2,     0,     6,     7,     0,     2,
     3,     1,     1,     1,     1,     3,     2,     1,    11,    12,
    11,    11,    17,    18,    17,    18,    19,    18,    17,    18,
    17,     1,     1,     1,     1,     1,    10,     3,     1,     4,
     5,    11,    12,    11,    11,    12,     3,     3,     2,     0,
     2,     2,     2,     7,     6,     4,     3,     1,     3,     3,
     5,     1,     3,     2,     0,     1,     3,     1,     2,     2,
     1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     1,     3,     4,     4,     4,     4,     4,
     4,     3,     3,     3,     0,     2,     2,     2,     2,     2,
     3,     4,     4,     4,     5,     5,     5,     5,     5,     6,
     5,     5,     6,     5,     6,     7,     6,     6,     7,     6,
     6,     5,     7,     6,     1,     1,     2,     3,     3,     3,
     3,     1,     1,     1,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
     2,     2,     1,     1,     3,     2,     3,     4,     5,     4,
     3,     4,     5,     4,     2,     3,     4,     2,     3,     4,
     4,     5,     6,     8,     7,     4,     3,     5,     8,     0,
     4,     3,     4,     4,     5,     5,     5,     5,     6,     9,
     0,     7,     9,     8,     5,     4,     2,     2,     5,     0,
     2,     3,     6,     0,     2,     3,     2,     3,     2,     1,
     3,     1,     1,     1,     1,     3,     0,     2,     0,     3,
     1,     2,     3,     3,     3,     3,     5,     9,     1,     1,
     0,     1,     0,     1,     0,     7,     7,     5,     2,     1,
     0,     5,     2,     0,     4,     5,     0,     3,     4,     5,
     4,     5,     4,     0,     3,     3,     4,     4,     4,     4,
     4,     4,     4,     4,     6,     4,     4,     4,     6,     3,
     3,     4,     3,     0,     3,     3,     3,     3,     2,     2
};

static const short yydefact[] = {     3,
     0,     0,    18,    19,     0,    15,    16,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
<<<<<<< HEAD
     0,     0,     0,     0,    47,     0,     0,     0,     0,     0,
    99,     0,     0,     0,     0,    48,     0,     0,     0,     0,
     0,    52,    53,     0,     0,    46,    94,    97,    96,    98,
    95,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   388,     0,     1,    64,    65,    61,     0,    34,    83,
     0,    76,    33,     0,   129,   125,   126,    77,   262,   263,
   264,   266,   265,   267,   331,     0,   123,    38,    39,    40,
    35,    37,    51,    50,   124,     0,     0,    29,    13,    22,
     0,   182,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   391,   393,   392,   187,   185,   186,    17,   169,   177,
   191,   192,   194,   189,   184,   179,   190,   183,   193,    21,
    10,     9,    20,    12,    11,     2,     0,     0,     0,     0,
     0,    26,     0,    36,   182,   310,   311,     0,     0,   390,
   312,     0,   304,     0,     0,    79,     0,    80,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   388,   369,     0,
   409,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   187,     0,   185,   186,   191,   399,   184,     0,
   193,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    94,    96,     0,    82,     0,    81,     0,     0,
   388,   164,   163,   162,     0,     0,   128,   125,     0,     0,
     0,     0,     0,   378,     0,     0,   388,    85,   110,     0,
     0,     0,     0,     0,    84,   143,   144,     0,     0,   378,
     0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   185,   186,     0,   191,   184,   193,     0,   281,   282,   280,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,     0,     0,   301,   302,   303,     0,     0,
     0,     0,   221,     0,   223,   220,   222,   180,   181,   203,
   204,     0,   201,   202,   200,   325,   328,   323,   324,   326,
   327,   198,   199,   195,   196,   197,     0,     0,     8,     6,
     7,     5,     4,     0,     0,     0,     0,   312,     0,   305,
   325,   328,     0,     0,     0,     0,     0,     0,     0,    86,
    88,    87,    89,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   358,     0,     0,     0,   395,     0,    94,    96,
    98,    95,     0,     0,   408,   407,     0,     0,   387,     0,
     0,     0,   404,     0,     0,     0,     0,     0,     0,   150,
   145,   146,   206,   207,   147,     0,     0,    94,    96,    95,
     0,     0,     0,     0,   388,   162,     0,   400,    67,   127,
   158,   168,     0,   389,     0,     0,     0,   451,     0,     0,
     0,     0,   275,   276,   278,     0,   274,   277,   279,     0,
     0,     0,     0,     0,     0,   378,     0,     0,     0,     0,
     0,   332,     0,     0,     0,     0,   125,   126,     0,   123,
   124,     0,     0,     0,     0,     0,     0,     0,     0,   388,
   382,     0,   161,   107,     0,     0,     0,     0,   100,    32,
    31,    55,    30,     0,     0,    68,   122,   452,   452,     0,
   452,   452,   452,   452,   452,   452,   358,   448,   452,   452,
   449,   452,   452,    25,    29,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   188,   224,     0,    94,    96,    95,
     0,     0,     0,     0,   250,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   171,   178,   170,
     0,   320,   319,   308,   318,   314,   322,   317,   313,   321,
   309,   422,   307,   306,   316,   315,    44,     0,     0,     0,
     0,   121,     0,     0,   117,     0,     0,     0,     0,     0,
   369,   369,   369,     0,   375,     0,     0,     0,   369,     0,
     0,     0,     0,     0,     0,   411,     0,   386,   385,     0,
     0,     0,     0,     0,     0,     0,     0,   218,   218,   218,
   218,   218,   218,     0,     0,   423,     0,     0,     0,     0,
     0,     0,    94,    96,    94,    96,   403,   162,     0,     0,
     0,     0,     0,     0,     0,   402,   401,   397,     0,     0,
   268,   269,     0,     0,     0,   273,    63,     0,     0,   388,
     0,    62,   329,   330,   167,     0,    94,    96,    95,     0,
    41,    49,     0,   429,     0,   427,     0,   431,    54,    42,
    43,   379,   378,     0,   376,    73,     0,     0,     0,   161,
   109,   108,   110,    78,     0,     0,     0,   439,   436,    75,
   446,   442,   440,   437,   450,   444,     0,   438,   435,   445,
   441,    28,     0,   176,     0,   225,   173,     0,     0,   227,
     0,     0,     0,     0,   226,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   251,   253,   252,   329,   330,   260,   257,   258,   259,
   261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   420,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   369,   346,   369,   369,   343,   369,   369,
   334,   369,     0,     0,   369,     0,   369,   369,   360,   369,
     0,   396,   395,     0,     0,     0,     0,     0,     0,     0,
   410,     0,   405,   384,     0,   149,   208,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   425,
   424,     0,   205,     0,     0,     0,     0,     0,     0,   161,
   358,   403,   161,   452,   452,     0,   398,    59,     0,     0,
     0,     0,    74,     0,     0,     0,     0,     0,     0,    94,
    96,   432,   432,   430,   428,     0,   383,   388,   382,   160,
   161,   152,   110,   110,     0,   102,    69,   457,   452,   452,
   458,   452,   452,     0,     0,     0,   172,     0,     0,     0,
     0,   248,   232,     0,   235,     0,   237,     0,   234,     0,
     0,     0,     0,     0,   230,     0,     0,   231,     0,     0,
   228,   229,   245,     0,   256,   254,   255,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   421,     0,   115,     0,   118,   120,   119,     0,   369,   347,
   369,   369,   339,   369,   344,   369,   369,   335,     0,   355,
   369,   369,     0,   333,     0,     0,   369,   361,   369,   369,
   362,   374,   369,   369,     0,   359,     0,   394,     0,     0,
     0,   413,     0,     0,   219,   218,   218,   218,   212,   214,
   213,   209,   211,   210,     0,   151,   426,     0,   388,   391,
     0,   388,   391,   388,   391,     0,     0,   358,     0,     0,
     0,   447,   443,     0,    58,   270,   271,   272,   161,   166,
     0,     0,     0,     0,     0,   434,   433,    73,   378,   380,
   159,   103,   104,   110,   454,   453,   456,   455,     0,     0,
   175,   244,     0,   174,     0,   238,   241,   243,   240,     0,
   233,     0,   236,     0,   247,   296,   297,   298,   299,   300,
     0,     0,     0,     0,     0,     0,   414,     0,     0,   348,
   369,   340,   342,   345,   369,   336,   338,   369,   369,   354,
     0,   349,     0,    71,     0,   364,   363,   365,   369,   373,
     0,   366,     0,    66,     0,   412,     0,     0,     0,   215,
   217,   216,     0,     0,     0,     0,     0,     0,     0,     0,
   388,     0,   388,   391,     0,   152,    90,   165,    56,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   377,     0,     0,   101,     0,    23,   246,     0,   239,   242,
     0,     0,     0,   116,   358,   341,   337,   356,   350,     0,
     0,   369,    70,     0,   358,   367,     0,     0,   369,     0,
     0,    45,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    91,
     0,     0,     0,     0,     0,     0,     0,     0,    73,   110,
   110,    72,   249,     0,     0,     0,   369,     0,   351,    60,
     0,   369,     0,   370,    57,   406,   358,     0,     0,     0,
   161,   161,     0,     0,     0,   161,   161,   161,   161,     0,
     0,     0,     0,     0,     0,   358,     0,     0,     0,     0,
     0,     0,     0,   381,   105,   106,     0,   416,   369,   353,
   369,   369,   372,   369,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   161,     0,     0,
     0,   161,   161,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   419,   357,   352,   368,   371,     0,   391,
   391,     0,   153,   132,   391,   391,     0,   156,   130,   155,
   133,     0,     0,     0,     0,     0,     0,    92,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   418,   415,
     0,     0,   148,     0,     0,     0,   391,     0,     0,   391,
   154,   391,   391,     0,   157,   131,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   417,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   391,    93,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   161,   161,     0,   161,   161,     0,
     0,     0,     0,     0,     0,   161,     0,     0,   161,   161,
   161,     0,   142,   140,     0,   136,   134,     0,     0,     0,
   161,   141,   135,   139,   137,     0,   138,     0,     0,     0
};

static const short yydefgoto[] = {  1378,
     2,    21,   280,   212,   495,  1134,    75,   145,    77,    78,
    79,    80,    81,   484,   489,    82,    83,    84,    85,   268,
   481,   410,   146,   688,   147,   181,   882,   877,   149,   150,
   347,   332,   412,   413,   414,   812,   151,   152,   883,   544,
   153,    88,    89,    90,    91,    92,    93,    94,   446,   154,
   359,   183,   363,    95,    96,   594,   386,   482,   685,   572,
   205,   155,   184,   156,   157,   158,   602,   441,   220,    98,
    99,   100,   397,   802,  1077,   101,   920,  1290,   102,   763,
   103,   627,   104,   675,   159,   698
};

static const short yypact[] = {    38,
   522,  3949,-32768,-32768,   -88,-32768,-32768,-32768,   522,   522,
   522,   522,  7557,   522,   522,   522,   522,   522,   522,-32768,
    23,    16,   -53,  6947,-32768,    95,   -69,   -59,   116,   172,
-32768,   197,   236,   257,   266,-32768,   178,   -17,   317,  7658,
    43,-32768,-32768,   283,   369,-32768,-32768,-32768,-32768,-32768,
-32768,  3356,  3949,   415,   438,   507,   548,   620,   652,   693,
   261,   711,   809,   702,   206,   265,   712,   728,   738,   767,
   786,   795,   384,  1343,-32768,-32768,-32768,   731,-32768,-32768,
   384,-32768,-32768,   419,-32768,   139,    21,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   657,    31,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   800,   890,   885,   743,   743,
  6947,-32768,  5548,   854,  7557,  7557,  7557,  7557,  7557,  7557,
  7557,  7557,  7557,  7557,  7557,  7557,  7557,  7557,  7557,  7557,
   908,   941,  7557,  7557,  7557,   955,   978,  1013,   216,  9458,
  9458,-32768,-32768,-32768,-32768,   139,    21,  1068,  1168,-32768,
-32768,-32768,-32768,-32768,    31,-32768,-32768,-32768,-32768,   743,
   743,   743,   743,   743,   743,-32768,   522,   522,   522,   522,
   522,-32768,  9458,-32768,   566,-32768,-32768,  4052,  6947,-32768,
  1408,   966,-32768,  1122,  6947,   384,   384,   384,   384,   309,
   -17,   -17,   -17,   -17,     5,  1025,   -17,-32768,  1011,   -17,
  4190,   937,   840,  6947,   320,  3949,  7151,  6947,  3506,   454,
  7050,  1165,  1291,   898,   213,   286,  1052,-32768,   363,   315,
   935,  1045,   839,   839,   839,   839,   839,   839,   839,  1081,
   755,   914,-32768,-32768,  1016,-32768,   384,-32768,   -17,  6727,
  1118,-32768,-32768,-32768,  3806,   309,-32768,    51,  7557,   558,
  3949,  3949,  3949,  7252,  7557,   384,    42,-32768,    81,  3949,
  3949,  3949,  3949,   733,-32768,-32768,-32768,  7151,     5,  7252,
     5,     5,     5,  1136,   959,   959,  7355,-32768,   522,  1152,
   996,  1065,    -3,    39,  1099,   185,  5666,   533,   604,  1133,
   314,   160,   846,  1231,   424,  1255,  4958,  1068,  1068,  1068,
  1068,  1068,  1068,  1068,  1068,  1068,  1068,  1068,  1068,  1068,
  1068,  1068,  1068,  7557,  7557,  1068,  1068,  1068,  7557,  7557,
  7557,   358,  1222,    21,-32768,  1295,-32768,-32768,-32768,-32768,
-32768,  9458,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  9458,  7557,  1216,   721,
   721,    70,  1186,  1274,  7557,  7557,  4328,   970,   632,-32768,
    19,    33,  7557,   320,  6947,  6947,  7557,  7557,   734,-32768,
-32768,-32768,-32768,   158,  1288,  1293,  1316,  1321,  1319,    79,
  1330,  1334,   587,  1327,   478,  1339,  1350,   934,    -3,    39,
  1099,   185,  5312,   571,-32768,-32768,  1355,  1354,-32768,   910,
  1358,  3949,-32768,  1381,  4722,  7456,  7456,   579,   598,-32768,
  1068,  1283,-32768,-32768,-32768,  1034,  1211,   226,   239,   247,
   824,   873,  1037,   206,  1360,  1368,  4466,-32768,-32768,-32768,
-32768,  1370,  1317,-32768,  1318,  7050,  7050,-32768,  3949,  1418,
  1375,   358,    51,    21,-32768,  1379,    31,-32768,-32768,  1383,
  1395,  1397,  1399,  1386,  1401,  7252,   384,   384,   582,  1411,
   896,-32768,   956,  1337,  3656,  1294,   314,   160,  1052,   424,
  1255,   968,   333,   423,  1412,  1310,  1346,  1359,    25,  1160,
  1409,  1417,   168,-32768,  1361,  7557,    35,  7151,-32768,  1042,
  1372,  1372,-32768,   809,  1415,  1378,-32768,   122,   122,  1424,
   122,   122,   122,   122,   122,   122,   587,-32768,   238,   122,
-32768,   238,   122,-32768,   885,  1475,  7557,  1367,  9458,   267,
  9458,   274,   303,  9458,   307,   318,   324,   356,  1014,   416,
   445,  1448,  1449,   455,-32768,  1317,  1364,  1376,  1377,  1385,
  1221,   476,   974,  1456,-32768,  1461,   329,   442,   458,   639,
   647,   572,   429,   160,  1231,   424,  1255,  1234,-32768,  1068,
  1462,  1068,  1068,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1068,  1510,  1405,-32768,  1068,  1068,-32768,   664,  1474,   429,
  1391,-32768,  1392,   -17,-32768,   187,  1488,   -17,   -17,  1416,
     3,   112,   117,  1490,-32768,  1419,   -17,   590,   149,  1493,
    37,  1496,   591,  5430,   461,  6947,   320,-32768,-32768,  1410,
  1512,  4840,  1502,   846,    40,  1503,  5076,   663,    83,  1518,
   663,    83,  1518,  6844,  7151,-32768,  1513,  1017,  3101,   488,
   526,   545,   549,   568,  1448,  1449,  1318,  1517,  7557,  1511,
  4604,  1119,  7557,     5,  1514,  1460,-32768,  1109,   320,  1560,
-32768,-32768,   839,   839,   839,-32768,-32768,  1525,   -17,  1528,
  1368,-32768,-32768,-32768,-32768,  1529,  1455,  1458,  1459,   907,
-32768,-32768,     5,-32768,  1534,-32768,  1538,-32768,-32768,-32768,
-32768,-32768,  7252,  2867,-32768,-32768,  3218,  1536,   -10,   168,
-32768,-32768,  1549,-32768,   733,   959,   959,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1542,-32768,-32768,-32768,
-32768,-32768,  1541,    24,   576,-32768,  1187,  7748,  1544,-32768,
  7748,  1545,  7748,  1546,-32768,  7748,  1548,   658,   670,   671,
   549,   672,  9458,   678,  9458,   691,  9458,  9458,  7748,  1550,
  1471,-32768,-32768,-32768,  1473,  1476,-32768,-32768,-32768,-32768,
-32768,  7557,  7557,  7557,  7557,  7557,  1477,  1479,  1481,  1225,
  1384,   320,-32768,  1455,  1458,  1459,  1237,  1552,  1563,  1561,
  1562,  1565,   -17,   152,-32768,    54,   156,-32768,   379,   182,
-32768,   532,  1499,   -17,   452,   -17,   751,    75,-32768,  1071,
  3949,-32768,  1350,  1497,   530,   226,   239,   247,  1238,   544,
  1297,  1576,-32768,-32768,  1569,-32768,-32768,  1571,  5194,    40,
  2984,  1566,  1568,  1572,  1567,  1575,  1578,  5784,  1573,  1584,
-32768,  1017,-32768,  7838,  7928,  8018,   694,   696,  1580,   168,
   587,-32768,   168,   122,   122,  3949,-32768,-32768,   320,  1581,
  1585,  1586,-32768,  1517,  7557,  7557,  1587,  1588,  1589,  1506,
  1515,  1600,  1600,-32768,-32768,  1591,-32768,  1215,  1409,-32768,
   168,-32768,   154,  1549,  1592,-32768,-32768,-32768,   238,   122,
-32768,   238,   122,  1590,   522,  7557,-32768,  7748,  1594,  9458,
  1599,-32768,-32768,  7748,-32768,  7748,-32768,  7748,-32768,  7748,
  8108,  8198,  8288,   718,-32768,  7748,  1601,-32768,  7748,  1602,
-32768,-32768,-32768,  7748,-32768,-32768,-32768,   987,   990,   992,
   997,  1002,  1603,  1606,  1608,  1506,  1521,  9458,  1609,  1607,
-32768,  1515,-32768,   -17,-32768,-32768,-32768,  1611,    75,-32768,
  1011,  1011,-32768,    75,-32768,  1011,  1011,-32768,   -17,-32768,
   911,   276,  7557,-32768,  1613,  1616,  1011,-32768,  1011,  1011,
-32768,-32768,  1028,   305,  7557,-32768,  1430,-32768,  1610,   553,
   568,   309,  6947,  1212,-32768,   663,    83,  1518,-32768,-32768,
-32768,-32768,-32768,-32768,  5902,-32768,-32768,  6020,   994,  1621,
  6138,  1056,  1622,  1137,  1624,  8378,  8468,   587,  1620,  1628,
  1626,-32768,-32768,  1195,-32768,-32768,-32768,-32768,   168,  1068,
    71,    73,   -71,  1629,  1632,-32768,-32768,  1409,  7252,-32768,
-32768,-32768,-32768,    98,-32768,-32768,-32768,-32768,  3949,   752,
  1068,-32768,  7748,  1234,  7557,-32768,-32768,-32768,-32768,  8558,
-32768,  7748,-32768,  7748,-32768,-32768,-32768,-32768,-32768,-32768,
  1519,  1539,  1540,  1635,  1614,  1637,-32768,  1638,  1640,-32768,
  1011,-32768,-32768,-32768,  1011,-32768,-32768,  1011,  1011,-32768,
  7557,-32768,   515,  3949,  1648,-32768,-32768,-32768,  1011,-32768,
  7557,-32768,   636,-32768,  3949,-32768,  1649,  1140,  1650,-32768,
-32768,-32768,  6256,  1633,  1644,  6374,  1647,  1651,  1652,  1654,
  1154,  6492,  1189,  1653,  1659,  1660,-32768,-32768,-32768,  1656,
  1655,  1664,  1621,  1667,  1671,  1622,  1672,  1624,  1558,    97,
-32768,  1673,   -10,-32768,  1443,-32768,-32768,  1007,-32768,-32768,
  1582,  1675,  3949,-32768,   587,-32768,-32768,-32768,-32768,   771,
  7557,  1011,  1343,  1678,   587,-32768,  1049,  7557,  1011,  1366,
   320,-32768,  1676,   720,   722,  1300,  7557,  7557,   744,   753,
  1307,  7557,  7557,  7557,  7557,  1679,  6610,  1680,  1681,-32768,
  1683,  1660,   512,   832,  1686,  1688,  1689,  1653,  1409,   154,
  1549,-32768,-32768,  3949,  1369,  1690,  1011,  1066,-32768,-32768,
  1692,  1011,  1080,-32768,-32768,-32768,   587,   754,   765,   777,
   168,   168,   789,   814,   830,   168,   168,   168,   168,  7557,
   833,   836,  1326,  7557,  7557,   587,  1615,  1617,  1693,  1623,
  1627,  1699,   888,-32768,-32768,-32768,  1396,-32768,  1011,-32768,
  1011,  1011,-32768,  1011,  1698,  8648,  8738,   841,  1694,  1697,
  8828,  8918,   850,  1701,  1703,  1705,  1708,   168,   879,   882,
   886,   168,   168,  1715,  1719,  1720,  1643,  1722,  1724,  1657,
  1658,  1662,  1730,  1298,-32768,-32768,-32768,-32768,  1371,  1726,
  1727,  9008,-32768,-32768,  1728,  1729,  9098,-32768,-32768,-32768,
-32768,  1732,  9188,  9278,   887,  1733,  1737,  1669,  1634,  1646,
  1734,  1661,  1663,  1744,  1745,  1746,  1670,  1384,-32768,-32768,
    99,   795,-32768,  1748,  1749,  1750,  1751,  1752,  1754,  1755,
-32768,  1756,  1757,  9368,-32768,-32768,  1017,  1726,  1727,  1668,
  1728,  1729,  1674,  1685,  1691,  1764,-32768,   378,  1118,  1762,
  1766,  1767,  1768,  1769,  1778,  1780,  1785,  1786,  1283,  1751,
  1755,  1756,  1757,  1695,  7557,  7557,  1789,  7557,  7557,  1790,
  1792,  1794,  1799,  1786,   168,   168,  7557,   168,   168,  7557,
  7557,  7557,  1796,  1784,  1797,   168,  1798,  1800,   168,   168,
   168,  7557,-32768,-32768,  1801,-32768,-32768,  1802,  1803,  1804,
   168,-32768,-32768,-32768,-32768,  1806,-32768,  1821,  1854,-32768
};

static const short yypgoto[] = {-32768,
-32768,     6,  1342,   201,  1170,-32768,-32768,     0,-32768,-32768,
  -235,   -22,   -57,   196,  -674,-32768,  -200,    77,  1242,-32768,
  -177,-32768,   293,   144,  1470,   -13,  -423,-32768,  1574,  -130,
-32768,  1150,  -398,-32768,-32768,  -548,  1605,-32768,   944,-32768,
-32768,  -162,-32768,-32768,-32768,-32768,-32768,-32768,  -143,-32768,
     8,   -48,  1721,-32768,  -237,  -479,  1570,  -256,  -828,  -192,
-32768,   976,  2028,  1285,   916,-32768,  1076,  1223,  -155,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -693,-32768,-32768,-32768,
-32768,  1053,-32768,  -462,  1763,   311
};


#define	YYLAST		9610


static const short yytable[] = {   148,
   396,    76,   464,   218,   237,   237,   615,   619,   622,   328,
   329,   677,   403,   500,   107,   108,   109,   110,   866,   160,
   161,   162,   163,   164,   165,   682,   202,   707,   496,   409,
  1010,   182,   876,   565,   197,   691,   166,   792,   272,   236,
   238,   822,   354,   203,   406,   385,   407,   568,   275,   519,
     1,   213,    76,   423,   197,   428,   380,   485,   106,   545,
   445,   445,   445,   445,   445,   445,   445,   173,   269,   932,
   813,   814,   815,   816,   817,  1107,   322,   186,  1108,   187,
   450,   451,   452,   453,   454,   455,   197,   188,   197,   189,
   497,   521,   807,   174,   204,   716,   385,   720,   486,   293,
   725,   298,   299,   300,   301,   302,   303,   304,   305,   306,
   307,   308,   309,   310,   311,   312,   313,   385,   281,   316,
   317,   318,  1101,   487,  1104,   811,   197,   520,   214,   198,
   586,   273,   167,   774,   168,   169,   170,   180,   171,   696,
   487,   276,   247,   237,   139,   593,   185,   599,  1166,   198,
  1318,   241,   330,   331,   385,    65,   269,   172,   628,   385,
   218,   271,   218,   197,   358,   256,   180,   190,   197,   522,
   144,   241,   349,   350,   351,   352,   353,   272,   395,  1111,
   180,   257,   462,   198,   144,   171,   360,   293,  1012,  1013,
   270,   385,   369,   411,   385,   358,   487,   488,   385,   658,
   197,   628,    74,   197,   172,    76,   237,   197,   213,   578,
   687,   400,   432,   615,  1113,   416,   559,  1102,   810,  1105,
  1103,   198,  1106,   191,   385,   241,   463,   613,   514,   823,
   269,   757,   697,   197,   758,   472,   759,   524,   586,   462,
   411,   483,   777,  1167,    76,  1319,  1168,   780,   192,   271,
    76,    76,    76,   222,   411,   696,   411,   240,   198,    76,
    76,    76,    76,   198,   270,   431,   375,   322,   258,   593,
   273,   642,   628,   293,   508,   511,   265,   139,   519,   788,
   646,   647,   929,   543,   515,   214,   934,   193,    65,   270,
   863,   521,   760,   246,    86,   198,   330,   331,   198,   524,
   547,   548,   198,   272,   241,   549,   550,   551,   194,   895,
   693,   898,   939,   901,   902,   525,   245,   195,   385,   718,
   401,   214,   247,   271,   196,   462,   721,   462,   198,  -125,
  -125,   269,  1061,   241,   560,   139,    65,   206,   432,  1114,
  1214,   562,   563,   358,   215,    86,    65,   385,   697,   571,
   269,   990,   241,   575,   576,   723,   630,   242,   248,   726,
   374,  1071,   241,   237,   237,   270,   431,   435,   200,   631,
   519,   752,   573,   574,   402,   673,   521,   632,   218,   293,
   275,   370,   371,   372,   373,   674,   464,   218,   218,  1006,
  1007,   614,   618,   621,   937,    65,   273,   719,   236,   238,
   246,    76,  -126,  -126,   722,   291,   404,   230,   524,   552,
   810,   241,   967,   358,   803,   434,   218,  1080,  1081,  1082,
   207,   385,   757,   810,   271,   758,   856,   759,   436,  1318,
   437,   323,   265,   724,   613,   197,   237,   727,    76,    65,
   275,   275,   411,   271,   246,   466,   269,   820,   728,   462,
   579,   476,   477,   478,   729,   241,   838,   330,   331,   496,
   490,   491,   492,   493,   213,   673,   223,   947,   733,   579,
   291,   236,   690,   276,   411,   676,   434,   139,   595,  -123,
  -123,   431,   248,   760,   753,   642,   730,   381,    65,   224,
   445,   445,   445,   215,   385,  1215,  1216,   735,    86,    31,
   754,   215,   242,   714,   241,   240,   859,   739,  1095,   840,
   841,   842,   197,   739,   256,   443,   443,   443,   443,   443,
   443,   443,    47,    48,  1319,    49,    50,    51,   747,   596,
   257,     3,   291,   276,   276,   266,   267,   467,   248,   271,
   824,   214,   473,    86,    86,    86,   734,   942,     4,     5,
     6,     7,    86,    86,    86,    86,  1207,  1131,   225,  1208,
  1289,   498,     8,   501,   503,   505,   462,   509,   512,   921,
   330,   331,  1132,     9,   385,   736,    10,   530,   825,   291,
   531,   197,   878,   461,   424,   740,   330,   331,   943,   258,
   293,   800,   218,   593,  1317,   197,   904,   826,   614,   226,
   425,   733,   610,   293,   197,  1023,   748,   257,    31,   442,
   463,   411,   237,   801,   553,   714,   757,  1209,   719,   758,
   735,   759,   197,   552,   597,   830,   598,   358,   878,   833,
   624,    47,    48,   197,    49,    50,    51,   237,   590,   648,
   625,   197,   197,   330,   331,  1176,   995,   236,   532,   291,
   626,   533,   370,   372,   579,  1181,   722,    11,    12,    13,
   960,    14,    15,    16,    17,    18,   580,    19,    20,   411,
   411,   227,   587,   861,   256,   727,   257,   760,  1138,   827,
   579,   755,   692,   256,   564,   215,   355,   356,    65,   756,
   257,   139,   461,  1139,    86,   868,   871,   291,   828,   257,
   242,   605,    65,   228,   241,   811,   879,  1225,   764,    65,
   891,   765,   659,   766,  1170,   578,   242,   257,   241,   291,
   786,   795,   892,   893,   735,   241,  1244,   231,   660,   232,
   896,    86,    31,   591,   553,   592,   198,   257,   908,   909,
   910,   911,   912,   899,   229,   365,   986,   366,   987,   231,
   593,   232,  1112,   239,    31,   233,    48,   215,   234,    50,
    51,  1076,   235,   249,   330,   331,   950,   330,   331,   767,
  1030,   323,   519,   462,   521,   330,   331,    47,    48,   250,
    49,    50,    51,   139,   235,   264,   577,  1045,   719,   251,
    76,   330,   331,   385,    65,   293,   519,   966,   371,   246,
   722,   727,   894,   274,   293,   521,  1226,  1116,   897,   699,
   241,   701,   702,   703,   704,   705,   706,  1227,   252,   708,
   709,   900,   710,   711,   897,   231,   900,   232,  1177,   735,
    31,   999,  1000,   865,   170,    76,   171,   253,   494,    63,
   231,  1231,   232,   277,   553,    31,   254,   365,   900,   366,
  1188,   255,  1189,    47,    48,   172,    49,    50,    51,    73,
   235,   167,  1021,   168,   169,   170,  1232,   171,   633,    48,
   580,   634,    50,    51,  1193,   235,  1210,-32768,   587,  1211,
  1020,    73,   735,  1194,   719,   519,   172,   593,   521,   231,
   442,   232,   399,  1262,    31,   722,   215,   593,   535,   330,
   331,   457,  1267,   187,   291,   297,  1079,  1228,  1329,   291,
    54,    55,    56,    57,    58,    59,   291,   635,    48,   719,
   636,    50,    51,   231,   235,   232,  1059,   279,    31,  1063,
   462,  1273,  1251,   291,  1274,  1252,   834,  1212,   735,  1304,
   663,  1073,   278,   664,   722,   443,   443,   443,  1186,   593,
   430,   850,    48,   385,   851,    50,    51,    73,   235,   314,
  1233,   293,   608,  1239,   293,   852,  1240,   293,   593,    65,
  1078,   900,    73,   989,   330,   331,   991,    97,    29,    30,
   900,    32,    33,    34,    35,   241,   180,   438,   869,   872,
   398,   957,   315,  1253,   167,   411,   168,   169,   170,   167,
   171,   168,   169,   170,  1011,   171,   319,   364,   665,   719,
   380,  1118,   722,   199,   266,   267,  1275,   900,    76,   172,
   672,    73,   535,   365,   172,   366,   749,   219,    97,   320,
    54,    55,    56,    57,    58,    59,   994,   517,    61,  1036,
   244,    97,  1037,  1069,  1038,   254,  1084,  1130,   259,  1039,
   255,  -124,  -124,   385,  1040,    73,   259,  1137,   731,  1173,
   458,   732,   189,    76,   321,   330,   331,   462,   822,   293,
   385,   406,   293,   407,    76,   629,   383,   462,   293,   365,
   457,   366,   603,    86,   330,   331,   954,   439,   295,   637,
   361,   362,   338,   339,   340,   341,   330,   331,   330,   331,
   440,   291,   330,   331,   433,    72,  1182,   254,  1087,   365,
   291,   366,   255,   385,   326,   330,   331,  1178,   330,   331,
   330,   331,    76,  1221,  1183,   330,   331,   955,    86,   462,
   330,   331,   456,  1191,  1192,   330,   331,  1224,  1196,  1197,
  1198,  1199,  1100,   293,   992,   993,   459,   365,   462,   366,
   436,   439,   437,   295,   260,   261,   262,   263,   261,   262,
   263,   259,   259,   259,   259,    97,   376,   377,   378,   379,
   382,   832,   384,    76,   255,   387,   219,   330,   331,  1015,
  1016,    97,  1017,  1018,   219,   426,  1238,   507,   254,  1089,
  1242,  1243,  1142,   255,   330,   331,   330,   331,   447,   447,
   447,   447,   447,   447,   447,   254,  1156,   516,   330,   331,
   255,   683,   259,   518,   460,   295,   255,   429,   260,  1115,
   470,    97,   261,   262,   263,   474,    97,    97,    97,   523,
   333,   259,   436,    31,   437,    97,    97,    97,    97,   269,
   254,  1158,   367,   368,   499,   255,   502,   504,   506,   333,
   510,   513,  1099,   365,   248,   366,    47,    48,  1293,    49,
    50,    51,   295,   534,  1133,   745,  1009,   291,   746,   916,
   291,   255,   917,   291,   260,  1140,   567,   570,   261,   262,
   263,   916,   731,   536,   922,   961,   334,   335,   336,   337,
   338,   339,   340,   341,   342,   343,   333,   556,   344,   345,
   346,   918,  1288,   919,   260,   334,   335,   438,   261,   262,
   263,    86,   275,   342,   343,   330,   331,   344,   345,   346,
   172,  1345,  1346,  1175,  1348,  1349,   561,   168,   169,   170,
   581,   171,   295,  1356,  1229,  1230,  1359,  1360,  1361,  1234,
  1235,  1236,  1237,   -65,   731,   582,   671,  1190,  1371,   470,
   172,   731,   334,   335,  1195,   384,    86,   186,   583,   603,
   342,   343,   679,   584,   344,   345,   346,    86,   219,   259,
   731,   585,   588,  1241,  1217,   291,   589,    97,   291,   434,
   295,  1272,   600,   244,   291,  1276,  1277,   918,   607,   919,
    29,    30,   601,    32,    33,    34,    35,   606,   680,   638,
   -65,   628,   295,   260,   -65,   -65,   -65,   261,   262,   263,
   365,   681,   366,   609,    97,    86,   639,   556,  1185,   260,
   640,  1218,  1291,   261,   262,   263,   643,   644,   645,   649,
   650,   651,   259,   259,   661,   652,   611,   653,   656,   654,
   219,   655,    54,    55,    56,    57,    58,    59,  1254,   291,
    61,   684,   260,   657,   326,   260,   261,   262,   263,   261,
   262,   263,   259,   662,   678,   804,    86,   666,   260,   686,
   694,    87,   261,   262,   263,   260,   700,   689,   260,   261,
   262,   263,   261,   262,   263,  1074,   713,   263,  1354,  1355,
   260,  1357,  1358,   695,   261,   262,   263,   715,  1172,  1365,
   737,   738,  1368,  1369,  1370,   260,   742,   743,   750,   261,
   262,   263,   741,   751,  1376,   744,   761,  1292,   762,   260,
   366,   216,    87,   261,   262,   263,   430,   556,   361,   362,
   338,   339,   340,   341,   243,    87,   330,   331,   180,   260,
   431,   142,   783,   261,   262,   263,   773,   791,   794,   784,
   805,  1294,   260,   470,   806,   808,   261,   262,   263,   770,
   811,   384,   831,   771,   772,   821,   776,   779,   782,   829,
   836,   839,   785,   787,   790,   437,   793,   843,   259,   219,
   259,   846,   292,   587,   845,   847,   854,   295,   848,   849,
   855,   487,   295,   862,   874,   875,   884,   886,   888,   295,
   890,   905,   904,   906,   923,   924,   907,   913,   324,   914,
   587,   915,   959,   925,   926,   945,   295,   927,   962,   835,
   963,   969,   964,   970,   972,   976,   625,   971,   447,   447,
   447,   988,   973,   996,   844,   974,  1004,   997,   998,  1001,
  1002,  1003,   673,  1008,  1019,  1005,  1023,   292,   853,  1014,
  1025,  1044,  1046,  1032,  1034,  1041,   217,  1122,  1042,    87,
  1043,  1075,  1047,  1049,   885,  1102,   887,  1064,  1065,   889,
   216,   870,   873,  1085,  1088,    87,  1090,  1096,   216,   243,
  1097,  1109,   903,  1098,  1110,  1105,  1107,  1121,  1123,  1147,
  1124,  1125,   444,   444,   444,   444,   444,   444,   444,  1135,
  1148,  1141,  1143,  1152,  1165,  1159,  1163,  1153,  1154,   292,
  1155,  1160,  1161,  1162,   468,    87,  1084,   294,  1164,   324,
    87,    87,    87,  1087,  1089,  1169,  1174,  1187,  1167,    87,
    87,    87,    87,  1180,  1206,  1200,  1204,  1205,  1156,  1213,
  1247,  1158,  1219,   325,  1222,  1245,  1250,  1246,   928,   931,
  1259,  1263,   936,  1248,  1264,   941,   292,  1249,  1268,   946,
  1269,   949,  1270,   953,   105,  1271,    97,  1278,   885,   889,
   259,  1279,  1280,  1281,  1282,   259,  1283,  1287,  1295,  1296,
  1298,  1299,   294,  1308,   295,  1307,  1310,  1284,  1285,  1301,
  1305,   554,  1286,   295,  1306,  1309,  1313,  1314,  1315,   270,
  1316,  1320,  1321,  1322,  1323,   294,  1324,  1325,  1326,  1327,
  1311,    97,  1312,   294,   221,   105,  1334,  1330,  1335,  1337,
  1379,  1022,  1336,  1331,  1338,  1339,   292,  1026,   105,  1027,
  1340,  1028,  1341,  1029,  1332,   885,   889,  1342,  1343,  1031,
  1333,  1363,  1033,   468,  1344,  1347,  1350,  1035,  1351,   469,
  1352,  1353,  1362,  1380,  1364,  1366,   712,  1367,  1372,  1373,
  1374,  1375,   216,  1377,   867,   819,   880,   769,   958,   348,
   837,    87,   977,     0,   292,   296,     0,   243,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   294,     0,   243,     0,     0,   292,     0,     0,  1048,
     0,   327,     0,     0,  1051,   558,     0,     0,    87,  1055,
     0,   554,     0,     0,  1058,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   555,     0,     0,  1031,
  1033,     0,     0,     0,   216,   259,     0,    97,     0,     0,
   296,     0,     0,     0,     0,     0,     0,     0,   324,     0,
   295,     0,   105,   295,     0,     0,   295,     0,     0,     0,
     0,   294,     0,   221,     0,     0,  1117,     0,   105,     0,
     0,   221,     0,  1033,     0,  1119,     0,  1120,   469,     0,
     0,     0,     0,     0,     0,   449,   449,   449,   449,   449,
   449,   449,     0,     0,    97,     0,     0,   294,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   471,   105,   294,
     0,     0,   475,   105,   105,   105,     0,     0,     0,     0,
     0,   554,   105,   105,   105,   105,     0,     0,     0,     0,
     0,   294,     0,     0,     0,     0,     0,     0,     0,    97,
     0,     0,     0,     0,     0,     0,   469,   468,     0,   296,
    97,     0,     0,     0,     0,     0,     0,     0,   295,     0,
     0,   295,     0,     0,     0,     0,     0,   295,     0,   294,
     0,     0,     0,   216,     0,     0,     0,     0,     0,     0,
     0,   292,     0,   325,   557,     0,   292,     0,     0,     0,
     0,     0,   717,   292,   717,     0,     0,   717,    97,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   292,     0,     0,     0,     0,     0,     0,     0,     0,   296,
     0,     0,   444,   444,   444,     0,     0,     0,     0,     0,
     0,     0,   295,     0,     0,     0,   471,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    97,
     0,     0,     0,     0,     0,   221,   555,     0,     0,     0,
   775,   778,   781,     0,   105,     0,     0,   296,   789,     0,
   885,     0,     0,     0,     0,   885,     0,     0,     0,     0,
     0,     0,   555,     0,     0,     0,     0,     0,     0,   296,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   105,     0,     0,   557,  1033,     0,     0,   294,     0,
  1033,     0,     0,     0,     0,     0,   294,   885,     0,     0,
     0,   294,     0,     0,     0,     0,     0,   221,     0,     0,
     0,     0,     0,     0,   415,     0,     0,     0,     0,     0,
     0,   327,     0,     0,     0,   294,     0,  1033,     0,     0,
   448,   448,   448,   448,   448,   448,   448,     0,     0,     0,
    87,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   292,     0,
     0,   415,     0,     0,     0,     0,     0,   292,     0,     0,
     0,   717,     0,     0,   717,   415,   717,   415,     0,   717,
     0,     0,     0,     0,     0,    87,   717,     0,   717,     0,
   717,   717,   717,     0,   557,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   546,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   471,     0,     0,   930,     0,   933,   935,     0,   938,   940,
     0,   944,     0,     0,   948,     0,   951,   952,     0,   956,
     0,     0,     0,     0,     0,     0,   221,     0,     0,     0,
     0,     0,     0,     0,   296,     0,     0,     0,     0,   296,
     0,     0,     0,     0,     0,     0,     0,     0,   566,   569,
     0,     0,     0,     0,     0,     0,     0,   717,   717,   717,
     0,     0,     0,   296,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   294,     0,   449,   449,   449,     0,     0,
     0,     0,   294,     0,     0,     0,     0,     0,     0,     0,
     0,    87,   616,   620,   623,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   292,     0,     0,   292,     0,     0,
   292,   717,     0,  1024,     0,     0,     0,   717,     0,   717,
     0,   717,     0,   717,   717,   717,   717,     0,     0,   717,
     0,     0,   717,     0,     0,     0,     0,   717,     0,     0,
     0,     0,     0,   415,     0,     0,     0,     0,    87,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1050,     0,
  1052,  1053,     0,  1054,     0,  1056,  1057,     0,     0,     0,
  1060,  1062,     0,     0,     0,   415,  1066,     0,  1067,  1068,
     0,     0,  1070,  1072,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    87,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    87,     0,     0,     0,     0,     0,
     0,     0,   292,   105,     0,   292,     0,     0,     0,   717,
   717,   292,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   296,     0,     0,     0,     0,     0,     0,     0,   294,
   296,     0,   294,     0,     0,   294,     0,     0,     0,     0,
     0,     0,    87,     0,     0,     0,   717,     0,   105,     0,
     0,     0,     0,   717,     0,   717,     0,   717,   768,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1126,     0,     0,     0,  1127,     0,   292,  1128,  1129,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1136,   616,
     0,     0,     0,    87,     0,     0,     0,     0,     0,     0,
     0,     0,   415,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   448,   448,   448,     0,     0,     0,     0,   294,     0,     0,
   294,     0,     0,     0,     0,     0,   294,     0,     0,     0,
     0,  1179,     0,     0,     0,     0,     0,     0,  1184,     0,
   415,   415,     0,     0,     0,     0,   864,     0,     0,     0,
     0,     0,     0,     0,   105,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   296,     0,     0,
   296,     0,     0,   296,     0,     0,  1220,     0,     0,     0,
     0,  1223,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   294,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   105,     0,     0,     0,     0,     0,     0,  1255,     0,
  1256,  1257,     0,  1258,     0,     0,     0,     0,     0,   717,
   717,     0,     0,     0,   717,   717,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   105,     0,     0,     0,
     0,     0,     0,     0,     0,   717,     0,   105,   968,     0,
   717,     0,     0,     0,     0,   296,   717,   717,   296,     0,
     0,     0,     0,     0,   296,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   857,     0,     0,
     0,     0,     0,     0,   111,     0,     0,   717,     0,     0,
     0,   112,     0,     0,     0,   105,    29,    30,     0,    32,
    33,    34,    35,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   405,   296,
     0,   406,     0,   407,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   105,     0,    54,    55,
    56,    57,    58,    59,   114,     0,    61,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   965,     0,   139,     0,     0,     0,
     0,   111,     0,     0,     0,     0,   140,   408,   112,     0,
   141,     0,     0,    29,    30,     0,    32,    33,    34,    35,
     0,     0,     0,   858,   180,     0,   142,   143,   144,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   617,   415,     0,   406,     0,
   407,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    54,    55,    56,    57,    58,
    59,   114,     0,    61,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   401,     0,   139,     0,     0,     0,     0,   111,     0,
     0,     0,     0,   140,    65,   112,     0,   141,     0,     0,
    29,    30,     0,    32,    33,    34,    35,     0,     0,     0,
    72,   180,     0,   142,   143,   144,     0,     0,     0,     0,
  1171,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   113,     0,     0,   402,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    54,    55,    56,    57,    58,    59,   114,     0,
    61,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   860,     0,
   139,     0,     0,     0,     0,   111,     0,     0,     0,     0,
   140,    65,   112,     0,   141,     0,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,    72,     0,     0,
   142,   143,   144,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,    22,     0,
     0,     0,    23,   208,    72,    25,    26,   142,   143,   144,
   175,     0,    27,     0,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,   176,   177,    38,    39,    40,    41,
     0,    42,    43,    44,     0,    45,    46,     0,     0,     0,
    47,    48,     0,    49,    50,    51,     0,   209,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    54,    55,    56,
    57,    58,    59,   114,    60,    61,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     0,    62,    63,     0,    64,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   140,   210,     0,     0,   141,
     0,    66,   211,    67,    68,    69,    70,    71,     0,     0,
     0,     0,    72,   180,    73,   142,   143,   144,    22,     0,
     0,     0,    23,   208,     0,    25,    26,     0,     0,     0,
   175,     0,   417,     0,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,   176,   177,    38,    39,    40,    41,
     0,    42,    43,    44,     0,    45,    46,     0,     0,     0,
   418,    48,     0,   419,   391,   420,     0,   209,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    54,    55,    56,
    57,    58,    59,   114,    60,    61,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     0,   421,   422,     0,    64,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   140,   210,     0,     0,   141,
     0,    66,   211,    67,    68,    69,    70,    71,     0,     0,
     0,     0,    72,   180,   394,   142,   143,   144,    22,     0,
     0,     0,    23,   208,     0,    25,    26,     0,     0,     0,
   175,     0,    27,     0,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,   176,   177,    38,    39,    40,    41,
     0,    42,    43,    44,     0,    45,    46,     0,     0,     0,
   667,    48,     0,   668,    50,   669,     0,   209,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    54,    55,    56,
    57,    58,    59,   114,    60,    61,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     0,   670,    63,     0,    64,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   140,   210,     0,     0,   141,
     0,    66,   211,    67,    68,    69,    70,    71,     0,     0,
     0,     0,    72,   180,    73,   142,   143,   144,    22,     0,
     0,     0,    23,    24,     0,    25,    26,     0,     0,     0,
     0,     0,    27,     0,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,     0,     0,    38,    39,    40,    41,
     0,    42,    43,    44,     0,    45,    46,     0,     0,     0,
    47,    48,     0,    49,    50,    51,     0,   465,     0,     0,
    53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    54,    55,    56,
    57,    58,    59,     0,    60,    61,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    62,    63,     0,    64,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    65,     0,     0,     0,
     0,    66,     0,    67,    68,    69,    70,    71,     0,     0,
     0,    22,    72,     0,    73,    23,    24,     0,    25,    26,
     0,     0,     0,     0,     0,    27,     0,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,     0,     0,    38,
    39,    40,    41,     0,    42,    43,    44,     0,    45,    46,
     0,     0,     0,    47,    48,     0,    49,    50,    51,     0,
    52,     0,     0,    53,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    54,    55,    56,    57,    58,    59,     0,    60,    61,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    62,    63,     0,    64,     0,   111,
     0,     0,     0,     0,     0,     0,   175,     0,   282,     0,
     0,    29,    30,     0,    32,    33,    34,    35,     0,    65,
   176,   177,     0,     0,    66,     0,    67,    68,    69,    70,
    71,     0,     0,     0,     0,    72,   283,    73,     0,   284,
   285,   286,     0,   357,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    54,    55,    56,    57,    58,    59,   114,
     0,    61,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,     0,   288,   289,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   139,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   140,    65,     0,     0,   141,     0,     0,   179,     0,
     0,     0,     0,     0,     0,     0,     0,   111,    72,   180,
   290,   142,   143,   144,   112,     0,   388,     0,   232,    29,
    30,    31,    32,    33,    34,    35,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   389,    48,     0,   390,   391,   392,
     0,   393,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    54,    55,    56,    57,    58,    59,   114,     0,    61,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,     0,   288,   289,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   140,
    65,     0,     0,   141,     0,   246,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   111,    72,     0,   394,   142,
   143,   144,   175,     0,   282,     0,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,   176,   177,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   526,     0,     0,   527,   285,   528,     0,   357,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,     0,   529,   289,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,   179,     0,     0,     0,     0,     0,
     0,     0,     0,   111,    72,   180,   290,   142,   143,   144,
   175,     0,   282,     0,     0,    29,    30,     0,    32,    33,
    34,    35,     0,     0,   176,   177,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   283,     0,     0,   284,   285,   286,     0,   641,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    54,    55,    56,
    57,    58,    59,   114,     0,    61,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   140,    65,     0,     0,   141,
     0,     0,   211,     0,     0,     0,     0,     0,     0,     0,
     0,   111,    72,   180,   290,   142,   143,   144,   175,     0,
   282,     0,     0,    29,    30,     0,    32,    33,    34,    35,
     0,     0,   176,   177,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   526,     0,
     0,   527,   285,   528,     0,   641,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    54,    55,    56,    57,    58,
    59,   114,     0,    61,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,     0,   529,
   289,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   139,     0,     0,     0,     0,     0,   111,
     0,     0,     0,   140,    65,     0,   112,   141,   282,     0,
   211,    29,    30,     0,    32,    33,    34,    35,     0,     0,
    72,   180,   290,   142,   143,   144,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   283,     0,     0,   284,
   285,   286,     0,   612,     0,     0,   406,     0,   407,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    54,    55,    56,    57,    58,    59,   114,
     0,    61,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,     0,   288,   289,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   139,     0,     0,     0,     0,     0,   111,     0,     0,
     0,   140,   408,     0,   112,   141,   282,     0,     0,    29,
    30,     0,    32,    33,    34,    35,     0,     0,    72,   180,
   290,   142,   143,   144,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   526,     0,     0,   527,   285,   528,
     0,   612,     0,     0,   406,     0,   407,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    54,    55,    56,    57,    58,    59,   114,     0,    61,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,     0,   529,   289,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
     0,     0,     0,     0,     0,   111,     0,     0,     0,   140,
   408,     0,   112,   141,   537,     0,     0,    29,    30,    31,
    32,    33,    34,    35,     0,     0,    72,   180,   290,   142,
   143,   144,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   538,    48,     0,   539,    50,   540,     0,   113,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,     0,   541,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   139,     0,     0,
     0,     0,     0,   111,     0,     0,     0,   140,    65,     0,
   112,   141,   282,     0,     0,    29,    30,     0,    32,    33,
    34,    35,     0,     0,    72,   180,   542,   142,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   283,     0,     0,   284,   285,   286,     0,   809,     0,     0,
   406,     0,   407,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    54,    55,    56,
    57,    58,    59,   114,     0,    61,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,     0,     0,     0,     0,
     0,   111,     0,     0,     0,   140,    65,     0,   112,   141,
   282,     0,     0,    29,    30,     0,    32,    33,    34,    35,
     0,     0,    72,     0,   290,   142,   143,   144,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   526,     0,
     0,   527,   285,   528,     0,   809,     0,     0,   406,     0,
   407,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    54,    55,    56,    57,    58,
    59,   114,     0,    61,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,     0,   529,
   289,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   139,     0,     0,     0,     0,     0,   111,
     0,     0,     0,   140,    65,     0,   112,   141,   282,     0,
     0,    29,    30,     0,    32,    33,    34,    35,     0,     0,
    72,     0,   290,   142,   143,   144,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   526,     0,     0,   527,
   285,   528,     0,   604,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    54,    55,    56,    57,    58,    59,   114,
     0,    61,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,     0,   529,   289,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   139,     0,     0,     0,     0,     0,   111,     0,     0,
     0,   140,   210,     0,   112,   141,   282,   246,     0,    29,
    30,     0,    32,    33,    34,    35,     0,     0,    72,     0,
   290,   142,   143,   144,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   796,     0,     0,   797,   285,   798,
     0,   604,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    54,    55,    56,    57,    58,    59,   114,     0,    61,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,     0,   799,   289,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
     0,     0,     0,     0,     0,   111,     0,     0,     0,   140,
    65,     0,   112,   141,   282,   246,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,    72,     0,   290,   142,
   143,   144,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   283,     0,     0,   284,   285,   286,     0,   287,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,     0,   288,   289,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   139,     0,     0,
     0,     0,     0,   111,     0,     0,     0,   140,    65,     0,
   112,   141,   282,     0,     0,    29,    30,     0,    32,    33,
    34,    35,     0,     0,    72,     0,   290,   142,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   526,     0,     0,   527,   285,   528,     0,   287,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    54,    55,    56,
    57,    58,    59,   114,     0,    61,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     0,   529,   289,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,     0,     0,     0,     0,
     0,   111,     0,     0,     0,   140,    65,     0,   112,   141,
   282,     0,     0,    29,    30,     0,    32,    33,    34,    35,
     0,     0,    72,     0,   290,   142,   143,   144,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   526,     0,
     0,   527,   285,   528,     0,   975,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    54,    55,    56,    57,    58,
    59,   114,     0,    61,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,     0,   529,
   289,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   139,     0,     0,     0,     0,     0,   111,
     0,     0,     0,   140,    65,     0,   112,   141,   282,     0,
     0,    29,    30,     0,    32,    33,    34,    35,     0,     0,
    72,     0,   290,   142,   143,   144,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   796,     0,     0,   797,
   285,   798,     0,   287,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    54,    55,    56,    57,    58,    59,   114,
     0,    61,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,     0,   799,   289,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   139,     0,     0,     0,     0,     0,   111,     0,     0,
     0,   140,    65,     0,   112,   141,   282,     0,     0,    29,
    30,     0,    32,    33,    34,    35,     0,     0,    72,     0,
   290,   142,   143,   144,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   283,     0,     0,   284,   285,   286,
     0,  1083,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    54,    55,    56,    57,    58,    59,   114,     0,    61,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,     0,   288,   289,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
     0,     0,     0,     0,     0,   111,     0,     0,     0,   140,
    65,     0,   112,   141,   282,     0,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,    72,     0,   290,   142,
   143,   144,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   283,     0,     0,   284,   285,   286,     0,  1086,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,     0,   288,   289,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   139,     0,     0,
     0,     0,     0,   111,     0,     0,     0,   140,    65,     0,
   112,   141,   282,     0,     0,    29,    30,     0,    32,    33,
    34,    35,     0,     0,    72,     0,   290,   142,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  1144,     0,     0,  1145,   285,   528,     0,   287,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    54,    55,    56,
    57,    58,    59,   114,     0,    61,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     0,  1146,   289,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,     0,     0,     0,     0,
     0,   111,     0,     0,     0,   140,    65,     0,   112,   141,
   282,     0,     0,    29,    30,     0,    32,    33,    34,    35,
     0,     0,    72,     0,   290,   142,   143,   144,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1149,     0,
     0,  1150,   285,   528,     0,   287,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    54,    55,    56,    57,    58,
    59,   114,     0,    61,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,     0,  1151,
   289,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   139,     0,     0,     0,     0,     0,   111,
     0,     0,     0,   140,    65,     0,   112,   141,   282,     0,
     0,    29,    30,     0,    32,    33,    34,    35,     0,     0,
    72,     0,   290,   142,   143,   144,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   283,     0,     0,   284,
   285,   286,     0,  1157,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    54,    55,    56,    57,    58,    59,   114,
     0,    61,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,     0,   288,   289,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   139,     0,     0,     0,     0,     0,   111,     0,     0,
     0,   140,    65,     0,   112,   141,   282,     0,     0,    29,
    30,     0,    32,    33,    34,    35,     0,     0,    72,     0,
   290,   142,   143,   144,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,  1201,     0,     0,  1202,   285,   528,
     0,   287,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    54,    55,    56,    57,    58,    59,   114,     0,    61,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,     0,  1203,   289,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   139,
     0,     0,     0,     0,   111,     0,     0,     0,     0,   140,
    65,   112,     0,   141,     0,     0,    29,    30,    31,    32,
    33,    34,    35,     0,     0,     0,    72,     0,   290,   142,
   143,   144,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    47,    48,     0,    49,    50,    51,     0,   287,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    54,    55,
    56,    57,    58,    59,   114,     0,    61,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,     0,   461,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   139,     0,     0,     0,
     0,   111,     0,     0,     0,     0,   140,    65,   112,     0,
   141,     0,     0,    29,    30,    31,    32,    33,    34,    35,
     0,     0,     0,    72,     0,     0,   142,   143,   144,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    47,    48,
     0,    49,    50,    51,     0,   818,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    54,    55,    56,    57,    58,
    59,   114,     0,    61,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,     0,   461,
     0,     0,     0,     0,   111,     0,     0,     0,     0,     0,
     0,   175,     0,   139,     0,     0,    29,    30,     0,    32,
    33,    34,    35,   140,    65,   176,   177,   141,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    72,     0,     0,   142,   143,   144,     0,     0,   178,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    54,    55,
    56,    57,    58,    59,   114,     0,    61,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,     0,     0,     0,     0,     0,     0,   111,     0,     0,
     0,     0,     0,     0,   175,     0,   139,     0,     0,    29,
    30,     0,    32,    33,    34,    35,   140,    65,   176,   177,
   141,     0,     0,   179,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    72,   180,     0,   142,   143,   144,     0,
     0,   427,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    54,    55,    56,    57,    58,    59,   114,     0,    61,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,   137,   138,     0,     0,     0,     0,   111,     0,
     0,     0,     0,     0,     0,   112,     0,     0,     0,   139,
    29,    30,     0,    32,    33,    34,    35,     0,     0,   140,
    65,     0,     0,   141,     0,     0,   211,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    72,   180,     0,   142,
   143,   144,   405,     0,     0,   406,     0,   407,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    54,    55,    56,    57,    58,    59,   114,     0,
    61,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,     0,     0,     0,     0,   111,
     0,     0,     0,     0,     0,     0,   112,     0,     0,     0,
   139,    29,    30,     0,    32,    33,    34,    35,     0,     0,
   140,   408,     0,     0,   141,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    72,   180,     0,
   142,   143,   144,   405,     0,     0,   406,     0,   407,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    54,    55,    56,    57,    58,    59,   114,
     0,    61,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,     0,     0,     0,     0,
     0,     0,   111,     0,     0,     0,     0,     0,     0,   175,
     0,   479,     0,     0,    29,    30,     0,    32,    33,    34,
    35,   140,   408,   176,   177,   141,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   480,   180,
     0,   142,   143,   144,     0,     0,   113,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    54,    55,    56,    57,
    58,    59,   114,     0,    61,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,     0,
     0,     0,     0,   111,     0,     0,     0,     0,     0,     0,
   112,     0,     0,     0,   139,    29,    30,     0,    32,    33,
    34,    35,     0,     0,   140,    65,     0,     0,   141,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    72,   180,     0,   142,   143,   144,   617,     0,     0,
   406,     0,   407,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    54,    55,    56,
    57,    58,    59,   114,     0,    61,   115,   116,   117,   118,
   119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     0,     0,     0,     0,   111,     0,     0,     0,     0,     0,
     0,   112,     0,     0,     0,   139,    29,    30,     0,    32,
    33,    34,    35,     0,     0,   140,    65,     0,     0,   141,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,   180,     0,   142,   143,   144,   113,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    54,    55,
    56,    57,    58,    59,   114,     0,    61,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,     0,     0,     0,     0,   111,     0,     0,     0,     0,
     0,     0,   112,     0,     0,     0,   139,    29,    30,     0,
    32,    33,    34,    35,     0,     0,   140,    65,     0,     0,
   141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    72,     0,     0,   142,   143,   144,   201,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,     0,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,    72,     0,     0,   142,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   978,
     0,     0,     0,     0,    72,     0,     0,   142,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   981,
     0,     0,     0,     0,   979,     0,     0,   980,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,   982,     0,     0,   983,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,   984,     0,     0,   985,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,   979,     0,     0,   142,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,   982,     0,     0,   142,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,   984,     0,     0,   142,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,  1092,
     0,     0,     0,     0,  1091,     0,     0,   142,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,  1093,     0,     0,  1094,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,  1093,     0,     0,   142,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,   979,     0,     0,  1260,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,   982,     0,     0,  1261,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,   979,     0,     0,  1265,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,   982,     0,     0,  1266,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,  1093,     0,     0,  1297,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,  1093,     0,     0,  1300,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,   979,     0,     0,  1302,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,   982,     0,     0,  1303,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   112,     0,     0,   881,     0,    29,    30,     0,
    32,    33,    34,    35,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,   113,
     0,     0,     0,     0,  1093,     0,     0,  1328,   143,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
    55,    56,    57,    58,    59,   114,     0,    61,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   139,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   140,    65,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    72,     0,     0,   142,   143,   144
};

static const short yycheck[] = {    13,
   201,     2,   240,    52,    62,    63,   405,   406,   407,   140,
   141,   474,   205,   270,     9,    10,    11,    12,   693,    14,
    15,    16,    17,    18,    19,     1,    40,   507,   264,   207,
   859,    24,     9,    15,    52,     1,    14,     1,    18,    62,
    63,    52,   173,     1,    55,    43,    57,    15,    18,    53,
    13,    52,    53,   209,    52,   211,    52,    16,   147,   297,
   223,   224,   225,   226,   227,   228,   229,    52,    18,    16,
   619,   620,   621,   622,   623,   147,    52,   147,   150,   149,
   224,   225,   226,   227,   228,   229,    52,   147,    52,   149,
   268,    53,    53,   147,    52,   519,    43,   521,    57,   113,
   524,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,    43,   111,   133,
   134,   135,    52,    43,    52,    43,    52,   131,    52,   147,
    52,   111,   110,   131,   112,   113,   114,   148,   116,    18,
    43,   111,    66,   201,   120,   383,    52,   385,    52,   147,
    52,   147,   129,   130,    43,   131,    18,   135,   119,    43,
   209,   111,   211,    52,   178,   131,   148,    52,    52,   131,
   152,   147,   167,   168,   169,   170,   171,    18,   201,  1008,
   148,   147,   240,   147,   152,   116,   179,   201,   863,   864,
    52,    43,   185,   207,    43,   209,    43,   117,    43,   456,
    52,   119,     2,    52,   135,   206,   264,    52,   209,    52,
    43,   204,    53,   612,   117,   208,   347,   147,   617,   147,
   150,   147,   150,    52,    43,   147,   240,   405,   277,   628,
    18,    45,   111,    52,    48,   249,    50,    53,    52,   297,
   254,   255,   131,   147,   245,   147,   150,   131,    52,   111,
   251,   252,   253,    53,   268,    18,   270,    52,   147,   260,
   261,   262,   263,   147,    52,    53,   190,    52,    73,   507,
   111,   427,   119,   287,   275,   276,    81,   120,    53,   131,
   436,   437,   131,   297,   279,   209,   131,    52,   131,    52,
   689,    53,   106,   136,     2,   147,   129,   130,   147,    53,
   314,   315,   147,    18,   147,   319,   320,   321,    52,   733,
   488,   735,   131,   737,   738,   131,    52,    52,    43,    53,
     1,   245,   246,   111,   147,   383,    53,   385,   147,   117,
   118,    18,    57,   147,   348,   120,   131,    55,    53,  1014,
  1169,   355,   356,   357,    52,    53,   131,    43,   111,   363,
    18,   831,   147,   367,   368,    53,   131,    65,    66,    53,
    52,    57,   147,   421,   422,    52,    53,    53,    52,   131,
    53,    43,   365,   366,    55,    43,    53,   131,   427,   393,
    18,   186,   187,   188,   189,    53,   624,   436,   437,   852,
   853,   405,   406,   407,    16,   131,   111,   131,   421,   422,
   136,   402,   117,   118,   131,   113,   206,   147,    53,    52,
   809,   147,   811,   427,   607,    53,   465,   966,   967,   968,
    52,    43,    45,   822,   111,    48,   683,    50,   114,    52,
   116,   139,   237,   131,   612,    52,   494,   131,   439,   131,
    18,    18,   456,   111,   136,   245,    18,   625,   131,   507,
   374,   251,   252,   253,   131,   147,   649,   129,   130,   695,
   260,   261,   262,   263,   465,    43,    52,    16,    53,   393,
   178,   494,   486,   111,   488,    53,    53,   120,     1,   117,
   118,    53,   190,   106,    43,   641,   131,   195,   131,    52,
   653,   654,   655,   201,    43,  1170,  1171,    53,   206,    22,
    43,   209,   210,   517,   147,    52,   684,    53,   988,   653,
   654,   655,    52,    53,   131,   223,   224,   225,   226,   227,
   228,   229,    45,    46,   147,    48,    49,    50,    53,    52,
   147,    10,   240,   111,   111,   117,   118,   245,   246,   111,
    53,   465,   250,   251,   252,   253,   131,    16,    27,    28,
    29,    30,   260,   261,   262,   263,    45,    43,    52,    48,
  1254,   269,    41,   271,   272,   273,   624,   275,   276,   762,
   129,   130,    58,    52,    43,   131,    55,    45,    53,   287,
    48,    52,    53,   106,   131,   131,   129,   130,    57,   394,
   604,   131,   641,   831,  1288,    52,    53,    53,   612,    52,
   147,    53,   402,   617,    52,    53,   131,   147,    22,    52,
   624,   625,   670,   606,   322,   629,    45,   106,   131,    48,
    53,    50,    52,    52,   147,   639,   149,   641,    53,   643,
    52,    45,    46,    52,    48,    49,    50,   695,    52,   439,
    43,    52,    52,   129,   130,  1125,   839,   670,    45,   357,
    53,    48,   457,   458,   578,  1135,   131,   136,   137,   138,
   131,   140,   141,   142,   143,   144,   374,   146,   147,   683,
   684,    52,   380,   687,   131,   131,   147,   106,    43,   131,
   604,    43,   487,   131,    53,   393,   121,   122,   131,    43,
   147,   120,   106,    58,   402,   696,   697,   405,   131,   147,
   408,   131,   131,    52,   147,    43,   131,  1187,    45,   131,
    53,    48,   131,    50,  1113,    52,   424,   147,   147,   427,
   131,   131,    53,    53,    53,   147,  1206,    17,   147,    19,
    53,   439,    22,   147,   442,   149,   147,   147,   752,   753,
   754,   755,   756,    53,    52,   114,    53,   116,    53,    17,
   988,    19,  1009,    52,    22,    45,    46,   465,    48,    49,
    50,   962,    52,    52,   129,   130,    16,   129,   130,   106,
    53,   479,    53,   831,    53,   129,   130,    45,    46,    52,
    48,    49,    50,   120,    52,    55,    53,   918,   131,    52,
   791,   129,   130,    43,   131,   809,    53,   811,   603,   136,
   131,   131,   131,   147,   818,    53,    53,    56,   131,   499,
   147,   501,   502,   503,   504,   505,   506,    53,    52,   509,
   510,   131,   512,   513,   131,    17,   131,    19,    58,    53,
    22,   845,   846,   690,   114,   836,   116,    52,   106,   107,
    17,    53,    19,    44,   552,    22,    52,   114,   131,   116,
   131,    57,   131,    45,    46,   135,    48,    49,    50,   149,
    52,   110,   876,   112,   113,   114,    53,   116,    45,    46,
   578,    48,    49,    50,   131,    52,    45,   135,   586,    48,
   875,   149,    53,   131,   131,    53,   135,  1125,    53,    17,
    52,    19,    53,    53,    22,   131,   604,  1135,    53,   129,
   130,   147,    53,   149,   612,    52,   964,   131,  1307,   617,
    72,    73,    74,    75,    76,    77,   624,    45,    46,   131,
    48,    49,    50,    17,    52,    19,    16,    43,    22,   943,
   988,    53,    45,   641,    53,    48,   644,   106,    53,    53,
    45,   955,    53,    48,   131,   653,   654,   655,  1141,  1187,
    53,    45,    46,    43,    48,    49,    50,   149,    52,    52,
   131,   975,    53,   131,   978,   673,   131,   981,  1206,   131,
   963,   131,   149,   830,   129,   130,   833,     2,    20,    21,
   131,    23,    24,    25,    26,   147,   148,    53,   696,   697,
    54,   791,    52,   106,   110,  1009,   112,   113,   114,   110,
   116,   112,   113,   114,   861,   116,    52,    42,    53,   131,
    52,  1025,   131,    38,   117,   118,   131,   131,  1019,   135,
    53,   149,    53,   114,   135,   116,    53,    52,    53,    52,
    72,    73,    74,    75,    76,    77,   836,    42,    80,    53,
    65,    66,    53,    16,    53,    52,    53,  1061,    73,    53,
    57,   117,   118,    43,    53,   149,    81,  1071,    45,    53,
   147,    48,   149,  1064,    52,   129,   130,  1125,    52,  1083,
    43,    55,  1086,    57,  1075,    42,    52,  1135,  1092,   114,
   147,   116,   149,   791,   129,   130,    16,    43,   113,    53,
   121,   122,   123,   124,   125,   126,   129,   130,   129,   130,
    56,   809,   129,   130,    53,   147,    58,    52,    53,   114,
   818,   116,    57,    43,   139,   129,   130,  1131,   129,   130,
   129,   130,  1123,    58,  1138,   129,   130,    57,   836,  1187,
   129,   130,    52,  1147,  1148,   129,   130,    58,  1152,  1153,
  1154,  1155,   999,  1157,   834,   835,   131,   114,  1206,   116,
   114,    43,   116,   178,   110,   114,   115,   116,   114,   115,
   116,   186,   187,   188,   189,   190,   191,   192,   193,   194,
   195,    53,   197,  1174,    57,   200,   201,   129,   130,   869,
   870,   206,   872,   873,   209,   210,  1200,    52,    52,    53,
  1204,  1205,    53,    57,   129,   130,   129,   130,   223,   224,
   225,   226,   227,   228,   229,    52,    53,    56,   129,   130,
    57,    52,   237,   149,   239,   240,    57,    53,   110,  1019,
   245,   246,   114,   115,   116,   250,   251,   252,   253,   131,
    63,   256,   114,    22,   116,   260,   261,   262,   263,    18,
    52,    53,   121,   122,   269,    57,   271,   272,   273,    63,
   275,   276,    58,   114,   962,   116,    45,    46,  1259,    48,
    49,    50,   287,   131,  1064,    45,    52,   975,    48,    45,
   978,    57,    48,   981,   110,  1075,   361,   362,   114,   115,
   116,    45,    45,    53,    48,    48,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,    63,   322,   131,   132,
   133,     4,     5,     6,   110,   119,   120,    53,   114,   115,
   116,  1019,    18,   127,   128,   129,   130,   131,   132,   133,
   135,  1335,  1336,  1123,  1338,  1339,    53,   112,   113,   114,
    43,   116,   357,  1347,  1191,  1192,  1350,  1351,  1352,  1196,
  1197,  1198,  1199,    53,    45,    53,    53,    48,  1362,   374,
   135,    45,   119,   120,    48,   380,  1064,   147,    43,   149,
   127,   128,    53,    43,   131,   132,   133,  1075,   393,   394,
    45,    53,    43,    48,  1174,  1083,    43,   402,  1086,    53,
   405,  1238,    44,   408,  1092,  1242,  1243,     4,    35,     6,
    20,    21,    43,    23,    24,    25,    26,    43,    53,   424,
   110,   119,   427,   110,   114,   115,   116,   114,   115,   116,
   114,    53,   116,    56,   439,  1123,    57,   442,    53,   110,
    53,    53,    52,   114,   115,   116,    57,   111,   111,    12,
    56,    53,   457,   458,   459,    53,    56,    43,    53,    43,
   465,    43,    72,    73,    74,    75,    76,    77,    53,  1157,
    80,    43,   110,    53,   479,   110,   114,   115,   116,   114,
   115,   116,   487,    53,    53,    56,  1174,   131,   110,    53,
    56,     2,   114,   115,   116,   110,    53,   117,   110,   114,
   115,   116,   114,   115,   116,    56,    12,   116,  1345,  1346,
   110,  1348,  1349,   116,   114,   115,   116,   131,    56,  1356,
    53,    53,  1359,  1360,  1361,   110,   131,   131,    53,   114,
   115,   116,   149,    53,  1371,   131,    55,   147,     9,   110,
   116,    52,    53,   114,   115,   116,    53,   552,   121,   122,
   123,   124,   125,   126,    65,    66,   129,   130,   148,   110,
    53,   150,    53,   114,   115,   116,   131,    55,    53,   131,
    39,  1259,   110,   578,    53,    53,   114,   115,   116,   584,
    43,   586,    52,   588,   589,    53,   591,   592,   593,    53,
    57,    12,   597,   598,   599,   116,   601,    53,   603,   604,
   605,    53,   113,  1291,    57,   131,    53,   612,   131,   131,
    53,    43,   617,    58,    53,    55,    53,    53,    53,   624,
    53,   131,    53,   131,    53,    43,   131,   131,   139,   131,
  1318,   131,   116,    53,    53,   117,   641,    53,    43,   644,
    52,    56,    52,    56,    58,    53,    43,    56,   653,   654,
   655,    52,    58,    53,   659,    58,   131,    53,    53,    53,
    53,    53,    43,    53,    55,   131,    53,   178,   673,    58,
    52,   131,    44,    53,    53,    53,    52,    44,    53,   190,
    53,    52,    56,    53,   721,   147,   723,    55,    53,   726,
   201,   696,   697,    53,    53,   206,    53,    58,   209,   210,
    53,    53,   739,    58,    53,   147,   147,    53,    52,    57,
    53,    52,   223,   224,   225,   226,   227,   228,   229,    52,
    57,    53,    53,    57,   147,    53,    52,    57,    57,   240,
    57,    53,    53,    58,   245,   246,    53,   113,    52,   250,
   251,   252,   253,    53,    53,    53,    52,    52,   147,   260,
   261,   262,   263,    56,    52,    57,    57,    57,    53,    52,
    48,    53,    53,   139,    53,   131,    48,   131,   773,   774,
    53,    58,   777,   131,    58,   780,   287,   131,    58,   784,
    58,   786,    58,   788,     2,    58,   791,    53,   825,   826,
   795,    53,    53,   131,    53,   800,    53,    48,    53,    53,
    53,    53,   178,   150,   809,   117,    53,   131,   131,    58,
    58,   322,   131,   818,    58,   150,    53,    53,    53,    52,
   131,    53,    53,    53,    53,   201,    53,    53,    53,    53,
   150,   836,   150,   209,    52,    53,    53,   150,    57,    53,
     0,   878,    57,   150,    57,    57,   357,   884,    66,   886,
    53,   888,    53,   890,   150,   892,   893,    53,    53,   896,
   150,    58,   899,   374,   150,    57,    57,   904,    57,   245,
    57,    53,    57,     0,    58,    58,   515,    58,    58,    58,
    58,    58,   393,    58,   695,   624,   717,   583,   793,   149,
   648,   402,   820,    -1,   405,   113,    -1,   408,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   287,    -1,   424,    -1,    -1,   427,    -1,    -1,   924,
    -1,   139,    -1,    -1,   929,   332,    -1,    -1,   439,   934,
    -1,   442,    -1,    -1,   939,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   322,    -1,    -1,   986,
   987,    -1,    -1,    -1,   465,   960,    -1,   962,    -1,    -1,
   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   479,    -1,
   975,    -1,   190,   978,    -1,    -1,   981,    -1,    -1,    -1,
    -1,   357,    -1,   201,    -1,    -1,  1023,    -1,   206,    -1,
    -1,   209,    -1,  1030,    -1,  1032,    -1,  1034,   374,    -1,
    -1,    -1,    -1,    -1,    -1,   223,   224,   225,   226,   227,
   228,   229,    -1,    -1,  1019,    -1,    -1,   393,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   245,   246,   405,
    -1,    -1,   250,   251,   252,   253,    -1,    -1,    -1,    -1,
    -1,   552,   260,   261,   262,   263,    -1,    -1,    -1,    -1,
    -1,   427,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1064,
    -1,    -1,    -1,    -1,    -1,    -1,   442,   578,    -1,   287,
  1075,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1083,    -1,
    -1,  1086,    -1,    -1,    -1,    -1,    -1,  1092,    -1,   465,
    -1,    -1,    -1,   604,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   612,    -1,   479,   322,    -1,   617,    -1,    -1,    -1,
    -1,    -1,   519,   624,   521,    -1,    -1,   524,  1123,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,
    -1,    -1,   653,   654,   655,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1157,    -1,    -1,    -1,   374,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1174,
    -1,    -1,    -1,    -1,    -1,   393,   552,    -1,    -1,    -1,
   591,   592,   593,    -1,   402,    -1,    -1,   405,   599,    -1,
  1227,    -1,    -1,    -1,    -1,  1232,    -1,    -1,    -1,    -1,
    -1,    -1,   578,    -1,    -1,    -1,    -1,    -1,    -1,   427,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   439,    -1,    -1,   442,  1262,    -1,    -1,   604,    -1,
  1267,    -1,    -1,    -1,    -1,    -1,   612,  1274,    -1,    -1,
    -1,   617,    -1,    -1,    -1,    -1,    -1,   465,    -1,    -1,
    -1,    -1,    -1,    -1,   207,    -1,    -1,    -1,    -1,    -1,
    -1,   479,    -1,    -1,    -1,   641,    -1,  1304,    -1,    -1,
   223,   224,   225,   226,   227,   228,   229,    -1,    -1,    -1,
   791,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   809,    -1,
    -1,   254,    -1,    -1,    -1,    -1,    -1,   818,    -1,    -1,
    -1,   718,    -1,    -1,   721,   268,   723,   270,    -1,   726,
    -1,    -1,    -1,    -1,    -1,   836,   733,    -1,   735,    -1,
   737,   738,   739,    -1,   552,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   578,    -1,    -1,   774,    -1,   776,   777,    -1,   779,   780,
    -1,   782,    -1,    -1,   785,    -1,   787,   788,    -1,   790,
    -1,    -1,    -1,    -1,    -1,    -1,   604,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   612,    -1,    -1,    -1,    -1,   617,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   361,   362,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   824,   825,   826,
    -1,    -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   809,    -1,   653,   654,   655,    -1,    -1,
    -1,    -1,   818,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   962,   405,   406,   407,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   975,    -1,    -1,   978,    -1,    -1,
   981,   878,    -1,   880,    -1,    -1,    -1,   884,    -1,   886,
    -1,   888,    -1,   890,   891,   892,   893,    -1,    -1,   896,
    -1,    -1,   899,    -1,    -1,    -1,    -1,   904,    -1,    -1,
    -1,    -1,    -1,   456,    -1,    -1,    -1,    -1,  1019,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   929,    -1,
   931,   932,    -1,   934,    -1,   936,   937,    -1,    -1,    -1,
   941,   942,    -1,    -1,    -1,   488,   947,    -1,   949,   950,
    -1,    -1,   953,   954,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,  1064,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,  1075,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,  1083,   791,    -1,  1086,    -1,    -1,    -1,   986,
   987,  1092,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   809,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   975,
   818,    -1,   978,    -1,    -1,   981,    -1,    -1,    -1,    -1,
    -1,    -1,  1123,    -1,    -1,    -1,  1023,    -1,   836,    -1,
    -1,    -1,    -1,  1030,    -1,  1032,    -1,  1034,   581,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1051,    -1,    -1,    -1,  1055,    -1,  1157,  1058,  1059,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1069,   612,
    -1,    -1,    -1,  1174,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   625,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   653,   654,   655,    -1,    -1,    -1,    -1,  1083,    -1,    -1,
  1086,    -1,    -1,    -1,    -1,    -1,  1092,    -1,    -1,    -1,
    -1,  1132,    -1,    -1,    -1,    -1,    -1,    -1,  1139,    -1,
   683,   684,    -1,    -1,    -1,    -1,   689,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   962,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   975,    -1,    -1,
   978,    -1,    -1,   981,    -1,    -1,  1177,    -1,    -1,    -1,
    -1,  1182,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1019,    -1,    -1,    -1,    -1,    -1,    -1,  1219,    -1,
  1221,  1222,    -1,  1224,    -1,    -1,    -1,    -1,    -1,  1226,
  1227,    -1,    -1,    -1,  1231,  1232,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1064,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,  1262,    -1,  1075,   811,    -1,
  1267,    -1,    -1,    -1,    -1,  1083,  1273,  1274,  1086,    -1,
    -1,    -1,    -1,    -1,  1092,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
    -1,    -1,    -1,    -1,     8,    -1,    -1,  1304,    -1,    -1,
    -1,    15,    -1,    -1,    -1,  1123,    20,    21,    -1,    23,
    24,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,  1157,
    -1,    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,  1174,    -1,    72,    73,
    74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     1,    -1,   120,    -1,    -1,    -1,
    -1,     8,    -1,    -1,    -1,    -1,   130,   131,    15,    -1,
   134,    -1,    -1,    20,    21,    -1,    23,    24,    25,    26,
    -1,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    52,  1009,    -1,    55,    -1,
    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
    77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     1,    -1,   120,    -1,    -1,    -1,    -1,     8,    -1,
    -1,    -1,    -1,   130,   131,    15,    -1,   134,    -1,    -1,
    20,    21,    -1,    23,    24,    25,    26,    -1,    -1,    -1,
   147,   148,    -1,   150,   151,   152,    -1,    -1,    -1,    -1,
  1113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,    75,    76,    77,    78,    -1,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
   120,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,
   130,   131,    15,    -1,   134,    -1,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    -1,   147,    -1,    -1,
   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    -1,    -1,     7,     8,   147,    10,    11,   150,   151,   152,
    15,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,    -1,
    45,    46,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,   134,
    -1,   136,   137,   138,   139,   140,   141,   142,    -1,    -1,
    -1,    -1,   147,   148,   149,   150,   151,   152,     3,    -1,
    -1,    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,
    15,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,    -1,
    45,    46,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,   134,
    -1,   136,   137,   138,   139,   140,   141,   142,    -1,    -1,
    -1,    -1,   147,   148,   149,   150,   151,   152,     3,    -1,
    -1,    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,
    15,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,    -1,
    45,    46,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,   134,
    -1,   136,   137,   138,   139,   140,   141,   142,    -1,    -1,
    -1,    -1,   147,   148,   149,   150,   151,   152,     3,    -1,
    -1,    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,
    -1,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    -1,    -1,    31,    32,    33,    34,
    -1,    36,    37,    38,    -1,    40,    41,    -1,    -1,    -1,
    45,    46,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    -1,    79,    80,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   106,   107,    -1,   109,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,
    -1,   136,    -1,   138,   139,   140,   141,   142,    -1,    -1,
    -1,     3,   147,    -1,   149,     7,     8,    -1,    10,    11,
    -1,    -1,    -1,    -1,    -1,    17,    -1,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    -1,    -1,    31,
    32,    33,    34,    -1,    36,    37,    38,    -1,    40,    41,
    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,
    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    73,    74,    75,    76,    77,    -1,    79,    80,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   106,   107,    -1,   109,    -1,     8,
    -1,    -1,    -1,    -1,    -1,    -1,    15,    -1,    17,    -1,
    -1,    20,    21,    -1,    23,    24,    25,    26,    -1,   131,
    29,    30,    -1,    -1,   136,    -1,   138,   139,   140,   141,
   142,    -1,    -1,    -1,    -1,   147,    45,   149,    -1,    48,
    49,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
    -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,    -1,   106,   107,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   130,   131,    -1,    -1,   134,    -1,    -1,   137,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,   147,   148,
   149,   150,   151,   152,    15,    -1,    17,    -1,    19,    20,
    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    46,    -1,    48,    49,    50,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,    -1,   106,   107,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
   131,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     8,   147,    -1,   149,   150,
   151,   152,    15,    -1,    17,    -1,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,    29,    30,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    45,    -1,    -1,    48,    49,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
    -1,   134,    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     8,   147,   148,   149,   150,   151,   152,
    15,    -1,    17,    -1,    -1,    20,    21,    -1,    23,    24,
    25,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,   134,
    -1,    -1,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     8,   147,   148,   149,   150,   151,   152,    15,    -1,
    17,    -1,    -1,    20,    21,    -1,    23,    24,    25,    26,
    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
    -1,    48,    49,    50,    -1,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
    77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,    -1,   106,
   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    -1,    -1,   130,   131,    -1,    15,   134,    17,    -1,
   137,    20,    21,    -1,    23,    24,    25,    26,    -1,    -1,
   147,   148,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,
    49,    50,    -1,    52,    -1,    -1,    55,    -1,    57,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
    -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,    -1,   106,   107,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,   130,   131,    -1,    15,   134,    17,    -1,    -1,    20,
    21,    -1,    23,    24,    25,    26,    -1,    -1,   147,   148,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,    49,    50,
    -1,    52,    -1,    -1,    55,    -1,    57,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,    -1,   106,   107,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,   130,
   131,    -1,    15,   134,    17,    -1,    -1,    20,    21,    22,
    23,    24,    25,    26,    -1,    -1,   147,   148,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    45,    46,    -1,    48,    49,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,     8,    -1,    -1,    -1,   130,   131,    -1,
    15,   134,    17,    -1,    -1,    20,    21,    -1,    23,    24,
    25,    26,    -1,    -1,   147,   148,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
    -1,     8,    -1,    -1,    -1,   130,   131,    -1,    15,   134,
    17,    -1,    -1,    20,    21,    -1,    23,    24,    25,    26,
    -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,
    -1,    48,    49,    50,    -1,    52,    -1,    -1,    55,    -1,
    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
    77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,    -1,   106,
   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    -1,    -1,   130,   131,    -1,    15,   134,    17,    -1,
    -1,    20,    21,    -1,    23,    24,    25,    26,    -1,    -1,
   147,    -1,   149,   150,   151,   152,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,
    49,    50,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    75,    76,    77,    78,
    -1,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,    -1,   106,   107,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   120,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
    -1,   130,   131,    -1,    15,   134,    17,   136,    -1,    20,
    21,    -1,    23,    24,    25,    26,    -1,    -1,   147,    -1,
   149,   150,   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    -1,    -1,    48,    49,    50,
    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,    -1,   106,   107,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    -1,   130,
   131,    -1,    15,   134,    17,   136,    -1,    20,    21,    -1,
    23,    24,    25,    26,    -1,    -1,   147,    -1,   149,   150,
   151,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    45,    -1,    -1,    48,    49,    50,    -1,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
    73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
    -1,    -1,    -1,     8,    -1,    -1,    -1,   130,   131,    -1,
    15,   134,    17,    -1,    -1,    20,    21,    -1,    23,    24,
    25,    26,    -1,    -1,   147,    -1,   149,   150,   151,   152,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    45,    -1,    -1,    48,    49,    50,    -1,    52,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
=======
     0,     0,     0,     0,    47,     0,     0,     0,    95,    48,
     0,     0,     0,     0,     0,    52,    53,     0,     0,    46,
    90,    93,    92,    94,    91,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
     1,    64,    63,     0,    34,    79,     0,    33,     0,   118,
   114,   115,   112,    38,    39,    40,    35,    37,    51,    50,
   113,     0,     0,    29,    13,    22,     0,   171,     0,     0,
     0,     0,   323,   325,   324,   176,   174,   175,    17,   158,
   166,   179,   180,   173,   168,   178,   172,   181,    21,    10,
     9,    20,    12,    11,     2,     0,     0,     0,     0,     0,
    26,     0,    36,   171,   242,   243,     0,     0,   322,   244,
     0,   236,     0,     0,    75,     0,    76,     0,     0,     0,
   320,   301,     0,   341,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   176,     0,   174,   175,   179,
   331,   173,     0,   181,     0,     0,     0,     0,     0,     0,
    78,     0,    77,     0,   320,   153,   152,   151,     0,     0,
   117,   114,     0,     0,     0,     0,     0,   310,     0,     0,
   320,    81,   106,     0,     0,     0,     0,     0,   320,    80,
   132,   133,     0,     0,   310,     0,     0,     0,     0,     0,
     0,    27,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   174,   175,     0,   179,   173,   181,
     0,   208,     0,   210,   207,   209,   169,   170,   190,   191,
     0,   188,   189,   187,   257,   260,   255,   256,   258,   259,
   185,   186,   182,   183,   184,     0,     0,     8,     6,     7,
     5,     4,     0,     0,     0,     0,   244,     0,   237,   257,
   260,     0,     0,     0,     0,     0,     0,     0,    82,    84,
    83,    85,   290,     0,     0,     0,   327,     0,    90,    92,
    94,    91,     0,     0,   340,   339,     0,     0,   319,     0,
     0,     0,   336,     0,     0,     0,     0,     0,     0,   139,
   134,   135,   193,   194,   136,     0,     0,    90,    92,    91,
     0,     0,     0,     0,   320,   151,     0,   332,    66,   116,
   147,   157,     0,   321,     0,     0,     0,   383,     0,     0,
     0,   290,   310,     0,     0,     0,     0,   264,     0,   263,
     0,     0,     0,   114,   115,     0,   112,   113,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   320,   314,
     0,   150,   103,     0,     0,     0,     0,    96,    32,    31,
    55,    30,     0,    67,   290,   111,     0,   384,   384,     0,
   384,   384,   384,   384,   384,   384,   380,   384,   384,   381,
   384,   384,    25,    29,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   177,   211,     0,     0,     0,     0,     0,
     0,   160,   167,   159,     0,   252,   251,   240,   250,   246,
   254,   249,   245,   253,   241,   354,   239,   238,   248,   247,
    44,     0,   301,   301,   301,     0,   307,     0,     0,     0,
   301,     0,     0,     0,     0,     0,     0,     0,   343,     0,
   318,   317,     0,     0,     0,     0,     0,     0,     0,     0,
   205,   205,   205,   205,   205,   205,     0,     0,   355,     0,
     0,     0,     0,     0,     0,    90,    92,    90,    92,   335,
   151,     0,     0,     0,     0,     0,     0,     0,   334,   333,
   329,     0,     0,     0,     0,     0,   320,     0,   261,   262,
   156,     0,    90,    92,    91,     0,    41,     0,     0,    49,
     0,   361,     0,   359,     0,   363,    54,    42,    43,   311,
   310,     0,   308,    71,     0,     0,     0,   150,   105,   104,
   106,    74,     0,     0,     0,     0,     0,     0,   371,   368,
    73,   378,   374,   372,   369,   382,   376,   370,   367,   377,
   373,    28,     0,   165,     0,   212,   162,     0,     0,   214,
     0,     0,     0,     0,   213,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   352,     0,   301,   278,
   301,   301,   275,   301,   301,   266,   301,     0,     0,   301,
     0,   301,   301,   292,   301,     0,   328,   327,     0,     0,
     0,     0,     0,     0,     0,   342,     0,   337,   316,     0,
   138,   195,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   357,   356,     0,   192,     0,     0,
     0,     0,     0,     0,   150,   290,   335,   150,   384,   384,
     0,   330,    59,     0,     0,    72,     0,     0,     0,     0,
     0,     0,    90,    92,     0,     0,     0,     0,   364,   364,
   362,   360,     0,   315,   320,   314,   149,   150,   141,   106,
   106,     0,    98,    68,     0,   389,   384,   384,   390,   384,
   384,     0,     0,   161,     0,     0,     0,   235,   219,     0,
   222,     0,   224,     0,   221,     0,     0,     0,     0,     0,
   217,     0,     0,   218,     0,     0,   215,   216,   232,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   353,     0,
   301,   279,   301,   301,   271,   301,   276,   301,   301,   267,
     0,   287,   301,   301,     0,   265,     0,     0,   301,   293,
   301,   301,   294,   306,   301,   301,     0,   291,     0,   326,
     0,     0,     0,   345,     0,     0,   206,   205,   205,   205,
   199,   201,   200,   196,   198,   197,     0,   140,   358,     0,
   320,   323,     0,   320,   323,   320,   323,     0,     0,   290,
     0,     0,     0,   379,   375,     0,    58,     0,   150,   155,
     0,     0,     0,     0,     0,     0,   366,   365,    71,   310,
   312,   148,    99,   100,   106,     0,   386,   385,   388,   387,
     0,   164,   231,     0,   163,   225,   228,   230,   227,     0,
   220,     0,   223,     0,   234,     0,     0,     0,     0,     0,
     0,   346,     0,   280,   301,   272,   274,   277,   301,   268,
   270,   301,   301,   286,     0,   281,     0,    70,     0,   296,
   295,   297,   301,   305,     0,   298,     0,    65,     0,   344,
     0,     0,     0,   202,   204,   203,     0,     0,     0,     0,
     0,     0,     0,     0,   320,     0,   320,   323,     0,   141,
    86,   154,    56,    70,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   309,     0,     0,    97,     0,
    23,   233,   226,   229,     0,     0,     0,   290,   273,   269,
   288,   282,     0,     0,   301,    69,     0,   290,   299,     0,
     0,   301,     0,     0,    45,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    87,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    71,   106,   106,    61,     0,     0,     0,   301,
     0,   283,    60,     0,   301,     0,   302,    57,   338,   290,
     0,     0,     0,   150,   150,     0,     0,     0,   150,   150,
   150,   150,     0,     0,     0,     0,     0,     0,   290,    62,
     0,     0,     0,     0,     0,     0,     0,   313,   101,   102,
     0,   348,   301,   285,   301,   301,   304,   301,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   150,     0,     0,     0,   150,   150,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   351,   289,   284,
   300,   303,     0,   323,   323,     0,   142,   121,   323,   323,
     0,   145,   119,   144,   122,     0,     0,     0,     0,     0,
     0,    88,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   350,   347,     0,     0,   137,     0,     0,     0,
   323,     0,     0,   323,   143,   323,   323,     0,   146,   120,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   349,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   323,    89,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   150,   150,
     0,   150,   150,     0,     0,     0,     0,     0,     0,   150,
     0,     0,   150,   150,   150,     0,   131,   129,     0,   125,
   123,     0,     0,     0,   150,   130,   124,   128,   126,     0,
   127,     0,     0,     0
};

static const short yydefgoto[] = {  1192,
     2,    21,   214,   155,   383,   947,    96,    63,    64,    65,
    66,    67,   373,   378,    68,    69,    70,   203,   370,   310,
    97,   546,    98,   130,   718,   714,   100,   101,   256,   241,
   312,   313,   314,   647,   102,   103,   719,   268,   132,   272,
   350,   455,   456,   286,   371,   543,   446,   148,   104,   133,
   105,   106,   107,   464,   341,   163,    74,    75,    76,   297,
   637,   891,    77,   748,  1104,    78,   607,    79,   490,    80,
   533,   108,   559
};

static const short yypact[] = {    43,
  2525,  3074,-32768,-32768,   -70,-32768,-32768,-32768,  2525,  2525,
  2525,  2525,  1232,  2525,  2525,  2525,  2525,  2525,  2525,-32768,
   155,    19,   -61,  1559,-32768,    48,   357,   568,-32768,-32768,
    56,    33,    80,  2329,   302,-32768,-32768,   133,   233,-32768,
-32768,-32768,-32768,-32768,-32768,  2481,  3074,   171,   184,   392,
   392,    38,   109,   259,   314,   338,   352,   369,   134,   396,
  1410,-32768,-32768,   381,-32768,-32768,   404,-32768,   740,-32768,
   495,    21,    83,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   408,   893,   792,   410,   410,  1559,-32768,  1383,   110,
   818,   818,-32768,-32768,-32768,-32768,   495,    21,   791,  1205,
-32768,-32768,-32768,    83,-32768,-32768,-32768,-32768,   410,   410,
   410,   410,   410,   410,-32768,  2525,  2525,  2525,  2525,  2525,
-32768,   818,-32768,   855,-32768,-32768,  2059,  1559,-32768,  1611,
   491,-32768,   864,  1559,   396,   396,   396,   396,   406,    33,
-32768,   525,    33,  3111,   180,   538,  1559,    58,  3074,   991,
  1559,  2736,   515,  2593,  1185,  1202,   576,   726,   303,   598,
-32768,   572,  1128,   752,  1171,   569,   616,  1141,  1212,   606,
-32768,   396,-32768,   982,   690,-32768,-32768,-32768,  2966,   307,
-32768,   202,  1232,   541,  3074,  3074,  3074,  1996,  1232,   396,
    64,-32768,   328,  3074,  3074,  3074,  3074,   578,  1118,-32768,
-32768,-32768,   991,    66,  1996,    66,    66,    66,    71,    71,
  3961,-32768,  2525,   624,   842,   634,   295,   296,   657,   429,
  3584,   348,   560,   671,   222,    95,   -21,   747,   585,   753,
   424,   789,    21,-32768,   800,-32768,-32768,-32768,-32768,-32768,
   818,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   818,  1232,  1283,  1098,  1098,
   210,   776,   784,  1232,  1232,  3119,  1032,  1147,-32768,     5,
    40,  1232,    58,  1559,  1559,  1232,  1232,  1150,-32768,-32768,
-32768,-32768,   936,   806,    46,   851,   867,  1254,   295,   296,
   657,   429,  3499,   548,-32768,-32768,   928,   930,-32768,  1157,
   923,  3074,-32768,  1296,  3342,  2169,  2169,   583,   341,-32768,
   791,   900,-32768,-32768,-32768,  1049,  1280,   430,   449,   477,
   401,   664,  1192,    38,   926,   941,  3222,-32768,-32768,-32768,
-32768,   943,   951,-32768,   985,  2593,  2593,-32768,  3074,  1072,
  1061,   936,  1996,   396,   396,   600,   647,-32768,   354,-32768,
  1033,  2851,  1240,   222,    95,   598,   585,   753,   251,   436,
   424,    44,   464,  1119,  1262,  1306,  1333,    36,   356,  1135,
  1137,     1,-32768,  1117,  1232,    29,   991,-32768,  1012,  1124,
  1124,-32768,  1161,  1143,   936,-32768,   126,   252,   252,  1178,
   252,   252,   252,   252,   252,   252,-32768,   529,   252,-32768,
   529,   252,-32768,   792,  1245,  1232,  1148,   818,   511,   818,
   539,   553,   818,   595,   603,   623,   683,   651,   687,   689,
  1216,  1221,   708,-32768,   951,   422,   629,    95,   747,   585,
   753,  1017,-32768,   791,  1220,   791,   791,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   791,  1266,  1198,-32768,   791,   791,
-32768,  1184,    -3,     4,   219,  1238,-32768,  1222,    33,   631,
   244,  1263,    18,  1276,   639,  3547,  1282,   439,  1559,    58,
-32768,-32768,  1505,  1301,  3379,  1291,   -21,   198,  1308,  1885,
    41,     3,  1322,    41,     3,  1322,  1496,   991,-32768,  1316,
  1125,  1324,   709,   715,   716,   718,   723,  1216,  1221,   985,
  1325,  1232,  1323,  3259,  1207,  1232,    66,  1327,  1298,-32768,
  1108,    58,  1376,  1337,  1342,    33,  1351,   941,-32768,-32768,
-32768,  1358,  1310,  1321,  1332,   749,-32768,   810,   629,-32768,
    66,-32768,  1371,-32768,  1374,-32768,-32768,-32768,-32768,-32768,
  1996,   497,-32768,-32768,   725,  1385,   238,     1,-32768,-32768,
  1401,-32768,   578,  1395,   625,  1398,    71,    71,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1397,    16,   759,-32768,  1630,   818,  1407,-32768,
   818,  1411,   818,  1415,-32768,   818,  1416,   804,   811,   813,
   718,   814,   818,   828,   818,   841,   818,   818,   818,  1417,
  1377,  1380,  1381,   876,   755,    58,-32768,    33,   265,-32768,
     7,   343,-32768,   447,   360,-32768,  1131,  1388,    33,   457,
    33,   547,   -10,-32768,  1144,  3074,-32768,   867,  1399,   441,
   430,   449,   477,   977,   456,   922,  1457,-32768,-32768,  1450,
-32768,-32768,  1459,  3462,   198,   731,  1453,  1456,  1464,  1465,
  1466,  1469,  3632,  1462,  1483,-32768,  1125,-32768,  1550,  1665,
  3933,   847,   849,  1480,     1,   936,-32768,     1,   252,   252,
  3074,-32768,-32768,    58,  1448,-32768,  1325,  1232,  1232,  1484,
  1485,  1486,  1445,  1454,  1310,  1321,  1332,  1018,  1516,  1516,
-32768,-32768,  1507,-32768,   592,  1135,-32768,     1,-32768,   182,
  1401,  1504,-32768,-32768,  1508,-32768,   529,   252,-32768,   529,
   252,  2525,  1232,-32768,   818,  1513,   818,-32768,-32768,   818,
-32768,   818,-32768,   818,-32768,   818,  3996,  4029,  4037,   850,
-32768,   818,  1515,-32768,   818,  1519,-32768,-32768,-32768,   818,
  1523,  1524,  1526,  1445,  1463,   818,  1537,  1529,-32768,  1540,
   -10,-32768,   525,   525,-32768,   -10,-32768,   525,   525,-32768,
    33,-32768,   738,   258,  1232,-32768,  1541,  1546,   525,-32768,
   525,   525,-32768,-32768,   744,   345,  1232,-32768,  1638,-32768,
  1548,   492,   723,   307,  1559,  1391,-32768,    41,     3,  1322,
-32768,-32768,-32768,-32768,-32768,-32768,  3669,-32768,-32768,  3717,
  1110,  1551,  3754,  1259,  1552,  1441,  1553,  4044,  4085,   936,
  1545,  1556,  1554,-32768,-32768,  1372,-32768,  1555,     1,   791,
    12,    37,   686,  1560,  1562,  1454,-32768,-32768,  1135,  1996,
-32768,-32768,-32768,-32768,   417,  3074,-32768,-32768,-32768,-32768,
   968,   791,-32768,   818,  1017,-32768,-32768,-32768,-32768,  4091,
-32768,   818,-32768,   818,-32768,  1498,  1511,  1518,  1569,  1579,
  1573,-32768,  1574,-32768,   525,-32768,-32768,-32768,   525,-32768,
-32768,   525,   525,-32768,  1232,-32768,   166,  3074,  1578,-32768,
-32768,-32768,   525,-32768,  1232,-32768,   264,-32768,  3074,-32768,
  1581,  1275,  1586,-32768,-32768,-32768,  3802,  1583,  1587,  3839,
  1589,  1591,  1596,  1602,  1461,  3887,  1477,  1590,  1610,  1613,
-32768,-32768,-32768,  3074,  1616,  1617,  1622,  1551,  1624,  1634,
  1552,  1635,  1553,  1577,   131,-32768,  1643,   238,-32768,  1659,
-32768,-32768,-32768,-32768,  1580,  1657,  3074,   936,-32768,-32768,
-32768,-32768,   531,  1232,   525,  1410,  1654,   936,-32768,   787,
  1232,   525,  1369,    58,-32768,  1661,   873,   885,  1096,  1232,
  1232,   889,   902,  1123,  1232,  1232,  1232,  1232,  1678,  3924,
  1680,  1681,-32768,  1662,  1660,  1613,   786,   826,  1688,  1666,
  1689,  1590,  1135,   182,  1401,-32768,  3074,  1468,  1694,   525,
  1030,-32768,-32768,  1695,   525,  1037,-32768,-32768,-32768,   936,
   911,   914,   915,     1,     1,   916,   919,   939,     1,     1,
     1,     1,  1232,   940,   948,  1274,  1232,  1232,   936,-32768,
  1648,  1649,  1704,  1651,  1652,  1707,   887,-32768,-32768,-32768,
  1497,-32768,   525,-32768,   525,   525,-32768,   525,  1705,  4119,
  4127,   966,  1701,  1702,  4152,  4181,   984,  1703,  1706,  1714,
  1716,     1,   987,   992,  1004,     1,     1,  1712,  1723,  1724,
  1676,  1726,  1727,  1679,  1683,  1687,  1734,  1237,-32768,-32768,
-32768,-32768,   227,  1737,  1738,  4206,-32768,-32768,  1739,  1740,
  4214,-32768,-32768,-32768,-32768,  1742,  4239,  4248,  1009,  1743,
  1744,  1709,  1674,  1682,  1751,  1684,  1685,  1755,  1761,  1763,
  1715,   755,-32768,-32768,   138,   134,-32768,  1766,  1768,  1769,
  1771,  1772,  1774,  1775,-32768,  1777,  1778,  4273,-32768,-32768,
  1125,  1737,  1738,  1713,  1739,  1740,  1717,  1718,  1719,  1780,
-32768,   703,   690,  1779,  1784,  1782,  1785,  1786,  1793,  1794,
  1796,  1797,   900,  1771,  1775,  1777,  1778,  1730,  1232,  1232,
  1795,  1232,  1232,  1798,  1799,  1801,  1800,  1797,     1,     1,
  1232,     1,     1,  1232,  1232,  1232,  1802,  1803,  1807,     1,
  1809,  1810,     1,     1,     1,  1232,-32768,-32768,  1811,-32768,
-32768,  1813,  1814,  1816,     1,-32768,-32768,-32768,-32768,  1817,
-32768,  1831,  1848,-32768
};

static const short yypgoto[] = {-32768,
-32768,   308,  1470,    30,  1317,   961,     2,-32768,-32768,  -186,
   -45,   -36,   -32,  -527,  -143,    14,  1367,-32768,  -105,-32768,
   370,    60,  1499,   -13,  -356,-32768,  1631,   -89,-32768,  1299,
  -289,-32768,-32768,  -414,  1512,-32768,   675,   120,    77,  1781,
-32768,  -152,  -332,  1696,  -196,  -683,  -141,-32768,  1006,  -142,
-32768,   947,-32768,  1249,  1368,  -123,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -845,-32768,-32768,-32768,-32768,  1223,-32768,
  -352,  1767,   322
};


#define	YYLAST		4390


static const short yytable[] = {    99,
   296,   237,   238,    62,   171,   173,   303,   315,   390,   514,
   535,   384,   831,   172,   172,   478,   482,   485,   627,   439,
   145,   351,   754,   703,   713,   424,   285,   192,   323,   549,
   328,    61,   263,   285,   200,   140,   540,   545,   207,   646,
   285,    82,   140,   285,   309,   315,   457,   156,    62,   140,
   123,   576,   554,   580,   442,     1,   585,   916,   301,   157,
   315,   204,   315,   140,   122,    29,   181,   648,   649,   650,
   651,   652,   239,   240,   140,   227,   165,   646,   140,   374,
   531,   231,   919,   174,    41,    42,   491,    43,    44,    45,
   532,   458,   609,   134,   239,   240,   208,   386,   295,   612,
   209,   141,   279,   280,   281,   282,   302,   172,   141,   239,
   240,   387,   207,   267,   375,   141,   387,   129,   347,   206,
    90,    95,   161,   917,   190,   143,   918,   440,   443,   141,
   227,    52,   461,    52,   239,   240,   311,   348,   267,   200,
   191,   332,    49,   131,   141,   926,   515,   175,   920,   175,
    62,   921,   129,   156,   179,   231,    95,   459,   210,   460,
   349,   172,   479,   483,   486,   157,   433,   139,   115,   360,
   208,   555,   833,   834,   311,   372,   980,   175,   304,   188,
    62,   149,    59,  1132,   189,   478,    62,    62,    62,   311,
   645,   311,   157,   181,    90,    62,    62,    62,    62,   476,
   315,   658,   944,   505,    52,    52,   215,   227,   353,   180,
   397,   400,   509,   510,   365,   366,   367,   945,   376,   204,
   175,   175,  1103,   379,   380,   381,   382,   298,   161,   116,
   161,   117,   118,   119,   315,   120,   731,   175,   734,   204,
   737,   738,   981,   434,   642,   982,   348,   269,   348,  1133,
   436,   437,   267,   278,   121,   285,  1131,   700,   445,   239,
   240,   192,   449,   450,   140,   491,   300,   205,   331,   557,
   316,   551,  1105,   239,   240,   171,   173,   206,   150,   227,
   285,   491,   166,   657,   172,   172,   306,   403,   307,   140,
   120,   477,   481,   484,   285,   167,   528,   206,    49,  1028,
   951,   285,   146,    62,   183,   348,   467,   929,   875,   121,
   140,   279,   281,   267,   615,   952,    83,    84,    85,    86,
   207,   109,   110,   111,   112,   113,   114,   558,   638,   311,
   141,   473,   479,   812,   351,    90,   827,   828,  1106,   623,
    62,   408,   410,   550,   693,   315,    52,   147,   348,   332,
   129,   180,   359,   156,   645,   141,   789,   239,   240,   184,
   751,   548,   175,   311,   376,   157,   384,   645,   511,   476,
   673,    71,   467,   894,   895,   896,   141,   488,   208,   285,
   505,   285,   655,   185,  -115,  -115,   419,   489,   140,   420,
   409,   411,   574,   447,   448,   885,   285,   186,   315,   315,
   521,   541,    52,   161,   701,   140,   189,   180,   168,   377,
   169,    29,   161,   161,   187,   158,    71,   168,   175,   169,
    29,   176,   182,   258,   259,   260,   261,   262,   161,   198,
    41,    42,   280,    43,    44,    45,   696,   170,   756,   496,
    42,   140,   497,    44,    45,   211,   170,   239,   240,   140,
   348,   283,   227,   376,   141,   761,  1029,  1030,   225,   232,
   601,   477,   759,   602,   749,   603,   227,   426,   135,   426,
   136,   141,   769,   349,   311,   413,   408,   909,   574,   467,
   171,   209,   530,   285,   140,   599,   140,   715,   665,   172,
   267,   190,   668,   285,   604,   410,   225,   694,   928,   190,
   531,   140,   740,   790,    87,    60,    90,   191,    90,-32768,
   534,    88,   204,   158,    60,   199,   172,    52,    71,    52,
   404,   158,   176,   413,   414,   493,   273,   311,   311,   239,
   240,   698,   817,   175,   635,   175,   782,   140,   844,   210,
   205,   467,   305,   225,   494,   306,   557,   307,   354,   182,
   191,   190,   191,   362,    71,    71,    71,   578,   706,   709,
   174,   285,   772,    71,    71,    71,    71,   191,    49,   274,
   206,   275,   495,   388,   205,   391,   393,   395,   398,   401,
   161,    90,   990,   285,   299,   581,   361,   190,   636,   209,
   225,    91,   308,   140,   168,    92,   169,    29,   421,   583,
   427,   422,   209,   191,   558,   989,   579,   702,   695,   129,
   324,    93,    94,    95,   342,   994,    41,    42,   334,    43,
    44,    45,   330,   170,   239,   240,   325,    62,   487,   348,
   227,   334,   788,   927,   582,   225,    52,   830,   984,   227,
   890,   586,   189,   468,   333,   140,   204,   210,   584,   408,
    50,    51,   175,  -112,  -112,   779,   860,   201,   202,   191,
   210,   343,   158,   601,   819,   820,   602,  1039,   603,   410,
   555,    71,    62,   405,   225,   331,   140,   176,    52,   137,
   168,   138,   169,    29,   140,   519,  1058,   315,   520,   591,
   587,    60,   592,   176,   175,   516,   225,   604,   588,   842,
   816,   346,   498,    42,   206,   499,    44,    45,    71,   170,
   560,   517,   562,   563,   564,   565,   566,   567,   589,   568,
   569,   158,   570,   571,   811,   697,   621,   813,   529,   413,
   427,   787,    87,   593,   630,   595,   175,   232,    87,    88,
   189,   601,   141,   204,   602,    88,   603,   407,  1132,   893,
   191,   877,   412,   873,   599,   659,   556,   832,   746,   883,
   747,   660,   661,   887,   593,   168,   423,   169,    29,   595,
    89,   205,   331,   348,   285,   604,   480,    60,   590,   306,
   285,   307,   594,   227,   596,   985,   227,   683,    42,   227,
   684,    44,    45,   425,   170,   427,    49,   922,   338,   338,
   923,   206,    49,   600,   579,   715,   204,  -114,  -114,    90,
   582,   587,   999,   662,  1133,    90,   311,   209,   663,    91,
    52,   201,   202,    92,  1021,    91,    52,  1022,   213,    92,
   435,  1143,    88,  -113,  -113,   158,    59,    62,   995,    93,
    94,    95,    59,   129,   225,    93,    94,    95,   685,   225,
   727,   686,   334,   687,   716,   528,   225,   728,  1023,   729,
   595,   943,    60,    89,  1024,   930,   116,  1025,   117,   118,
   119,   950,   120,   225,   732,   121,   669,   406,   915,    62,
   239,   240,   688,   227,   239,   240,   227,   735,   462,    49,
    62,   121,   227,   808,    90,   809,   850,   529,  1026,   579,
   689,   348,    90,   463,   892,    52,   582,   946,   587,   730,
   180,   348,    91,    52,   744,    62,    92,   745,   953,   408,
   274,   175,   275,   733,   556,  1065,   707,   710,  1066,    59,
   991,   410,    93,    94,    95,   408,   736,   996,    62,   212,
   264,   265,   733,   946,   736,   736,  1004,  1005,   410,   276,
   277,  1009,  1010,  1011,  1012,    29,   227,  1040,   470,  1067,
  1041,   595,  1045,   348,   469,  1046,   988,   116,  1001,   117,
   118,   119,   472,   120,    41,    42,   502,    43,    44,    45,
  1002,   452,   348,   491,  1006,   595,   408,   503,    62,    87,
   814,   815,   121,   506,   410,    71,    88,  1007,    87,  1052,
   274,    29,   275,  1056,  1057,    88,   579,    73,   347,   582,
  1042,   579,  1076,   225,   582,   591,  1031,   931,   783,   841,
    41,    42,   225,    43,    44,    45,   507,   221,   837,   838,
  1081,   839,   840,  1087,  1047,  1053,   305,   142,  1088,   306,
    71,   307,   116,  1054,   117,   118,   119,   453,   120,   454,
   595,   162,    73,    49,   347,  1118,   744,   178,    73,   826,
   508,   736,    49,  1043,  1044,   193,    90,   121,  1048,  1049,
  1050,  1051,   193,   242,  1107,    90,    91,    52,   424,   736,
    92,  1035,   579,   512,   492,    91,   308,   582,  1038,    92,
   195,   196,   197,    59,   229,   235,    93,    94,    95,  1089,
   243,   244,    59,   129,   736,    93,    94,    95,   251,   252,
   513,  1086,   253,   254,   255,  1090,  1091,   270,   271,   247,
   248,   249,   250,   239,   240,   239,   240,   274,   522,   275,
   239,   240,   229,   374,   591,  1159,  1160,  1003,  1162,  1163,
   193,   193,   193,   193,   339,   284,   764,  1170,   287,   162,
  1173,  1174,  1175,   182,    73,   188,   898,   162,   326,   776,
   189,   591,  1185,   385,  1008,   536,   225,   285,   375,   225,
   657,   542,   225,   306,   335,   307,   119,   193,   120,   229,
   285,   765,   194,   544,   357,    73,   195,   196,   197,   363,
    73,    73,    73,   438,   777,   193,   451,   121,   547,    73,
    73,    73,    73,   471,   197,    71,   336,   339,   337,   389,
   552,   392,   394,   396,   399,   402,   441,   444,  1168,  1169,
   340,  1171,  1172,   553,   561,   274,   229,   275,   274,  1179,
   275,   329,  1182,  1183,  1184,   274,   430,   275,   500,    87,
   746,  1102,   747,   575,  1190,   194,    88,    71,   -64,   195,
   196,   197,   344,   667,   136,   721,   573,   723,    71,   194,
   725,   242,   597,   195,   196,   197,   225,   598,   605,   225,
   336,   229,   337,   739,   606,   225,   -64,    89,   275,   608,
   -64,   -64,   -64,    71,   618,   336,   527,   337,   243,   244,
   245,   246,   247,   248,   249,   250,   251,   252,   162,   193,
   253,   254,   255,    49,   188,   901,    71,    73,   537,   189,
   229,   626,   591,   178,   194,  1055,    90,   619,   195,   196,
   197,   955,   629,   345,   301,   138,    91,    52,   330,   501,
    92,    87,   229,   640,   721,   725,   194,   641,    88,   225,
   195,   196,   197,    59,    73,   474,    93,    94,    95,   193,
   193,   518,   538,   274,   643,   275,    71,   162,   646,   117,
   118,   119,   656,   120,   357,   344,   430,   465,   666,    89,
   194,   664,   302,   235,   195,   196,   197,   671,   337,   539,
   194,   193,   121,   675,   195,   196,   197,   674,   676,   843,
    87,   135,   284,   465,   846,    49,   847,    88,   848,   216,
   849,   678,   721,   725,   679,   680,   851,   194,    90,   853,
    29,   195,   196,   197,   855,   998,   681,   691,    91,    52,
   692,   217,    92,   913,   218,   219,   220,   682,   221,    41,
    42,   430,    43,    44,    45,    59,   699,   376,    93,    94,
    95,   705,  1108,   194,   331,   712,   194,   195,   196,   197,
   195,   196,   197,   720,    49,   222,   223,   722,   611,   614,
   617,   724,   726,   740,   620,   622,   625,    90,   628,   767,
   193,   162,   741,   193,   556,   742,   743,    91,    52,   781,
   229,    92,   851,   853,   194,   229,   188,   903,   195,   196,
   197,   189,   229,   784,    59,   785,   224,    93,    94,    95,
    72,   556,   791,    87,   786,   792,   188,   969,   798,   229,
    88,   189,   670,   793,  1032,    29,   794,   795,   932,   488,
   796,   677,   188,   971,   853,   810,   933,   189,   934,   818,
   821,   822,   823,   357,    41,    42,   690,    43,    44,    45,
   824,   653,   194,  1068,   159,    72,   195,   196,   197,   825,
   177,    72,   531,   829,   639,   835,   836,   160,   859,   844,
   284,   852,   708,   711,    88,   854,    87,    49,   347,   856,
   857,   194,   858,   124,   861,   195,   196,   197,   862,   194,
    90,   125,   126,   195,   196,   197,   863,   226,   233,   878,
    91,    52,   879,   889,    92,   800,   910,   899,   902,   904,
   228,   234,   911,   914,   127,   912,   924,    59,   925,   917,
    93,    94,    95,   750,   753,   935,   936,   758,   937,   938,
   763,    49,   920,   948,   768,   226,   771,   954,   775,   922,
    49,    73,   956,   960,    90,   193,   972,   961,   228,   965,
   193,   966,   159,    90,    91,    52,   967,    72,    92,   229,
   159,   177,   968,    91,    52,   228,   973,    92,   229,   974,
   128,   801,   977,   228,   802,    94,    95,   976,   898,   978,
    59,   129,   226,    93,    94,    95,    73,   355,    72,    88,
   901,   903,   233,    72,    72,    72,   242,   888,   979,   983,
   356,   981,    72,    72,    72,    72,   270,   271,   247,   248,
   249,   250,   987,   993,   239,   240,  1000,  1019,   986,  1020,
   803,  1027,   194,   243,   244,   721,   195,   196,   197,   226,
   721,   251,   252,   239,   240,   253,   254,   255,  1013,   428,
  1017,  1018,   228,   194,   969,   971,    49,   195,   196,   197,
  1033,  1036,   429,  1059,  1060,  1061,  1062,  1063,  1064,    90,
   853,  1073,  1077,  1078,  1082,   853,   865,  1083,  1092,    91,
    52,   869,   721,    92,   226,  1084,   872,  1085,    81,  1093,
  1094,  1095,  1096,  1097,  1098,  1101,   804,   228,  1099,   805,
    94,    95,  1100,  1109,  1110,  1112,  1113,   193,  1122,    73,
  1121,   159,   853,  1115,  1119,  1120,  1123,  1124,  1125,  1126,
    72,  1127,   229,   226,   228,   229,   177,  1128,   229,  1129,
  1130,   205,   164,    81,  1134,  1135,   228,  1136,  1137,    81,
  1138,  1139,   177,  1140,  1141,   226,  1148,  1144,  1151,  1149,
  1193,  1145,  1146,  1147,  1150,  1152,  1153,    72,   228,  1154,
  1155,    73,  1156,  1157,  1158,  1161,  1167,  1194,  1164,  1165,
   159,  1166,  1176,   654,  1177,   230,   236,   355,  1178,   428,
  1180,  1181,  1186,   228,  1187,  1188,   233,  1189,  1191,   704,
   356,   432,   356,   572,   975,   717,   780,   799,   672,   234,
   257,     0,     0,    73,     0,     0,     0,     0,     0,     0,
     0,     0,    87,   230,    73,     0,     0,     0,     0,    88,
     0,   216,   229,     0,     0,   229,     0,     0,     0,     0,
   164,   229,     0,     0,     0,    81,     0,     0,   164,    73,
     0,     0,     0,   217,   428,     0,   218,   219,   220,     0,
   644,     0,     0,   306,     0,   307,     0,   429,     0,     0,
     0,     0,    73,     0,     0,   358,    81,     0,     0,     0,
   364,    81,    81,    81,     0,     0,    49,   222,   223,     0,
    81,    81,    81,    81,   159,     0,     0,     0,     0,    90,
     0,     0,     0,   226,     0,   229,     0,   228,   226,    91,
    52,     0,     0,    92,     0,   226,   228,   230,     0,     0,
     0,   228,    73,     0,     0,     0,    59,   431,   224,    93,
    94,    95,   226,    87,     0,     0,     0,     0,     0,     0,
    88,     0,     0,     0,     0,   228,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   355,     0,     0,     0,
     0,     0,   230,     0,     0,     0,     0,     0,   577,   429,
   577,   305,     0,   577,   306,     0,   307,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   164,
     0,     0,     0,     0,     0,     0,    87,    49,    81,     0,
     0,   230,     0,   124,     0,   216,     0,     0,     0,     0,
   368,   125,   126,     0,     0,     0,     0,     0,     0,     0,
    91,   308,     0,   230,    92,     0,     0,   217,     0,     0,
   218,   219,   220,     0,   266,    81,     0,   369,   129,     0,
    93,    94,    95,     0,     0,     0,     0,     0,   164,     0,
     0,     0,     0,     0,    72,   358,     0,   431,     0,     0,
    49,   222,   223,     0,   236,     0,     0,     0,     0,     0,
     0,     0,   226,    90,     0,     0,     0,     0,   610,   613,
   616,   226,     0,    91,    52,   228,   624,    92,     0,     0,
   128,     0,     0,     0,   228,     0,     0,     0,     0,    72,
    59,   129,   224,    93,    94,    95,    87,     0,     0,     0,
     0,     0,     0,    88,     0,     0,     0,     0,     0,     0,
     0,     0,   431,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   577,     0,
     0,   577,     0,   577,   480,     0,   577,   306,     0,   307,
     0,     0,     0,   577,     0,   577,     0,   577,   577,   577,
     0,     0,   164,     0,     0,     0,     0,     0,     0,     0,
    49,   230,     0,     0,     0,     0,   230,     0,     0,     0,
     0,     0,     0,    90,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    91,    52,     0,     0,    92,     0,     0,
   230,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    59,   129,    72,    93,    94,    95,     0,     0,     0,   577,
   577,   577,     0,     0,   358,   226,     0,     0,   226,     0,
     0,   226,     0,     0,   752,     0,   755,   757,   228,   760,
   762,   228,   766,     0,   228,   770,     0,   773,   774,     0,
   778,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    72,     0,    87,     0,     0,     0,
     0,     0,     0,    88,     0,   577,     0,   845,     0,     0,
   577,     0,   577,     0,   577,     0,   577,   577,   577,   577,
     0,     0,   577,     0,     0,   577,     0,     0,     0,     0,
   577,     0,     0,     0,   144,     0,    72,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    72,     0,     0,
     0,     0,    81,     0,     0,   226,     0,     0,   226,     0,
    49,     0,     0,     0,   226,     0,     0,     0,   228,     0,
   230,   228,    72,    90,     0,     0,     0,   228,     0,   230,
     0,     0,     0,    91,    52,     0,     0,    92,     0,     0,
     0,     0,     0,     0,     0,    72,     0,    81,   577,   577,
    59,     0,     0,    93,    94,    95,   864,     0,   866,   867,
     0,   868,     0,   870,   871,     0,     0,     0,   874,   876,
     0,     0,     0,     0,   880,     0,   881,   882,   226,     0,
   884,   886,     0,     0,   577,     0,     0,     0,     0,     0,
   577,   228,   577,    22,   577,    72,     0,    23,   151,     0,
    25,    26,     0,     0,     0,   124,     0,    27,     0,    28,
    29,    30,    31,   125,   126,    32,    33,    34,    35,     0,
    36,    37,    38,     0,    39,    40,     0,     0,     0,    41,
    42,     0,    43,    44,    45,     0,   152,     0,     0,    47,
     0,     0,     0,     0,     3,     0,     0,     0,     0,     0,
     0,    48,     0,     0,     0,     4,     5,     6,     7,     0,
    81,     0,    49,    50,    51,     0,     0,     0,     0,     8,
   939,     0,     0,   230,   940,    90,   230,   941,   942,   230,
     9,     0,     0,    10,     0,    91,   153,     0,   949,    92,
     0,    53,   154,    54,    55,    56,    57,    58,     0,     0,
     0,     0,    59,   129,    60,    93,    94,    95,     0,     0,
    87,     0,    81,     0,     0,     0,     0,   124,     0,     0,
     0,     0,     0,     0,     0,   125,   126,     0,     0,     0,
     0,     0,     0,     0,     0,    11,    12,    13,     0,    14,
    15,    16,    17,    18,     0,    19,    20,     0,   327,     0,
   992,     0,     0,     0,    81,     0,     0,   997,     0,     0,
     0,     0,     0,     0,     0,    81,     0,     0,     0,     0,
     0,     0,     0,   230,    49,     0,   230,     0,     0,     0,
   577,   577,   230,     0,     0,   577,   577,    90,     0,     0,
    81,     0,     0,     0,     0,  1034,     0,    91,    52,     0,
  1037,    92,     0,     0,   154,     0,     0,     0,     0,     0,
     0,     0,     0,    81,    59,   129,   577,    93,    94,    95,
     0,   577,     0,     0,     0,     0,     0,   577,   577,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  1069,     0,
  1070,  1071,     0,  1072,     0,     0,   230,     0,    22,     0,
     0,     0,    23,   151,     0,    25,    26,     0,   577,     0,
   124,     0,   317,    81,    28,    29,    30,    31,   125,   126,
    32,    33,    34,    35,     0,    36,    37,    38,     0,    39,
    40,     0,     0,     0,   318,    42,     0,   319,   291,   320,
     0,   152,     0,     0,    47,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    48,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    49,   321,   322,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    91,   153,     0,     0,    92,     0,    53,   154,    54,    55,
    56,    57,    58,     0,     0,     0,     0,    59,   129,   294,
    93,    94,    95,    22,     0,     0,     0,    23,   151,     0,
    25,    26,     0,     0,     0,   124,     0,    27,     0,    28,
    29,    30,    31,   125,   126,    32,    33,    34,    35,     0,
    36,    37,    38,     0,    39,    40,     0,     0,     0,   523,
    42,     0,   524,    44,   525,     0,   152,     0,     0,    47,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    48,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    49,   526,    51,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    90,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    91,   153,     0,     0,    92,
     0,    53,   154,    54,    55,    56,    57,    58,     0,     0,
     0,     0,    59,   129,    60,    93,    94,    95,    22,     0,
     0,     0,    23,    24,     0,    25,    26,     0,     0,     0,
     0,     0,    27,     0,    28,    29,    30,    31,     0,     0,
    32,    33,    34,    35,     0,    36,    37,    38,     0,    39,
    40,     0,     0,     0,    41,    42,     0,    43,    44,    45,
     0,   352,     0,     0,    47,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    48,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    49,    50,    51,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    52,     0,     0,     0,     0,    53,     0,    54,    55,
    56,    57,    58,     0,     0,     0,    22,    59,     0,    60,
    23,    24,     0,    25,    26,     0,     0,     0,     0,     0,
    27,     0,    28,    29,    30,    31,     0,     0,    32,    33,
    34,    35,     0,    36,    37,    38,     0,    39,    40,     0,
     0,     0,    41,    42,     0,    43,    44,    45,    87,    46,
     0,     0,    47,     0,     0,    88,    87,   288,     0,   169,
    29,     0,     0,   124,    48,   216,     0,     0,     0,     0,
     0,   125,   126,     0,     0,    49,    50,    51,     0,   289,
    42,     0,   290,   291,   292,     0,   293,   415,     0,     0,
   416,   219,   417,     0,   266,     0,     0,     0,     0,    52,
     0,     0,     0,     0,    53,     0,    54,    55,    56,    57,
    58,     0,    49,   222,   223,    59,     0,    60,     0,     0,
    49,   418,   223,     0,     0,    90,     0,     0,     0,     0,
     0,     0,     0,    90,     0,    91,    52,     0,     0,    92,
     0,   180,     0,    91,    52,     0,     0,    92,     0,     0,
   128,     0,    59,     0,   294,    93,    94,    95,     0,    87,
    59,   129,   224,    93,    94,    95,   124,     0,   216,     0,
     0,     0,     0,     0,   125,   126,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   217,     0,     0,   218,   219,   220,    87,   504,     0,     0,
     0,     0,     0,   124,     0,   216,     0,     0,     0,     0,
     0,   125,   126,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    49,   222,   223,     0,   415,     0,     0,
   416,   219,   417,     0,   504,     0,    90,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    91,    52,     0,     0,
    92,     0,     0,   154,     0,     0,     0,     0,     0,     0,
    49,   418,   223,    59,   129,   224,    93,    94,    95,     0,
     0,     0,     0,    90,     0,     0,     0,     0,     0,    87,
     0,     0,     0,    91,    52,     0,    88,    92,   216,     0,
   154,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    59,   129,   224,    93,    94,    95,     0,     0,     0,     0,
   217,     0,     0,   218,   219,   220,    87,   475,     0,     0,
   306,     0,   307,    88,     0,   216,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    49,   222,   223,     0,   415,     0,     0,
   416,   219,   417,     0,   475,     0,    90,   306,     0,   307,
     0,     0,     0,     0,     0,     0,    91,   308,     0,     0,
    92,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    49,   418,   223,    59,   129,   224,    93,    94,    95,     0,
     0,     0,     0,    90,     0,     0,     0,     0,     0,    87,
     0,     0,     0,    91,   308,     0,    88,    92,   216,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    59,   129,   224,    93,    94,    95,     0,     0,     0,     0,
   415,     0,     0,   416,   219,   417,    87,   644,     0,     0,
   306,     0,   307,    88,     0,   216,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    49,   418,   223,     0,   415,     0,     0,
   416,   219,   417,     0,   466,     0,    90,     0,     0,     0,
     0,     0,     0,     0,    87,     0,    91,    52,     0,     0,
    92,    88,     0,   216,     0,     0,     0,     0,     0,     0,
    49,   418,   223,    59,     0,   224,    93,    94,    95,     0,
     0,     0,     0,    90,     0,   631,     0,     0,   632,   219,
   633,    87,   466,    91,   153,     0,     0,    92,    88,   180,
   216,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    59,     0,   224,    93,    94,    95,     0,     0,    49,   634,
   223,     0,   415,     0,     0,   416,   219,   417,     0,   221,
     0,    90,     0,     0,     0,     0,     0,     0,     0,    87,
     0,    91,    52,     0,     0,    92,    88,   180,   216,     0,
     0,     0,     0,     0,     0,    49,   418,   223,    59,     0,
   224,    93,    94,    95,     0,     0,     0,     0,    90,     0,
   415,     0,     0,   416,   219,   417,    87,   797,    91,    52,
     0,     0,    92,    88,     0,   216,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    59,     0,   224,    93,    94,
    95,     0,     0,    49,   418,   223,     0,   631,     0,     0,
   632,   219,   633,     0,   221,     0,    90,     0,     0,     0,
     0,     0,     0,     0,    87,     0,    91,    52,     0,     0,
    92,    88,     0,   216,     0,     0,     0,     0,     0,     0,
    49,   634,   223,    59,     0,   224,    93,    94,    95,     0,
     0,     0,     0,    90,     0,   217,     0,     0,   218,   219,
   220,    87,   897,    91,    52,     0,     0,    92,    88,     0,
   216,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    59,     0,   224,    93,    94,    95,     0,     0,    49,   222,
   223,     0,   217,     0,     0,   218,   219,   220,     0,   900,
     0,    90,     0,     0,     0,     0,     0,     0,     0,    87,
     0,    91,    52,     0,     0,    92,    88,     0,   216,     0,
     0,     0,     0,     0,     0,    49,   222,   223,    59,     0,
   224,    93,    94,    95,     0,     0,     0,     0,    90,     0,
   957,     0,     0,   958,   219,   417,    87,   221,    91,    52,
     0,     0,    92,    88,     0,   216,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    59,     0,   224,    93,    94,
    95,     0,     0,    49,   959,   223,     0,   962,     0,     0,
   963,   219,   417,     0,   221,     0,    90,     0,     0,     0,
     0,     0,     0,     0,    87,     0,    91,    52,     0,     0,
    92,    88,     0,   216,     0,     0,     0,     0,     0,     0,
    49,   964,   223,    59,     0,   224,    93,    94,    95,     0,
     0,     0,     0,    90,     0,   217,     0,     0,   218,   219,
   220,    87,   970,    91,    52,     0,     0,    92,    88,     0,
   216,     0,     0,     0,     0,     0,     0,    88,     0,     0,
    59,     0,   224,    93,    94,    95,     0,     0,    49,   222,
   223,     0,  1014,     0,     0,  1015,   219,   417,    87,   221,
     0,    90,     0,     0,     0,   124,     0,     0,    89,     0,
     0,    91,    52,   125,   126,    92,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    49,  1016,   223,    59,     0,
   224,    93,    94,    95,    49,     0,    89,     0,    90,     0,
    88,     0,     0,     0,     0,     0,     0,    90,    91,    52,
     0,     0,    92,     0,     0,     0,     0,    91,    52,     0,
     0,    92,    49,     0,     0,    59,     0,   224,    93,    94,
    95,    89,     0,    88,   806,    90,     0,   807,    94,    95,
     0,    88,     0,     0,     0,    91,    52,     0,    88,    92,
     0,     0,     0,     0,     0,     0,     0,    49,     0,     0,
     0,     0,    59,   129,    89,    93,    94,    95,     0,     0,
    90,     0,    89,     0,     0,     0,     0,     0,     0,    89,
    91,    52,     0,     0,    92,     0,     0,     0,     0,    88,
    49,     0,     0,     0,     0,    88,     0,   801,    49,     0,
    93,    94,    95,    90,     0,    49,     0,     0,     0,     0,
     0,    90,     0,    91,    52,     0,     0,    92,    90,     0,
   906,    91,    52,    88,     0,    92,    89,     0,    91,    52,
   804,    88,    92,    93,    94,    95,     0,     0,   806,     0,
     0,    93,    94,    95,     0,   905,    49,     0,    93,    94,
    95,     0,    49,     0,    89,     0,    88,     0,     0,    90,
     0,     0,    89,     0,     0,    90,     0,     0,     0,    91,
    52,     0,     0,    92,     0,    91,    52,     0,     0,    92,
    49,     0,     0,     0,     0,    88,   907,    89,    49,   908,
    94,    95,   907,    90,     0,    93,    94,    95,     0,     0,
     0,    90,     0,    91,    52,     0,     0,    92,     0,     0,
    88,    91,    52,    49,     0,    92,    89,     0,    88,     0,
   801,     0,     0,  1074,    94,    95,    90,     0,   804,     0,
     0,  1075,    94,    95,     0,     0,    91,    52,     0,     0,
    92,    89,    49,    88,     0,     0,     0,     0,     0,    89,
     0,     0,    88,   801,     0,    90,  1079,    94,    95,     0,
     0,     0,     0,     0,     0,    91,    52,    49,     0,    92,
     0,     0,     0,     0,    89,    49,     0,    88,     0,     0,
    90,     0,   804,    89,     0,  1080,    94,    95,    90,     0,
    91,    52,     0,     0,    92,     0,     0,     0,    91,    52,
    49,     0,    92,     0,     0,     0,     0,   907,    89,    49,
  1111,    94,    95,    90,     0,   907,     0,     0,  1114,    94,
    95,     0,    90,    91,    52,     0,     0,    92,     0,     0,
     0,     0,    91,    52,    49,     0,    92,     0,     0,     0,
   801,     0,     0,  1116,    94,    95,     0,    90,     0,   804,
     0,     0,  1117,    94,    95,     0,     0,    91,    52,     0,
     0,    92,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   907,     0,     0,  1142,    94,    95
};

static const short yycheck[] = {    13,
   144,    91,    92,     2,    50,    51,   148,   150,   205,   342,
   363,   198,   696,    50,    51,   305,   306,   307,     1,    15,
    34,   174,    16,   551,     9,    47,    37,    60,   152,     1,
   154,     2,   122,    37,    67,    46,     1,    37,    18,    37,
    37,   112,    46,    37,   150,   188,     1,    46,    47,    46,
   112,   408,   385,   410,    15,    13,   413,    46,     1,    46,
   203,    18,   205,    46,    46,    20,    53,   482,   483,   484,
   485,   486,    94,    95,    46,    89,    47,    37,    46,    16,
    37,    46,    46,    46,    39,    40,    84,    42,    43,    44,
    47,    46,    96,    46,    94,    95,    76,   203,   144,    96,
    18,   112,   135,   136,   137,   138,    49,   144,   112,    94,
    95,    46,    18,   127,    51,   112,    46,   113,    73,    76,
    85,   117,    46,   112,    96,    46,   115,   270,   271,   112,
   144,    96,   285,    96,    94,    95,   150,   174,   152,   172,
   112,    47,    72,    24,   112,   829,   343,   112,   112,   112,
   149,   115,   113,   152,    46,    46,   117,   112,    76,   114,
   174,   198,   305,   306,   307,   152,   256,   112,    14,   183,
    76,    46,   700,   701,   188,   189,    46,   112,   149,    46,
   179,    49,   112,    46,    51,   475,   185,   186,   187,   203,
   480,   205,   179,   180,    85,   194,   195,   196,   197,   305,
   343,   491,    37,   327,    96,    96,    87,   221,   179,   101,
   209,   210,   336,   337,   185,   186,   187,    52,    37,    18,
   112,   112,  1068,   194,   195,   196,   197,    48,   152,    75,
   154,    77,    78,    79,   377,    81,   593,   112,   595,    18,
   597,   598,   112,   257,    47,   115,   283,   128,   285,   112,
   264,   265,   266,   134,   100,    37,  1102,   547,   272,    94,
    95,   294,   276,   277,    46,    84,   147,    46,    47,    18,
   151,   377,    46,    94,    95,   321,   322,    76,    46,   293,
    37,    84,   112,    46,   321,   322,    49,   211,    51,    46,
    81,   305,   306,   307,    37,   112,    46,    76,    72,   983,
    37,    37,     1,   302,    46,   342,   293,   835,    51,   100,
    46,   344,   345,   327,    96,    52,     9,    10,    11,    12,
    18,    14,    15,    16,    17,    18,    19,    76,   470,   343,
   112,   302,   475,   666,   487,    85,   689,   690,   112,    96,
   339,    47,    47,   376,   541,   488,    96,    46,   385,    47,
   113,   101,    46,   352,   644,   112,   646,    94,    95,    46,
    96,   375,   112,   377,    37,   352,   553,   657,   339,   475,
   512,     2,   359,   788,   789,   790,   112,    37,    76,    37,
   504,    37,   488,    46,    82,    83,    39,    47,    46,    42,
    96,    96,   406,   274,   275,    51,    37,    46,   541,   542,
    47,    46,    96,   327,   547,    46,    51,   101,    17,    82,
    19,    20,   336,   337,    46,    46,    47,    17,   112,    19,
    20,    52,    53,   116,   117,   118,   119,   120,   352,    49,
    39,    40,   465,    42,    43,    44,   542,    46,    96,    39,
    40,    46,    42,    43,    44,    38,    46,    94,    95,    46,
   487,    46,   466,    37,   112,    96,   984,   985,    89,    90,
    39,   475,    16,    42,   606,    44,   480,    46,   112,    46,
   114,   112,    16,   487,   488,    47,    47,   810,   492,   466,
   526,    18,    47,    37,    46,    47,    46,    47,   502,   526,
   504,    96,   506,    37,    73,    47,   127,     1,    82,    96,
    37,    46,    47,   646,     8,   114,    85,   112,    85,   100,
    47,    15,    18,   144,   114,   112,   553,    96,   149,    96,
   213,   152,   153,    47,    96,    96,    36,   541,   542,    94,
    95,   545,   674,   112,    96,   112,    96,    46,    47,    76,
    46,   528,    46,   174,    96,    49,    18,    51,   179,   180,
   112,    96,   112,   184,   185,   186,   187,    47,   557,   558,
    46,    37,    16,   194,   195,   196,   197,   112,    72,    79,
    76,    81,    96,   204,    46,   206,   207,   208,   209,   210,
   504,    85,    52,    37,    47,    47,    46,    96,   469,    18,
   221,    95,    96,    46,    17,    99,    19,    20,    39,    47,
   231,    42,    18,   112,    76,   938,    96,   548,   112,   113,
    96,   115,   116,   117,    46,   948,    39,    40,    47,    42,
    43,    44,    47,    46,    94,    95,   112,   626,    46,   666,
   644,    47,   646,   830,    96,   266,    96,    46,   928,   653,
   784,    47,    51,    96,    47,    46,    18,    76,    96,    47,
    73,    74,   112,    82,    83,   626,   746,    82,    83,   112,
    76,    46,   293,    39,   678,   679,    42,  1000,    44,    47,
    46,   302,   671,    50,   305,    47,    46,   308,    96,   112,
    17,   114,    19,    20,    46,    39,  1019,   830,    42,    39,
    96,   114,    42,   324,   112,    96,   327,    73,    96,   713,
   671,    96,    39,    40,    76,    42,    43,    44,   339,    46,
   389,   112,   391,   392,   393,   394,   395,   396,    96,   398,
   399,   352,   401,   402,   665,     1,    96,   668,   359,    47,
   361,     1,     8,    47,    96,    47,   112,   368,     8,    15,
    51,    39,   112,    18,    42,    15,    44,   114,    46,   786,
   112,   765,    96,    16,    47,    47,   387,   698,     4,    16,
     6,    47,    47,   777,    47,    17,    96,    19,    20,    47,
    46,    46,    47,   810,    37,    73,    46,   114,    96,    49,
    37,    51,    96,   797,    96,   928,   800,    39,    40,   803,
    42,    43,    44,    47,    46,   426,    72,   112,    47,    47,
   115,    76,    72,    96,    96,    47,    18,    82,    83,    85,
    96,    96,   954,    96,   112,    85,   830,    18,    96,    95,
    96,    82,    83,    99,    39,    95,    96,    42,    37,    99,
    47,  1121,    15,    82,    83,   466,   112,   836,    52,   115,
   116,   117,   112,   113,   475,   115,   116,   117,    39,   480,
    47,    42,    47,    44,    96,    46,   487,    47,    73,    47,
    47,   875,   114,    46,    39,   836,    75,    42,    77,    78,
    79,   885,    81,   504,    47,   100,   507,    36,   819,   878,
    94,    95,    73,   897,    94,    95,   900,    47,    38,    72,
   889,   100,   906,    47,    85,    47,    47,   528,    73,    96,
   531,   938,    85,    37,   785,    96,    96,   878,    96,    96,
   101,   948,    95,    96,    39,   914,    99,    42,   889,    47,
    79,   112,    81,    96,   555,    39,   557,   558,    42,   112,
   944,    47,   115,   116,   117,    47,    96,   951,   937,    47,
    86,    87,    96,   914,    96,    96,   960,   961,    47,    86,
    87,   965,   966,   967,   968,    20,   970,    47,    29,    73,
    47,    47,    47,  1000,    37,    47,   937,    75,    96,    77,
    78,    79,    50,    81,    39,    40,    51,    42,    43,    44,
    96,    46,  1019,    84,    96,    47,    47,    47,   987,     8,
   669,   670,   100,    51,    47,   626,    15,    96,     8,  1013,
    79,    20,    81,  1017,  1018,    15,    96,     2,    73,    96,
    96,    96,    47,   644,    96,    39,   987,    50,    42,   712,
    39,    40,   653,    42,    43,    44,    76,    46,   707,   708,
    47,   710,   711,    47,    96,    96,    46,    32,    47,    49,
   671,    51,    75,    96,    77,    78,    79,   112,    81,   114,
    47,    46,    47,    72,    73,    47,    39,    52,    53,    42,
    76,    96,    72,  1004,  1005,    60,    85,   100,  1009,  1010,
  1011,  1012,    67,    57,  1073,    85,    95,    96,    47,    96,
    99,    52,    96,    12,    36,    95,    96,    96,    52,    99,
    79,    80,    81,   112,    89,    90,   115,   116,   117,    96,
    84,    85,   112,   113,    96,   115,   116,   117,    92,    93,
    50,  1052,    96,    97,    98,  1056,  1057,    86,    87,    88,
    89,    90,    91,    94,    95,    94,    95,    79,    96,    81,
    94,    95,   127,    16,    39,  1149,  1150,    42,  1152,  1153,
   135,   136,   137,   138,    37,   140,    16,  1161,   143,   144,
  1164,  1165,  1166,   784,   149,    46,    47,   152,   153,    16,
    51,    39,  1176,    46,    42,    47,   797,    37,    51,   800,
    46,    37,   803,    49,    47,    51,    79,   172,    81,   174,
    37,    51,    75,    47,   179,   180,    79,    80,    81,   184,
   185,   186,   187,    47,    51,   190,    47,   100,    82,   194,
   195,   196,   197,    47,    81,   836,    79,    37,    81,   204,
    50,   206,   207,   208,   209,   210,   270,   271,  1159,  1160,
    50,  1162,  1163,    81,    47,    79,   221,    81,    79,  1170,
    81,    47,  1173,  1174,  1175,    79,   231,    81,    47,     8,
     4,     5,     6,    96,  1185,    75,    15,   878,    47,    79,
    80,    81,   112,    47,   114,   581,    12,   583,   889,    75,
   586,    57,    47,    79,    80,    81,   897,    47,    49,   900,
    79,   266,    81,   599,     9,   906,    75,    46,    81,    96,
    79,    80,    81,   914,    47,    79,    47,    81,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,   293,   294,
    96,    97,    98,    72,    46,    47,   937,   302,    47,    51,
   305,    49,    39,   308,    75,    42,    85,    96,    79,    80,
    81,    47,    47,   112,     1,   114,    95,    96,    47,   324,
    99,     8,   327,    33,   660,   661,    75,    47,    15,   970,
    79,    80,    81,   112,   339,    50,   115,   116,   117,   344,
   345,   346,    47,    79,    47,    81,   987,   352,    37,    77,
    78,    79,    47,    81,   359,   112,   361,   114,    46,    46,
    75,    47,    49,   368,    79,    80,    81,    51,    81,    47,
    75,   376,   100,    47,    79,    80,    81,    12,    47,   715,
     8,   112,   387,   114,   720,    72,   722,    15,   724,    17,
   726,    51,   728,   729,    47,    96,   732,    75,    85,   735,
    20,    79,    80,    81,   740,    47,    96,    47,    95,    96,
    47,    39,    99,    52,    42,    43,    44,    96,    46,    39,
    40,   426,    42,    43,    44,   112,    52,    37,   115,   116,
   117,    47,  1073,    75,    47,    49,    75,    79,    80,    81,
    79,    80,    81,    47,    72,    73,    74,    47,   453,   454,
   455,    47,    47,    47,   459,   460,   461,    85,   463,    82,
   465,   466,    96,   468,  1105,    96,    96,    95,    96,    81,
   475,    99,   808,   809,    75,   480,    46,    47,    79,    80,
    81,    51,   487,    37,   112,    46,   114,   115,   116,   117,
     2,  1132,    50,     8,    46,    50,    46,    47,    47,   504,
    15,    51,   507,    50,    47,    20,    52,    52,   844,    37,
    52,   516,    46,    47,   850,    46,   852,    51,   854,    82,
    47,    47,    47,   528,    39,    40,   531,    42,    43,    44,
    96,    46,    75,    47,    46,    47,    79,    80,    81,    96,
    52,    53,    37,    47,    50,    52,    49,    46,    96,    47,
   555,    47,   557,   558,    15,    47,     8,    72,    73,    47,
    47,    75,    47,    15,    38,    79,    80,    81,    50,    75,
    85,    23,    24,    79,    80,    81,    47,    89,    90,    49,
    95,    96,    47,    46,    99,    46,    52,    47,    47,    47,
    89,    90,    47,    49,    46,    52,    47,   112,    47,   112,
   115,   116,   117,   608,   609,    47,    38,   612,    46,    46,
   615,    72,   112,    46,   619,   127,   621,    47,   623,   112,
    72,   626,    47,    51,    85,   630,    47,    51,   127,    51,
   635,    51,   144,    85,    95,    96,    51,   149,    99,   644,
   152,   153,    51,    95,    96,   144,    47,    99,   653,    47,
   102,   112,    46,   152,   115,   116,   117,    52,    47,    46,
   112,   113,   174,   115,   116,   117,   671,   179,   180,    15,
    47,    47,   184,   185,   186,   187,    57,    50,   112,    47,
   179,   112,   194,   195,   196,   197,    86,    87,    88,    89,
    90,    91,    46,    50,    94,    95,    46,    46,    50,    50,
    46,    46,    75,    84,    85,  1041,    79,    80,    81,   221,
  1046,    92,    93,    94,    95,    96,    97,    98,    51,   231,
    51,    51,   221,    75,    47,    47,    72,    79,    80,    81,
    47,    47,   231,    96,    96,    42,    96,    96,    42,    85,
  1076,    47,    52,    52,    52,  1081,   751,    52,    47,    95,
    96,   756,  1088,    99,   266,    52,   761,    52,     2,    47,
    47,    96,    47,    47,    96,    42,   112,   266,    96,   115,
   116,   117,    96,    47,    47,    47,    47,   782,   115,   784,
    82,   293,  1118,    52,    52,    52,   115,    47,   115,   115,
   302,    47,   797,   305,   293,   800,   308,    47,   803,    47,
    96,    46,    46,    47,    47,    47,   305,    47,    47,    53,
    47,    47,   324,    47,    47,   327,    47,   115,    47,    51,
     0,   115,   115,   115,    51,    51,    51,   339,   327,    47,
    47,   836,    47,    47,   115,    51,    47,     0,    51,    51,
   352,    51,    51,   487,    52,    89,    90,   359,    52,   361,
    52,    52,    52,   352,    52,    52,   368,    52,    52,   553,
   359,   241,   361,   404,   914,   577,   628,   655,   511,   368,
   100,    -1,    -1,   878,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     8,   127,   889,    -1,    -1,    -1,    -1,    15,
    -1,    17,   897,    -1,    -1,   900,    -1,    -1,    -1,    -1,
   144,   906,    -1,    -1,    -1,   149,    -1,    -1,   152,   914,
    -1,    -1,    -1,    39,   426,    -1,    42,    43,    44,    -1,
    46,    -1,    -1,    49,    -1,    51,    -1,   426,    -1,    -1,
    -1,    -1,   937,    -1,    -1,   179,   180,    -1,    -1,    -1,
   184,   185,   186,   187,    -1,    -1,    72,    73,    74,    -1,
   194,   195,   196,   197,   466,    -1,    -1,    -1,    -1,    85,
    -1,    -1,    -1,   475,    -1,   970,    -1,   466,   480,    95,
    96,    -1,    -1,    99,    -1,   487,   475,   221,    -1,    -1,
    -1,   480,   987,    -1,    -1,    -1,   112,   231,   114,   115,
   116,   117,   504,     8,    -1,    -1,    -1,    -1,    -1,    -1,
    15,    -1,    -1,    -1,    -1,   504,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,
    -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,   408,   528,
   410,    46,    -1,   413,    49,    -1,    51,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   293,
    -1,    -1,    -1,    -1,    -1,    -1,     8,    72,   302,    -1,
    -1,   305,    -1,    15,    -1,    17,    -1,    -1,    -1,    -1,
    85,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    95,    96,    -1,   327,    99,    -1,    -1,    39,    -1,    -1,
    42,    43,    44,    -1,    46,   339,    -1,   112,   113,    -1,
   115,   116,   117,    -1,    -1,    -1,    -1,    -1,   352,    -1,
    -1,    -1,    -1,    -1,   626,   359,    -1,   361,    -1,    -1,
    72,    73,    74,    -1,   368,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   644,    85,    -1,    -1,    -1,    -1,   453,   454,
   455,   653,    -1,    95,    96,   644,   461,    99,    -1,    -1,
   102,    -1,    -1,    -1,   653,    -1,    -1,    -1,    -1,   671,
   112,   113,   114,   115,   116,   117,     8,    -1,    -1,    -1,
    -1,    -1,    -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   426,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,
    -1,   581,    -1,   583,    46,    -1,   586,    49,    -1,    51,
    -1,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
    -1,    -1,   466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    72,   475,    -1,    -1,    -1,    -1,   480,    -1,    -1,    -1,
    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,
   504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   112,   113,   784,   115,   116,   117,    -1,    -1,    -1,   659,
   660,   661,    -1,    -1,   528,   797,    -1,    -1,   800,    -1,
    -1,   803,    -1,    -1,   609,    -1,   611,   612,   797,   614,
   615,   800,   617,    -1,   803,   620,    -1,   622,   623,    -1,
   625,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   836,    -1,     8,    -1,    -1,    -1,
    -1,    -1,    -1,    15,    -1,   715,    -1,   717,    -1,    -1,
   720,    -1,   722,    -1,   724,    -1,   726,   727,   728,   729,
    -1,    -1,   732,    -1,    -1,   735,    -1,    -1,    -1,    -1,
   740,    -1,    -1,    -1,    46,    -1,   878,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   889,    -1,    -1,
    -1,    -1,   626,    -1,    -1,   897,    -1,    -1,   900,    -1,
    72,    -1,    -1,    -1,   906,    -1,    -1,    -1,   897,    -1,
   644,   900,   914,    85,    -1,    -1,    -1,   906,    -1,   653,
    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   937,    -1,   671,   808,   809,
   112,    -1,    -1,   115,   116,   117,   751,    -1,   753,   754,
    -1,   756,    -1,   758,   759,    -1,    -1,    -1,   763,   764,
    -1,    -1,    -1,    -1,   769,    -1,   771,   772,   970,    -1,
   775,   776,    -1,    -1,   844,    -1,    -1,    -1,    -1,    -1,
   850,   970,   852,     3,   854,   987,    -1,     7,     8,    -1,
    10,    11,    -1,    -1,    -1,    15,    -1,    17,    -1,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
    30,    31,    32,    -1,    34,    35,    -1,    -1,    -1,    39,
    40,    -1,    42,    43,    44,    -1,    46,    -1,    -1,    49,
    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,
    -1,    61,    -1,    -1,    -1,    21,    22,    23,    24,    -1,
   784,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    35,
   865,    -1,    -1,   797,   869,    85,   800,   872,   873,   803,
    46,    -1,    -1,    49,    -1,    95,    96,    -1,   883,    99,
    -1,   101,   102,   103,   104,   105,   106,   107,    -1,    -1,
    -1,    -1,   112,   113,   114,   115,   116,   117,    -1,    -1,
     8,    -1,   836,    -1,    -1,    -1,    -1,    15,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   101,   102,   103,    -1,   105,
   106,   107,   108,   109,    -1,   111,   112,    -1,    46,    -1,
   945,    -1,    -1,    -1,   878,    -1,    -1,   952,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   889,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   897,    72,    -1,   900,    -1,    -1,    -1,
  1040,  1041,   906,    -1,    -1,  1045,  1046,    85,    -1,    -1,
   914,    -1,    -1,    -1,    -1,   990,    -1,    95,    96,    -1,
   995,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   937,   112,   113,  1076,   115,   116,   117,
    -1,  1081,    -1,    -1,    -1,    -1,    -1,  1087,  1088,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1033,    -1,
  1035,  1036,    -1,  1038,    -1,    -1,   970,    -1,     3,    -1,
    -1,    -1,     7,     8,    -1,    10,    11,    -1,  1118,    -1,
    15,    -1,    17,   987,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    -1,    30,    31,    32,    -1,    34,
    35,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
    -1,    46,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    95,    96,    -1,    -1,    99,    -1,   101,   102,   103,   104,
   105,   106,   107,    -1,    -1,    -1,    -1,   112,   113,   114,
   115,   116,   117,     3,    -1,    -1,    -1,     7,     8,    -1,
    10,    11,    -1,    -1,    -1,    15,    -1,    17,    -1,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
    30,    31,    32,    -1,    34,    35,    -1,    -1,    -1,    39,
    40,    -1,    42,    43,    44,    -1,    46,    -1,    -1,    49,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,
    -1,   101,   102,   103,   104,   105,   106,   107,    -1,    -1,
    -1,    -1,   112,   113,   114,   115,   116,   117,     3,    -1,
    -1,    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,
    -1,    -1,    17,    -1,    19,    20,    21,    22,    -1,    -1,
    25,    26,    27,    28,    -1,    30,    31,    32,    -1,    34,
    35,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
    -1,    46,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    74,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    96,    -1,    -1,    -1,    -1,   101,    -1,   103,   104,
   105,   106,   107,    -1,    -1,    -1,     3,   112,    -1,   114,
     7,     8,    -1,    10,    11,    -1,    -1,    -1,    -1,    -1,
    17,    -1,    19,    20,    21,    22,    -1,    -1,    25,    26,
    27,    28,    -1,    30,    31,    32,    -1,    34,    35,    -1,
    -1,    -1,    39,    40,    -1,    42,    43,    44,     8,    46,
    -1,    -1,    49,    -1,    -1,    15,     8,    17,    -1,    19,
    20,    -1,    -1,    15,    61,    17,    -1,    -1,    -1,    -1,
    -1,    23,    24,    -1,    -1,    72,    73,    74,    -1,    39,
    40,    -1,    42,    43,    44,    -1,    46,    39,    -1,    -1,
    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,    96,
    -1,    -1,    -1,    -1,   101,    -1,   103,   104,   105,   106,
   107,    -1,    72,    73,    74,   112,    -1,   114,    -1,    -1,
    72,    73,    74,    -1,    -1,    85,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    85,    -1,    95,    96,    -1,    -1,    99,
    -1,   101,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,
   102,    -1,   112,    -1,   114,   115,   116,   117,    -1,     8,
   112,   113,   114,   115,   116,   117,    15,    -1,    17,    -1,
    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    39,    -1,    -1,    42,    43,    44,     8,    46,    -1,    -1,
    -1,    -1,    -1,    15,    -1,    17,    -1,    -1,    -1,    -1,
    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    -1,    39,    -1,    -1,
    42,    43,    44,    -1,    46,    -1,    85,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,
    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    73,    74,   112,   113,   114,   115,   116,   117,    -1,
    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    -1,    -1,    95,    96,    -1,    15,    99,    17,    -1,
   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
    39,    -1,    -1,    42,    43,    44,     8,    46,    -1,    -1,
    49,    -1,    51,    15,    -1,    17,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    -1,    39,    -1,    -1,
    42,    43,    44,    -1,    46,    -1,    85,    49,    -1,    51,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    73,    74,   112,   113,   114,   115,   116,   117,    -1,
    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    -1,    -1,    95,    96,    -1,    15,    99,    17,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
    39,    -1,    -1,    42,    43,    44,     8,    46,    -1,    -1,
    49,    -1,    51,    15,    -1,    17,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    72,    73,    74,    -1,    39,    -1,    -1,
    42,    43,    44,    -1,    46,    -1,    85,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     8,    -1,    95,    96,    -1,    -1,
    99,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    73,    74,   112,    -1,   114,   115,   116,   117,    -1,
    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,    42,    43,
    44,     8,    46,    95,    96,    -1,    -1,    99,    15,   101,
    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   112,    -1,   114,   115,   116,   117,    -1,    -1,    72,    73,
    74,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    95,    96,    -1,    -1,    99,    15,   101,    17,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,   112,    -1,
   114,   115,   116,   117,    -1,    -1,    -1,    -1,    85,    -1,
    39,    -1,    -1,    42,    43,    44,     8,    46,    95,    96,
    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,   115,   116,
   117,    -1,    -1,    72,    73,    74,    -1,    39,    -1,    -1,
    42,    43,    44,    -1,    46,    -1,    85,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     8,    -1,    95,    96,    -1,    -1,
    99,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    73,    74,   112,    -1,   114,   115,   116,   117,    -1,
    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,    42,    43,
    44,     8,    46,    95,    96,    -1,    -1,    99,    15,    -1,
    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   112,    -1,   114,   115,   116,   117,    -1,    -1,    72,    73,
    74,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
    -1,    95,    96,    -1,    -1,    99,    15,    -1,    17,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,   112,    -1,
   114,   115,   116,   117,    -1,    -1,    -1,    -1,    85,    -1,
    39,    -1,    -1,    42,    43,    44,     8,    46,    95,    96,
    -1,    -1,    99,    15,    -1,    17,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   112,    -1,   114,   115,   116,
   117,    -1,    -1,    72,    73,    74,    -1,    39,    -1,    -1,
    42,    43,    44,    -1,    46,    -1,    85,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     8,    -1,    95,    96,    -1,    -1,
    99,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,
    72,    73,    74,   112,    -1,   114,   115,   116,   117,    -1,
    -1,    -1,    -1,    85,    -1,    39,    -1,    -1,    42,    43,
    44,     8,    46,    95,    96,    -1,    -1,    99,    15,    -1,
    17,    -1,    -1,    -1,    -1,    -1,    -1,    15,    -1,    -1,
   112,    -1,   114,   115,   116,   117,    -1,    -1,    72,    73,
    74,    -1,    39,    -1,    -1,    42,    43,    44,     8,    46,
    -1,    85,    -1,    -1,    -1,    15,    -1,    -1,    46,    -1,
    -1,    95,    96,    23,    24,    99,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    72,    73,    74,   112,    -1,
   114,   115,   116,   117,    72,    -1,    46,    -1,    85,    -1,
    15,    -1,    -1,    -1,    -1,    -1,    -1,    85,    95,    96,
    -1,    -1,    99,    -1,    -1,    -1,    -1,    95,    96,    -1,
    -1,    99,    72,    -1,    -1,   112,    -1,   114,   115,   116,
   117,    46,    -1,    15,   112,    85,    -1,   115,   116,   117,
    -1,    15,    -1,    -1,    -1,    95,    96,    -1,    15,    99,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,
    -1,    -1,   112,   113,    46,   115,   116,   117,    -1,    -1,
    85,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    46,
    95,    96,    -1,    -1,    99,    -1,    -1,    -1,    -1,    15,
    72,    -1,    -1,    -1,    -1,    15,    -1,   112,    72,    -1,
   115,   116,   117,    85,    -1,    72,    -1,    -1,    -1,    -1,
    -1,    85,    -1,    95,    96,    -1,    -1,    99,    85,    -1,
    46,    95,    96,    15,    -1,    99,    46,    -1,    95,    96,
   112,    15,    99,   115,   116,   117,    -1,    -1,   112,    -1,
    -1,   115,   116,   117,    -1,   112,    72,    -1,   115,   116,
   117,    -1,    72,    -1,    46,    -1,    15,    -1,    -1,    85,
    -1,    -1,    46,    -1,    -1,    85,    -1,    -1,    -1,    95,
    96,    -1,    -1,    99,    -1,    95,    96,    -1,    -1,    99,
    72,    -1,    -1,    -1,    -1,    15,   112,    46,    72,   115,
   116,   117,   112,    85,    -1,   115,   116,   117,    -1,    -1,
    -1,    85,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,
    15,    95,    96,    72,    -1,    99,    46,    -1,    15,    -1,
   112,    -1,    -1,   115,   116,   117,    85,    -1,   112,    -1,
    -1,   115,   116,   117,    -1,    -1,    95,    96,    -1,    -1,
    99,    46,    72,    15,    -1,    -1,    -1,    -1,    -1,    46,
    -1,    -1,    15,   112,    -1,    85,   115,   116,   117,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    96,    72,    -1,    99,
    -1,    -1,    -1,    -1,    46,    72,    -1,    15,    -1,    -1,
    85,    -1,   112,    46,    -1,   115,   116,   117,    85,    -1,
    95,    96,    -1,    -1,    99,    -1,    -1,    -1,    95,    96,
    72,    -1,    99,    -1,    -1,    -1,    -1,   112,    46,    72,
   115,   116,   117,    85,    -1,   112,    -1,    -1,   115,   116,
   117,    -1,    85,    95,    96,    -1,    -1,    99,    -1,    -1,
    -1,    -1,    95,    96,    72,    -1,    99,    -1,    -1,    -1,
   112,    -1,    -1,   115,   116,   117,    -1,    85,    -1,   112,
    -1,    -1,   115,   116,   117,    -1,    -1,    95,    96,    -1,
    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   112,    -1,    -1,   115,   116,   117
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 147 "msv.y"
{
			
			//验证需要的语句
			g_propositionTree=yyvsp[-1].tnode;
			g_proptree=new CSyntaxTree(g_propositionTree);    
			
			
			
			//$2是类中定义的方法，将其加入function_tree中，实质是合并两个链
			//Annotation-Class   2013-5-6 add by YY[fixed]
			/*---------------------------------------------------------------------
			SyntaxTree  temp;
			temp = $2;
			if (temp!=NULL)
			{
					while(temp->GetChild2()!=NULL){ temp=temp->GetChild2(); };
					temp->SetChild2(function_tree);
					function_tree = $2;
			}
			---------------------------------------------------------------------*/

			
			//执行的基本语句
			g_syntaxTree=yyvsp[0].tnode;
			g_tree=new CSyntaxTree(g_syntaxTree);          //2013-5-3 add by YY[fixed]
          
		;
    break;}
case 2:
#line 177 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 3:
#line 178 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 4:
#line 182 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 5:
#line 183 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 6:
#line 184 "msv.y"
{yyval.tnode=new CSyntaxNode(IFF_STA, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 7:
#line 185 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 8:
#line 187 "msv.y"
{
			if(yyvsp[-2].tnode==NULL)                            yyval.tnode=yyvsp[0].tnode;
			else                                    yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);       
	   ;
    break;}
case 9:
#line 191 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 10:
#line 192 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 11:
#line 193 "msv.y"
{yyval.tnode=new CSyntaxNode(SOMETIMES_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 12:
#line 194 "msv.y"
{yyval.tnode=new CSyntaxNode(W_NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 13:
#line 195 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 14:
#line 196 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 15:
#line 197 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 16:
#line 198 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 17:
#line 199 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 18:
#line 204 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 19:
#line 205 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 20:
#line 206 "msv.y"
{yyval.tnode=new CSyntaxNode(HALT_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 21:
#line 207 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 22:
#line 208 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 23:
#line 210 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);                         
	   ;
    break;}
case 24:
#line 213 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);
    break;}
case 25:
#line 215 "msv.y"
{
			yyval.tnode=NULL;
			propositionDefineTree=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-2].cString, yyvsp[0].tnode, propositionDefineTree, NULL, VOIDTYPE);			
	   ;
    break;}
case 26:
#line 219 "msv.y"
{yyval.tnode=new CSyntaxNode(CHOPSTAR_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 27:
#line 220 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 28:
#line 225 "msv.y"
{
			yyval.tnode = new CSyntaxNode(PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);                      //$$ = new CSyntaxNode(PROJECTION_STA, "", 0, $2, $3);
	   ;
    break;}
case 29:
#line 228 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 30:
#line 233 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 31:
#line 235 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 32:
#line 243 "msv.y"
{
			//结构体(struct)定义 暂时规定struct只能在最开始定义
			
			// 两个都是struct定义语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
			    if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Structs have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild1(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			// 第一个是struct定义语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==STRUCT_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA )
			{
				struct_tree=yyvsp[-2].tnode;
				yyval.tnode=yyvsp[0].tnode;
			}
			// 第一个是执行语句，第二个是struct定义语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA  && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==STRUCT_DEFINE_STA)
			{
				        if(NULL==struct_tree) 
						{
							struct_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(struct_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Structs have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = struct_tree;
								while(p->GetChild1()!=NULL)
								p=p->GetChild1();
								p->SetChild1(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}					
			}
			
			//两个都是函数声明语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA )
			{
				if(yyvsp[-2].tnode->FindSameName(yyvsp[0].tnode->GetNName()) )
					{  yyerror("Functions or predicates have the same name");
					   yyval.tnode=yyvsp[-2].tnode;
					}
				else 
				    {
					  yyvsp[0].tnode->SetChild2(yyvsp[-2].tnode);
					  yyval.tnode=yyvsp[0].tnode;
					}
			}
			//第一个是函数声明语句，第二个是执行语句
			if(NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()==FUNCTION_DEFINE_STA && NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA)
			{
				function_tree=yyvsp[-2].tnode;
                yyval.tnode=yyvsp[0].tnode;
			}

			//两个都是执行语句
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA && 
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()!=FUNCTION_DEFINE_STA &&  yyvsp[0].tnode->GetNType()!=STRUCT_DEFINE_STA)
			{
				yyval.tnode=new CSyntaxNode(CHOP_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
			}

			//第一个是执行语句，第二个是声明语句  
			//problem: 整个程序的第一句必须是声明语句才可以    
			if( NULL!=yyvsp[-2].tnode && yyvsp[-2].tnode->GetNType()!=FUNCTION_DEFINE_STA   &&  yyvsp[-2].tnode->GetNType()!=STRUCT_DEFINE_STA &&
			    NULL!=yyvsp[0].tnode && yyvsp[0].tnode->GetNType()==FUNCTION_DEFINE_STA)
				{
				        if(NULL==function_tree) 
						{
							function_tree=yyvsp[0].tnode;
						}
					    else 
						{
							if(function_tree->FindSameName(yyvsp[0].tnode->GetNName()))
							{  
									yyerror("Functions or predicates have the same name"); 
								    yyval.tnode=yyvsp[-2].tnode;  
							}
							else
							{
								CSyntaxNode* p = function_tree;
								while(p->GetChild2()!=NULL)
								p=p->GetChild2();
								p->SetChild2(yyvsp[0].tnode);
								yyval.tnode=yyvsp[-2].tnode;
							}
						}
					
				}								
	   ;
    break;}
case 33:
#line 348 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 34:
#line 349 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 35:
#line 351 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 36:
#line 352 "msv.y"
{yyval.tnode=new CSyntaxNode(RETURN_STA, yyvsp[0].cString,NULL,VOIDTYPE);;
    break;}
case 37:
#line 353 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 38:
#line 354 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 39:
#line 355 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 40:
#line 356 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 41:
#line 357 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 42:
#line 359 "msv.y"
{yyval.tnode=new CSyntaxNode(KEEP_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 43:
#line 360 "msv.y"
{yyval.tnode=new CSyntaxNode(ALWAYS_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 44:
#line 362 "msv.y"
{yyval.tnode=new CSyntaxNode(AWAIT_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 45:
#line 363 "msv.y"
{yyval.tnode=new CSyntaxNode(REPEAT_UNTIL_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 46:
#line 364 "msv.y"
{yyval.tnode=new CSyntaxNode(SKIP_STA, VOIDTYPE);;
    break;}
case 47:
#line 365 "msv.y"
{yyval.tnode=new CSyntaxNode(EMPTY_EXP, VOIDTYPE);;
    break;}
case 48:
#line 366 "msv.y"
{yyval.tnode=new CSyntaxNode(MORE_STA, VOIDTYPE);;
    break;}
case 49:
#line 367 "msv.y"
{yyval.tnode=new CSyntaxNode(LENGTH_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 50:
#line 373 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 51:
#line 374 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 52:
#line 375 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, VOIDTYPE);;
    break;}
case 53:
#line 376 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, VOIDTYPE);;
    break;}
case 54:
#line 377 "msv.y"
{yyval.tnode=new CSyntaxNode(FINAL_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 55:
#line 378 "msv.y"
{yyval.tnode=new CSyntaxNode(PARALLEL_STA, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 56:
#line 381 "msv.y"
{yyval.tnode=new CSyntaxNode(IMPLY_STA, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 57:
#line 384 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FRAME_STA, yyvsp[-6].tnode, yyvsp[-5].tnode, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 58:
#line 390 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-4].tnode, yyvsp[-3].tnode, yyvsp[0].tnode,VOIDTYPE);
	   ;
    break;}
case 59:
#line 394 "msv.y"
{
			yyval.tnode=new CSyntaxNode(PROJECTION_STA, yyvsp[-3].tnode, NULL, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
case 60:
#line 403 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA , yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 62:
#line 428 "msv.y"
{
            yyval.tnode=new CSyntaxNode(FREE_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 63:
#line 432 "msv.y"
{
	        yyval.tnode=new CSyntaxNode(SYSTEM_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
case 65:
#line 437 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 66:
#line 440 "msv.y"
=======
case 61:
#line 412 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, yyvsp[-7].returntype);
	   ;
    break;}
case 62:
#line 416 "msv.y"
{ 
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);
	   ;
    break;}
case 64:
#line 420 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 65:
#line 423 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			CSyntaxNode * p;
//			$6->par_change($2->m_NodeName, LOCAL_IDENT_EXP);
			p=yyvsp[-4].tnode;

			while(p!=NULL)
			{
//				$6->par_change(p->GetChild0()->GetNName(), LOCAL_IDENT_EXP);
				p=p->GetChild0();
			}

			yyval.tnode=new CSyntaxNode(EXIST_STA, yyvsp[-5].tnode, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 67:
#line 453 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 68:
#line 458 "msv.y"
=======
case 66:
#line 436 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 67:
#line 441 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      yyval.tnode=yyvsp[0].tnode;
		;
    break;}
<<<<<<< HEAD
case 69:
#line 462 "msv.y"
=======
case 68:
#line 445 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
		   yyval.tnode=new CSyntaxNode(AND_EXP,yyvsp[-2].tnode,yyvsp[0].tnode,VOIDTYPE);
		;
    break;}
<<<<<<< HEAD
case 70:
#line 468 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 71:
#line 469 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 72:
#line 475 "msv.y"
{
			yyval.tnode=new CSyntaxNode(FUNCTION_DEFINE_STA, yyvsp[-6].cString, yyvsp[-4].tnode, yyvsp[-1].tnode, NULL, yyvsp[-7].returntype);
	   ;
    break;}
case 73:
#line 492 "msv.y"
=======
case 69:
#line 451 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 70:
#line 452 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 71:
#line 458 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
<<<<<<< HEAD
case 74:
#line 497 "msv.y"
=======
case 72:
#line 463 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        // 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(EXT_FUNCTION_STA, yyvsp[-3].cString, yyvsp[-1].tnode, NULL, NULL, VOIDTYPE);//构造调用函数的程序语法树子树          
	   ;
    break;}
<<<<<<< HEAD
case 75:
#line 502 "msv.y"
=======
case 73:
#line 468 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        //Annotate by YY 2013/11/20 暂时不考虑带成员函数 .的函数调用
			yyval.tnode=new CSyntaxNode(FUNCTION_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, NULL, FUNCPTYPE);//通过函数指针数组调用函数
	   ;
    break;}
<<<<<<< HEAD
case 76:
#line 506 "msv.y"
{ yyval.tnode=yyvsp[0].tnode; ;
    break;}
case 77:
#line 507 "msv.y"
{ yyval.tnode=yyvsp[0].tnode; ;
    break;}
case 78:
#line 513 "msv.y"
=======
case 74:
#line 477 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
           CSyntaxNode* temp=yyvsp[-3].tnode;
		   string structName=temp->GetNName();
           yyval.tnode=new CSyntaxNode(STRUCT_DEFINE_STA, structName, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 79:
#line 521 "msv.y"
=======
case 75:
#line 485 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of struct");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
<<<<<<< HEAD
case 80:
#line 532 "msv.y"
=======
case 76:
#line 496 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	       if(!g_StructNameMap.insert(yyvsp[0].cString))
			{
			    yyerror("Redefinition of union");
			}
			else
			{
			    yyval.tnode=new CSyntaxNode(STRUCT_NAME, yyvsp[0].cString, STRUCT_NAME_TYPE);
			}
	   ;
    break;}
<<<<<<< HEAD
case 81:
#line 545 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 82:
#line 546 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 83:
#line 547 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 84:
#line 552 "msv.y"
=======
case 77:
#line 509 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 78:
#line 510 "msv.y"
{yyval.tnode=new CSyntaxNode(UNSIGN_DECLARATION_STA, yyvsp[0].tnode, VOIDTYPE); ;
    break;}
case 79:
#line 511 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 80:
#line 516 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[0].tnode, yyvsp[-1].returntype);
		;
    break;}
<<<<<<< HEAD
case 85:
#line 556 "msv.y"
=======
case 81:
#line 520 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
		;
    break;}
<<<<<<< HEAD
case 86:
#line 560 "msv.y"
=======
case 82:
#line 524 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 87:
#line 564 "msv.y"
=======
case 83:
#line 528 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 88:
#line 568 "msv.y"
=======
case 84:
#line 532 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 89:
#line 572 "msv.y"
=======
case 85:
#line 536 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	     yyval.tnode=new CSyntaxNode(DECLARE_STA,yyvsp[-1].cString,yyvsp[0].tnode,STRUCTTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 90:
#line 578 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 91:
#line 580 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 92:
#line 583 "msv.y"
=======
case 86:
#line 542 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPTYPE);;
    break;}
case 87:
#line 544 "msv.y"
{yyval.tnode=new CSyntaxNode(DECLARE_STA, yyvsp[-4].tnode, FUNCPPTYPE);;
    break;}
case 88:
#line 547 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	       CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-8].cString, yyvsp[-6].tnode, yyvsp[-5].tnode, NULL, LISTTYPE), VOIDTYPE);
	       yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 93:
#line 588 "msv.y"
=======
case 89:
#line 552 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	       CSyntaxNode *pChild0_Child0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-10].cString, yyvsp[-8].tnode, yyvsp[-7].tnode, NULL, LISTTYPE);
		   CSyntaxNode *pChild0=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0_Child0, yyvsp[0].tnode, VOIDTYPE), VOIDTYPE);
		   yyval.tnode=new CSyntaxNode(DECLARE_STA, pChild0, FUNCPTYPE);
		   pChild0=NULL;
		   pChild0_Child0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 94:
#line 599 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 95:
#line 600 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 96:
#line 601 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 97:
#line 604 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 98:
#line 605 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 99:
#line 606 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 100:
#line 614 "msv.y"
=======
case 90:
#line 563 "msv.y"
{yyval.returntype=INTTYPE;;
    break;}
case 91:
#line 564 "msv.y"
{yyval.returntype=FLOATTYPE;;
    break;}
case 92:
#line 565 "msv.y"
{yyval.returntype=CHARTYPE;;
    break;}
case 93:
#line 568 "msv.y"
{yyval.returntype=STRTYPE;;
    break;}
case 94:
#line 569 "msv.y"
{yyval.returntype=VOIDTYPE;;
    break;}
case 95:
#line 570 "msv.y"
{yyval.returntype=FILETYPE;;
    break;}
case 96:
#line 578 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
<<<<<<< HEAD
case 101:
#line 618 "msv.y"
=======
case 97:
#line 582 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	       yyval.tnode=new CSyntaxNode(PARAMETER_EXP,new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
<<<<<<< HEAD
case 102:
#line 622 "msv.y"
=======
case 98:
#line 586 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
<<<<<<< HEAD
case 103:
#line 627 "msv.y"
=======
case 99:
#line 591 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
<<<<<<< HEAD
case 104:
#line 633 "msv.y"
=======
case 100:
#line 597 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, new CSyntaxNode(ARRAY_DECLARE_NULL_STA, yyvsp[-4].cString, NULL, NULL, NULL, LISTTYPE), yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
<<<<<<< HEAD
case 105:
#line 638 "msv.y"
=======
case 101:
#line 602 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	    ;
    break;}
<<<<<<< HEAD
case 106:
#line 645 "msv.y"
=======
case 102:
#line 609 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	       CSyntaxNode *pChild0=new CSyntaxNode(ARRAY_DECLARE_STA, yyvsp[-7].cString, yyvsp[-5].tnode, yyvsp[-4].tnode, NULL, LISTTYPE);
		   yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(ASS_EQU_EXP, pChild0, yyvsp[-1].tnode, VOIDTYPE), yyvsp[0].tnode, VOIDTYPE);
		   pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 107:
#line 651 "msv.y"
=======
case 103:
#line 615 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      CSyntaxNode* pChild0=new CSyntaxNode(ADDRESS_DECLARE_STA,yyvsp[0].tnode->GetChild0(),VOIDTYPE);
          yyval.tnode=yyvsp[0].tnode;
		  yyvsp[0].tnode->SetChild0(pChild0);
		  pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 108:
#line 662 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 109:
#line 663 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 110:
#line 664 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 111:
#line 669 "msv.y"
=======
case 104:
#line 626 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 105:
#line 627 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 106:
#line 628 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 107:
#line 633 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 112:
#line 676 "msv.y"
=======
case 108:
#line 640 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, new CSyntaxNode(LIST_DECLARE_STA, yyvsp[-5].cString, yyvsp[-3].tnode, yyvsp[-2].tnode, NULL, LISTTYPE), yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 113:
#line 679 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 114:
#line 680 "msv.y"
=======
case 109:
#line 643 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 110:
#line 644 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{yyval.tnode=NULL;;
    break;}
case 111:
#line 653 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 112:
#line 656 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 113:
#line 657 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 114:
#line 658 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 115:
<<<<<<< HEAD
#line 688 "msv.y"
{yyval.tnode=new CSyntaxNode(FOPEN_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 116:
#line 690 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETS_EXP,yyvsp[-5].tnode,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 117:
#line 692 "msv.y"
{yyval.tnode=new CSyntaxNode(FGETC_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 118:
#line 694 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTS_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 119:
#line 696 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 120:
#line 698 "msv.y"
{yyval.tnode=new CSyntaxNode(FPUTC_EXP,yyvsp[-3].tnode,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 121:
#line 700 "msv.y"
{yyval.tnode=new CSyntaxNode(FCLOSE_EXP,yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 122:
#line 712 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 123:
#line 715 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 124:
#line 716 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 125:
#line 717 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 126:
#line 718 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 127:
#line 719 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 128:
#line 720 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 129:
#line 721 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 130:
#line 725 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 131:
#line 727 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 132:
#line 729 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 133:
#line 731 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 134:
#line 733 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 135:
#line 735 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 136:
#line 737 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 137:
#line 739 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 138:
#line 741 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 139:
#line 743 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 140:
#line 745 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 141:
#line 747 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 142:
#line 749 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 143:
#line 753 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 144:
#line 754 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 145:
#line 757 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 146:
#line 758 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 147:
#line 759 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 148:
#line 763 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 149:
#line 764 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 150:
#line 765 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 151:
#line 768 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 152:
#line 772 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 153:
#line 778 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 154:
#line 780 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 155:
#line 782 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 156:
#line 784 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 157:
#line 786 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 158:
#line 787 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 159:
#line 792 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 160:
#line 793 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 161:
#line 794 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 162:
#line 800 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 163:
#line 801 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 164:
#line 803 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 165:
#line 805 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 166:
#line 807 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 167:
#line 809 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 168:
#line 810 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 169:
#line 816 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 170:
#line 817 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 171:
#line 819 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 172:
#line 821 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 173:
#line 826 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 827 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 175:
#line 831 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 832 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 177:
#line 836 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 178:
#line 837 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 179:
#line 842 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 843 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 181:
#line 844 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 182:
#line 845 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 183:
#line 846 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 184:
#line 848 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 185:
#line 849 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 186:
#line 850 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 187:
#line 851 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 188:
#line 852 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 189:
#line 853 "msv.y"
{yyval.tnode=yyvsp[0].tnode;
    break;}
case 190:
#line 854 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 191:
#line 855 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 192:
#line 856 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 193:
#line 857 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 194:
#line 858 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 195:
#line 864 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 196:
#line 865 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 197:
#line 866 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 198:
#line 867 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 199:
#line 868 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 200:
#line 869 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 201:
#line 870 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 202:
#line 871 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 203:
#line 874 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 204:
#line 875 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 205:
#line 879 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 206:
#line 880 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 207:
#line 881 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 208:
#line 882 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 209:
#line 889 "msv.y"
=======
#line 659 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 116:
#line 660 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 117:
#line 661 "msv.y"
{yyval.tnode=new CSyntaxNode(NEXT_STA, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 118:
#line 662 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 119:
#line 666 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 120:
#line 668 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 121:
#line 670 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 122:
#line 672 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-5].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, FLOATTYPE);;
    break;}
case 123:
#line 674 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 124:
#line 676 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 125:
#line 678 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, CHARTYPE);;
    break;}
case 126:
#line 680 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 127:
#line 682 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 128:
#line 684 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, UCHARTYPE);;
    break;}
case 129:
#line 686 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 130:
#line 688 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 131:
#line 690 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR_LIST, yyvsp[-6].nInteger, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, INTTYPE);;
    break;}
case 132:
#line 694 "msv.y"
{yyval.nodetype=ASS_EQU_EXP;;
    break;}
case 133:
#line 695 "msv.y"
{yyval.nodetype=UNITASSIGN_EXP;;
    break;}
case 134:
#line 698 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 135:
#line 699 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 136:
#line 700 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 137:
#line 703 "msv.y"
{yyval.tnode=new CSyntaxNode(DLL_CALL_STA, yyvsp[-8].tnode, yyvsp[0].tnode, yyvsp[-5].returntype);;
    break;}
case 138:
#line 704 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 139:
#line 705 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 140:
#line 708 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 141:
#line 712 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-4].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 142:
#line 718 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 143:
#line 720 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 144:
#line 722 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 145:
#line 724 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 146:
#line 726 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SYMBOL_STA, yyvsp[-5].cString, yyvsp[-2].tnode, yyvsp[-1].tnode, NULL, VOIDTYPE);;
    break;}
case 147:
#line 727 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 148:
#line 732 "msv.y"
{yyval.tnode=new CSyntaxNode(LIST_SUBSCRIPT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 149:
#line 733 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 150:
#line 734 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 151:
#line 740 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 152:
#line 741 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 153:
#line 743 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[0].tnode,  UNKNOWNTYPE);;
    break;}
case 154:
#line 745 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_LIST_EXP, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 155:
#line 747 "msv.y"
{yyval.tnode=new CSyntaxNode(ADDR_VAR, yyvsp[0].tnode, yyvsp[-3].returntype);;
    break;}
case 156:
#line 749 "msv.y"
{yyval.tnode=new CSyntaxNode(VALUE_EXP, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 157:
#line 750 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 158:
#line 756 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 159:
#line 757 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 160:
#line 759 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 161:
#line 761 "msv.y"
{
            yyval.tnode = new CSyntaxNode(IF_ELSE_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, ARITHMETICTYPE);
       ;
    break;}
case 162:
#line 766 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 163:
#line 767 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 164:
#line 771 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 165:
#line 772 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 166:
#line 776 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 167:
#line 777 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 168:
#line 781 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 169:
#line 782 "msv.y"
{yyval.tnode=new CSyntaxNode(MINUS_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 170:
#line 783 "msv.y"
{yyval.tnode=new CSyntaxNode(BNE_EXP, yyvsp[0].tnode, ARITHMETICTYPE);;
    break;}
case 171:
#line 784 "msv.y"
{yyval.tnode=new CSyntaxNode(NULL_EXP, VOIDTYPE);;
    break;}
case 172:
#line 785 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 173:
#line 787 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 174:
#line 788 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 175:
#line 789 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 176:
#line 790 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 177:
#line 791 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 178:
#line 792 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 179:
#line 793 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 180:
#line 794 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 181:
#line 795 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 182:
#line 798 "msv.y"
{yyval.nodetype=MUL_EXP;;
    break;}
case 183:
#line 799 "msv.y"
{yyval.nodetype=DIV_EXP;;
    break;}
case 184:
#line 800 "msv.y"
{yyval.nodetype=MOD_EXP;;
    break;}
case 185:
#line 801 "msv.y"
{yyval.nodetype=LST_EXP;;
    break;}
case 186:
#line 802 "msv.y"
{yyval.nodetype=RST_EXP;;
    break;}
case 187:
#line 803 "msv.y"
{yyval.nodetype=BAN_EXP;;
    break;}
case 188:
#line 804 "msv.y"
{yyval.nodetype=BOR_EXP;;
    break;}
case 189:
#line 805 "msv.y"
{yyval.nodetype=XOR_EXP;;
    break;}
case 190:
#line 808 "msv.y"
{yyval.nodetype=ADD_EXP;;
    break;}
case 191:
#line 809 "msv.y"
{yyval.nodetype=SUB_EXP;;
    break;}
case 192:
#line 813 "msv.y"
{yyval.tnode=new CSyntaxNode(CON_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, LISTTYPE);;
    break;}
case 193:
#line 814 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 194:
#line 815 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 195:
#line 816 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 196:
#line 823 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
<<<<<<< HEAD
case 210:
#line 893 "msv.y"
=======
case 197:
#line 827 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 211:
#line 901 "msv.y"
=======
case 198:
#line 835 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 212:
#line 913 "msv.y"
=======
case 199:
#line 847 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
		;
    break;}
<<<<<<< HEAD
case 213:
#line 917 "msv.y"
=======
case 200:
#line 851 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 214:
#line 926 "msv.y"
=======
case 201:
#line 860 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(STRUCT_LIST_ASSVALUE_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, LISTTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 215:
#line 938 "msv.y"
=======
case 202:
#line 872 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);//INTEGER_EXP Jane
	   ;
    break;}
<<<<<<< HEAD
case 216:
#line 942 "msv.y"
=======
case 203:
#line 876 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 217:
#line 950 "msv.y"
=======
case 204:
#line 884 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(LIST_ASSVALUE_STA, yyvsp[-1].tnode, yyvsp[0].tnode, LISTTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 218:
#line 953 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 219:
#line 954 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 220:
#line 959 "msv.y"
=======
case 205:
#line 887 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 206:
#line 888 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 207:
#line 893 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
<<<<<<< HEAD
case 221:
#line 963 "msv.y"
=======
case 208:
#line 897 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
<<<<<<< HEAD
case 222:
#line 967 "msv.y"
=======
case 209:
#line 901 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE );
			;
    break;}
<<<<<<< HEAD
case 223:
#line 972 "msv.y"
=======
case 210:
#line 906 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			   yyval.tnode=new CSyntaxNode(ADDRESS_EXP, yyvsp[0].tnode, VOIDTYPE);
			;
    break;}
<<<<<<< HEAD
case 224:
#line 975 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 225:
#line 984 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 226:
#line 985 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 227:
#line 986 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 228:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 229:
#line 990 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 230:
#line 993 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 231:
#line 994 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 232:
#line 997 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 233:
#line 998 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 234:
#line 999 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 235:
#line 1000 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 236:
#line 1001 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 237:
#line 1002 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 238:
#line 1005 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 239:
#line 1006 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 240:
#line 1007 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 241:
#line 1008 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 242:
#line 1009 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 243:
#line 1010 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 244:
#line 1012 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 245:
#line 1013 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 246:
#line 1015 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 247:
#line 1016 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 248:
#line 1018 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 249:
#line 1019 "msv.y"
{yyval.tnode=new CSyntaxNode(MALLOC_STA, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 250:
#line 1024 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 251:
#line 1025 "msv.y"
{yyval.returntype=INTPTYPE;;
    break;}
case 252:
#line 1026 "msv.y"
{yyval.returntype=FLOATPTYPE;;
    break;}
case 253:
#line 1027 "msv.y"
{yyval.returntype=CHARPTYPE;;
    break;}
case 254:
#line 1028 "msv.y"
{yyval.returntype=UINTPTYPE;;
    break;}
case 255:
#line 1029 "msv.y"
{yyval.returntype=UCHARPTYPE;;
    break;}
case 256:
#line 1030 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 257:
#line 1031 "msv.y"
{yyval.returntype=STRUCTPTYPE;;
    break;}
case 258:
#line 1036 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, VOIDTYPE);;
    break;}
case 259:
#line 1037 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].returntype);;
    break;}
case 260:
#line 1038 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].cString, STRUCTTYPE);;
    break;}
case 261:
#line 1039 "msv.y"
{yyval.tnode=new CSyntaxNode(SIZEOF_EXP, yyvsp[-1].tnode, STRTYPE);;
    break;}
case 262:
#line 1045 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 263:
#line 1046 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 264:
#line 1047 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 265:
#line 1048 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 266:
#line 1049 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 267:
#line 1050 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 268:
#line 1055 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCHEAD_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 269:
#line 1062 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCTAIL_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 270:
#line 1069 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCAT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 271:
#line 1076 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCMP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 272:
#line 1083 "msv.y"
{
					   yyval.tnode=new CSyntaxNode(STRFUNCCPY_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 273:
#line 1090 "msv.y"
{
						yyval.tnode=new CSyntaxNode(STRFUNCLEN_EXP, yyvsp[-1].tnode, STRTYPE);
					;
    break;}
case 274:
#line 1096 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 275:
#line 1097 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 276:
#line 1098 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 277:
#line 1099 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 278:
#line 1100 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 279:
#line 1101 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 280:
#line 1108 "msv.y"
{yyval.tnode=new CSyntaxNode(ROUND_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 281:
#line 1111 "msv.y"
{yyval.tnode=new CSyntaxNode(CEIL_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 282:
#line 1114 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOOR_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 283:
#line 1117 "msv.y"
{yyval.tnode=new CSyntaxNode(SIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 284:
#line 1118 "msv.y"
{yyval.tnode=new CSyntaxNode(COS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 285:
#line 1119 "msv.y"
{yyval.tnode=new CSyntaxNode(TAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 286:
#line 1120 "msv.y"
{yyval.tnode=new CSyntaxNode(ASIN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 287:
#line 1121 "msv.y"
{yyval.tnode=new CSyntaxNode(ACOS_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 288:
#line 1122 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 289:
#line 1125 "msv.y"
{yyval.tnode=new CSyntaxNode(SINH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 290:
#line 1126 "msv.y"
{yyval.tnode=new CSyntaxNode(COSH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 291:
#line 1127 "msv.y"
{yyval.tnode=new CSyntaxNode(TANH_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 292:
#line 1130 "msv.y"
{yyval.tnode=new CSyntaxNode(EXP_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 293:
#line 1131 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 294:
#line 1132 "msv.y"
{yyval.tnode=new CSyntaxNode(LOG10_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 295:
#line 1133 "msv.y"
{yyval.tnode=new CSyntaxNode(SQRT_EXP, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 296:
#line 1136 "msv.y"
{yyval.tnode=new CSyntaxNode(ATAN2_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 297:
#line 1137 "msv.y"
{yyval.tnode=new CSyntaxNode(POW_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 298:
#line 1140 "msv.y"
{yyval.tnode=new CSyntaxNode(FMOD_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 299:
#line 1141 "msv.y"
{yyval.tnode=new CSyntaxNode(MODF_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 300:
#line 1144 "msv.y"
{yyval.tnode=new CSyntaxNode(LDEXP_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, FLOATTYPE);;
    break;}
case 301:
#line 1146 "msv.y"
{yyval.tnode=new CSyntaxNode(ABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 302:
#line 1147 "msv.y"
{yyval.tnode=new CSyntaxNode(FABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 303:
#line 1148 "msv.y"
{yyval.tnode=new CSyntaxNode(LABS_EXP, yyvsp[0].tnode, INTTYPE);;
    break;}
case 304:
#line 1154 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 305:
#line 1155 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 306:
#line 1156 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 307:
#line 1157 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 308:
#line 1158 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 309:
#line 1164 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 310:
#line 1166 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 311:
#line 1167 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 312:
#line 1170 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 313:
#line 1173 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 314:
#line 1174 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 315:
#line 1177 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 316:
#line 1178 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 317:
#line 1181 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 318:
#line 1182 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 319:
#line 1185 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 320:
#line 1186 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 321:
#line 1189 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 322:
#line 1190 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 323:
#line 1195 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 324:
#line 1196 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 325:
#line 1197 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 326:
#line 1198 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 327:
#line 1199 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 328:
#line 1200 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 329:
#line 1208 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 330:
#line 1209 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 331:
#line 1213 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 332:
#line 1214 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 333:
#line 1221 "msv.y"
=======
case 211:
#line 909 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 212:
#line 918 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 213:
#line 919 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATTYPE);;
    break;}
case 214:
#line 920 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 215:
#line 923 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTTYPE);;
    break;}
case 216:
#line 924 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARTYPE);;
    break;}
case 217:
#line 927 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTTYPE);;
    break;}
case 218:
#line 928 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARTYPE);;
    break;}
case 219:
#line 931 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, INTPTYPE);;
    break;}
case 220:
#line 932 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UINTPTYPE);;
    break;}
case 221:
#line 933 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, FLOATPTYPE);;
    break;}
case 222:
#line 934 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, CHARPTYPE);;
    break;}
case 223:
#line 935 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, UCHARPTYPE);;
    break;}
case 224:
#line 936 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 225:
#line 939 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEINTPTYPE);;
    break;}
case 226:
#line 940 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUINTPTYPE);;
    break;}
case 227:
#line 941 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEFLOATPTYPE);;
    break;}
case 228:
#line 942 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLECHARPTYPE);;
    break;}
case 229:
#line 943 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, DOUBLEUCHARPTYPE);;
    break;}
case 230:
#line 944 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[0].tnode, VOIDPTYPE);;
    break;}
case 231:
#line 946 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 232:
#line 947 "msv.y"
{yyval.tnode=new CSyntaxNode(TYPE_CAST_STA, yyvsp[-3].cString, yyvsp[0].tnode, STRUCTPTYPE);;
    break;}
case 233:
#line 949 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 234:
#line 950 "msv.y"
{yyval.tnode=new CSyntaxNode(DOUBLE_TYPE_CAST_STA, yyvsp[-4].cString, yyvsp[0].tnode, DOUBLESTRUCTPTYPE);;
    break;}
case 235:
#line 952 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 236:
#line 960 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 237:
#line 961 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 238:
#line 962 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 239:
#line 963 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 240:
#line 964 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 241:
#line 970 "msv.y"
{yyval.tnode=new CSyntaxNode(yyvsp[-1].nodetype, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 242:
#line 972 "msv.y"
{yyval.tnode=new CSyntaxNode(TRUE_EXP, BOOLTYPE);;
    break;}
case 243:
#line 973 "msv.y"
{yyval.tnode=new CSyntaxNode(FALSE_EXP, BOOLTYPE);;
    break;}
case 244:
#line 976 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 245:
#line 977 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 246:
#line 978 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 247:
#line 981 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 248:
#line 982 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 249:
#line 985 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 250:
#line 986 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, new CSyntaxNode(NULL_EXP, VOIDTYPE), BOOLTYPE);;
    break;}
case 251:
#line 989 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 252:
#line 990 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, new CSyntaxNode(NULL_EXP, VOIDTYPE), yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 253:
#line 993 "msv.y"
{yyval.tnode=new CSyntaxNode(EQU_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 254:
#line 994 "msv.y"
{yyval.tnode=new CSyntaxNode(NE_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 255:
#line 999 "msv.y"
{yyval.nodetype=GE_EXP;;
    break;}
case 256:
#line 1000 "msv.y"
{yyval.nodetype=LE_EXP;;
    break;}
case 257:
#line 1001 "msv.y"
{yyval.nodetype=NE_EXP;;
    break;}
case 258:
#line 1002 "msv.y"
{yyval.nodetype=GT_EXP;;
    break;}
case 259:
#line 1003 "msv.y"
{yyval.nodetype=LT_EXP;;
    break;}
case 260:
#line 1004 "msv.y"
{yyval.nodetype=EQU_EXP;;
    break;}
case 261:
#line 1012 "msv.y"
{yyval.returntype=UINTTYPE;;
    break;}
case 262:
#line 1013 "msv.y"
{yyval.returntype=UCHARTYPE;;
    break;}
case 263:
#line 1017 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 264:
#line 1018 "msv.y"
{yyval.returntype=yyvsp[0].returntype;;
    break;}
case 265:
#line 1025 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
	   ;
    break;}
<<<<<<< HEAD
case 334:
#line 1225 "msv.y"
=======
case 266:
#line 1029 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 335:
#line 1230 "msv.y"
=======
case 267:
#line 1034 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 336:
#line 1236 "msv.y"
=======
case 268:
#line 1040 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 337:
#line 1242 "msv.y"
=======
case 269:
#line 1046 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 338:
#line 1248 "msv.y"
=======
case 270:
#line 1052 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 339:
#line 1258 "msv.y"
=======
case 271:
#line 1062 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 340:
#line 1264 "msv.y"
=======
case 272:
#line 1068 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 341:
#line 1270 "msv.y"
=======
case 273:
#line 1074 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        CSyntaxNode* pChild0= new CSyntaxNode(DOUBLESTRUCTP_PARAMETER_EXP, yyvsp[-4].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 342:
#line 1276 "msv.y"
=======
case 274:
#line 1080 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 343:
#line 1285 "msv.y"
=======
case 275:
#line 1089 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        yyval.tnode=NULL;
		;
    break;}
<<<<<<< HEAD
case 344:
#line 1289 "msv.y"
=======
case 276:
#line 1093 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        yyval.tnode=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 345:
#line 1293 "msv.y"
=======
case 277:
#line 1097 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 346:
#line 1299 "msv.y"
=======
case 278:
#line 1103 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        yyval.tnode=NULL;
		;
    break;}
<<<<<<< HEAD
case 347:
#line 1303 "msv.y"
=======
case 279:
#line 1107 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        yyval.tnode=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 348:
#line 1307 "msv.y"
=======
case 280:
#line 1111 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 349:
#line 1313 "msv.y"
=======
case 281:
#line 1117 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 350:
#line 1319 "msv.y"
=======
case 282:
#line 1123 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
            CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 351:
#line 1327 "msv.y"
=======
case 283:
#line 1131 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 352:
#line 1335 "msv.y"
=======
case 284:
#line 1139 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 353:
#line 1342 "msv.y"
=======
case 285:
#line 1146 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 354:
#line 1348 "msv.y"
=======
case 286:
#line 1152 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 355:
#line 1354 "msv.y"
=======
case 287:
#line 1158 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      yyval.tnode=NULL;
		;
    break;}
<<<<<<< HEAD
case 356:
#line 1358 "msv.y"
=======
case 288:
#line 1162 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      CSyntaxNode* pChild0= new CSyntaxNode(DOUBLEPOINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
          pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 357:
#line 1365 "msv.y"
=======
case 289:
#line 1169 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 358:
#line 1370 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 359:
#line 1374 "msv.y"
=======
case 290:
#line 1174 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 291:
#line 1178 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{ 
		   yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, yyvsp[-2].returntype);
		;
    break;}
<<<<<<< HEAD
case 360:
#line 1378 "msv.y"
=======
case 292:
#line 1182 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{ 
		   yyval.tnode = NULL;
		;
    break;}
<<<<<<< HEAD
case 361:
#line 1382 "msv.y"
=======
case 293:
#line 1186 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 362:
#line 1388 "msv.y"
=======
case 294:
#line 1192 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        CSyntaxNode* pChild0=new CSyntaxNode(STRUCT_PARAMETER_EXP, yyvsp[-2].cString, yyvsp[-1].tnode, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
			pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 363:
#line 1394 "msv.y"
=======
case 295:
#line 1198 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        CSyntaxNode* pChild0= new CSyntaxNode(STRUCTP_PARAMETER_EXP, yyvsp[-3].cString, yyvsp[-1].tnode, VOIDTYPE);
            yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTPTYPE);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 364:
#line 1400 "msv.y"
=======
case 296:
#line 1204 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 365:
#line 1407 "msv.y"
=======
case 297:
#line 1211 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{

			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, STRUCTTYPE);
            pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 366:
#line 1415 "msv.y"
=======
case 298:
#line 1219 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
            pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 367:
#line 1421 "msv.y"
=======
case 299:
#line 1225 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{ 
		    CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-2].tnode, VOIDTYPE);
		    yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-4].returntype);
            pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 368:
#line 1436 "msv.y"
=======
case 300:
#line 1240 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      CSyntaxNode* pChild0= new CSyntaxNode(FUNCP_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, FUNCPTYPE);
          pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 369:
#line 1441 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 370:
#line 1446 "msv.y"
=======
case 301:
#line 1245 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 302:
#line 1250 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			CSyntaxNode* pChild0=new CSyntaxNode(ARRAY_PARAMETER_EXP, yyvsp[-4].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-5].returntype);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 371:
#line 1454 "msv.y"
=======
case 303:
#line 1258 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-6].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-7].returntype);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 372:
#line 1461 "msv.y"
=======
case 304:
#line 1265 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			CSyntaxNode* pChild0=new CSyntaxNode(DOUBLEARRAY_PARAMETER_EXP, yyvsp[-5].tnode, VOIDTYPE);
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-6].returntype);
            pChild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 373:
#line 1467 "msv.y"
=======
case 305:
#line 1271 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      CSyntaxNode* pChild0= new CSyntaxNode(POINT_PARAMETER_EXP, yyvsp[-1].tnode, VOIDTYPE);
          yyval.tnode=new CSyntaxNode(PARAMETER_EXP, pChild0, yyvsp[0].tnode, yyvsp[-3].returntype);
          pChild0=NULL;
		;
    break;}
<<<<<<< HEAD
case 374:
#line 1473 "msv.y"
=======
case 306:
#line 1277 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      yyval.tnode=NULL;
		;
    break;}
<<<<<<< HEAD
case 375:
#line 1476 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 376:
#line 1486 "msv.y"
=======
case 307:
#line 1280 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 308:
#line 1290 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 377:
#line 1490 "msv.y"
=======
case 309:
#line 1294 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 378:
#line 1499 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 379:
#line 1500 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 380:
#line 1505 "msv.y"
=======
case 310:
#line 1303 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 311:
#line 1304 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 312:
#line 1309 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode(PARAMETER_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 381:
#line 1509 "msv.y"
=======
case 313:
#line 1313 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	        CSyntaxNode* child0=new CSyntaxNode(FUNCTION_STA, yyvsp[-4].cString, yyvsp[-2].tnode, NULL, NULL, VOIDTYPE);
			yyval.tnode=new CSyntaxNode(PARAMETER_EXP, child0, yyvsp[0].tnode, VOIDTYPE);
			child0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 382:
#line 1518 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 383:
#line 1519 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 384:
#line 1527 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 385:
#line 1529 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 386:
#line 1536 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 387:
#line 1538 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 388:
#line 1544 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 389:
#line 1545 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 390:
#line 1549 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 391:
#line 1554 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 392:
#line 1559 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 393:
#line 1564 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 394:
#line 1571 "msv.y"
=======
case 314:
#line 1322 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 315:
#line 1323 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 316:
#line 1331 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 317:
#line 1333 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 318:
#line 1340 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 319:
#line 1342 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 320:
#line 1348 "msv.y"
{yyval.tnode=new CSyntaxNode(IDENT_EXP, yyvsp[0].cString, NULL, VOIDTYPE);;
    break;}
case 321:
#line 1349 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 322:
#line 1353 "msv.y"
{yyval.tnode=new CSyntaxNode(STR_EXP, yyvsp[0].cString, STRTYPE);;
    break;}
case 323:
#line 1358 "msv.y"
{yyval.tnode=new CSyntaxNode(INTEGER_EXP, yyvsp[0].nInteger, INTTYPE);;
    break;}
case 324:
#line 1363 "msv.y"
{yyval.tnode=new CSyntaxNode(CHARLITERAL_EXP, yyvsp[0].character, CHARTYPE);;
    break;}
case 325:
#line 1368 "msv.y"
{yyval.tnode=new CSyntaxNode(FLOATLITERAL_EXP, yyvsp[0].floatval, FLOATTYPE);;
    break;}
case 326:
#line 1375 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode( FRAME_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
		;
    break;}
<<<<<<< HEAD
case 395:
#line 1574 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 396:
#line 1575 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 397:
#line 1581 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 398:
#line 1583 "msv.y"
=======
case 327:
#line 1378 "msv.y"
{yyval.tnode = NULL;;
    break;}
case 328:
#line 1379 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 329:
#line 1385 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 330:
#line 1387 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode = new CSyntaxNode( PROJECTION_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 399:
#line 1603 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 400:
#line 1604 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 401:
#line 1606 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 402:
#line 1608 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 403:
#line 1609 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 404:
#line 1615 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 405:
#line 1622 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 406:
#line 1630 "msv.y"
=======
case 331:
#line 1407 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 332:
#line 1408 "msv.y"
{yyval.tnode=new CSyntaxNode(NEGATION_EXP, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 333:
#line 1410 "msv.y"
{yyval.tnode=new CSyntaxNode(AND_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 334:
#line 1412 "msv.y"
{yyval.tnode=new CSyntaxNode(OR_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, BOOLTYPE);;
    break;}
case 335:
#line 1413 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 336:
#line 1419 "msv.y"
{yyval.tnode=new CSyntaxNode(WHILE_DO_STA, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 337:
#line 1426 "msv.y"
{yyval.tnode=new CSyntaxNode(FOR_TIMES_STA, yyvsp[-3].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 338:
#line 1434 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	     CSyntaxNode* pchild0=new CSyntaxNode(FOR_STA_CON, yyvsp[-6].tnode, yyvsp[-4].tnode, yyvsp[-2].tnode, VOIDTYPE); 
		 yyval.tnode=new CSyntaxNode(FOR_STA, pchild0, yyvsp[0].tnode, VOIDTYPE);
		 pchild0=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 407:
#line 1638 "msv.y"
=======
case 339:
#line 1442 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
<<<<<<< HEAD
case 408:
#line 1642 "msv.y"
=======
case 340:
#line 1446 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      yyval.tnode=yyvsp[0].tnode;
	   ;
    break;}
<<<<<<< HEAD
case 409:
#line 1646 "msv.y"
=======
case 341:
#line 1450 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      yyval.tnode=NULL;
	   ;
    break;}
<<<<<<< HEAD
case 410:
#line 1652 "msv.y"
=======
case 342:
#line 1456 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
<<<<<<< HEAD
case 411:
#line 1656 "msv.y"
=======
case 343:
#line 1460 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      yyval.tnode=NULL;
	  ;
    break;}
<<<<<<< HEAD
case 412:
#line 1662 "msv.y"
=======
case 344:
#line 1466 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	     yyval.tnode=yyvsp[0].tnode;
	  ;
    break;}
<<<<<<< HEAD
case 413:
#line 1666 "msv.y"
=======
case 345:
#line 1470 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	      yyval.tnode=NULL;
	  ;
    break;}
<<<<<<< HEAD
case 414:
#line 1673 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 415:
#line 1677 "msv.y"
=======
case 346:
#line 1477 "msv.y"
{yyval.tnode=new CSyntaxNode(SWITCH_STA, yyvsp[-4].tnode, yyvsp[-1].tnode,VOIDTYPE);;
    break;}
case 347:
#line 1481 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	     yyval.tnode=new CSyntaxNode(CASE_STA, yyvsp[-5].tnode, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 416:
#line 1681 "msv.y"
=======
case 348:
#line 1485 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
	     yyval.tnode=new CSyntaxNode(DEFAULT_STA, yyvsp[-1].tnode, VOIDTYPE);
	   ;
    break;}
<<<<<<< HEAD
case 417:
#line 1688 "msv.y"
=======
case 349:
#line 1492 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, BREAKTYPE);
		;
    break;}
<<<<<<< HEAD
case 418:
#line 1692 "msv.y"
=======
case 350:
#line 1496 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
			yyval.tnode=new CSyntaxNode(INIT_CASE_STA, yyvsp[0].tnode, VOIDTYPE);
	    ;
    break;}
<<<<<<< HEAD
case 419:
#line 1695 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 420:
#line 1700 "msv.y"
=======
case 351:
#line 1499 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 352:
#line 1504 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{
            yyval.tnode = new CSyntaxNode( IF_ELSE_STA, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);
        ;
    break;}
<<<<<<< HEAD
case 421:
#line 1709 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 422:
#line 1710 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 423:
#line 1716 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 424:
#line 1717 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 425:
#line 1721 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 426:
#line 1722 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 427:
#line 1727 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 428:
#line 1728 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 429:
#line 1729 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 430:
#line 1730 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 431:
#line 1731 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 432:
#line 1734 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 433:
#line 1735 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 434:
#line 1736 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 435:
#line 1742 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 436:
#line 1743 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 437:
#line 1744 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 438:
#line 1746 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 439:
#line 1747 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 440:
#line 1748 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 441:
#line 1750 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 442:
#line 1751 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 443:
#line 1752 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 444:
#line 1753 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 445:
#line 1755 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 446:
#line 1756 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 447:
#line 1757 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 448:
#line 1758 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 449:
#line 1759 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 450:
#line 1760 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 451:
#line 1761 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 452:
#line 1765 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 453:
#line 1766 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 454:
#line 1767 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 455:
#line 1768 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 456:
#line 1769 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 457:
#line 1770 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 458:
#line 1771 "msv.y"
=======
case 353:
#line 1513 "msv.y"
{yyval.tnode=yyvsp[0].tnode;;
    break;}
case 354:
#line 1514 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 355:
#line 1520 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 356:
#line 1521 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 357:
#line 1525 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 358:
#line 1526 "msv.y"
{yyval.tnode=new CSyntaxNode(DISPLAY_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 359:
#line 1531 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 360:
#line 1532 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 361:
#line 1533 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 362:
#line 1534 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-2].tnode, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 363:
#line 1535 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, UNKNOWNTYPE);;
    break;}
case 364:
#line 1538 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 365:
#line 1539 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 366:
#line 1540 "msv.y"
{yyval.tnode=new CSyntaxNode(REQUEST_STA, yyvsp[-1].tnode, yyvsp[0].tnode, UNKNOWNTYPE);;
    break;}
case 367:
#line 1546 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 368:
#line 1547 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 369:
#line 1548 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 370:
#line 1550 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 371:
#line 1551 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 372:
#line 1552 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 373:
#line 1554 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 374:
#line 1555 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 375:
#line 1556 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 376:
#line 1557 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 377:
#line 1559 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 378:
#line 1560 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 379:
#line 1561 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-4].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 380:
#line 1562 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 381:
#line 1563 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[-2].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 382:
#line 1564 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-3].tnode, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 383:
#line 1565 "msv.y"
{yyval.tnode=yyvsp[-1].tnode;;
    break;}
case 384:
#line 1569 "msv.y"
{yyval.tnode=NULL;;
    break;}
case 385:
#line 1570 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 386:
#line 1571 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 387:
#line 1572 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_IDENT_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 388:
#line 1573 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCTP_LIST_EXP, yyvsp[-1].tnode, yyvsp[0].tnode, VOIDTYPE);;
    break;}
case 389:
#line 1574 "msv.y"
{yyval.tnode=new CSyntaxNode(STRUCT_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
case 390:
#line 1575 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
{yyval.tnode=new CSyntaxNode(STRUCTP_FUNC_EXP, yyvsp[0].tnode, NULL, VOIDTYPE);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
<<<<<<< HEAD
#line 1773 "msv.y"
=======
#line 1577 "msv.y"
>>>>>>> c7006a97d3ea4c7cf74b3454279e96b7f30fe1d6
